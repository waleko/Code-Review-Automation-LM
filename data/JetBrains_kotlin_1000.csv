,diff_hunk,human_review,created_at
457,"@@ -0,0 +1 @@
+// INSPECTION_CLASS: org.jetbrains.kotlin.idea.inspections.ForEachParameterNotUsed","Here you have to add `// WITH_RUNTIME` line, otherwise all your tests fail. In the future, please re-run your own tests before re-submitting PR.",2018-08-06 11:50:40
543,"@@ -0,0 +1 @@
+class Foo (x: Int, y: Int)","Can you please try to remove the space between class name and `(`, otherwise result is not properly formatted.",2019-01-21 18:09:56
549,"@@ -0,0 +1 @@
+org.jetbrains.kotlin.idea.inspections.ConvertResourceToUseCallIntention","This line is outdated. Please run `Generate All Tests` shared configuration, and re-run tests. `LocalInspectionTestGenerated.java` file is expected to be modified after this launch, and this change should also be commited.",2019-01-30 10:36:48
259,"@@ -0,0 +1 @@
+org.jetbrains.kotlin.idea.inspections.RemoveRedundantBackticksInspection",Please add a test to verify that the quickfix is not offered when an actual keyword is in backticks.,2017-08-03 11:03:49
19,"@@ -0,0 +1 @@
+throw Exception(""not implemented"") //To change body of created methods use File | Settings | File Templates.","`UnsupportedOperationException` would be a better choice
",2013-04-26 11:06:35
21,"@@ -0,0 +1,10 @@
+// ""Create class object from usage"" ""true""
+// ERROR: Expression 'T' of type '<class-object-for-T>' cannot be invoked as a function
+trait T {
+    class object {
+    }","Can you come up with better use case for quick fix creating class object? This one from the test doesn't seem useful.

Creating class object via intetion could be useful in case of T.foo() call, but in this case foo() function should be created as well (actually, it should be ""create function from usage"" quick fix, not ""create class object from usage"").
",2013-04-26 11:16:26
527,"@@ -0,0 +1,10 @@
+// PROBLEM: none
+// DISABLE-ERRORS
+
+enum class E(val value: String) {
+    E1(<caret>Companion.foo);","This is a valid warning, `E.Companion.foo` is being referenced as `Companion.foo`, which is redundant since the `companion object` is in scope. This should be `E1(foo)` in `.after.kt`.",2018-11-06 10:19:31
671,"@@ -0,0 +1,10 @@
+fun test() {
+    <caret>use("""")",We can remove `create()` only if it hasn't side effects.,2019-05-12 13:40:48
624,"@@ -0,0 +1,10 @@
+fun test() {
+    if (false)<caret>
+        while (true) {
+            foo(1)
+        }
+    //comment about foo(2)","Could you please add similar test with `else` block, like this
```
if (...) doSmth()
else 
    while (true) {
        foo(1)
    }
//  comment about call below
```

and check how it works now? The code `element.else == null` is a bit suspicious.",2019-04-05 15:15:28
265,"@@ -0,0 +1,10 @@
+open class Foo {
+    open fun arguments(arg1: Int, arg2: Long) {
+    }
+}
+
+class Bar : Foo() {
+    override <caret>fun arguments(arg1: Int, arg2: Long) {","I should mention that overridden function is not redundant if it has some other modifiers. For example, sometimes is reasonable to add `final` here, so function itself is not changed, but derived classes are made unable to override it. Also, I think that any annotation here makes the function not redundant. The same for any visibility modifier when you make overridden function more visible then original one. Please consider these cases, fix inspection, and add tests for them.",2017-08-14 10:22:17
730,"@@ -0,0 +1,107 @@
+/*
+ * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.utils","Please change package to `org.jetbrains.kotlin.util`, as per the inspection that is reported here",2019-06-17 17:19:12
795,"@@ -0,0 +1,109 @@
+/*",Why not merge this stuff with one in tests-common-jvm6?,2019-09-03 11:49:11
268,"@@ -0,0 +1,11 @@
+// !DIAGNOSTICS: -INVISIBLE_MEMBER -INVISIBLE_REFERENCE -UNUSED_PARAMETER
+// !LANGUAGE: +CalledInPlaceEffect
+
+import kotlin.internal.*
+
+inline fun myRun(@CalledInPlace(InvocationCount.EXACTLY_ONCE) block: () -> Unit) = block()
+
+fun throwInLambda(): Int {
+    val x = myRun { throw java.lang.IllegalArgumentException() }
+    return <!TYPE_MISMATCH!>x<!>","Unclear place. First, why `TYPE_MISMATCH`? In this context, `x` should probably have `Nothing` type. Second, `UNREACHABLE_CODE` is expected here. Third, I don't quite understand why it appears after introduction of language features (the last but one commit).",2017-08-15 15:43:47
450,"@@ -0,0 +1,11 @@
+// ENABLE_MULTIPLATFORM
+// ERROR: Expected declaration must not have a body
+// IS_APPLICABLE: false
+expect class C {
+    val p: Int
+        <caret>get() = 1","For multi-platform testing, we have a specific group of tests. In your case, `multiModuleQuickFix` group should work properly (it should work for intentions too). This should also solve your problem with target platform detection.",2018-08-03 11:01:02
803,"@@ -0,0 +1,11 @@
+// IGNORE_BACKEND: JVM","Please note that you can customize bytecode tests by backend via 
..common_templates...
// JVM_TEMPLATES
...
// JVM_IR_TEMPLATES
...
, see for example forInReversedArrayIndices.kt",2019-09-06 10:20:06
804,"@@ -0,0 +1,11 @@
+// IGNORE_BACKEND: JVM
+fun f(): Boolean = ""non-primitive"" == null
+fun g(): Boolean = null == ""non-primitive""
+fun h(): Boolean = ""non-primitive"".equals(null)
+//fun i(): Boolean = null.equals(""non-primitive"")
+//see nullCompareNonPrimitiveConst
+
+// 0 ACONST_NULL","Please also check 

// 0 IF",2019-09-06 10:21:15
59,"@@ -0,0 +1,11 @@
+// WITH_RUNTIME
+// IS_APPLICABLE: FALSE
+import java.util.LinkedList
+
+fun Int.withIndices(): List<Pair<Int, Int>> = LinkedList<Pair<Int, Int>>()
+
+fun foo(s: Int) {
+    for ((index<caret>, a) in s.withIndices()) {
+
+    }
+}","Also please rename this test
",2014-05-12 13:12:46
950,"@@ -0,0 +1,11 @@
+class A(val s: String) {
+    inner class B(val x: Int = 0)
+}
+
+// @A.class
+// 1 public <init>\(Ljava/lang/String;\)V
+
+// @A$B.class
+// 0 <init>\(\)V","I'll amend your changes with adding `// 0 <init>\(LA;\)V` here. This is needed to check the `irClass.isInner` condition in `JvmDefaultConstructorLowering`, since the lowering is run before `InnerClassesLowering` where an additional parameter for the outer class is added.",2020-01-21 15:34:06
610,"@@ -0,0 +1,11 @@
+fun array() = arrayOfNulls<Any>(4)
+
+fun f() {
+    for (i in array()) {
+    }","Please add some foo() call inside to avoid clashing with another optimizations in future:
```
 for (i in array()) {
    foo()
    }
```",2019-04-03 09:55:53
621,"@@ -0,0 +1,11 @@
+import Owner.<caret>CompTest",The second caret?,2019-04-05 05:35:38
367,"@@ -0,0 +1,12 @@
+// Checks that methods 'access$getMy$p', 'access$getMy$cp' and 'getMy' are not generated and","I think this box test is unnecessary since it doesn't really check what's described here, it only checks that private properties in companion objects work, which is done elsewhere, so please delete this test",2018-02-27 13:20:12
712,"@@ -0,0 +1,12 @@
+// FILE: 1.kt
+","package test
",2019-05-27 13:27:35
443,"@@ -0,0 +1,12 @@
+// PROBLEM: none
+// WITH_RUNTIME
+fun test() {
+    <caret>with(foo()) {
+        println(""test"")
+    }","I think that we should report a warning in this case, but do not provide a quickfix, because such code looks like user mistake",2018-07-26 09:54:01
594,"@@ -0,0 +1,12 @@
+// PROBLEM: none
+open class Foo {
+    open fun equals(other: Foo?): Boolean {",I think it should be highlighted.,2019-03-28 13:19:35
595,"@@ -0,0 +1,12 @@
+// PROBLEM: none
+open class Foo {
+    open fun equals(other: Foo?): Boolean {
+        return true
+    }
+}
+
+class Bar : Foo() {
+    override fun <caret>equals(other: Foo?): Boolean {",Same as above.,2019-03-28 13:19:55
209,"@@ -0,0 +1,12 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<project version=""4"">
+  <component name=""SaveActionSettings"">
+    <option name=""actions"">
+      <set>
+        <option value=""organizeImports"" />
+        <option value=""reformat"" />
+        <option value=""reformatChangedCode"" />
+      </set>
+    </option>
+  </component>
+</project>",Not needed,2017-04-18 06:50:54
149,"@@ -0,0 +1,12 @@
+class A {
+    val a = """"
+    val b = """"
+}
+
+fun box(): String {
+    val a = A::a.name
+    if (a != ""a"") return ""Fail $a""
+    val b = A::`b`.name
+    if (b != ""b"") return ""Fail $b""
+    return ""OK""","This test doesn't check that no classes were generated for the property reference. I don't think it's possible in a `box` test, please try a bytecode listing test instead (`compiler/testData/codegen/bytecodeListing`).

Also please test constructors and functions
",2016-04-22 19:46:08
942,"@@ -0,0 +1,12 @@
+name: ""Validate Gradle Wrapper""
+on: [push]","Without `pull_request`, this won't actually run for external contributors",2020-01-15 23:03:28
48,"@@ -0,0 +1,12 @@
+public class TestingUse {
+    fun test6(funcLitfunc: ((x: Int) -> Int) -> Boolean, innerfunc: (y: Int) -> Int): Unit {
+        val result = funcLitfunc(innerfunc)
+        var num = 0
+        if (result == true) num = 1
+        else num = 2","This is a nice test case, but is this code really needed to test your intention? I think it's just confusing...
",2014-04-16 19:00:48
6,"@@ -0,0 +1,13 @@","What is this file? Is it for manual testing?
",2012-06-05 15:04:48
994,"@@ -0,0 +1,13 @@
+/*
+ * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.utils
+
+data class CompletionVariant(","I suspect that this class doesn't use the features provided by the data classes, while the data classes are not free from the overhead. So maybe it makes sense to drop ""data"" here.",2020-02-11 16:13:25
799,"@@ -0,0 +1,13 @@
+// WITH_COROUTINES","This is really minor, but maybe these tests will succeed even with `WITH_RUNTIME`, now that `Result` in the standard library.",2019-09-05 17:27:25
800,"@@ -0,0 +1,13 @@
+// WITH_COROUTINES
+// FILE: test.kt
+fun test() {
+    val result = Result.success(""yes!"")
+    val other = Result.success(""nope"")
+    if (result == other) println(""=="")
+    if (result != other) println(""!="")
+    if (result.equals(other)) println(""equals"")
+    if (!result.equals(other)) println(""!equals"")","Judging by [KT-33722](https://youtrack.jetbrains.com/issue/KT-33722), these two lines should fail. Probably they don't because we only call `Result.equals-impl0` if API version >= 1.4. So let's add `!API_VERSION: LATEST` to this test, so that it tests something useful. :)

But also, I don't really think the explicit `equals` call is such critical behavior that we should check it at this point in a codegen test. Having it reported as KT-33722 is probably enough. So I'd probably just remove these two lines from the test.",2019-09-05 17:35:13
820,"@@ -0,0 +1,13 @@
+import Platform.JvmPlatform
+
+sealed class Platform {
+    object JvmPlatform : Platform()
+    class Another(val name: String) : Platform()
+}
+
+class ModuleInfo(val platform: Platform)
+
+fun foo(moduleInfo: ModuleInfo) = <caret>when {
+    moduleInfo.platform == JvmPlatform -> 1",Please check how it works if the condition is flipped: `JvmPlatform == moduleInfo.platform`.,2019-09-26 07:43:57
758,"@@ -0,0 +1,138 @@
+/*
+ * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package samples.collections
+
+import samples.*
+import java.time.LocalDateTime
+
+@RunWith(Enclosed::class)
+class Sort {","Please use another placement schema, similar to other collection and array samples.
Collection and List samples should go into `collections.kt`, and `Sorting` nested class can be created there, so its full name would be `samples.collections.Collections.Sorting`. Ditto for the array sorting samples.",2019-07-12 14:35:55
928,"@@ -0,0 +1,14 @@
+##---------------Begin: Kotlin-reflect ----------","Are these Begin/End tags required?

Also, please consider renaming the file itself to `kotlin-reflect.pro`",2020-01-03 17:07:18
913,"@@ -0,0 +1,14 @@
+##---------------Begin: Kotlin-reflect ----------
+# Keep Metadata annotations so they can be parsed at runtime.
+-keep class kotlin.Metadata { *; }","I wonder this is not actually needed. Recently, I started working on synthesizing metadata from scratch (for R8-processed Kotlin library), and kept adding more tests. During that, I found that, even without this rule, R8 will still keep metadata (annotation) associated to classes.

More conversion/details are here: https://r8-review.googlesource.com/c/r8/+/46240/1/src/test/java/com/android/tools/r8/kotlin/metadata/MetadataRenameInParametertypeTest.java#70",2019-12-18 23:23:00
915,"@@ -0,0 +1,14 @@
+##---------------Begin: Kotlin-reflect ----------
+# Keep Metadata annotations so they can be parsed at runtime.
+-keep class kotlin.Metadata { *; }
+
+# Keep kotlin-reflect internals.
+-keep class kotlin.reflect.jvm.** { *; }","This seems way too broad. At least, we can try _public_ APIs only.",2019-12-18 23:24:55
914,"@@ -0,0 +1,14 @@
+##---------------Begin: Kotlin-reflect ----------
+# Keep Metadata annotations so they can be parsed at runtime.
+-keep class kotlin.Metadata { *; }
+
+# Keep kotlin-reflect internals.
+-keep class kotlin.reflect.jvm.** { *; }
+
+# Keep generic signatures and annotations at runtime.
+# R8 requires InnerClasses and EnclosingMethod if you keepattributes Signature.
+-keepattributes InnerClasses,Signature,*Annotation*,EnclosingMethod",Do we need broad \*Annotation\* or just RuntimeVisibleAnnotation (because metadata is runtime visible) ?,2019-12-18 23:23:51
346,"@@ -0,0 +1,14 @@
+/*
+ * Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
+ * that can be found in the license/LICENSE.txt file.
+ */
+
+
+@file:Suppress(""INVISIBLE_MEMBER"", ""INVISIBLE_REFERENCE"")
+@file:JvmPackageName(""kotlin.test.annotations"")
+package kotlin.test
+
+public actual typealias Test = org.testng.annotations.Test
+public actual typealias Ignore = org.testng.annotations.Ignore","Interesting, I hadn't noticed this annotation in javadoc of testng before, seems that it's rather new. What is the testng version it's available from?",2018-01-31 18:07:52
559,"@@ -0,0 +1,14 @@
+/*
+ * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
+ * that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.js.test.interop
+
+interface InteropEngine {",JDK uses `ScriptEngine` for such things. I'd rather keep this name,2019-02-28 16:25:10
974,"@@ -0,0 +1,14 @@
+/*
+ * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+package org.jetbrains.kotlin.gradle.utils
+
+import org.gradle.api.logging.Logger
+
+const val deprecatedBecauseNoConfigAvoidanceUseProvider = ""Using this brings performance issues. "" +
+        ""Use the provider instead to benefit from configuration avoidance.""",Use the equivalent provider method to benefit from gradle task configuration avoidance.,2020-01-29 15:59:05
634,"@@ -0,0 +1,14 @@
+// KJS_WITH_FULL_RUNTIME
+// WITH_RUNTIME
+import kotlin.test.*
+
+fun box(): String {
+    val arr = intArrayOf(1, 2, 3, 4)
+    var sum = 0
+    for (i in arr.reversed()) {","@punzki  reversed/reversedArray() is totatlly unsafe optimization:
```
fun box(): String {
    val arr = intArrayOf(1, 2, 3, 4)
    var sum = 0
    var index = 0
    //for (i in arr.reversedArray()) {
    for (i in arr.reversed()) {
        arr[index++] = 0
        sum = sum * 10 + i
    }
    assertEquals(4321, sum)

    return ""OK""
}
```",2019-04-08 13:28:56
390,"@@ -0,0 +1,14 @@
+// WITH_RUNTIME","Does this box test check something which is not covered by current tests in `codegen/box/dataClasses`? If no, I propose to delete it",2018-04-05 11:55:50
613,"@@ -0,0 +1,14 @@
+const val M = Char.MIN_VALUE
+
+fun f(a: Char) {
+    for (i in a downTo M) {",....Please add some call inside loops here and below,2019-04-03 10:12:31
719,"@@ -0,0 +1,14 @@
+fun cond() = false
+
+fun box() {
+    if (cond())
+        cond()
+    else
+         false
+}
+
+fun main(args: Array<String>) {","Idea: Similar to `LowLevelDebuggerTestBase`, maybe you can generate and write your own ""main class"" that simply calls `box()`? This way we can easily re-use existing box tests to create stepping tests.",2019-06-07 18:05:39
721,"@@ -0,0 +1,14 @@
+fun cond() = false
+
+fun box() {
+    if (cond())
+        cond()
+    else
+         false
+}
+
+fun main(args: Array<String>) {
+    box()
+}
+
+// 4 1 4 7 8","Consider also recording the method name and maybe we can do something like:
```
// box(): 4
// cond(): 1
// box(): 4 7 8
```",2019-06-07 18:19:34
350,"@@ -0,0 +1,143 @@
+// WITH_RUNTIME
+
+fun checkByteArray():Boolean {","here and in other functions below, add space before Boolean return type (`fun checkByteArray(): Boolean`)",2018-02-04 01:58:22
725,"@@ -0,0 +1,147 @@
+/*
+ * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.utils
+
+import java.util.IdentityHashMap
+
+const val ARRAY_UNTIL_SIZE = 10",I'd probably make it private or even put within a companion for `SmartHashMap` to avoid its appearing in other scopes,2019-06-11 08:56:52
226,"@@ -0,0 +1,15 @@
+// ""Replace with safe (?.) call"" ""false""
+// ACTION: Add non-null asserted (!!) call
+// ACTION: Convert to expression body
+// ACTION: Replace with safe (this?.) call
+// ACTION: Wrap with '?.let { ... }' call
+// ERROR: Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type A?
+
+class A {
+    fun foo() {
+    }
+}
+
+fun A?.bar() {
+    <caret>foo()
+}","Why does this test have so strange name? I see no `invoke` here, either safe or unsafe",2017-05-23 12:28:05
447,"@@ -0,0 +1,15 @@
+// SKIP_TXT","Maybe we could skip txt generation for all these tests automatically by adding an abstract method into `AbstractDiagnosticsTest` and overriding it in this test, instead of adding `SKIP_TXT` to each file?",2018-08-01 13:28:06
183,"@@ -0,0 +1,15 @@
+// WITH_RUNTIME
+
+fun contains(set: Set<Any>, x: Int): Boolean = when {
+    set.size == 0 -> false
+    else -> x in set as Set<Int>
+}
+
+fun box(): String {
+    val set = setOf(1)
+    if (contains(set, 1)) {
+        return ""OK""
+    }
+
+    return ""Fail""
+}","This test in not related to Range#contains, but at some point I had implementation which passed all tests (without this one), but ant build was failed.
",2016-10-11 19:02:08
47,"@@ -0,0 +1,15 @@
+class TestingUse {
+    fun test(sum: Int.(a: Int) -> Int, b: Int): Int {
+        return b.sum(b)
+    }
+    fun test2(sum: (a: Int, b: Int) -> Int, c: Int): Int {","Basically you've used the same test data file in all tests on `makeTypeExplicitInLambda`, altering the calling function in each case. This is not a good idea, because once one of such tests fails, the investigating person might think that the fact that there are several functions in this file is relevant to the test case, while in reality it's not.

Please try to make your tests as minimal as possible, i.e. only include relevant data in each test.
",2014-04-09 16:19:26
221,"@@ -0,0 +1,15 @@
+data class Foo(val a: String) {
+    fun copy(i: Int) {}
+}
+
+class Foo2() {
+    fun copy(i: Int) {}
+}
+","I'd add an example that clearly shows all should be named, like this:
```
data class SomeName(a: Int, b: Int, c: String)
f.copy(2, c = """")
```",2017-05-03 09:49:34
723,"@@ -0,0 +1,151 @@
+/*
+ * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.utils
+
+const val ARRAY_UNTIL_SIZE = 10
+
+/**
+ * [SmartHashMap] is a Map implementation that uses reference identity for keys.",Also add a note that this class is not thread-safe,2019-06-08 00:16:34
852,"@@ -0,0 +1,16 @@
+// IGNORE_BACKEND: JS, JS_IR
+
+fun f(
+    f1: () -> String = { f2() },
+    f2: () -> String = { ""OK"" }","Please use here non-""OK"" value cause it clashes with result value in ```f { result (""OK"") }``` call",2019-10-09 08:56:16
850,"@@ -0,0 +1,16 @@
+// IGNORE_BACKEND: JS, JS_IR
+
+fun f(
+    f1: () -> String = { f2() },
+    f2: () -> String = { ""OK"" }
+): String = f1()
+
+fun box(): String {
+    var result = ""fail""
+    try {
+        f()
+    } catch (e : Exception) {
+        result = ""OK""
+    }
+    return f { result }",This looks like it does `f(f1 = { result })` while you also probably want to test `f(f2 = { result })`.,2019-10-09 08:19:47
772,"@@ -0,0 +1,16 @@
+// IGNORE_BACKEND: JVM
+// KOTLIN_CONFIGURATION_FLAGS: ASSERTIONS_MODE=jvm
+
+class Outer {
+    class Inner {
+        fun f() { assert(true) }
+    }
+}
+
+// We set the assertion status based on top-level classes.
+// 0 LDC LOuter\$Inner;.class
+// Outer\$Inner.<clinit>:
+// 1 LDC LOuter;.class\s*INVOKEVIRTUAL java/lang/Class.desiredAssertionStatus \(\)Z
+// 1 PUTSTATIC Outer\$Inner.\$assertionsDisabled : Z
+// Outer\$Inner.f:
+// 1 GETSTATIC Outer\$Inner.\$assertionsDisabled","Please also add:
// 1 desiredAssertionStatus
 // 1 public final static Z $assertionsDisabled",2019-08-06 13:43:47
889,"@@ -0,0 +1,16 @@
+// TARGET_BACKEND: JVM
+// IGNORE_BACKEND: JVM
+// JVM_TARGET: 1.8
+
+open class A(val x: String) {
+    inline fun f() = if (this is C) this else A(x)",Could you also add test with inline getter?,2019-11-14 11:31:11
541,"@@ -0,0 +1,16 @@
+fun f() : Int {","pls, don't use println in tests
it would be best to rewrite it via 
```var result = ""fail""

fun withSideEffect() : Int {
    result = ""OK""
    return 42
}

fun box(): String {
    if (withSideEffect() == null) {
        return ""fail 1""
    }

    if (result != ""OK"") return ""fail 2""
    result = ""fail3""

    if (withSideEffect() != null) {
        return result
    }

    return ""fail4""
}

```
And add same test to box ones. ",2019-01-18 13:41:54
611,"@@ -0,0 +1,16 @@
+fun intArray() = intArrayOf(0, 0, 0, 0)
+fun longArray() = longArrayOf(0, 0, 0, 0)
+
+fun f() {
+    for (i in intArray()) {",...and here too,2019-04-03 09:56:10
272,"@@ -0,0 +1,16 @@
+fun testIsNullOrBlank(x: String?) {","This test has no annotation of some language feature on. Looks strange. I'd check all new tests, and most probably all of them should have some annotation. Otherwise backward compatibility can be broken",2017-08-15 16:06:51
980,"@@ -0,0 +1,16 @@
+interface A<T> {
+    fun f(x: T): T
+}
+
+open class B {
+    open fun f(x: String): String = x
+}
+
+open class C : B(), A<String>
+
+// class D should not have an additional bridge",Check this using reflection or bytecode test?,2020-02-04 16:19:23
117,"@@ -0,0 +1,169 @@
+# Annotation Options
+
+Goals:
+* Support annotation options, such as retention policy and trageting","Typo: trageting -> targeting
",2015-04-04 22:08:29
116,"@@ -0,0 +1,17 @@
+// !DIAGNOSTICS: -UNUSED_PARAMETER
+class C {
+    <!OVERLOADS_PRIVATE!>[kotlin.jvm.overloads] private fun foo(s: String = ""OK"")<!> {
+    }
+}
+
+fun foo() {
+    class D {
+        <!OVERLOADS_PRIVATE!>[kotlin.jvm.overloads] fun foo(s: String = ""OK"")<!> {
+        }
+    }
+
+    val <!UNUSED_VARIABLE!>x<!> = object {
+        <!OVERLOADS_PRIVATE!>[kotlin.jvm.overloads] fun foo(s: String = ""OK"")<!> {
+    }
+    }
+}","Please also add an `internal` member with `overloads` here, to ensure the warning is not reported on it
",2015-04-01 14:28:30
576,"@@ -0,0 +1,17 @@
+// IGNORE_BACKEND: JVM
+import kotlin.test.assertEquals
+
+fun foo(x : String) : String {
+    assert(""abz]"".hashCode() == ""aby|"".hashCode())
+
+    when (x) {
+        ""abz]"" -> return ""abz""
+        ""ghi""  -> return ""ghi""
+        ""aby|"" -> return ""aby""
+        ""abz]"" -> return ""fail""
+    }
+
+    return ""other""
+}
+
+// 0 LOOKUPSWITCH",Is LOOKUPSWITCH is absent cause of hashAndSwitchLabels.size <= 2 condition?,2019-03-13 08:09:49
863,"@@ -0,0 +1,17 @@
+// TARGET_BACKEND: JVM","If I understood correctly, this test and the following one are just smoke tests to check, that there is no internal compiler error. Could you, please, turn them into assertion checks, like other ones from the same directory? ",2019-10-18 12:28:37
17,"@@ -0,0 +1,17 @@
+package test
+open class Foo() {
+open fun execute() : Unit {
+}
+}
+open class Bar() {
+var fooNotNull : Foo = Foo()
+var fooNullable : Foo? = null
+}
+open class Test() {
+public open fun test(barNotNull : Bar, barNullable : Bar?) : Unit {
+barNotNull.fooNotNull.execute()
+barNotNull.fooNullable?.execute()
+barNullable?.fooNotNull?.execute()
+barNullable?.fooNullable?.execute()
+}
+}
\ No newline at end of file","Please fix code formatting in this test
",2013-02-21 14:56:11
378,"@@ -0,0 +1,18 @@
+// Checks that accessor are not used because property can be accessed directly.
+
+interface I {
+    companion object {
+        private val bar = ""Companion Field from I""",Let's make this a `var` as well,2018-03-05 11:25:38
635,"@@ -0,0 +1,18 @@
+// KJS_WITH_FULL_RUNTIME
+// WITH_RUNTIME
+import kotlin.test.*
+
+fun box(): String {
+    val arr = intArrayOf(1, 2, 3, 4)
+    var sum = 0
+    var index = 0
+    for (i in arr.reversed()) {",reversed -> reversedArray?,2019-04-09 10:19:59
651,"@@ -0,0 +1,18 @@
+fun f(s: String?, t: String): String {
+    return s.plus(t)
+}
+
+fun g(s: String, t: Any?): String {
+    return ""$s$t""
+}
+
+fun h(s: String, t: Any?): String {
+    return s + t
+}
+
+fun box(): String {
+    if (f(""O"", ""K"") != ""OK"") return ""Fail""",Fail 1,2019-04-24 05:29:38
652,"@@ -0,0 +1,18 @@
+fun f(s: String?, t: String): String {
+    return s.plus(t)
+}
+
+fun g(s: String, t: Any?): String {
+    return ""$s$t""
+}
+
+fun h(s: String, t: Any?): String {
+    return s + t
+}
+
+fun box(): String {
+    if (f(""O"", ""K"") != ""OK"") return ""Fail""
+    if (g(""O"", ""K"") != ""OK"") return ""Fail""",'Fail 2' and so on,2019-04-24 05:29:55
353,"@@ -0,0 +1,18 @@
+sealed class Parent
+
+class Child1(val field1: Int): Parent()
+
+class Child2(val field2: Int): Parent()
+
+
+fun foo(parent: Parent) = when(parent) {
+    is val <!UNUSED_VARIABLE!>child<!>: Child1 -> <!DEBUG_INFO_SMARTCAST!>parent<!>.field1 + parent.<!UNRESOLVED_REFERENCE!>field2<!>
+    !is val _ : Child2 -> 10",What's the difference between this syntax and just `!is Child2`?,2018-02-06 09:00:47
995,"@@ -0,0 +1,19 @@
+/*
+ * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.utils;
+
+data class KotlinReplError(val loc: Location?, val message: String = """", val severity: Severity) {",It seems that it could be substituted with ScriptDiagnostic. But the problem is that scripting-common is not accessible from compiler-cli. So it is one more reason to base completion on a new API and relocate it completely to a plugin similar to scripting plugin.,2020-02-11 16:17:57
369,"@@ -0,0 +1,19 @@
+// Checks that methods 'access$getMy$p', 'access$getMy$cp' and 'getMy' are not generated and","Why have you deleted the `kt-14258.kt` test from your earlier commits where a lot more cases were covered? If you think that test was getting too big to understand, you can always split it into several independent tests, e.g. `kt14258_1.kt`, `kt14258_2.kt`, ...",2018-02-27 13:25:40
368,"@@ -0,0 +1,19 @@
+// Checks that methods 'access$getMy$p', 'access$getMy$cp' and 'getMy' are not generated and
+// that backed field 'my' is directly used through a 'getstatic'
+
+class My {
+    companion object {
+        private val my: String = ""OK""
+    }
+
+    fun getMyValue() = my
+}
+
+fun box() = My().getMyValue()",`fun box()` is not needed in bytecode text tests,2018-02-27 13:21:54
975,"@@ -0,0 +1,19 @@
+// FILE: protectedPack/J.java
+
+package protectedPack;
+
+public class J {
+    protected String foo = ""OK"";
+}
+
+// FILE: 1.kt
+
+package protectedPack
+
+inline fun foo(crossinline bar: () -> String) = object {
+    fun baz() = bar()
+}.baz()
+
+fun box(): String {","Could you add more test with protected, e.g. when protected methods are called from crossinline lambda, but in case when it's inlined again in inline function, e.g.:
class A {
  protected fun smth() {}
}

class B: A() {
   inline fun test(l: () -> ?) = inlineCrossInlineCall{ foo(); l() }
}

and test call from another package",2020-01-30 12:00:59
575,"@@ -0,0 +1,19 @@
+// IGNORE_BACKEND: JVM
+import kotlin.test.assertEquals
+
+fun foo(x : String) : String {
+    assert(""abz]"".hashCode() == ""aby|"".hashCode())
+
+    when (x) {
+        ""abz]"" -> return ""abz""
+        ""ghi""  -> return ""ghi""
+        ""aby|"" -> return ""aby""
+        ""abz]"" -> return ""fail""
+        ""xyz"" -> return ""xyz""",Please add box test for this case similar to original one in compiler/testData/codegen/box/when/stringOptimization/duplicatingItemsSameHashCode.kt,2019-03-13 08:07:52
15,"@@ -0,0 +1,2 @@
+// ""Change type argument list to <*>"" ""true""
+fun isStringList(list : Any?) = list is (List<<caret>String>)","At first, I've added the parentheses because this way it's more readable to me. But as I was trying to implement the quickfix I realised that it would be possible to make mistake in this case: change ""(List<String>)"" to ""List<*>"". That's why I left the parentheses in one test case.
",2013-02-21 09:21:48
782,"@@ -0,0 +1,2 @@
+// WITH_RUNTIME
+val s = <caret>""\n    foo\n    bar\n"".trimIndent()","Why not `""foo\nbar""` here without `trimIndent`?",2019-08-16 08:50:54
801,"@@ -0,0 +1,2 @@
+fun box(): String =",Please also add bytecode test or convert this one to it: use as example compiler/testData/codegen/bytecodeText/conditions/ tests,2019-09-06 06:30:31
377,"@@ -0,0 +1,20 @@
+// Checks that accessor 'I$Companion.access$getBar\$p' is always used because the property is kept
+// into the companion object.
+
+interface I {
+    companion object {
+        private val bar = ""Companion Field from I""","Let's make this a `var` in this test, call the setter and test that there are 2 `PUTSTATIC`s",2018-03-05 11:25:15
720,"@@ -0,0 +1,202 @@
+            /*",Nit: Formatting is off,2019-06-07 18:17:25
139,"@@ -0,0 +1,203 @@
+/*","As far as I understand these functions are copies of functions at KotlinBuilder. Why not to reuse them at KotlinBuilder? I mean, these functions are in build common, so their originals from KotlinBuilder can be removed.
",2016-02-02 15:18:00
413,"@@ -0,0 +1,21 @@
+/*
+ * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
+ * that can be found in the license/LICENSE.txt file.
+ */
+
+package test.js
+
+import kotlin.test.*
+
+class StringsJsTest {",Better to move common tests into `libraries/stdlib/test/text/StringTest.kt` instead of duplicating them for each platform.,2018-05-21 15:45:52
375,"@@ -0,0 +1,21 @@
+// Checks that methods 'access$getMy$p' and 'getMy' are not generated and
+// that backed field 'my' is accessed through 'access$getMy$cp'
+
+class My {
+    companion object {
+        private val my: String = ""OK""
+
+        fun test(): String {
+            // accessor is required because field is move to Foo
+            return my
+        }
+    }
+
+    fun getMyValue() = test()
+}
+
+// 1 GETSTATIC My.my
+// 1 PUTSTATIC My.my",Let's remove this line since it's irrelevant to what we're testing here,2018-03-05 10:59:20
169,"@@ -0,0 +1,21 @@
+//method","You need to include the generated test class into your commit.
",2016-09-12 18:37:57
168,"@@ -0,0 +1,21 @@
+//method
+void foo() {","Please try to ensure that testdata files are valid Java code. This file does not compile ('status' is undefined, the types do not match, etc.)
",2016-09-12 18:37:39
171,"@@ -0,0 +1,21 @@
+//method
+void foo() {
+	switch (status) {
+	    case ""init"":
+	    case ""dial"":
+	    case ""transmit"":
+		return Color.BLACK;
+
+	    case ""ok"":
+		return 0xFF006600;
+
+	    case ""cancel"":
+		return 0xFF666666;
+
+	    case ""fail"":
+	    case ""busy"":
+	    case ""error"":","Please add a test for the case when 'default' is in the middle of the list of other cases (`case ""error"": default: case ""busy:""`) and make sure that this test passes.
",2016-09-12 18:40:50
586,"@@ -0,0 +1,22 @@
+// TARGET_BACKEND: JVM_IR","@ting-yuan Please add box tests for  comparisonFalse/comparisonTrue
",2019-03-19 10:18:32
134,"@@ -0,0 +1,22 @@
+package demo
+
+import com.google.common.primitives.Ints
+import com.google.common.base.Joiner
+import java.util.ArrayList
+
+class KotlinGreetingJoiner(val greeter : Greeter) {
+
+    val names = ArrayList<String?>()
+
+    fun addName(name : String?): Unit{
+        names.add(name)
+    }
+
+    fun getJoinedGreeting() : String? {
+        val joiner = Joiner.on("" and "").skipNulls();","why do we need guava in such simple example? we can replace ugly `Joiner.on("" and "").skipNulls().join(names)` with `names.filterNotNull().joinToString("" and "")`. We also don't need `com.google.common.primitives.Ints` at all...
",2015-10-28 13:11:42
934,"@@ -0,0 +1,23 @@
+# When editing this file, update the following files as well:
+# - META-INF/com.android.tools/r8-from-1.6.0/kotlin-reflect.pro
+# - META-INF/com.android.tools/r8-upto-1.6.0/kotlin-reflect.pro
+# - META-INF/proguard/kotlin-reflect.pro
+# Keep Metadata annotations so they can be parsed at runtime.
+-keep class kotlin.Metadata { *; }
+
+# Keep implementations of service loaded interfaces
+# R8 will automatically handle these these in 1.6+",Nit: this file is not quite related to `R8`. :) (and below too),2020-01-08 20:54:37
764,"@@ -0,0 +1,23 @@
+// TARGET_BACKEND: JVM",Please name file with lower letter,2019-07-30 10:52:25
890,"@@ -0,0 +1,24 @@
+// TARGET_BACKEND: JVM
+// IGNORE_BACKEND: JVM
+// JVM_TARGET: 1.8","`JVM_TARGET ` is redundant. We have special test suite that set target to 1.8 in codegenTarget8Jvm8Test. And run configuration for it in https://teamcity.jetbrains.com/buildConfiguration/Kotlin_KotlinPublic_CodegenTestsOnDifferentJDKs?branch=

`TARGET_BACKEND` could be also removed",2019-11-14 12:54:26
793,"@@ -0,0 +1,24 @@
+//FILE: test.kt
+fun box() {
+    val k = if (getA()
+        && getB()
+        && getC()
+        && getD()) {
+        true
+    } else {
+        false
+    }
+}
+
+fun getA() = true
+
+fun getB() = true
+
+fun getC() = false
+
+fun getD() = true
+
+// LINENUMBER: TestKt.box():3 TestKt.getA():13 TestKt.box():3 TestKt.box():4 TestKt.getB():15 TestKt.box():4 TestKt.box():5","Sorry for delay.
I would prefer to have tests in next format:
// LINENUMBERS
// TestKt.box():3 
// TestKt.getA():13
// TestKt.box():3 
// TestKt.box():4 
// TestKt.getB():15 
// TestKt.box():4 
// TestKt.box():5
...",2019-09-03 11:45:33
706,"@@ -0,0 +1,25 @@
+// TARGET_BACKEND: JVM
+// The non-IR backend attempts to call a non-existent accessor in class Test.",@pyos Could you file an issue for this? With test name note,2019-05-24 05:19:57
66,"@@ -0,0 +1,26 @@
+import kotlin.test.assertEquals
+
+fun test1() {
+    val u = when (true) {
+        true -> 42
+        else -> 1.0
+    }
+
+    assertEquals(42, u)
+}
+
+fun test2() {
+    val u = 1L.let {
+        when (it) {
+            is Long -> if (it.toLong() == 2L) it.toLong() else it * 2 // CompilationException
+            else -> it.toDouble()
+        }
+    }
+
+    assertEquals(1L, u)
+}
+
+fun box(): String {
+    return ""OK""","what about test1, test2 call?
",2014-09-24 13:18:33
376,"@@ -0,0 +1,27 @@
+// Checks that accessor methods are always used due to the overriding of the default setter of 'my' property.
+
+class My {
+    companion object {
+        private var my: String = ""OK""
+            set(value) { field = value }
+    }
+
+    fun getMyValue(): String {
+        // GETSTATIC for the companion object",What do you mean by this comment?,2018-03-05 11:11:03
752,"@@ -0,0 +1,28 @@
+// TARGET_BACKEND: JVM","Looks like this test doesn't check what was tested previously in `testNoAssertionsForKotlinFromBinary`: that there are no assertions on calls to Kotlin declarations from dependencies. I'm afraid we'll have to keep that test until we have the necessary infrastructure to migrate it, namely multi-module bytecode text tests.",2019-07-04 09:06:06
759,"@@ -0,0 +1,29 @@
+/*
+ * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.idea.actions
+
+import com.intellij.ide.fileTemplates.FileTemplate
+import com.intellij.psi.PsiDirectory
+import com.intellij.psi.PsiFile
+
+const val KOTLIN_WORKSHEET_EXTENSION: String = ""ws.kts""
+const val KOTLIN_SCRIPT_EXTENSION = ""kts""",There is KotlinParserDefinition.STD_SCRIPT_SUFFIX property,2019-07-18 09:46:38
715,"@@ -0,0 +1,29 @@
+package org.jetbrains.kotlin.library","@alexander-gorshenev Please add copyright to all new files (use ""Update Copyright"" IntelliJ action on the module)",2019-06-05 11:10:17
240,"@@ -0,0 +1,3 @@
+// INTENTION_TEXT: ""Convert to sealed class""","Since you aren't changing the intention text dynamically, there's no need to include INTENTION_TEXT in testdata files.",2017-07-17 11:17:40
241,"@@ -0,0 +1,3 @@
+<spot>@JvmStatic</spot>","The template shows a top-level method, not a method inside an `object`. Please update it to show what the intention action actually does.",2017-07-17 11:20:35
33,"@@ -0,0 +1,3 @@
+[3]
+
+[3, 5]","Please update this file to be exactly the result of your intention on `before.kt.template`. Also you can use `<spot>` tag to highlight the place where the user should put his attention
",2014-02-06 14:38:50
55,"@@ -0,0 +1,3 @@
+for ((i,x) in foo.withIndices()) {","Please add a whitespace after the comma
",2014-04-30 19:19:20
52,"@@ -0,0 +1,3 @@
+fun foo(a: String?, b: String?) {
+    a?.equals(b) ?: b.identityEquals(null)
+}","Please, add test for the case of non-nullable receiver
",2014-04-23 14:22:32
578,"@@ -0,0 +1,3 @@
+fun foo(s: String) {
+    (s<caret>)",Have you investigated why caret position is not before `()`?,2019-03-13 12:52:01
24,"@@ -0,0 +1,3 @@
+fun foo(x: Boolean) : Boolean {
+    return x || x || x","This behavior is objectionable: order of predicates evaluation can change program behavior, when evaluated expressions have side effects. I'll disable intention in this case.
",2013-07-08 15:18:18
304,"@@ -0,0 +1,3 @@
+fun test1() {
+    val s = <caret>""foobar""","should the caret maybe placed to the same place, i.e.
```kotlin
""foo<caret>bar""
```",2017-09-20 13:51:18
218,"@@ -0,0 +1,30 @@
+/*","Consider merging small and relevant declarations together into one file, e.g. `JavaType` implementations into `symbolBasedTypes.kt`, `JavaAnnotationArgument` implementations into `symbolBasedAnnotationArguments.kt` and so on. I think it'd be more readable in the end",2017-04-25 12:19:05
551,"@@ -0,0 +1,30 @@
+package a
+
+class A {
+    companion object {
+        const val constInt: Int = 0",I'm not sure but maybe we need also tests non const vals?,2019-02-01 08:44:15
125,"@@ -0,0 +1,304 @@
+# Function Types in Kotlin on JVM
+
+## Goals
+
+* Get rid of 23 hardwired physical function classes. One of the problems with them is that they should be effectively duplicated in reflection which means a lot of physical classes in the runtime.","""in the runtime"" -> ""at runtime""?
Имеется в виду ""во время выполнения программы""?
",2015-07-27 18:37:05
126,"@@ -0,0 +1,304 @@
+# Function Types in Kotlin on JVM
+
+## Goals
+
+* Get rid of 23 hardwired physical function classes. One of the problems with them is that they should be effectively duplicated in reflection which means a lot of physical classes in the runtime.
+* Make extension functions coercible to normal functions (with an extra parameter), so that it's possible to do `listOfStrings.map(String::length)`","""coercible"" usually assumes some transformation of the value representation to fit to a new type. If it's exactly the same object, just viewed as an instance of a new type, then maybe it would be better to say ""implicitly convertible"" or ""assignable""?
",2015-07-27 18:40:57
451,"@@ -0,0 +1,33 @@
+/*
+ * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
+ * that can be found in the license/LICENSE.txt file.
+ */
+
+package samples.misc
+
+import samples.Sample
+import samples.assertPrints
+
+class Repeat {
+
+    @Sample
+    fun repeatAnyTimes() {","It would be nice to start with a sample where `it` is not used, as it's the most common use of `repeat`",2018-08-03 17:59:37
702,"@@ -0,0 +1,33 @@
+// DONT_RUN_GENERATED_CODE: JS",Seems this and next one tests are redundant,2019-05-22 08:21:49
701,"@@ -0,0 +1,33 @@
+// DONT_RUN_GENERATED_CODE: JS
+
+var counter = 0
+fun inc() = counter++
+
+tailrec fun test(x: Int = 0, y: Int = inc(), z: Int = inc()) {
+    if (x * 2 != y || z - y != 1)
+        throw IllegalArgumentException()
+
+    if (x < 100000)
+        test(x + 1, y + 2, z + 2)","Please switch this one to  ~test(x + 1,  z = counter + 1)~",2019-05-22 08:20:57
784,"@@ -0,0 +1,33 @@
+// WITH_REFLECT
+// IGNORE_BACKEND: JVM_IR
+// TARGET_BACKEND: JVM
+
+// Please make sure that this test is consistent with the diagnostic test ""annotationsTargetingLateinitAccessor.kt""
+
+import kotlin.reflect.KAnnotatedElement
+import kotlin.reflect.KProperty",This import is unused,2019-08-22 16:17:20
783,"@@ -0,0 +1,33 @@
+// WITH_REFLECT
+// IGNORE_BACKEND: JVM_IR
+// TARGET_BACKEND: JVM
+
+// Please make sure that this test is consistent with the diagnostic test ""annotationsTargetingLateinitAccessor.kt""
+
+import kotlin.reflect.KAnnotatedElement
+import kotlin.reflect.KProperty
+
+annotation class Ann
+annotation class AnnRepeat","Looks like this annotation is not used here and in the corresponding diagnostic test, let's remove it",2019-08-22 16:16:56
703,"@@ -0,0 +1,34 @@
+// DONT_RUN_GENERATED_CODE: JS
+// IGNORE_BACKEND: JVM
+
+var counter = 0
+fun inc() = counter++
+
+tailrec fun test(x: Int = 0, y: Int = inc(), z: Int = inc()) {
+    if (x * 2 != y || z - y != 1)
+        throw IllegalArgumentException()","Please add something like `""x=$x y=$y z=$z""` to the exception message here and in other tests",2019-05-22 08:34:48
569,"@@ -0,0 +1,347 @@
+/*
+ * Copyright 2019 Google LLC. Use of this source code is governed by the Apache 2.0 license","According to our [license](https://github.com/JetBrains/kotlin/tree/master/license), all code in this repository is copyright by JetBrains. Therefore we need our default copyright on all sources. Is there any particular reason why you've changed this to Google LLC?",2019-03-12 09:54:01
329,"@@ -0,0 +1,37 @@
+// WITH_RUNTIME","I see only codegen tests here, and this is quite bad. You should add, at least, some new parsing tests, because you modified the parser (ParsingTestGenerated), and some front-end diagnostics test, because you modified front-end analysis (DiagnosticsTestGenerated).",2017-11-30 13:00:14
522,"@@ -0,0 +1,4 @@
+// ""Add non-null asserted (!!) call"" ""true""
+fun test(a: Array<String?>?): String {
+    return <caret>a[0]",This test can be removed,2018-10-29 13:24:49
42,"@@ -0,0 +1,4 @@
+// ERROR: Too many arguments for public final fun get(index: kotlin.Int): kotlin.Int defined in kotlin.Array","I can't seem to fix the source of this error, so I declared it.
",2014-04-07 07:49:58
43,"@@ -0,0 +1,4 @@
+// ERROR: Too many arguments for public final fun get(index: kotlin.Int): kotlin.Int defined in kotlin.Array
+fun foo(a: Array<Int>, i: Int) {
+    a<caret>[i, { }]","This wouldn't work unless the second argument was a function. Is it still possible to give multiple indices to this construct (i.e, `a[i, 2]`)?
",2014-04-07 07:50:36
45,"@@ -0,0 +1,4 @@
+// ERROR: Unresolved reference: !in","I don't understand this error.
",2014-04-07 07:51:14
35,"@@ -0,0 +1,4 @@
+// IS_APPLICABLE: false
+fun foo(x: Foo?) {
+    x!!.<caret>get(1)
+}","Why not applicable here? `x!![1]` looks pretty okay
",2014-02-07 18:42:01
526,"@@ -0,0 +1,4 @@
+// PROBLEM: none
+// DISABLE-ERRORS",Looks like switching to `RESTRICTED_RETENTION_FOR_EXPRESSION_ANNOTATION_WARNING` should fix this.,2018-11-05 10:52:14
983,"@@ -0,0 +1,4 @@
+OUT:
+OK","This line is not printed in both CI when I run locally. The same happens in `helloAppSuspendMainInMultifileIr`. `helloAppSuspendMainIR`, however, runs OK when I run as a test, but does not print ""${args[0]$args[1]}"" when I compile the file and run it from CLI.",2020-02-07 12:09:36
404,"@@ -0,0 +1,4 @@
+fun foo() {","This test does not test your change yet. You should add comment above (to both this file and after file):

```
// FIX: expected fix text
```

to check that fix text is correct.",2018-05-08 15:01:12
303,"@@ -0,0 +1,4 @@
+fun test1() {","Some questions:
* does this work for more than 2 lines, e.g. 
```kotlin
val s = ""one""
+ "", two""
+ "", three""
```
* does it work for non-strings, e.g.
```java
val s = ""x="" +
0
```",2017-09-20 13:49:47
306,"@@ -0,0 +1,4 @@
+fun test2() {
+    val foo = ""1""
+    val s = <caret>""${foo}bar""",I think this is surprising behavior. Lines should be joined into a single expression only if both the left hand side and the right hand side of the concatenation are constants.,2017-09-21 09:29:03
464,"@@ -0,0 +1,41 @@
+// Copyright 2000-2017 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
+package org.jetbrains.kotlin.idea.debugger.sequence.psi.java
+
+/**
+ * @author Vitaliy.Bibaev
+ */
+class LocationPositiveChainTest : PositiveJavaStreamTest(""location"") {",Why can't we generate this test (and also others) from the test data?,2018-08-10 13:14:48
523,"@@ -0,0 +1,41 @@
+buildscript {
+    ext.antlr4_version = '4.7.1'
+}
+
+apply plugin: ""antlr""
+apply plugin: ""kotlin""
+
+configurePublishing(project)",Please preserve the old behavior: the artifact was published only when `idl2k.deploy.skip` property is `false`,2018-10-31 12:52:50
560,"@@ -0,0 +1,48 @@
+/*
+ * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license",2019,2019-03-01 10:50:36
44,"@@ -0,0 +1,5 @@
+// ERROR: Unresolved reference: array","I don't understand this error.
",2014-04-07 07:51:03
954,"@@ -0,0 +1,5 @@
+// FILE: 1.kt
+inline fun runReturning(f: () -> Nothing): Nothing = f()
+
+// FILE: 2.kt
+fun box() = Array<String>(1) { runReturning { return@Array ""OK"" } }[0]","@pyos Could you also add test with several nested inline calls?
e.g.:
` fun box() = Array<String>(1) { run { runReturning { return@Array ""OK"" } }}[0] `

and nested calls with capturing
` fun box() { 
val result = ""OK""
Array<String>(1) { run { run { runReturning { return@Array result } }}}[0] 
}`",2020-01-23 08:48:39
824,"@@ -0,0 +1,5 @@
+// MOVE: up
+// IS_APPLICABLE: false
+import foo.Bar
+
+<caret>class A",Add a test for script too,2019-09-30 10:05:39
484,"@@ -0,0 +1,5 @@
+// PROBLEM: none
+
+fun test(a: Any, b: Any) =","Please add also test with explicitly given `Float` or `Double` types, like this: `fun test(a: Double, b: Double) = ...`, and another test with `Double` or `Float` literals, like `fun checkPi(x: Double) = x.equals(3.14) // or 3.14.equals(x)`",2018-08-27 10:00:00
606,"@@ -0,0 +1,5 @@
+// WITH_RUNTIME","Some test when inspection isn't applicable might be useful, I suggest to do one with invalid code `Integer.toString(<caret>)`, as `isToString()` implicitly suggests that this case won't be resolved to a needed qualified name.",2019-04-01 11:16:34
605,"@@ -0,0 +1,5 @@
+<html>","File name should be `ReplaceJavaIntegerToStringWithMember.html` without ""Inspection"" suffix.",2019-04-01 10:57:46
177,"@@ -0,0 +1,5 @@
+<html>
+<body>
+    This intention detects 'Math.max' calls that can be safely replaced with 'coerceAtLeast'","This intention replaces 'Math.max' calls with safe 'coerceAtLeast' ... or something like. Inspection detects, but inspection does some change.
",2016-09-26 10:58:15
157,"@@ -0,0 +1,5 @@
+<html>
+<body>
+Reports unnecessary java usage.","This is not clear. A better description would be ""Use of Java API that has a Kotlin equivalent"" or something like that.
",2016-05-18 13:22:55
179,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This inspection remove an empty class body","reports and offers to remove
",2016-10-10 11:02:44
391,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This inspection reports a main function should return <b>Unit</b> type.","I'd rephrase this a little bit, like ""a main function with incorrect return type (should be Unit)"" or something like.",2018-04-11 13:24:51
428,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This inspection reports annotation with target 'EXPRESSION' will not be store at retention 'BINARY' or 'RUNTIME'.","Broken English. IMO, `This inspection reports 'EXPRESSION'-targeted annotations with a  non-'SOURCE' retention.` (or something like this) would be better.",2018-06-19 18:17:16
584,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This inspection reports explicit calls of <b>Collection constructor</b> calls which can be replaced by function calls from the stdlib.","It's an intention, not an inspection. ",2019-03-18 08:06:17
467,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This inspection reports suspicious collection reassignment by augmented assignment.",I think we need more detailed explanation here.,2018-08-14 12:52:36
345,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This inspection reports the redundant backticks in references",the `the` is actually redundant 😆 ,2018-01-25 14:34:42
192,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This inspection reports unused equals expression.",expression**s**,2016-12-23 09:31:28
861,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This inspection reports unused unary operators.",I'd prefer `This inspection reports unary operators that are not used.`,2019-10-18 08:51:13
426,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention adds @Throws annotation.","The message sounds unclear to me.
Can you add some more context, like `This intention adds a <b>@Throws</b> annotation for an exception under the caret`?",2018-06-15 17:54:20
403,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention converts an array parameter to a vararg parameter.","Here and below, please select `vararg` with bold.",2018-05-03 14:20:11
175,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention detects 'Math.max' calls that can be safely replaced with 'coerceAtLeast'","inspection
",2016-09-26 10:56:49
176,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention detects 'Math.min' calls that can be safely replaced with 'coerceAtMost'","inspection
",2016-09-26 10:56:58
180,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention detects an empty class body.","removes
",2016-10-10 11:04:11
49,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention makes types explicit in a lambda expression.","A little elaboration won't hurt: `types of parameters, receiver and return type`
",2014-04-16 23:44:55
50,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention makes types implicit in a lambda expression","Ditto
",2014-04-16 23:45:02
360,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention removes labeled return to last expression in a lambda.",from last expression,2018-02-27 08:26:31
561,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention replaces <code>count()</code> function calls with <code>size</code>.",It should be a description of the inspection. Example: [ReplaceCallWithBinaryOperator](https://github.com/JetBrains/kotlin/blob/master/idea/resources/inspectionDescriptions/ReplaceCallWithBinaryOperator.html) ,2019-03-01 10:52:10
34,"@@ -0,0 +1,5 @@
+<html>
+<body>
+This intention take a qualified call to any function ""get"" which has some arguments and converts it to square brackets.","""takes""
",2014-02-06 14:39:06
141,"@@ -0,0 +1,5 @@
+fun box(): String {
+    val sub = Box<Long>(-1)
+    println(sub.value == 1L)","replace 'println' with if check
",2016-02-09 08:34:22
56,"@@ -0,0 +1,5 @@
+if (<spot>foo()</spot>) {
+    bar()
+} else {
+    baz()
+}","The branches aren't swapped in the after-template
",2014-05-03 10:49:59
264,"@@ -0,0 +1,5 @@
+package org.junit
+
+@Deprecated(""Use 'Ignore' from kotlin.test package"", replaceWith = ReplaceWith(""Ignore"", imports = ""kotlin.test.Ignore""))
+@Suppress(""HEADER_WITHOUT_IMPLEMENTATION"")
+header annotation class Ignore",I'm working on not needing this...,2017-08-11 20:44:29
650,"@@ -0,0 +1,5 @@
+val s = ""1"" + ""2"" + 3 + 4L + 5.0 + 6F + '7'","@pyos Please add similar test with const vals instead of const literals

val c = ""${strConst}...${intConst}....
",2019-04-23 13:44:51
765,"@@ -0,0 +1,50 @@
+// TARGET_BACKEND: JVM",..and here,2019-07-30 10:52:34
770,"@@ -0,0 +1,53 @@
+// TARGET_BACKEND: JVM","@sfs  Could you also add 'initializerAssertionsDisable.kt' test by 'interfaceAssertionsDisabled.kt/interfaceAssertionsEnabled.kt' analogue?

Actually compiler also moves all initializer from class companion to outer class. And here is an interesting corner case with assertions. @ilmirus Seems this  code is not supported in current backend:
```
open class Bar {    
    companion object {
        val barAssertionThrown = try {
            assert(false) 
            false
        } catch(error: java.lang.AssertionError) {
            true
        }
    }
}
```

I don't see any $assertionsDisabled neither in companion nor in Bar. If understand correctly this assertion should be linked with 'Companion.$assertionsDisabled' field and it's initialization should  be performed only in companion clinit (that require some trick at least in IR backend cause all initialization is poped up in outer class) or assertions should be linked with  'Bar.$assertionsDisabled' field?",2019-08-01 12:01:52
347,"@@ -0,0 +1,6 @@
+#
+# Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
+# that can be found in the license/LICENSE.txt file.
+#
+
+kotlin.test.junit.TestNGContributor",Package name seems incorrect,2018-01-31 18:51:40
154,"@@ -0,0 +1,6 @@
+// ""Add 'run' before the lambda expression"" ""true""
+// ERROR: Unresolved reference: run","You can add WITH_RUNTIME directive so that the `run` function will be resolved correctly.
",2016-05-06 15:32:01
243,"@@ -0,0 +1,6 @@
+// ""Remove useless is check"" ""false""
+fun foo(a: String) {
+    when (1) {
+        <caret>is Int -> { }","Well, it's an exceptional case but here we can also do something :). If a condition in when branch is definitely true, we can replace the condition with `else` and delete all subsequent branches because they are unreachable anyway. If the condition is definitely false (add test for this case), we can delete this when branch.",2017-07-18 11:04:58
545,"@@ -0,0 +1,6 @@
+// PROBLEM: none","Just to be sure, could you please also add original example from the issue?",2019-01-24 06:46:51
667,"@@ -0,0 +1,6 @@
+// PROBLEM: none
+class Test {
+    <caret>init {
+        // comment",Seems we can report the warning in this case because block is still redundant (comment can be moved to class body),2019-05-07 12:52:13
602,"@@ -0,0 +1,6 @@
+// PROBLEM: none
+object F {
+    fun <caret>equals(other: F?): Boolean {","I think it should be highlighted.
",2019-04-01 10:06:12
189,"@@ -0,0 +1,6 @@
+// WITH_RUNTIME
+// IS_APPLICABLE: true
+
+fun Int.foo() {
+    +1","This transformation does not look correct for me. I would expect `this + 1` as a result here,
",2016-11-07 09:19:00
955,"@@ -0,0 +1,6 @@
+// WITH_RUNTIME
+fun test(list: List<String>) {
+    list.forEach { item ->
+        /* aaa */ println(item); println(item) /* bbb */",Let's move every statement inside lambda to its own line in such cases as we already have multi-line lambda,2020-01-27 12:16:41
54,"@@ -0,0 +1,6 @@
+//ERROR: Unresolved reference: SortedMap
+fun a(b: SortedMap<Int, String>) {
+    for ((index, c) in b.withIndices()) {","I'm not sure what's happening here because `SortedMap` is not an iterable/stream/array, so it doesn't have `withIndices` extension and the intention should not be applicable on it as well as on `Map`
",2014-04-30 18:41:11
409,"@@ -0,0 +1,6 @@
+class Test {",I think origin test with `this` should also be added.,2018-05-17 14:39:06
174,"@@ -0,0 +1,6 @@
+public class Foo {
+    private native final void nativeMethod()","Please avoid irrelevant syntax errors in testdata. Java does require semicolons :)
",2016-09-22 10:46:28
385,"@@ -0,0 +1,64 @@
+// WITH_RUNTIME",I'd name this test file `javaObjectType.kt`,2018-03-20 17:41:54
530,"@@ -0,0 +1,64 @@
+// http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/
+String.prototype.toUTF8Array = function() {",It's not good practice to hack builtin classes.,2018-11-26 13:27:33
386,"@@ -0,0 +1,65 @@
+// WITH_RUNTIME",I'd name this test file `javaPrimitiveType.kt`,2018-03-20 17:42:14
388,"@@ -0,0 +1,66 @@
+/*",Please fix inspections and reformat this file and `KClassJavaPrimitiveTypeProperty.kt`,2018-03-20 18:41:05
256,"@@ -0,0 +1,7 @@
+// ""Replace initializer with getter"" ""true""
+
+fun String.foo() = ""bar""
+
+interface A {
+    val name = <caret>""The quick brown fox jumps over the lazy dog"".foo()",Neither the existing intention action nor your suggested quickfix handle `var` properties correctly. They should create a stub for the setter with no implementation.,2017-08-03 10:02:22
945,"@@ -0,0 +1,7 @@
+// COMPILER_ARGUMENTS: -XXLanguage:+MixedNamedArgumentsInTheirOwnPosition
+
+fun foo(name1: Int, name2: Int, name3: Int) {}","There are also test `namedArgumentsBefore.kt` which might fail now, because by default `MixedNamedArgumentsInTheirOwnPosition` will be enabled in kotlin 1.4

Can you please explicitly specify there that `MixedNamedArgumentsInTheirOwnPosition` is disabled in this test (by adding `// COMPILER_ARGUMENTS: -XXLanguage:-MixedNamedArgumentsInTheirOwnPosition`), and add additional test with `MixedNamedArgumentsInTheirOwnPosition` enabled (in which the intention should now work for this case)?",2020-01-17 09:58:12
946,"@@ -0,0 +1,7 @@
+// COMPILER_ARGUMENTS: -XXLanguage:+MixedNamedArgumentsInTheirOwnPosition
+
+fun foo(name1: Int, name2: Int, name3: Int) {}
+
+fun usage() {","It seems like there are missing test when `MixedNamedArgumentsInTheirOwnPosition` is enabled, but the arguments are not in their own positions, and the intention should be disabled

With your code, this case will look like `foo(1, <caret>name3 = 3, name2 = 2)`
",2020-01-17 10:01:01
53,"@@ -0,0 +1,7 @@
+// ERROR: Unresolved reference: listOf
+fun a() {
+    val b = listOf(1,2,3,4,5)","You should use `// WITH_RUNTIME` directive in this and all other tests where you use standard library functions to avoid errors
",2014-04-30 18:18:06
827,"@@ -0,0 +1,7 @@
+// FILE: 1.kt
+// File names are important! This file should come before the other one","There are also other tests that fail with a specific file order, e.g.

```
// FILE: 1.kt
fun box() = A.f()
// FILE: 2.kt
object A {
    @JvmStatic
    fun f(x: String = ""OK"") = x
}
```

If having all lowerings do the right thing on both lowered and unlowered inputs is still a goal, perhaps all multi-file tests should run twice (once with the original file names, and once with files renamed to be in reverse order)?",2019-10-01 10:41:25
38,"@@ -0,0 +1,7 @@
+// IS_APPLICABLE: false
+fun foo() {
+    if (true) {
+        println(""test"")
+        println(""test2"")
+        <caret>}
+}","Typo in file name.
",2014-03-04 16:08:30
335,"@@ -0,0 +1,7 @@
+// LANGUAGE_VERSION: 1.2
+// PROBLEM: none
+
+annotation class Some(vararg val strings: String)
+
+@Some(*<caret>arrayOf(""alpha"", ""beta"", ""omega""))","This can be converted into `@Some(*[""alpha"", ""beta"", ""omega""])`",2017-12-15 10:13:12
468,"@@ -0,0 +1,7 @@
+// PROBLEM: none
+// ERROR: Assignment operators ambiguity: <br>public operator fun <T> Collection<Int>.plus(element: Int): List<Int> defined in kotlin.collections<br>@InlineOnly public inline operator fun <T> MutableCollection<in Int>.plusAssign(element: Int): Unit defined in kotlin.collections
+// WITH_RUNTIME
+fun test() {
+    var list = mutableListOf(1)
+    <caret>list += 2",Just as an idea: why don't fix it by changing `var` to `val`?,2018-08-14 12:55:37
438,"@@ -0,0 +1,7 @@
+// WITH_RUNTIME
+
+var a: String? = ""A""
+fun main(args: Array<String>) {
+    val a1 = a
+    if (a1 != null) a1.length + 1
+}","I'd add at least one test with regular (non-redundant) `let` and more tests with redundant `let`, e.g. `a?.let { foo(it) }` and may be something else.",2018-07-23 12:45:42
875,"@@ -0,0 +1,7 @@
+class A<T> (val result: T)",...and test is redundant. there is more correct innerGenericConstuctor.kt with inners,2019-10-30 09:54:09
113,"@@ -0,0 +1,7 @@
+class KotlinClass(): JavaClass({}) {","Please make function literal here non-trivial.
",2015-03-26 15:35:16
687,"@@ -0,0 +1,7 @@
+fun box(): String {","This test is redundant: lateinit logic exists in localLateinit.kt, non lateinit in exactlyOnceCrossinline.kt and definiteValInitialization.kt",2019-05-16 07:43:37
537,"@@ -0,0 +1,8 @@
+// ""Add parameter to constructor 'Foo'"" ""true""
+// DISABLE-ERRORS
+enum class Foo(n: Int) {
+    A(1, 2<caret>),
+    B(3),
+    C(),","What if we write `C(3, 4)` here? Suppose this `C(3, 4)` will be changed to `C(3, 2)`, which is not correct.",2019-01-09 09:10:18
22,"@@ -0,0 +1,8 @@
+// ""Create method 'get' from usage"" ""true""
+import java.util.ArrayList
+
+class Foo<T> {","Isn't it better to remove type parameter of class to avoid confusing when reading test? Or is it intentional?
",2013-04-26 11:17:17
382,"@@ -0,0 +1,8 @@
+// PROBLEM: none
+class C {
+    companion object {
+        fun foo() {}
+    }
+}
+
+fun test() = C.<caret>Companion::foo","Please check also the following case: 
```
val obj = C.Companion // PROBLEM: none
```",2018-03-07 12:14:17
603,"@@ -0,0 +1,8 @@
+// PROBLEM: none
+interface F
+
+val f = object : F {
+    fun <caret>equals(other: F?): Boolean {",Same as above.,2019-04-01 10:06:53
422,"@@ -0,0 +1,8 @@
+// WITH_RUNTIME
+
+fun test() {
+    <caret>listOf(","I think one example may be not enough here. At least, it would be good to test comment preserving for all three `when` branches above.",2018-06-05 12:31:01
507,"@@ -0,0 +1,8 @@
+// WITH_RUNTIME
+// FIX: Change call to 'map'
+
+fun foo(c: Collection<String>) {
+    c.<caret>mapNotNull {","Please add a test with label before lambda: 

```
c.mapNotNull label@{
    return@label """"
}
```",2018-10-01 08:29:09
550,"@@ -0,0 +1,8 @@
+// WITH_RUNTIME
+import java.io.File
+
+fun main(args: Array<String>) {
+    File(""hello-world.txt"").bufferedReader().use { reader ->
+        reader.close()",I'm not sure this a valid fix in general case. This is not a refactoring and what if `close()` throws an exception on the second execution?,2019-01-30 11:26:43
18,"@@ -0,0 +1,8 @@
+enum class E {
+FOO
+fun foo() : Unit {
+FOO.toString()
+}
+public fun name() : String { return """" }
+public fun order() : Int { return 0 }
+}
\ No newline at end of file","The same: code formatting is wrong
",2013-02-21 14:58:31
564,"@@ -0,0 +1,8 @@
+fun foo() {
+    if (true) {
+        System.out?.println()",Don't use print in tests,2019-03-06 10:20:43
710,"@@ -0,0 +1,8 @@
+inline fun f(g: (Int) -> Unit) = g(0)","Please split test into two FILE sections (see nearby tests), it will also allow to test inliing against binaries",2019-05-27 05:36:09
406,"@@ -0,0 +1,8 @@
+package kotlin
+
+/**
+ * This annotation is present for methods generated by the Kotlin compiler
+ */
+@Retention(AnnotationRetention.RUNTIME)
+@Target(AnnotationTarget.FUNCTION)
+annotation class Generated","Why is this annotation is a part of `runtime.jvm`? And if it supposed to be Jvm only, according to existing naming convention it should be `JvmGenerated` instead",2018-05-14 10:11:11
112,"@@ -0,0 +1,8 @@
+var status: String = ""fail""","I beleive it would be good to add comment explaining why ""status"" here is top-level property instead of local variable.
",2015-03-26 15:33:16
384,"@@ -0,0 +1,85 @@
+// IGNORE_BACKEND: JS",I'd name this test file `javaObjectType.kt`,2018-03-20 17:41:20
437,"@@ -0,0 +1,9 @@
+// Copyright 2000-2017 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
+package org.jetbrains.kotlin.idea.debugger.sequence.lib
+
+/**
+ * @author Vitaliy.Bibaev",We do not allow `@author` comments (`CodeConformanceTest#testNoBadSubstringsInProjectCode`).,2018-07-19 12:51:09
435,"@@ -0,0 +1,9 @@
+// Copyright 2000-2017 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
+package org.jetbrains.kotlin.idea.debugger.sequence.lib
+
+/**
+ * @author Vitaliy.Bibaev
+ */
+object LibraryUtil {
+    const val KOTLIN_LANGUAGE_ID = ""kotlin""",What's the purpose of this? You can use `KotlinLanguage.NAME` in Kotlin project.,2018-07-18 19:36:37
999,"@@ -0,0 +1,9 @@
+// FILE: test.kt
+class AtomicInt(var value: Int)
+object Foo {
+    <!VARIABLE_IN_TOP_LEVEL_SINGLETON_WITHOUT_THERAD_LOCAL!>var field1: Int = 10<!>
+    val backer2 = AtomicInt(0)
+    var field2: Int
+        get() = backer2.value
+        set(value: Int) { backer2.value = value }
+}","No tests for `@ThreadLocal` singletons.
Also no tests for plain top-level properties.",2020-02-18 12:56:19
423,"@@ -0,0 +1,9 @@
+// FIX: Add explicit Unit return type",Please add `// PROBLEM: <problem text>` to one test with JUnit function and one test with main function,2018-06-05 13:09:49
917,"@@ -0,0 +1,9 @@
+// IGNORE_BACKEND: ANY_FIR","Great, thank you!",2019-12-19 11:29:33
857,"@@ -0,0 +1,9 @@
+// IGNORE_BACKEND: JVM","Actually I think it'd be better to avoid adding tests where `JVM` is disabled, and just have these logged in KT-34338 (which I think all of them are already). The reason is that we usually keep the compiler test data as the current production state, and report all cases which don't work as intended to YouTrack, because it somewhat simplifies working with test data.

I know there are already several tests that pass on JVM_IR and are ignored for JVM, but I don't want that to be the rule. For non-major issues like this one, IMHO it's OK to keep the difference in behavior underspecified, and come back to it only in the future when JVM IR becomes the default backend.",2019-10-17 14:39:35
224,"@@ -0,0 +1,9 @@
+// IS_APPLICABLE: false
+// WITH_RUNTIME
+class A(val _value: Int) {
+    operator fun compareTo(other: Int) = _value.compareTo(other)
+}
+
+fun test(a: A): Boolean {
+    return a >= 0 && a <= 100<caret>","My suggested change to KotlinType.isComparable() will break this test, but I think it's OK because this test should be red, and we make no guarantees regarding the behavior of intentions on red code.",2017-05-08 13:11:43
609,"@@ -0,0 +1,9 @@
+// PROBLEM: none",Shouldn't we suggest the fix?,2019-04-03 04:05:32
460,"@@ -0,0 +1,9 @@
+// PROBLEM: none
+fun foo(f: (String?) -> Int) {}
+
+fun test() {
+    foo {
+        if (it != null) return@foo<caret> 1","Please make sure that the inspection is not suggested when using the function expression syntax:
```
foo(fun(it: String?): Int {
    if (it != null) return@foo 1
    return 0
})
```
",2018-08-06 14:04:53
672,"@@ -0,0 +1,9 @@
+// PROBLEM: none
+fun test() {","We should convert to
```kotlin
fun test() {
    run {
        val a = 42
        use(a, a)
    }
    val a = 33
}
```",2019-05-12 13:47:26
57,"@@ -0,0 +1,9 @@
+// WITH_RUNTIME
+// IS_APPLICABLE: FALSE
+fun String.withIndices(): Int = 42
+
+fun foo(s: String) {
+    for (<caret>a in s) {
+
+    }
+}","The test is fine, the naming is not: _overridden_ function is a function declaration in a subclass with the same signature as in the superclass. There are no overridden functions here, `withIndices` is just an extension function
",2014-05-12 12:39:33
427,"@@ -0,0 +1,9 @@
+// WITH_RUNTIME
+class FooException : Exception()
+
+class Test {
+    val getter: String
+        @Throws(FooException::class)
+",Suspicious empty line.,2018-06-15 18:00:08
439,"@@ -0,0 +1,9 @@
+fun test() {
+    val items = listOf<Any>()
+    items.forEach { }
+    items.forEach { item -> }
+    items.forEach { doSomething(it) }
+    items.forEach { item -> doSomething(item) }
+}","I'd add some tests with nested `forEach`, to make sure we handle correctly situations with multiple `it`.",2018-07-23 12:56:28
225,"@@ -0,0 +1,9 @@
+interface B {
+    fun c()
+}
+
+
+<spot>object A : B</spot> {",This should be `object a`,2017-05-08 13:29:17
442,"@@ -0,0 +1,90 @@
+/*
+ * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
+ * that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.gradle.model;
+
+import org.jetbrains.annotations.NotNull;
+
+import java.io.File;
+import java.util.Collection;
+
+/**
+ * Represents a source set for a given Kotlin Gradle project.
+ * @see KotlinProject
+ */
+public interface SourceSet {","If we rewrite the interfaces in Kotlin, we might get much cleaner implementations, e.g.
```kotlin
interface SourceSet {
    val name: String
    /* ... */
}

data class SourceSetImpl(
    override val name: String
    /* ... */
) : SourceSet
```",2018-07-25 17:49:25
644,"@@ -0,0 +1,91 @@
+/*
+ * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license 
+ * that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.idea.inspections",A more suitable package is `org.jetbrains.kotlin.idea.inspections.collections`.,2019-04-19 12:52:03
463,"@@ -0,0 +1,91 @@
+// Copyright 2000-2017 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
+package org.jetbrains.kotlin.idea.debugger.sequence.trace.dsl
+
+import com.intellij.debugger.streams.trace.dsl.Types
+import com.intellij.debugger.streams.trace.impl.handler.type.*
+
+/**
+ * @author Vitaliy.Bibaev
+ */
+object KotlinTypes : Types {",I'd rename this object to `SequenceKotlinTypes` or something else as we have a `KotlinType` and `KotlinTypes` will appear in auto-completion.,2018-08-10 10:44:40
65,"@@ -0,0 +1,96 @@
+fun Int.foo(a: Int = 1,","The correct spelling is `extension` :)
",2014-08-20 07:36:15
873,"@@ -1,10 +1,17 @@
-// IGNORE_BACKEND: JVM_IR
 fun f() {
     for (c in ""123"") {
         print(c)
     }
 }
 
+// Different locals slot numbers are used in JVM vs JVM IR for loop and induction variables.
+
+// JVM_TEMPLATES
 // 1 ISTORE 0\s+L3
 // 1 ILOAD 0\s+INVOKEVIRTUAL java/io/PrintStream.print \(C\)V
-// 1 LOCALVARIABLE c C L3 L.* 0
+// 1 LOCALVARIABLE c C L3 L\d+ 0
+
+// JVM_IR_TEMPLATES
+// 1 ISTORE 2\s+L5",Thank you! Seems it's best to transform this test in future to debug one according to #2730,2019-10-29 06:42:03
30,"@@ -1,11 +1,11 @@
 <component name=""libraryTable"">
   <library name=""kotlin-runtime"">
     <CLASSES>
-      <root url=""jar://$KOTLIN_BUNDLED$/lib/kotlin-runtime.jar!/"" />
+      <root url=""jar://$PROJECT_DIR$/out/artifacts/Kotlin/kotlinc/lib/kotlin-runtime.jar!/"" />","Changes like this in meta-information should be carefully reviewed before committing, because they can easily break compilation or workflow for other developers.
",2014-01-27 21:23:50
735,"@@ -1,11 +1,20 @@
-// IGNORE_BACKEND: JVM_IR
-fun box() : String {
-
+class C() {",Please keep old test and add new one,2019-06-24 06:57:14
525,"@@ -1,12 +1,13 @@
 package org.jetbrains.idl2k
 
-import org.antlr.v4.runtime.ANTLRFileStream
-import kotlin.collections.HashSet
+import org.antlr.v4.runtime.CharStreams
 import java.io.File
 import java.io.IOException
 import java.net.URL
+import java.nio.charset.StandardCharsets
 import java.util.ArrayList
 import java.util.LinkedHashMap
+import kotlin.collections.HashSet",import looks redundant,2018-11-01 19:39:22
555,"@@ -1,13 +1,16 @@
 // IGNORE_BACKEND: JVM_IR
 fun box() : String {
-    230?.toByte()?.hashCode()
-    9.hashCode()
+    // Just hard enough that the test won't get optimized away at compile time.",Were there any issues with this tests involving constant folding?,2019-02-21 09:23:02
150,"@@ -1,3 +1,19 @@
+/*","It's added by IDEA's pre-commit action. Really shouldn't for generated files.
",2016-04-25 23:33:19
211,"@@ -1,3 +1,3 @@
 package test
 
-fun lll(a: Int) = a
+fun lll(a: kotlin.Int) = a",Here we have `kotlin.` added too,2017-04-19 15:42:08
931,"@@ -1,3 +1,4 @@
+// IGNORE_BACKEND: ANY","Maybe comment out the `kotlin.io.println` call instead, since the rest of the test works?

cc @demiurg906 ",2020-01-07 17:49:55
797,"@@ -1,3 +1,4 @@
+// IGNORE_BACKEND: JVM","Maybe it's better to extract the failing part of this test into a separate file and file a YouTrack issue, since we don't have a habit of looking for tests ignored for _JVM_ backend and fixing those",2019-09-03 16:38:26
480,"@@ -1,3 +1,4 @@
+// IGNORE_BACKEND: JVM_IR",Don't add new line!  Use empty  one before '// 2 3 ....',2018-08-24 09:25:54
893,"@@ -1,3 +1,4 @@
+org.gradle.caching=true","Does this option in our repository affects our users?
It seems that it can affect different Kotlin builds, so I don't think, that it is a good idea to make this change",2019-11-20 15:20:18
648,"@@ -1,3 +1,6 @@
+// IGNORE_BACKEND: JVM_IR",@sfs Please add same bytecode test for IR backend ,2019-04-23 11:01:07
707,"@@ -1,4 +1,3 @@
-// IGNORE_BACKEND: JVM_IR","It's not clear why this test is affected, should it be merged with one of previous commits?",2019-05-24 05:26:59
212,"@@ -1,4 +1,4 @@
 package test
 
 // extra parameter is to make sure generic signature is not erased
-fun doNothing(array: IntArray, ignore: java.util.List<String>) = array
+fun doNothing(array: kotlin.IntArray, ignore: java.util.List<String>) = array",And here we have `kotlin.` too,2017-04-19 15:42:26
203,"@@ -1,4 +1,4 @@
 package test
 
 // extra parameter is to preserve generic signature
-fun anyany(a: Any, ignore: java.util.List<String>) = a
+fun anyany(a: kotlin.Any, ignore: java.util.List<String>) = a",Unclear. Why should you have `kotlin.` here and how it works without it?,2017-04-05 15:28:43
476,"@@ -1,4 +1,4 @@
-// ""Change type of overriden property 'A.x' to '(Int) -> Int'"" ""false""
+// ""Change type of overridden property 'A.x' to '(Int) -> Int'"" ""false""",Isn't this a part of our testdata markup? @mglukhikh ,2018-08-14 15:57:45
337,"@@ -1,4 +1,4 @@
-// WITH_RUNTIME
+// RUNTIME_WITH_FULL_JDK",Don't understand why it's needed,2017-12-29 14:24:57
697,"@@ -1,4 +1,5 @@
 // !LANGUAGE: +InlineClasses
+// IGNORE_BACKEND: JVM_IR",What happens here?,2019-05-20 16:12:07
943,"@@ -1,4 +1,5 @@
 // IGNORE_BACKEND_FIR: JVM_IR
+// IGNORE_BACKEND: JVM_IR","This test should not have passed. It is checking that no delegate field is created for interface delegation. It is doing so based on the name of the field, and therefore it now correctly fails because we do not have that optimization.",2020-01-16 14:52:59
275,"@@ -1,4 +1,5 @@
 package org.junit
 
+@Deprecated(""Use 'Test' from kotlin.test package"", replaceWith = ReplaceWith(""Test"", imports = ""kotlin.test.Test""))",👍 ,2017-08-15 16:51:33
690,"@@ -1,4 +1,7 @@
 // KJS_WITH_FULL_RUNTIME
+// TODO: muted automatically, investigate should it be ran for JVM_IR or not","Do you understand why these two tests are now failing. If so, can you replace this auto mute comment with an actual comment explaining what is going on?",2019-05-16 09:29:54
604,"@@ -1,5 +1,3 @@
-// IGNORE_BACKEND: JVM_IR
-// WITH_RUNTIME","Please return `WITH_RUNTIME` in these tests:
* `boxAgainstJava/sam/differentFqNames.kt`
* `boxAgainstJava/sam/samConstructorGenericSignature.kt`
* `boxAgainstJava/sam/adapters/inheritedOverriddenAdapter.kt`

(see cb7727d51a)",2019-04-01 10:20:52
763,"@@ -1,5 +1,4 @@
 // FILE: 1.kt
-// IGNORE_BACKEND: JVM_IR
 package builders",@sfs Please just add new line here and in next file too,2019-07-25 06:40:33
475,"@@ -1,5 +1,5 @@
 class Foo() {
-    @Supress(""unused"")
+    @Suppress(""unused"")","I'm not sure what it can affect. I mean, initially it was a compile-time error; changing that may have some unintended consequences.

@semoro ",2018-08-14 15:56:56
766,"@@ -1,5 +1,6 @@
-// FILE: 1.kt
 // IGNORE_BACKEND: JVM_IR
+// FILE: 1.kt
+",New line causes smap data shift:  https://teamcity.jetbrains.com/viewLog.html?buildId=2450360&buildTypeId=Kotlin_dev_CompilerWithTests,2019-07-30 10:58:52
51,"@@ -1,6 +1,10 @@
 // ""Change 'foo' function return type to '([ERROR : NoSuchType]) -> Int'"" ""false""
+// ACTION: Disable 'Make Types Implicit In Lambda'
+// ACTION: Edit intention settings
+// ACTION: Make types implicit in lambda","Note that this test is now failing again due to obvious reasons :)
",2014-04-23 12:29:36
684,"@@ -1,6 +1,6 @@
 // !LANGUAGE: +AllowContractsForCustomFunctions +UseCallsInPlaceEffect +ReadDeserializedContracts
 // !USE_EXPERIMENTAL: kotlin.contracts.ExperimentalContracts
-// IGNORE_BACKEND: JVM_IR, NATIVE, JS_IR",Could you also please unmute JS_IR tests? ,2019-05-15 09:42:46
773,"@@ -1,6 +1,7 @@
 // !LANGUAGE: +FunctionTypesWithBigArity","What happens to this test?
Do we not want to support this kind of code any more?
If so, the test should probably just be removed.",2019-08-08 11:05:16
362,"@@ -1,6 +1,8 @@
 class A {
     companion object {
-        private var r: Int = 1;
+        private var r: Int = 1
+            // Custom getter is needed, otherwise no need to generate getTest",I think this test is no longer necessary and can be safely deleted instead,2018-02-27 12:40:17
709,"@@ -1,7 +1,6 @@
 // Even before any IR lowerings, the type of `when` is determined to be
 // Unit even though the outer `if` still returns `Int?`. This results
 // in a ClassCastException when that Unit is converted into a Number.
-// IGNORE_BACKEND: JVM_IR",The comment above is probably also not needed after this change?,2019-05-24 11:44:19
187,"@@ -1,7 +1,6 @@
 fun foo() {
-    val a: kotlin.test.Asserter?
-    if (<caret>) {
-        a = null
+    val a = if (<caret>) {","It's not OK that you're losing the variable type here.
",2016-10-18 18:59:07
830,"@@ -1,7 +1,7 @@
 fun foo() {
-    Loop@ while (true) {
+    Loop@ loop@ while (true) {",If we already have a label let's not add another one,2019-10-01 15:29:41
558,"@@ -1,8 +1,8 @@
 class A
-fun box() {
+fun box(u: Int) {",and this?,2019-02-26 08:52:25
182,"@@ -1,8 +1,9 @@
 object A {
     @JvmStatic fun main(args: Array<String>) {
-        println(Void.TYPE)
-        println(Integer.TYPE)
-        println(java.lang.Double.TYPE)
+        println(Unit::class.javaPrimitiveType)","This doesn't actually work: `Unit` has no `javaPrimitiveType`. For `void.class`, the previous variant of the code should be used.
",2016-10-10 17:23:18
742,"@@ -1,8 +1,9 @@
-// IGNORE_BACKEND: JVM_IR
 // IGNORE_BACKEND: JS_IR
 // TODO: muted automatically, investigate should it be ran for JS or not
 // IGNORE_BACKEND: JS, NATIVE
 
+// FULL_JDK",Why FULL_JDK directive is required? Current backend works withoit it,2019-06-27 07:41:46
263,"@@ -10,6 +10,12 @@ class BasicAssertionsTest {
     }
 
     @Test
+    fun testAssertSame() {","`test` prefix reminds me old days of `JUnit`, where it was obligatory to run any test :-)

Could you tell me why there is doubled `kotlin` and `test` packages in path: `kotlin/libraries/kotlin.test/common/src/test/kotlin/kotlin/test/tests/`? Just wondering.",2017-08-08 06:08:19
165,"@@ -10,6 +10,12 @@ package kotlin.text
 public inline fun buildString(builderAction: StringBuilder.() -> Unit): String = StringBuilder().apply(builderAction).toString()
 
 /**
+ * Builds new string by populating newly created [StringBuilder] initialized with the given capacity using provided [builderAction] and then converting it to [String].
+ */","Will fix formatting upon rebase.
",2016-08-08 22:59:18
566,"@@ -10,6 +10,7 @@ import org.gradle.api.Named
 import org.gradle.api.file.SourceDirectorySet
 
 interface KotlinSourceSet : Named, HasKotlinDependencies {
+    val id: Long","In a single project, source set names are unique. Using the `name` as a key would be sufficient. Why a separate `id` is needed?",2019-03-07 09:22:41
944,"@@ -10,6 +10,9 @@ package kotlin.system
  * Executes the given [block] and returns elapsed time in milliseconds.
  */
 public inline fun measureTimeMillis(block: () -> Unit): Long {
+    contract {",I believe this requires `kotlin.contracts.*` import.,2020-01-16 19:54:28
737,"@@ -100,10 +101,10 @@ open class ConstraintSystemBuilderImpl(private val mode: Mode = ConstraintSystem
         }
 
         for ((_, typeVariable) in typeParameters.zip(typeVariables)) {",nit: `for (typeVariable in typeVariables)`,2019-06-25 01:43:44
738,"@@ -100,10 +101,10 @@ open class ConstraintSystemBuilderImpl(private val mode: Mode = ConstraintSystem
         }
 
         for ((_, typeVariable) in typeParameters.zip(typeVariables)) {
-            allTypeParameterBounds.put(typeVariable, TypeBoundsImpl(typeVariable))
+            allTypeParameterBounds[typeVariable] = TypeBoundsImpl(typeVariable)
         }
 
-        for ((typeVariable, _) in allTypeParameterBounds) {
+        for (typeVariable in allTypeParameterBounds.keys) {",nit: `for (typeVariable in typeVariables)`. Probably combine with the above.,2019-06-25 01:50:23
433,"@@ -101,7 +106,29 @@ class KotlinUFunctionCallExpression(
     }
 
     override val receiver: UExpression?
-        get() = (uastParent as? UQualifiedReferenceExpression)?.takeIf { it.selector == this }?.receiver
+        get() {
+            (uastParent as? UQualifiedReferenceExpression)?.let { return it.takeIf { it.selector == this }?.receiver }",Looks too complicated. Maybe replace a `let` with `if`?,2018-07-17 13:24:59
798,"@@ -102,12 +102,12 @@ internal sealed class ForLoopHeader(
                     //   // (use `<` if last is exclusive)
                     //   (step > 0 && inductionVar <= last) || (step < 0 || last <= inductionVar)
                     val stepKotlinType = progressionType.stepType(builtIns).toKotlinType()
-                    val zero = if (progressionType == ProgressionType.LONG_PROGRESSION) irLong(0) else irInt(0)
+                    val isLong = progressionType == ProgressionType.LONG_PROGRESSION;",Semicolon may be considered a nostalgic reminiscence here.,2019-09-04 15:40:27
660,"@@ -102,6 +101,22 @@ class JvmBuiltinOptimizationLowering(val context: JvmBackendContext) : FileLower
                 expression.branches.removeIf() {
                     it.condition.isFalseConst() && isCompilerGenerated
                 }
+                if (expression.origin == IrStatementOrigin.ANDAND) {
+                    assert(expression.type.isBoolean()","Please always add messages with additional information to asserts, including a description of what's wrong and any relevant variables (e.g. `expression.dump()` here)",2019-04-26 10:27:44
655,"@@ -102,6 +102,20 @@ class JvmBuiltinOptimizationLowering(val context: JvmBackendContext) : FileLower
                 expression.branches.removeIf() {
                     it.condition.isFalseConst() && isCompilerGenerated
                 }
+                // Replace conjunction condition with intrinsic and function call
+                if (expression.type.isBoolean() && expression.branches.size == 2) {",@neetopia Please add '// a && b == if (a) b else false' clarification comment,2019-04-24 12:53:33
321,"@@ -102,6 +103,7 @@ class ReplaceSingleLineLetIntention : SelfTargetingOffsetIndependentIntention<Kt
         return when (right) {
             is KtNameReferenceExpression -> right.text != parameterName
             is KtDotQualifiedExpression -> !right.hasLambdaExpression() && !right.nameUsed(parameterName)
+            is KtBinaryExpression -> right.operationToken == KtTokens.RANGE",Don't quite understand why only `RANGE` is allowed here. Please consider other binary operators. It seems to me (may be I miss something) that it should be allowed for most of them.,2017-11-27 08:36:28
965,"@@ -102,7 +103,7 @@ abstract class AbstractKotlinCompilation<T : KotlinCommonOptions>(
             // To configure a task that may have not yet been created at this point, use 'withType-matching-all`:
             .withType(AbstractKotlinCompile::class.java)
             .matching { it.name == compileKotlinTaskName }","we can use `named(String, Class)` ",2020-01-28 23:17:56
960,"@@ -102,7 +103,7 @@ private class VarargLowering(val context: JvmBackendContext) : FileLoweringPass,
         context.createJvmIrBuilder(currentScope!!.scope.scopeOwnerSymbol, startOffset, endOffset)
 
     private val IrFunctionSymbol.isArrayOf: Boolean
-        get() = this == context.ir.symbols.arrayOf || owner.isPrimitiveArrayOf
+        get() = this == context.ir.symbols.arrayOf || owner.isArrayOf","Looks like it is already checking is this is `kotlin.Array`, so it is no need to check it by name",2020-01-28 14:30:43
853,"@@ -102,7 +105,12 @@ class DefaultArgumentsConversion(context: NewJ2kConverterContext) : RecursiveApp
                             return JKFieldAccessExpression(newSymbol)
                         }
                     }
-
+                    if (on is JKExpression) {","Please, let's don't break functionallity with remapping we already have. Join your `addThisReceiverIfNeeded` with `remapParameterSymbol`, so we will be able to do both and not just taking over one case and forgetting about other one",2019-10-11 11:17:12
911,"@@ -103,7 +103,8 @@ object KeywordCompletion {
             var keyword = keywordToken.value
 
             val nextKeyword = when {
-                keywordToken == SUSPEND_KEYWORD && ((position.containingFile as? KtFile)?.isScript() == true) -> null
+                keywordToken == SUSPEND_KEYWORD && ((position.containingFile as? KtFile)?.isScript() == true ","It seems like there are no actual need to prevent `suspend` or `suspend fun` completion in `.kts` files. Could you please remove this check all along, so it will be something like: 

```kt
val nextKeyword = when {
    keywordToken == SUSPEND_KEYWORD && position.getStrictParentOfType<KtTypeReference>() != null -> null
    else -> COMPOUND_KEYWORDS[keywordToken]
}
```",2019-12-18 11:17:17
636,"@@ -104,26 +100,33 @@ class BlockInfo private constructor(val parent: BlockInfo?) {
 
 class VariableInfo(val declaration: IrVariable, val index: Int, val type: Type, val startLabel: Label)
 
-@Suppress(""IMPLICIT_CAST_TO_ANY"")
 class ExpressionCodegen(
     val irFunction: IrFunction,
     val frame: IrFrameMap,","val frame ->  override val frameMap,
and next frameMap declaration would be redundant
",2019-04-09 10:30:25
631,"@@ -106,7 +106,6 @@ class SharedVariablesLowering(val context: BackendContext) : FunctionLoweringPas
                     if (declaration !in sharedVariables) return declaration
 
                     val newDeclaration = context.sharedVariablesManager.declareSharedVariable(declaration)
-                    newDeclaration.parent = irFunction",This could affect JS and Native,2019-04-08 12:41:03
654,"@@ -107,6 +107,7 @@ val jvmPhases = namedIrFilePhase(
             jvmTypeOperatorLoweringPhase then
             flattenStringConcatenationPhase then
             foldConstantLoweringPhase then
+            computeStringTrimPhase then","@JakeWharton 
As order of lowers is sufficient here, please add also some tests with constant inlining and append operations, e.g.:
```
private const val SPACES = ""             ""


    """"""
        ${SPACES + SPACES}
        Hello,
        World
        ${SPACES + SPACES}
    """""".trimIndent()

(SPACES + """"""
        ${SPACES + SPACES}
        Hello,
        World
        ${SPACES + SPACES}
    """""" + SPACES + ).trimIndent()

```",2019-04-24 08:43:41
646,"@@ -107,6 +107,7 @@ val jvmPhases = namedIrFilePhase(
             jvmTypeOperatorLoweringPhase then
             foldConstantLoweringPhase then
             flattenStringConcatenationPhase then
+            computeStringTrimPhase then","I wanted to add this for JS but I don't know how to test it. Would appreciate a pointer so I can follow-up.

And for native I assume I wait until they update to a version of compiler that contains this phase and then I can update their list?",2019-04-20 04:40:21
592,"@@ -107,7 +108,9 @@ open class InsertImplicitCasts(
 
     override fun visitReturn(expression: IrReturn): IrExpression =
         expression.transformPostfix {
-            value = value.cast(expression.returnTarget.returnType)
+            // Don't insert an implicit cast when returning from a (secondary) constructor.
+            if (expression.returnTargetSymbol !is IrConstructorSymbol)
+                value = value.cast(expression.returnTarget.returnType)","```
class C() {
    constructor(x: Any?) : this() {
        if (x is Unit) return x
    }
}
```
The artificial example above is considered well-formed, and contains smart cast to Unit.
However. this smart cast will not be represented in IR.
Actually should cast constructor return value to `kotlin.Unit`.",2019-03-26 09:25:58
981,"@@ -108,10 +109,11 @@ fun KtExpression.hasSuspendCalls(bindingContext: BindingContext = analyze(BodyRe
             }
         }
         else -> {
-            val resolvedCall = getResolvedCall(bindingContext)
-            if ((resolvedCall?.resultingDescriptor as? FunctionDescriptor)?.isSuspend == true) true
+            val target = (this as? KtParenthesizedExpression)?.getStrictParentOfType<KtCallExpression>() ?: this","This is a very hacky way to solve the problem. The root of problem here is the fact that the considered call expression is not a valid candidate (see check at line 88), so I believe this place should be fixed instead.",2020-02-05 09:24:21
903,"@@ -108,15 +115,18 @@ internal class InterfaceLowering(val context: JvmBackendContext) : IrElementTran
                 Visibilities.isPrivate(function.visibility)","It's true for private non-JvmDefault, private JvmDefault should be keeped in interface",2019-11-29 10:25:15
791,"@@ -109,11 +111,16 @@ class ErasedInlineClassBodyCodegen(
 
 
                 override fun doGenerateBody(codegen: ExpressionCodegen, signature: JvmMethodSignature) {
-                    val iv = codegen.v
-                    iv.aconst(null)
-                    iv.athrow()
+                    val asmType = signature.valueParameters[0].asmType
+                    val secondParameterIndex = asmType.getSize()","I think you could use `codegen.frameMap` to get JVM parameter index from a parameter descriptor directly. But it probably wouldn't be easier, so I don't insist",2019-09-02 17:39:53
938,"@@ -11,7 +11,7 @@ import org.jetbrains.kotlin.ir.types.IrType
 interface DeclarationFactory {
     object FIELD_FOR_OUTER_THIS : IrDeclarationOriginImpl(""FIELD_FOR_OUTER_THIS"", isSynthetic = true)
 
-    fun getFieldForEnumEntry(enumEntry: IrEnumEntry, entryType: IrType): IrField
+    fun getFieldForEnumEntry(enumEntry: IrEnumEntry): IrField",Is it also unused in K/N?,2020-01-09 15:00:38
348,"@@ -11,8 +11,7 @@ import kotlin.test.*
 class TestNGContributor : AsserterContributor {
     override fun contribute(): Asserter? {
         for (stackFrame in currentStackTrace()) {
-            @Suppress(""PLATFORM_CLASS_MAPPED_TO_KOTLIN"")
-            val className = stackFrame.className as java.lang.String
+            val className = stackFrame.className as String",isn't `className` already String?,2018-01-31 19:46:13
200,"@@ -110,7 +149,10 @@ fun createContainerForLazyResolveWithJava(
         useImpl<LazyResolveToken>()
     }
 }.apply {
-    get<JavaClassFinderImpl>().initialize(bindingTrace, get<KotlinCodeAnalyzer>())
+    if (useJavac)
+        get<JavacClassFinder>().initialize(bindingTrace, get<KotlinCodeAnalyzer>())",I'd write here `JavacBasedClassFinder`. The current name is too close to just `JavaClassFinder`.,2017-04-05 12:17:44
231,"@@ -111,7 +114,9 @@ interface ReplEvalAction {
 
 sealed class ReplEvalResult : Serializable {
     class ValueResult(val value: Any?) : ReplEvalResult() {
-        override fun toString(): String = ""Result: $value""
+        val type = LastInferredTypeHolder.inferredType.get()",I think you can obtain this type from `compileResult` at `GenericReplEvaluator.eval` and pass to `ValueResult`'s constructor here,2017-06-13 14:36:40
976,"@@ -111,8 +112,13 @@ private class InheritedDefaultMethodsOnClassesLowering(val context: JvmBackendCo
             irFunction.body = irBlockBody {
                 +irReturn(
                     irCall(defaultImplFun.symbol, irFunction.returnType).apply {
+                        interfaceImplementation.parentAsClass.typeParameters.forEachIndexed { index, irTypeParameter ->
+                            //TODO: See Note [Interface Parameters]","Minor, but could you extract a simple method that would return `context.irBuiltIns.anyNType` and put the comment there instead, so that we have only one TODO instead of three?",2020-01-31 14:13:47
308,"@@ -112,7 +133,7 @@ private fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in
 
     array.asDynamic().sort(comparator.asDynamic().compare.bind(comparator))
 
-    for (i in 0..array.size - 1) {
+    for (i in array.indices) {",JS backend doesn't optimize such loops ATM.,2017-09-25 20:50:56
237,"@@ -112,9 +112,18 @@ class MemberVisibilityCanPrivateInspection : AbstractKotlinInspection() {
             else -> ""Property""
         }
         val nameElement = (declaration as? PsiNameIdentifierOwner)?.nameIdentifier ?: return
-        holder.registerProblem(declaration.visibilityModifier() ?: nameElement,
+        val visibilityModifier = declaration.visibilityModifier()
+        val fix = object : AddModifierFix(modifierListOwner, KtTokens.PRIVATE_KEYWORD) {","I would do this as a general fix to AddModifierFix (which already has special logic for handling modality modifiers), not as a single-case override here.",2017-07-10 09:10:34
505,"@@ -113,6 +112,7 @@ open class ChangeVisibilityModifierIntention protected constructor(
     class Private : ChangeVisibilityModifierIntention(KtTokens.PRIVATE_KEYWORD), HighPriorityAction {
         override fun applicabilityRange(element: KtDeclaration): TextRange? {
             if (isAnnotationClassPrimaryConstructor(element)) return null
+            if (element is KtProperty && element.hasJvmFieldAnnotation()) return null","I'd say it's not the best way to fix it. It's more correct to have all necessary checks inside `canBePrivate` and `canBeInternal` (which does not yet exist). Take into account the fact that both `ChangeVisibilityFix` and `ChangeVisibilityModifierIntention` use `canBePrivate` (and should probably share the same logic). Also I'd recommend to consider content of `canBePrivate` inside `MemberVisibilityCanBePrivateInspection` (private fun). I suspect that some checks from there (not all) could be used inside global `canBePrivate` (that can also fix a bunch of minor bugs, not reported yet).",2018-09-27 07:50:34
296,"@@ -115,7 +115,21 @@ class CodeConverter(
         if (needConversion(actualType, expectedType)) {
             val expectedTypeStr = expectedType.canonicalText
             if (expression is PsiLiteralExpression) {
-                if (expectedTypeStr == ""float"" || expectedTypeStr == ""double"") {
+                if (actualType.canonicalText == ""char"" && expression.parent !is PsiExpressionList) {
+                    when (expectedTypeStr) {","I think that's here should be a better way. 
Better to move such code may be to type converter or so. 
Because it looks like something similar required here #1200",2017-09-13 15:44:10
164,"@@ -115,9 +116,73 @@ class KotlinCodeFragmentFactory: CodeFragmentFactory() {
             }
         })
 
+        if (contextElement != null && contextElement !is KtElement) {","Now such variables are skipped during text rendering, so it doesn't matter if they are present in resulting map (this map is used only to get values for kotlin variables that are present in resulting text)
",2016-08-03 14:11:50
988,"@@ -116,4 +116,31 @@ public String toString() {
             return ""("" + line + "","" + column + "")"";
         }
     }
+
+    public static final class LineAndColumnRange {",I think that this change as well as the appropriate `getLineAndColumnRange*` helpers will fit into the separate commit with `CompilerMessageLocation` as well - they seem both have the same reason behind.,2020-02-10 10:50:20
573,"@@ -1168,3 +1122,96 @@ fun CompileTimeConstant<*>.isStandaloneOnlyConstant(): Boolean {
         else -> return false
     }
 }
+
+internal fun isZero(value: Any?): Boolean {",private,2019-03-12 13:59:51
572,"@@ -1168,3 +1122,96 @@ fun CompileTimeConstant<*>.isStandaloneOnlyConstant(): Boolean {
         else -> return false
     }
 }
+
+internal fun isZero(value: Any?): Boolean {
+    return when {
+        isIntegerType(value) -> (value as Number).toLong() == 0L
+        value is Float || value is Double -> (value as Number).toDouble() == 0.0
+        else -> false
+    }
+}
+
+internal fun typeStrToCompileTimeType(str: String) = when (str) {",private,2019-03-12 13:59:31
640,"@@ -118,6 +134,18 @@ internal class ProgressionHeaderInfo(
         }
         constLimitAsLong == lastValueAsLong
     }
+
+    override fun asReversed() = ProgressionHeaderInfo(","Please add bytecode test with double reverse for array.indices and constant until ranges, e.g.:
```
fun box(): String {
    var sum = 0
    for (i in (1 until 5).reversed().reversed()) {
        sum = sum * 10 + i
    }

    var sumL = 0L
    for (i in (1L until 5L).reversed().reversed()) {
        sumL = sumL * 10 + i
    }

    var sumC = 0
    for (i in ('1' until '5').reversed().reversed()) {
        sumC = sumC * 10 + i.toInt() - '0'.toInt()
    }

    return ""OK""
}
```
",2019-04-10 12:36:09
681,"@@ -119,3 +119,28 @@ fun IrType.substitute(substitutionMap: Map<IrTypeParameterSymbol, IrType>): IrTy
         newAnnotations
     )
 }
+
+fun getImmediateSupertypes(type: IrSimpleType): List<IrSimpleType> {",`private`,2019-05-14 10:03:30
678,"@@ -119,7 +119,7 @@ private static String renderTemplate(String template, int number, String element
                 .replace(""\n"", LineSeparator.getSystemLineSeparator().getSeparatorString());
     }
 
-    private static final List<String> WHITELISTED_FOR_JVM_IR_BACKEND = Collections.singletonList(""overflowZeroDownToMaxValue.kt"");",How did these changes break the test for JVM IR?,2019-05-13 22:06:26
698,"@@ -1199,6 +1199,29 @@ class KotlinTypeMapper @JvmOverloads constructor(
             ?: computeInternalName(classDescriptor, typeMappingConfiguration, isIrBackend)
     }
 
+    private fun getDefaultDescriptor(",Could you keep old position of method and just pass neccesery parameters to it: actually there would be new TypeMapper for IR so all IR related logic would be removed from current one,2019-05-21 05:58:07
916,"@@ -12,3 +12,11 @@ class TestInitValInInitBlock {
     }
 }
 
+class TestInitValInLambdaCalledOnce {
+    val x: Int
+    init {
+        1.run {",`init { 1.run { } }` causes fir to fail with an error at `ConeClassifierLookupTag.toSymbol` because the tag is of unexpected type `ConeTypeVariableTypeConstructor`. Is there a way to mute this test for fir?,2019-12-19 10:48:50
806,"@@ -12,6 +11,16 @@ fun test() {
 // 0 getFirst
 // 0 getLast
 
+// JVM non-IR uses while.
+// JVM IR uses if + do-while.
+
+// JVM_TEMPLATES
 // 0 IF_ICMPGT",These two lines (`// 0 IF_...`) can be removed; they are made redundant by the `// 1 IF`,2019-09-13 20:22:19
612,"@@ -12,6 +11,4 @@ fun test() {
 // 0 getFirst
 // 0 getLast
 
-// 0 IF_ICMPGT
-// 0 IF_ICMPEQ
-// 1 IF_ICMPGE
+// 1 IF_ICMP","@punzki 
```
// 1 IF_ICMPGE
```
Could be reverted, please also add :
```
// 1 IF
```",2019-04-03 10:08:10
596,"@@ -12,6 +12,20 @@ import java.io.File
 import java.io.IOException
 import java.util.ArrayDeque
 
+/**
+ * An enumeration to describe possible algorithms to traverse.
+ * There are two of them: search in breadth (same directory depth)
+ */
+public enum class WalkAlgorithm {
+    /**
+     * Breadth-first search
+     */
+    BFS,","I actually believe we should write these out as `BREADTH_FIRST` and `DEPTH_FIRST`, just like we have `TOP_DOWN` instead of `TD` below.",2019-03-29 08:09:17
597,"@@ -12,6 +12,20 @@ import java.io.File
 import java.io.IOException
 import java.util.ArrayDeque
 
+/**
+ * An enumeration to describe possible algorithms to traverse.
+ * There are two of them: search in breadth (same directory depth)
+ */
+public enum class WalkAlgorithm {
+    /**
+     * Breadth-first search
+     */
+    BFS,
+    /**
+     *  Depth-first search
+     */
+    DFS
+}",Nit: Missing blank line after this one.,2019-03-29 08:09:28
877,"@@ -12,6 +12,8 @@ internal external object QUnit {
     fun module(name: String, suiteFn: () -> Unit): Unit
     fun test(name: String, testFn: (dynamic) -> Any?): Unit
     fun skip(name: String, testFn: (dynamic) -> Any?): Unit
+    fun beforeEach(name: String, beforeFn: () -> Any?): Unit
+    fun afterEach(name: String, afterFn: () -> Any?): Unit","Couldn't find this API neither in the docs, nor in npm qunit package version 2.9.3.
i.e. `require('qunit').beforeEach` => `undefined`

The closest I could find are hooks: https://api.qunitjs.com/QUnit/module
Those could be utilized, but this is not a correct way to do that.",2019-10-31 08:20:05
85,"@@ -12,7 +12,7 @@ public fun <T> Enumeration<T>.iterator(): Iterator<T> = object : Iterator<T> {
 }
 
 /**
- * Returns the given iterator itself. This allows to use an instance of iterator in a ranged for-loop
+ * Returns the given iterator itself. This allows to use an instance of iterator in a ranged for-loop.","""ranged for-loop"" -> ""`for` loop""
",2015-02-09 16:00:05
637,"@@ -120,6 +120,7 @@ class DeclarationStubGenerator(
                     constantValueGenerator.generateConstantValueAsExpression(UNDEFINED_OFFSET, UNDEFINED_OFFSET, it)
                 )
             }
+            parent = generateParentStub(descriptor)",Seems like it overrides parent for deserialised IrField as well.,2019-04-09 18:42:52
881,"@@ -120,6 +121,14 @@ class SingleAbstractMethodLowering(val context: CommonBackendContext) : FileLowe
                     }
                     +irIfNull(superType, irGet(invokableVariable), irNull(), instance)
                 }
+            } else if (invokable !is IrGetValue) {
+                // Hack for the JVM inliner: since the SAM wrappers might be regenerated, avoid putting complex logic",Please mention KT-21781 here ,2019-11-06 13:07:27
37,"@@ -120,6 +129,39 @@ fun JetElement.wrapInBlock(): JetBlockExpression {
     block.appendElement(this)
     return block
 }
+
+fun JetExpressionImpl.findBlockInExpression(element: JetExpressionImpl,  expressionType: String?): JetBlockExpression? {","Why are this and the following functions extensions, but you don't use `this` in them and require call sites to pass same value twice?
",2014-03-04 16:01:55
305,"@@ -120,7 +103,6 @@ From this root project there are Run/Debug Configurations for running IDEA or th
 * VCS -> Git -> Pull
 * Run IntelliJ IDEA","it's unclear that it is ""IDEA"" run configuration",2017-09-20 16:40:24
486,"@@ -123,6 +123,7 @@ class ReplaceCallWithBinaryOperatorInspection : AbstractApplicabilityBasedInspec
         return when (identifier) {
             OperatorNameConventions.EQUALS -> {
                 if (!dotQualified.isAnyEquals()) return null
+                if (dotQualified.isFloatingPointNumberEquals()) return null","Here we should not just drop a suggestion. It should be kept, but its highlight type should be changed to `INFORMATION`, and its fix text changed to `Replace total order equality with IEEE 754 equality`.",2018-08-27 10:17:10
223,"@@ -124,21 +128,71 @@ class ConvertTwoComparisonsToRangeCheckIntention : SelfTargetingOffsetIndependen
         // To avoid possible side effects
         if (!min.isSimple() || !max.isSimple()) return null
 
+        val valContext = value.analyze()",You don't need to call `analyze()` multiple times; calling it once will return a `BindingContext` with information about all the expressions.,2017-05-08 13:06:34
762,"@@ -124,6 +124,7 @@ private val jvmFilePhases =
 
         enumWhenPhase then
         singletonReferencesPhase then
+        callableReferencePhase then","Since this changes the order of the phases, are there new requirements on the order that should be explicitly declared somewhere?",2019-07-24 08:58:47
854,"@@ -125,6 +133,52 @@ class DefaultArgumentsConversion(context: NewJ2kConverterContext) : RecursiveApp
 
     }
 
+    private fun JKExpression.addThisReceiverIfNeeded(","Also, please use `applyRecursive` for creating recursive conversions as it will not unnecessary recreate tree elements ",2019-10-11 11:28:29
939,"@@ -125,9 +125,6 @@ class EnumClassConstructorTransformer(val context: CommonBackendContext, private
     private val loweredEnumConstructors = HashMap<IrConstructorSymbol, IrConstructor>()
 
     fun transform(): List<IrDeclaration> {
-        // Make sure InstanceInitializer exists",@skuzmich Please take a look for js/lower/EnumClassLowering.kt  changes,2020-01-10 07:46:09
740,"@@ -126,6 +131,12 @@ fun IrFunctionBuilder.buildConstructor(): IrConstructor {
     }
 }
 
+inline fun buildFunWithDescriptor(originalDescriptor: FunctionDescriptor, b: IrFunctionBuilder.() -> Unit): IrFunctionImpl =",Please rename 'b' to something meaningful: builder?,2019-06-27 07:17:28
865,"@@ -127,7 +127,9 @@ open class ClassCodegen protected constructor(
             val shortName = File(fileEntry.name).name
             visitor.visitSource(shortName, null)
         }
-
+        if (irClass in context.suspendFunctionContinuations.values) {",This is a left-over from a previous hack. It can be removed.,2019-10-21 10:58:36
922,"@@ -12710,6 +12865,8 @@ public inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) ->
 
 /**
  * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.
+ * 
+ * @sample samples.collections.Collections.Aggregates.reduceRightOrNull","This sample is for `reduceRightOrNull` and doesn't relate to `reduceRight`. Perhaps it was misplaced?

Note that the samples for `reduceRight` have been already submitted in the PR #2867.",2019-12-24 22:37:48
405,"@@ -128,6 +128,8 @@ extra[""versions.jsr305""] = ""1.3.9""
 extra[""versions.jansi""] = ""1.16""
 extra[""versions.jline""] = ""3.3.1""
 extra[""versions.junit""] = ""4.12""
+extra[""versions.junit5""] = ""5.2.0""
+extra[""versions.junit-platform""] = ""1.2.0""","Here we specify the versions that will be used throughout the entire project,  e.g. in case if Kotlin project would be using JUnit 5 to run its own tests. That version should not necessary be the same as the version against which kotlin-test-junit5 is being built.",2018-05-11 04:11:27
492,"@@ -129,19 +126,22 @@ class MovePropertyToConstructorIntention :
         return parameterDescriptor.source.getPsi() as? KtParameter
     }
 
-    private fun KtAnnotationEntry.isApplicableToConstructorParameter(): Boolean {
-        val context = analyze(BodyResolveMode.PARTIAL)
-        val descriptor = context[BindingContext.ANNOTATION, this] ?: return false
+    private fun KtAnnotationEntry.getTextWithUseSite(context: BindingContext): String {","The priority of annotation without use-site application is value parameter (the highest), property, field (the lowest) for constructor parameter property. For regular property it is property (the highest), field (the lowest). So, if some annotation is not applicable to value parameter (VALUE_PARAMETER target is not included), then we should not add use-site while moving to constructor because it will be redundant (priority queue will be the same). And only in case VALUE_PARAMETER target is included we should do all this checks you have done here. ",2018-08-29 13:25:38
315,"@@ -129,19 +129,16 @@ public fun File.forEachBlock(action: (buffer: ByteArray, bytesRead: Int) -> Unit
  */
 public fun File.forEachBlock(blockSize: Int, action: (buffer: ByteArray, bytesRead: Int) -> Unit): Unit {
     val arr = ByteArray(blockSize.coerceAtLeast(MINIMUM_BLOCK_SIZE))
-    val fis = FileInputStream(this)
 
-    try {
+    inputStream().use {
         do {
-            val size = fis.read(arr)
+            val size = it.read(arr)","Better to add a more descriptive name instead of `it`, as it is inside a multiline lambda, for example `stream` or `input`.",2017-10-28 20:49:11
767,"@@ -13,3 +13,4 @@ fun foo(f: () -> Unit) {
 }
 
 // 2 6 9 12 13 3 4 7 8
+// IGNORE_BACKEND: JVM_IR","Could you look into this test too: it's fails on Windows: https://teamcity.jetbrains.com/comparisonFailureDiffView.html?buildId=2450360&testId=453380
Maybe additional empty line is required to separate numbers from ignore directive",2019-07-30 11:11:32
83,"@@ -13,8 +13,8 @@ private enum class State {
 }
 
 /**
- * A base class to simplify implementing iterators so that implementations only have to implement [[computeNext()]]
- * to implement the iterator, calling [[done()]] when the iteration is complete.
+ * A base class to simplify implementing iterators so that implementations only have to implement [computeNext]","Warning, using this class has performance penalty compared to plain raw implementation per case, measured with JMH when operation per element is relatively cheap.
",2015-02-09 15:56:52
694,"@@ -130,31 +127,11 @@ private class BodyTransformer(
             +irSetVar(parameterToVariable[parameter]!!.symbol, argument)
         }
 
+        // Unspecified arguments do not exist; Calls to, e.g. foo, are replaced with foo$default.","This piece of code is totally unclear: foo$default always calls foo function
With tailrec optimization foo$default call from foo should be avoided",2019-05-20 09:32:42
511,"@@ -130,6 +130,7 @@ private fun KtQualifiedExpression.collectCallExpression(context: BindingContext)
         .dropWhile { !it.isTransformationOrTermination(context) }
         .takeWhile { it.isTransformationOrTermination(context) && !it.hasReturn() }
         .toList()
+        .dropLastWhile { it.calleeExpression?.text == ""groupingBy"" }","Why you did not want just to remove `groupingBy` from termination list, is there some reason I do not see?",2018-10-05 11:33:56
416,"@@ -1314,4 +1314,19 @@ ${""    ""}
         assertEquals(""  ABC\n   \n  123"", ""ABC\n   \n123"".prependIndent(""  ""))
         assertEquals(""  "", """".prependIndent(""  ""))
     }
+
+    @Test fun charArrayToStringFullSlice() {
+        val chars: CharArray = charArrayOf().plus(""Kotlin"".toList())",I wonder if it was tested on strings with non-ASCII characters and surrogate pairs,2018-05-24 10:55:33
20,"@@ -132,7 +132,10 @@ map.platform.class.to.kotlin=Change all usages of ''{0}'' in this file to ''{1}'
 map.platform.class.to.kotlin.multiple=Change all usages of ''{0}'' in this file to a Kotlin class
 map.platform.class.to.kotlin.advertisement=Choose an appropriate Kotlin class
 map.platform.class.to.kotlin.family=Change to Kotlin class
-
+create.from.usage.family=Create from usage
+create.method.from.usage=Create method ''{0}'' from usage","In Kotlin, we call them functions, not methods. Please, rename it here and in other code.
",2013-04-26 11:10:47
143,"@@ -132,8 +132,13 @@ class AndroidGradleWrapper {
               && variantData.scope.getRenderscriptCompileTask() != null) {
         result.add(variantData.scope.getRenderscriptSourceOutputDir());
       }
+    }
 
-      return result
+    def getExtraSourcesMethod = variantData.getMetaClass().getMetaMethod(""getExtraGeneratedSourceFolders"")
+    if (getExtraSourcesMethod.returnType.metaClass == List.metaClass) {
+      result.addAll(variantData.getExtraGeneratedSourceFolders())","variantData.getExtraGeneratedSourceFolders() is Nullable, so you should check for null, before calling addAll
",2016-02-12 08:47:33
449,"@@ -134,10 +135,24 @@ class ExpressionCodegen(
                 mv.areturn(returnType)
             }
         }
-        writeLocalVariablesInTable(info)
+        val endLabel = writeLocalVariablesInTable(info)
+        createLocalVariablesForParameters(startLabel, endLabel)",It would be cleaner to create new label here,2018-08-02 06:57:46
786,"@@ -134,7 +134,8 @@ open class KotlinCocoapodsPlugin: Plugin<Project> {
 
         if (requestedTargetName == KOTLIN_TARGET_FOR_DEVICE) {
             // We create a fat framework only for device platforms: iosArm64 and iosArm32.
-            val devicePlatforms = listOf(KonanTarget.IOS_ARM64, KonanTarget.IOS_ARM32)
+            val devicePlatforms = listOf(KonanTarget.IOS_ARM64, KonanTarget.IOS_ARM32,",The comment above also needs to be updated.,2019-08-23 09:59:38
245,"@@ -135,4 +136,23 @@ public static KotlinSingleIntentionActionFactory createFactory() {
             }
         };
     }
+
+    public static KotlinSingleIntentionActionFactory createLateInitFactory() {","Please convert this file to Kotlin if you're adding substantial new code to it. (Rename to .kt, commit, then rename back to .java, run J2K, make any changes needed for the project to compile, commit again, then make your changes.)",2017-07-24 12:48:44
328,"@@ -1354,6 +1370,72 @@ public IElementType parseProperty(PropertyParsingMode mode) {
         return multiDeclaration ? DESTRUCTURING_DECLARATION : PROPERTY;
     }
 
+    //public void parseProperty(PropertyParsingMode mode) {",Avoid such commented blocks. There is nothing good in having them in code,2017-11-30 12:51:40
216,"@@ -137,6 +137,16 @@
     )
     public String[] scriptResolverEnvironment;
 
+    // Javac options
+    @Argument(value = ""-Xuse-javac"", description = ""Use Javac analysis"")","Consider something like `""Use javac for analysis of Java source and class files""`",2017-04-25 08:01:54
313,"@@ -137,8 +137,8 @@ public inline fun String.Companion.format(format: String, vararg args: Any?): St
 public inline fun String.format(locale: Locale, vararg args : Any?) : String = java.lang.String.format(locale, this, *args)
 
 /**
- * Uses this string as a format string and returns a string obtained by substituting the specified arguments,
- * using the default locale.
+ * Uses this string as a format string and returns a string obtained by substituting the specified arguments, using","I've spotted another copy-paste related issue: it uses not this string, but the provided [format] string.
Could you improve these two overloads' docs as well?",2017-10-26 19:01:30
718,"@@ -138,7 +153,7 @@ internal class ProgressionLoopHeader(
 
     override fun buildLoop(builder: DeclarationIrBuilder, oldLoop: IrLoop, newBody: IrExpression?): LoopReplacement {
         with(builder) {
-            var (newLoop, replacementExpression) = if (headerInfo.canOverflow) {
+            return if (headerInfo.canOverflow) {","Nit, but could you use an expression body here?",2019-06-06 08:16:24
97,"@@ -139,29 +140,34 @@ public fun File.readLines(charset: Charset = Charsets.UTF_8): List<String> {
     return result
 }
 
-/** Creates a buffered reader, or returns self if Reader is already buffered */
+/** Creates a buffered reader wrapping this Reader, or returns self if Reader is already buffered */","self -> this Reader
",2015-02-11 08:40:01
282,"@@ -139,6 +140,9 @@ class DefaultExpressionConverter : JavaElementVisitor(), ExpressionConverter {
                 }
             }
             result = BinaryExpression(leftConverted, rightConverted, operator.assignPrototype(expression.operationSign))
+            if (!expression.isInSingleLine()) {","Will be 
```
String a = b + 
           c;
```
parenthesized then? 
Please add such test anyway. ",2017-08-18 13:22:42
331,"@@ -139,9 +139,21 @@ class KotlinConstructorUMethod(
                 initializers.forEach {",`initializers` should be here only for primary constructors,2017-12-01 21:28:18
794,"@@ -14,11 +14,19 @@ enum class Family(val exeSuffix:String, val dynamicPrefix: String, val dynamicSu
                   val staticPrefix: String, val staticSuffix: String) {
     OSX     (""kexe"", ""lib"", ""dylib"", ""lib"", ""a""),
     IOS     (""kexe"", ""lib"", ""dylib"", ""lib"", ""a""),
+    TVOS     (""kexe"", ""lib"", ""dylib"", ""lib"", ""a""),",Better align like others.,2019-09-03 11:46:47
290,"@@ -14,6 +14,9 @@
         <extensionPoint name=""syntheticResolveExtension""
                         interface=""org.jetbrains.kotlin.resolve.extensions.SyntheticResolveExtension""
                         area=""IDEA_PROJECT""/>
+        <extensionPoint name=""jsSyntheticTranslateExtension""",I think it can be moved to `kotlin2js.xml`,2017-08-30 13:04:43
233,"@@ -14,7 +14,7 @@ fun elements(): List<GenericFunction> {
         doc { f -> ""Returns `true` if [element] is found in the ${f.collection}."" }
         typeParam(""@kotlin.internal.OnlyInputTypes T"")
         returns(""Boolean"")
-        body(Iterables) { f ->
+        body(Iterables) {","Please extract unrelated changes, such as formatting improvement in a separate PR.",2017-07-03 18:20:49
374,"@@ -14,7 +14,8 @@ buildscript {
     val repos = listOfNotNull(
             bootstrapKotlinRepo,
             ""https://jcenter.bintray.com/"",
-            ""https://plugins.gradle.org/m2"")
+            ""https://plugins.gradle.org/m2"",
+            ""https://oss.sonatype.org/content/repositories/snapshots"")","Please, add the snapshots repo directly to the `kotlin-script-util` build script. I think we don't want (yet) to add it to all projects.",2018-03-01 12:29:19
516,"@@ -140,6 +142,7 @@ class CommentSaver(originalElements: PsiChildRange, private val saveLineBreaks:
     private val lineBreaksToRestore = ArrayList<LineBreakTreeElement>()
     private var toNewPsiElementMap by Delegates.notNull<MutableMap<TreeElement, MutableCollection<PsiElement>>>()
     private var needAdjustIndentAfterRestore = false
+    private var isSingleExpressionWithCommentBeneath = false","Please convert it to a parameter of `restore`, with default value. Don't introduce additional class state when it's not required",2018-10-23 09:40:20
244,"@@ -141,13 +141,28 @@ public static void checkAnnotationType(
         }
     }
 
+    @Nullable
+    private static <T extends PsiElement> T findAncestorOfType(@NotNull PsiElement element, Class<T> ancestorType) {","There is already `getParentOfType`, please use it here",2017-07-18 11:47:13
489,"@@ -141,6 +139,28 @@ class ExpressionCodegen(
         mv.visitEnd()
     }
 
+    private fun markFunctionLineNumber() {
+        if (irFunction.origin == JvmLoweredDeclarationOrigin.CLASS_STATIC_INITIALIZER) {
+            return
+        }
+        if (irFunction is IrConstructor && irFunction.isPrimary) {","This method called after function body generation (irFunction.body!!.accept(this, info)). Should we use  markLineNumber(startOffset = FALSE)?",2018-08-28 08:56:42
708,"@@ -141,7 +139,7 @@ private class ToArrayLowering(private val context: JvmBackendContext) : ClassLow
                 toArrayName,
                 Visibilities.PUBLIC,
                 Modality.OPEN,
-                returnType = irBuiltIns.arrayClass.typeWith(irBuiltIns.anyType),
+                returnType = irBuiltIns.arrayClass.typeWith(irBuiltIns.anyNType),",Could we extract nullability information from collection type?,2019-05-24 09:37:01
67,"@@ -141,7 +185,63 @@ public open class KotlinCompile(): AbstractCompile() {
     }
 }
 
-public open class KDoc(): SourceTask() {
+public open class Kotlin2JsCompile() : AbstractKotlinCompile<K2JSCompilerArguments>() {
+    override val compiler = K2JSCompiler()
+
+    override fun createBlankArgs(): K2JSCompilerArguments = K2JSCompilerArguments()
+
+    public fun addLibraryFiles(vararg fs: String) {","I think we should extract all libraries from dependencies instead.
",2014-11-12 13:22:09
587,"@@ -142,7 +144,7 @@ fun compile(
 
     val deserializedModuleFragments = sortedImmediateDependencies.map {
         val moduleFile = File(it.klibPath, moduleHeaderFileName)
-        deserializer.deserializeIrModuleHeader(depsDescriptors.getModuleDescriptor(it), moduleFile.readBytes(), File(it.klibPath), DeserializationStrategy.ONLY_REFERENCED)
+        deserializer.DeserializeIrModuleHeader(depsDescriptors.getModuleDescriptor(it))",deserializer.~D~deserializeIrModuleHeader,2019-03-21 16:20:08
88,"@@ -142,7 +176,7 @@ public inline fun <K, V, R, C : MutableMap<R, V>> Map<K, V>.mapKeysTo(destinatio
 }
 
 /**
- * Puts all the entries into this [[MutableMap]] with the first value in the pair being the key and the second the value
+ * Puts all the entries into this [MutableMap] with the first value in the pair being the key and the second the value","""Puts given values"", and again value vs component for Pair.
",2015-02-09 16:06:41
582,"@@ -143,6 +143,9 @@ public IntrinsicMethods(JvmTarget jvmTarget, boolean shouldThrowNpeOnExplicitEqu
         declareIntrinsicFunction(FQ_NAMES.string, ""plus"", 1, new Concat());
         declareIntrinsicFunction(FQ_NAMES.string, ""get"", 1, new StringGetChar());
 
+        intrinsicsMap.registerIntrinsic(TEXT_PACKAGE_FQ_NAME, FQ_NAMES.string, ""trimMargin"", 1, new TrimMargin());","We've discussed internally the idea to apply the intrinsic unconditionally and figured that it might lead to compatibility problems in case we decide to change the behavior of `trimMargin`/`trimIndent` on some corner case in a future release. It seems that these kinds of problems will only arise if the compiler of version X is compiling code against standard library of version Y where Y > X: the user expects behavior of version Y at runtime, but will actually observe behavior of version X because that's what was executed in the compiler at compilation time.

Therefore we'd like to restrict these intrinsics to be applicable only if the version of the standard library in dependencies is _not greater_ than the version of the compiler itself. This can be achieved by checking if the API version (can be obtained via `languageVersionSettings.apiVersion` at the call site) is <= than the version of the standard library in the runtime of the compiler (can be obtained via `KotlinVersion.CURRENT`). (Sorry if this sounds confusing, I can do it myself if it's unclear, just wanted to notify you that we'd like it to work that way -- maybe you have some other related concerns.)",2019-03-14 22:06:41
0,"@@ -145,10 +145,22 @@ private static JetElement overrideFunction(Project project, JetFile file, Simple
         StringBuilder bodyBuilder = new StringBuilder(""override fun "");
         bodyBuilder.append(descriptor.getName());
         bodyBuilder.append(""("");
+        boolean isAbstractFun = descriptor.getModality() == Modality.ABSTRACT;
+        StringBuilder delegationBuilder = new StringBuilder();","It's not very critical now, but I think that your decision to barter flat and simple structure of this method to one more iteration over parameters collection was a bad deal. Now it's really difficult to understand the logic of filling StringBuilder variables.
",2012-04-03 12:21:38
529,"@@ -146,4 +146,4 @@ public enum class InvocationKind {
 @InlineOnly
 @SinceKotlin(""1.3"")
 @Suppress(""UNUSED_PARAMETER"")
-public inline fun contract(builder: ContractBuilder.() -> Unit) { }",Please revert unrelated line ending change,2018-11-14 11:33:09
736,"@@ -146,6 +145,7 @@ val jvmPhases = namedIrFilePhase<JvmBackendContext>(
             collectionStubMethodLowering then
             bridgePhase then
             jvmOverloadsAnnotationPhase then
+            jvmDefaultConstructorPhase then",Please add 'jvmOverloadsAnnotationPhase' prerequisite for jvmDefaultConstructorPhase phase,2019-06-24 10:45:56
542,"@@ -147,20 +148,33 @@ class OperatorExpressionGenerator(statementGenerator: StatementGenerator) : Stat
         }
     }
 
+    private fun IrStatementsBuilder<*>.generateIrIfNull(","I'm unsure if this has consequences for non-jvm backends? On the JVM, introducing a temporary for constants makes little sense as the constant can just be reloaded. Is that a reasonable assumption for the other backends as well?",2019-01-21 12:46:52
485,"@@ -148,4 +149,19 @@ class ReplaceCallWithBinaryOperatorInspection : AbstractApplicabilityBasedInspec
             else -> OperatorConventions.BINARY_OPERATION_NAMES.inverse()[identifier]
         }
     }
+
+    private fun KtDotQualifiedExpression.isFloatingPointNumberEquals(): Boolean {","This implementation is very strange. You focus here on a given example, but there are some simpler cases which probably will not be detected by this implementation correctly. I'd suggest you should find (via `resolveToCall()`) type of `equals` receiver and type of `equals` argument, and in case at least one of them is FP type (`Float` or `Double`) and another of them is numeric type (FP or `Byte`, `Short`, `Int`, `Long`), the function should return `true`, otherwise `false`.",2018-08-27 10:06:33
298,"@@ -148,6 +148,10 @@ You can now run the various Run/Debug Configurations such as
 * All Compiler Tests
 * All IDEA Plugin Tests
 
+### Running specific generated tests
+
+If you need to debug a specific generated test ensure that you have the `Working directory` your IntellJ run configuration set","> generated test ensure that

* generated test`,` ensure that

> you have the \`Working directory\` your IntellJ

* you have the \`Working directory\` `in` your Intell`i`J

> If you don't every test

If you don't`,` every test",2017-09-16 11:49:08
300,"@@ -148,6 +148,10 @@ You can now run the various Run/Debug Configurations such as
 * All Compiler Tests
 * All IDEA Plugin Tests
 
+### Running specific generated tests
+
+If you need to debug a specific generated test ensure that you have the `Working directory` your IntellJ run configuration set
+to the root directory of this project. If you don't every test you try to run will fail with a `No such file or directory` exception.","Basically change the test run config from `$MODULE_DIR$` to `$PROJECT_DIR$`, right?
Could we maybe fix that, instead of explaining, i.e. by setting the `JUnit default run config` to it?",2017-09-16 12:08:03
444,"@@ -148,7 +148,7 @@ abstract class AbstractKotlinCompile<T : CommonCompilerArguments>() : AbstractKo
     protected val additionalClasspath = arrayListOf<File>()
 
     @get:Internal // classpath already participates in the checks
-    protected val compileClasspath: Iterable<File>","We'd like to keep the visibility of this `val` restricted, maybe use `internal` if it is not needed outside the module.",2018-07-26 10:29:10
333,"@@ -149,6 +249,10 @@ open class KotlinUField(
 
     override val psi = javaPsi
 
+    override fun acceptsAnnotationTarget(target: AnnotationUseSiteTarget?): Boolean =
+            target == AnnotationUseSiteTarget.FIELD ||
+            (sourcePsi is KtProperty) && (target == null || target == AnnotationUseSiteTarget.PROPERTY)",The `@delegate:` target also maps to fields.,2017-12-11 14:30:45
741,"@@ -149,7 +150,7 @@ class MemoizedInlineClassReplacements {
     }
 
     private fun buildReplacement(function: IrFunction, body: IrFunctionImpl.() -> Unit) =
-        buildFun {
+        buildFunWithDescriptor(function.descriptor) {",Could you clarify why descriptor is reuqired here?,2019-06-27 07:20:44
753,"@@ -15,3 +17,20 @@ public static void runTest(doGenerateParamAssertions a) {
         throw new AssertionError(""Fail: IllegalArgumentException expected"");
     }
 }
+
+// FILE: B.kt
+import test.doGenerateParamAssertions as C","Would be nice to rename the class itself now that it's possible. Previously the Java class was named this way because its file was compiled directly by javac, but box tests copy everything to tmpdir with new names, so we can use the short name for convenience",2019-07-04 10:05:14
202,"@@ -15,6 +15,7 @@ public abstract class Mine</*0*/ T> : java.util.AbstractList<T> {
     public open /*fake_override*/ fun clear(): kotlin.Unit
     public open /*fake_override*/ fun contains(/*0*/ T!): kotlin.Boolean
     public open /*fake_override*/ fun containsAll(/*0*/ kotlin.collections.Collection<T!>): kotlin.Boolean
+    public open /*fake_override*/ fun forEach(/*0*/ java.util.function.Consumer<in T!>!): kotlin.Unit","You'd better not to change existing tests, but to create a new test group with the same test data and your flag enabled.",2017-04-05 15:27:24
855,"@@ -151,15 +156,19 @@ abstract class AbstractWriteSignatureTest : CodegenTestCase() {
         }
 
         fun addClassExpectation(name: String, jvmSignature: String?, genericSignature: String) {
-            classExpectations.add(SignatureExpectation(""class: $name"", name, jvmSignature, genericSignature))
+            classExpectations.add(SignatureExpectation(true,""class: $name"", name, jvmSignature, genericSignature))",Please reformat here and below,2019-10-16 15:11:26
89,"@@ -151,7 +185,7 @@ public fun <K, V> MutableMap<K, V>.putAll(vararg values: Pair<K, V>): Unit {
 }
 
 /**
- * Puts all the entries into this [[MutableMap]] with the first value in the pair being the key and the second the value
+ * Puts all the entries into this [MutableMap] with the first value in the pair being the key and the second the value","""Puts elements of the given collection""
",2015-02-09 16:07:10
835,"@@ -152,23 +147,14 @@ class IrExpressionLambdaImpl(
     }
 
     companion object {
-        private var counter: Int = 123//TODO: pass proper type
+        private var counter: Int = 1//TODO: pass proper type
     }
 
-    override val lambdaClassType: Type = Type.getObjectType(""test${counter++}"")
+    override val lambdaClassType: Type = Type.getObjectType(""$typePrefix\$lambda-${counter++}"")",Maybe best to use precalculated old name ```codegen.context.getLocalClassInfo(reference)```,2019-10-02 13:16:00
159,"@@ -1520,6 +1520,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.UnnecessaryJavaUsageInspection""
+                     displayName=""Unnecessary java usage""","This is no more clear than the same text in the inspection description, and also needs to be changed.
",2016-05-19 14:49:43
158,"@@ -1520,6 +1520,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.UnnecessaryJavaUsageInspection""
+                     displayName=""Unnecessary java usage""
+                     groupName=""Kotlin""
+                     enabledByDefault=""true""
+                     cleanupTool=""true""
+                     level=""WARNING""","This should be a WEAK_WARNING at most. There's nothing wrong with the original code - it's simply not as concise as it could be.
",2016-05-18 13:23:26
638,"@@ -153,7 +153,7 @@ private class EnumClassLowering(val context: JvmBackendContext) : ClassLoweringP
                     }
                 })
 
-                body = enumConstructor.body // will be transformed later
+                body = enumConstructor.body?.patchDeclarationParents(this)",Is this really needed? If so I think there is another issue with lost parent,2019-04-09 19:07:23
846,"@@ -153,7 +154,13 @@ class IrSourceCompilerForInline(
         get() = callElement.descriptor as FunctionDescriptor
 
     override fun getContextLabels(): Set<String> {
-        return setOf(codegen.irFunction.name.asString())
+        val name = codegen.irFunction.name.asString()
+        if (name == INVOKE_SUSPEND_METHOD_NAME) {",Should this check for invoke as well as invokeSuspend? ,2019-10-07 10:17:00
834,"@@ -155,7 +155,7 @@ internal abstract class KDeclarationContainerImpl : ClassBasedDeclarationContain
 
         if (functions.size != 1) {
             val allMembers = members.joinToString(""\n"") { descriptor ->
-                DescriptorRenderer.DEBUG_TEXT.render(descriptor) + "" | "" + RuntimeTypeMapper.mapSignature(descriptor)
+                DescriptorRenderer.DEBUG_TEXT.render(descriptor) + "" | "" + RuntimeTypeMapper.mapSignature(descriptor).asString()",Thanks for fixing this. Please also fix the similar code above where `RuntimeTypeMapper.mapPropertySignature` is invoked,2019-10-02 12:41:41
732,"@@ -155,7 +161,31 @@ class KotlinAddImportAction internal constructor(
             return true
         }
 
-        JBPopupFactory.getInstance().createListPopup(getVariantSelectionPopup()).showInBestPositionFor(editor)
+        val popup = object : ListPopupImpl(getVariantSelectionPopup()) {
+            @Suppress(""UNCHECKED_CAST"")",Thoughts on how to avoid this?,2019-06-19 20:10:08
372,"@@ -1554,6 +1554,11 @@
       <category>Kotlin</category>
     </intentionAction>
 
+    <intentionAction>","Really inspection is enough here. Since IDEA 2016.3, we have `INFORMATION` level for inspection (= No highlighting, only fix), so separate intentions are not necessary in this situation.",2018-02-28 09:00:17
813,"@@ -157,7 +157,7 @@ inline fun buildFun(builder: IrFunctionBuilder.() -> Unit): IrFunctionImpl =
         buildFun()
     }
 
-inline fun IrDeclarationContainer.addFunction(builder: IrFunctionBuilder.() -> Unit): IrSimpleFunction =
+inline fun IrDeclarationContainer.addFunction(builder: IrFunctionBuilder.() -> Unit): IrFunctionImpl =",Is this change is neccessery for pr?,2019-09-24 08:24:57
825,"@@ -158,11 +193,7 @@ private fun ModuleInfo.findNativeStdlib(project: Project): NativeLibraryInfo? =
 
 class NativeLibraryInfo(project: Project, library: Library, root: File) : LibraryInfo(project, library) {
 
-    private val nativeLibrary = createKonanLibrary(
-        root,
-        KOTLIN_NATIVE_CURRENT_ABI_VERSION,
-        metadataReader = CachingIdeMetadataReaderImpl
-    )
+    private val nativeLibrary = createKotlinLibrary(root)",But here `CachingIdeKonanLibraryMetadataLoader` must be present in order to cache contents of any KLIB loaded in IDE.,2019-10-01 04:18:41
729,"@@ -158,6 +146,12 @@ internal class CallableReferenceLowering(val context: JvmBackendContext) : FileL
         })
     }
 
+    private val arrayGetFun =",@pyos Please make these declaration lazy: this will allow to avoid overhead with loading lazy data from IrLazyClass  when it is not necessery.,2019-06-14 05:53:27
114,"@@ -158,6 +157,7 @@ protected void blackBox() {
             Method method = aClass.getMethod(""box"");
             String r = (String) method.invoke(null);
             assertEquals(""OK"", r);
+            System.out.println(generateToText());","I beleive this was commited erroneously.
",2015-03-26 15:35:44
711,"@@ -158,6 +162,23 @@ class IrExpressionLambdaImpl(
     override val invokeMethodDescriptor: FunctionDescriptor = function.descriptor
 
     override val hasDispatchReceiver: Boolean = false
+
+    override fun generateLambdaBody(sourceCompiler: SourceCompilerForInline, reifiedTypeInliner: ReifiedTypeInliner) {
+        require(sourceCompiler is IrSourceCompilerForInline)
+        lateinit var methodNode: MethodNode",Is it possible to move this logic and related one from ExpressionLambda to sourceCompiler? Seems all adapter related logic could be shared there,2019-05-27 05:51:16
402,"@@ -1592,6 +1592,11 @@
       <category>Kotlin</category>
     </intentionAction>
 
+    <intentionAction>
+      <className>org.jetbrains.kotlin.idea.intentions.IndentRawStringIntention</className>
+      <category>Kotlin</category>
+    </intentionAction>
+","For future PRs: we have now ""branch"" files `plugin.xml.172` etc. that also should be modified if you are modifying `plugin.xml`.",2018-05-03 13:26:51
77,"@@ -16,10 +16,25 @@
 
 package kotlin
 
+/**
+ * Represents a sequence of numbers or characters with a given start value, end value and step.
+ * This class is intended to be used in 'for' loops, and the JVM backend suggests efficient
+ * bytecode generation for it. Progressions with a step of -1 can be created through the
+ * `downTo` method on classes representing primitive types.","Link to `downTo` method.
",2015-02-09 15:42:22
69,"@@ -16,10 +16,25 @@
 
 package kotlin
 
+/**
+ * The root of the Kotlin class hierarchy. Every Kotlin class has [Any] as a superclass.
+ */
 public open class Any {
+    /**
+     * Indicates whether some other object is ""equal to"" this one. Implementations must follow
+     * the same contract as the [Java equals() method](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals%28java.lang.Object%29).","Referencing Java in such a way doesn't make it look like a standard library for a _language_, which is targeting different platforms. E.g. for JS it may be different contract.
",2015-02-09 15:23:56
74,"@@ -16,10 +16,30 @@
 
 package kotlin
 
+/**
+ * Marks the annotated class as a data class. Data classes have automatically generated","""When processing data class, compiler will generate""...
",2015-02-09 15:39:18
72,"@@ -16,13 +16,31 @@
 
 package kotlin
 
+/**
+ * Returns true if the receiver and the [other] object are the same object instance, or if they
+ * are both null.
+ */
 public fun Any?.identityEquals(other: Any?): Boolean // = this === other
 
+/**
+ * Returns true if the receiver and the [other] object are ""equal"" to each other, or if they are","Link to Any.equals() on ""equal"" would be good, to refer to explanation of equality.
",2015-02-09 15:37:06
248,"@@ -16,18 +16,25 @@
 
 package kotlin.script.templates.standard
 
+// discuss
+//
+// These are some 'basic' script templates
+// Should we keep them here?","I think we should do the following with these:
* `SimpleScriptTemplate` -> remove (script with args can be always used instead of it)
* `kotlin.script.templates.standard.ScriptTemplateWithArgs` -> rename and move to `kotlin.script.templates.StandardScriptTemplate`
* `kotlin.script.templates.standard.ScriptTemplateWithBindings` -> move to `kotlin.script.templates.ScriptTemplateWithBindings`",2017-07-25 10:25:34
70,"@@ -16,26 +16,66 @@
 
 package kotlin
 
+/**
+ * An iterator over a collection. Allows to sequentially access the elements in a collection.","Not necessary ""in a collection"". 
",2015-02-09 15:28:42
100,"@@ -16,40 +16,112 @@
 
 package kotlin
 
+/**
+ * Classes that inherit from this trait can be represented as a sequence of elements that can
+ * be iterated over.
+ */
 public trait Iterable<out T> {","doc for `T`?
",2015-03-02 17:23:35
249,"@@ -16,6 +16,11 @@
 
 package kotlin.script.extensions
 
+// discuss
+
+// Is this an appropriate place to put this class?","This doesn't look like an appropriate place. If I understand correctly, it has nothing to do with scripts, so putting it into package `kotlin.script.extensions` is risky. As soon as we decide to publish it as a supported compiler plugin, we'll have to move it to another package and artifact, causing incompatibilities, so maybe it'd be better to do this earlier.",2017-07-25 11:06:18
75,"@@ -16,8 +16,18 @@
 
 package kotlin
 
+/**
+ * Annotates the parameter of a function annotates as [inline] and forbids inlining of","Typo: ""annotates as [inline]"" -> ""annotated as [inline]""
",2015-02-09 15:40:41
76,"@@ -16,8 +16,18 @@
 
 package kotlin
 
+/**
+ * Annotates the parameter of a function annotates as [inline] and forbids inlining of
+ * function literals passed as arguments for this parameter.
+ */
 public annotation class noinline
 
+/**","Add cross-reference to other annotations, like `noinline`
",2015-02-09 15:41:44
930,"@@ -16,9 +16,11 @@ import org.jetbrains.kotlin.codegen.state.GenerationState
 import org.jetbrains.kotlin.codegen.visitAnnotableParameterCount
 import org.jetbrains.kotlin.config.LanguageFeature
 import org.jetbrains.kotlin.descriptors.Modality
+import org.jetbrains.kotlin.descriptors.Visibilities
 import org.jetbrains.kotlin.ir.declarations.*
 import org.jetbrains.kotlin.ir.expressions.*
 import org.jetbrains.kotlin.ir.util.*
+import org.jetbrains.kotlin.load.java.JavaVisibilities",These imports seem unused,2020-01-07 17:26:42
215,"@@ -161,6 +162,13 @@ object KotlinToJVMBytecodeCompiler {
                 ProgressIndicatorAndCompilationCanceledStatus.checkCanceled()
                 writeOutput(state.configuration, state.factory, null)
             }
+
+            if (chunk.size == 1 && projectConfiguration.getBoolean(JVMConfigurationKeys.USE_JAVAC)) {","If the chunk contains multiple modules and `-Xuse-javac` has been specified, maybe we should report a warning saying that we won't in fact use javac for compilation",2017-04-25 07:54:52
207,"@@ -161,6 +162,14 @@ object KotlinToJVMBytecodeCompiler {
                 ProgressIndicatorAndCompilationCanceledStatus.checkCanceled()
                 writeOutput(state.configuration, state.factory, null)
             }
+
+            if (chunk.size == 1) {
+                val javacWrapper = JavacWrapper.getInstance(environment.project)
+                if (projectConfiguration[JVMConfigurationKeys.USE_JAVAC]!!) {",@baratynskiy Please use `getBoolean(...)` instead of `get(...)!!`,2017-04-12 15:41:33
23,"@@ -162,4 +162,8 @@ change.function.signature.family=Change function signature
 change.function.signature.chooser.title=Choose signature
 change.function.signature.action=Change function signature
 remove.unnecessary.parentheses=Remove unnecessary parentheses
-remove.unnecessary.parentheses.family=Remove Unnecessary Parentheses
\ No newline at end of file
+remove.unnecessary.parentheses.family=Remove Unnecessary Parentheses
+add.function.to.supertype.family=Add Function to Supertype","While I know it's technically not 100% correct and maybe ""Add Function to _Superclassifier_"" would be a more accurate name for this quickfix I still want to stick with the name ""Add Function to Supertype"". In my opinion the user would be confused by using word ""superclassifier"". I can change the name though if you disagree. 
",2013-05-16 07:45:39
978,"@@ -162,6 +169,22 @@ class FirExpressionsResolveTransformer(transformer: FirBodyResolveTransformer) :
         return completeInference.compose()
     }
 
+    // Use the generic invoke method in Function classes, to match bridges generated by the backend.
+    private fun checkIfInvoke(functionCall: FirFunctionCall) : FirFunctionCall {","I'd think frontend shouldn't rewrite declarations in sake of knowledge of backend behavior, so this logic should rather be in fir2ir or even in backend itself",2020-02-03 14:58:52
339,"@@ -163,7 +164,10 @@ object KDocRenderer {
         // Avoid wrapping the entire converted contents in a <p> tag if it's just a single paragraph
         val maybeSingleParagraph = markdownNode.children.singleOrNull { it.type != MarkdownTokenTypes.EOL }
         return if (maybeSingleParagraph != null && !allowSingleParagraph) {
-            maybeSingleParagraph.children.joinToString("""") { it.toHtml() }
+            val lineSeparator = LineSeparator.getSystemLineSeparator().separatorString",Source code in IntelliJ always uses `\n` as a line separator. No need to access the system line separator here.,2018-01-05 10:13:59
867,"@@ -164,6 +165,7 @@ class CodeToInlineBuilder(
             }
 
             if (expression.getReceiverExpression() == null) {
+                val targetCallable = (targetCallable as? FunctionImportedFromObject)?.callableFromObject ?: targetCallable",Should we use `ImportedFromObjectCallableDescriptor<*>` instead?,2019-10-22 09:04:25
743,"@@ -164,7 +164,8 @@ internal class CallableReferenceLowering(val context: JvmBackendContext) : FileL
         val irFunctionReference: IrFunctionReference
     ) {
 
-        private val isLambda = irFunctionReference.origin == IrStatementOrigin.LAMBDA
+        private val isLambda = irFunctionReference.origin == IrStatementOrigin.LAMBDA ||",Please rename to isLambdaOrAnonymousFunction,2019-06-27 07:42:49
750,"@@ -164,7 +165,10 @@ internal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean)
     else
         this.copyOf()
 
-
+@PublishedApi
+@SinceKotlin(""1.3"")","Should this be `""1.4""`, or some other value?",2019-07-03 23:26:36
929,"@@ -165,6 +165,9 @@ fun IrDeclarationWithVisibility.getVisibilityAccessFlag(kind: OwnerKind? = null)
         ?: visibilityToAccessFlag[visibility]
         ?: throw IllegalStateException(""$visibility is not a valid visibility in backend for ${ir2string(this)}"")
 
+fun IrFunction.getVisibilityForDefaultArgumentStub(): Int =","I'd implement it like this, and probably move it to `FunctionCodegen`:
```
when (visibility) {
    Visibilities.PUBLIC -> Opcodes.ACC_PUBLIC
    JavaVisibilities.PACKAGE_VISIBILITY -> AsmUtil.NO_FLAG_PACKAGE_PRIVATE
    else -> error(""Default argument stub should be either public or package private: ${ir2string(this)}"")
}
```",2020-01-07 17:26:18
689,"@@ -167,7 +166,7 @@ class ExpressionCodegen(
                 irFunction.markLineNumber(startOffset = irFunction is IrConstructor && irFunction.isPrimary)
             }
             val returnType = typeMapper.mapReturnType(irFunction)
-            result.coerce(returnType).materialize()
+            result.coerce(returnType, if (irFunction !is IrConstructor) irFunction.returnType else null).materialize()",I'm wondering if the `null` here could be the unit type instead? ,2019-05-16 07:54:09
724,"@@ -168,14 +170,14 @@ abstract class AbstractKotlinCompile<T : CommonCompilerArguments>() : AbstractKo
         get() = (classpath + additionalClasspath)
             .filterTo(LinkedHashSet(), File::exists)
 
-    private val sourceFilesExtensionsSources: MutableList<Iterable<String>> = mutableListOf()
+    private val sourceFilesExtensionsSources = project.objects.listProperty(String::class.java)","`listProperty` is introduced in Gradle `4.3`, but we support all versions starting from `4.1`",2019-06-10 21:17:32
925,"@@ -169,6 +169,28 @@ class Maps {
 
             // map.containsValue(""string"") // cannot call extension when the argument type and the map value type are unrelated at all
         }
+
+        @Sample
+        fun mapIsNotEmpty() {","Perhaps you could think up an example that is closer to a real use case, like [`stringIsEmpty`](https://github.com/JetBrains/kotlin/blob/555d503ff914705209817d326f01d668271957cd/libraries/stdlib/samples/test/samples/text/strings.kt#L287)?",2019-12-26 17:26:37
615,"@@ -17,10 +16,8 @@ fun test() {
 }
 
 // @TestKt.class:
-// 1 NEW TestKt\$test\$1","It's best keep smth like
```
 //1 NEW TestKt\$
``` 
and add ```// 2 NEW```",2019-04-03 11:44:51
616,"@@ -17,10 +16,8 @@ fun test() {
 }
 
 // @TestKt.class:
-// 1 NEW TestKt\$test\$1
 // 1 NEW kotlin/jvm/internal/Ref\$IntRef
 // 2 NEW
-// 1 INVOKESPECIAL TestKt\$test\$1.<init>","@pyos Same here 
```
// 1 INVOKESPECIAL TestKt\$[a-z0-9$]*.<init> 
```",2019-04-03 11:46:45
135,"@@ -17,3 +17,11 @@
 package org.jetbrains.kotlin.cli.common
 
 public val KOTLIN_COMPILER_ENVIRONMENT_KEEPALIVE_PROPERTY = ""kotlin.environment.keepalive""
+
+
+fun String?.toBooleanLenient(): Boolean? = when (this?.toLowerCase()) {","It seems it is possible to simplify conditional expressions by using the following function instead of `toBooleanLenient`

```
fun String.systemPropertyAsBooleanOrTrueOtherwise(negate: Boolean): Boolean {
    val propValue = System.getProperty(this) ?: return true

    return when (propValue.toLowerCase()) {
        in listOf("""", ""yes"", ""true"", ""on"", ""y"") -> !negate
        in listOf(""no"", ""false"", ""off"", ""n"") -> negate
        else -> true
    }
}
```

See comments below.
",2015-11-27 18:20:45
73,"@@ -17,6 +17,7 @@
 package kotlin
 
 /**
- * Nothing has no instances
+ * Nothing has no instances. You can use Nothing as the return type of a function to indicate
+ * that it never returns (always throws an exception).","There are more use-cases for Nothing, e.g. Iterable<Nothing> is ok to exist, but it will never enter ""for"" loop, etc. Needs link to lang docs.
",2015-02-09 15:38:44
859,"@@ -17,8 +16,16 @@ fun test() {
     JFoo.foo2({}, runnable())
 }
 
+// JVM_TEMPLATES
 // @TestKt.class:","Minor:
```
// @TestKt.class
// 2 NEW
``` 
could be extracted in common part",2019-10-18 07:51:10
777,"@@ -17,8 +21,6 @@ fun test(u1: UInt, u2: UInt, us: Array<UInt>) {
 // 2 INVOKESTATIC UInt\.box
 // 0 INVOKEVIRTUAL UInt.unbox
 
-// 2 CHECKCAST \[LUInt","@sfs Please customize test for both backend via:
...TEMPLATES ...

// JVM_TEMPLATES
// 2 CHECKCAST \[LUInt

// JVM_IR_TEMPLATES
// 0 CHECKCAST \[LUInt
// Maybe smth else",2019-08-13 08:33:53
778,"@@ -171,5 +173,11 @@ class PropertyGenerator(declarationGenerator: DeclarationGenerator) : Declaratio
         val variableDescriptor = getOrFail(BindingContext.VARIABLE, ktProperty)
         return variableDescriptor as? PropertyDescriptor ?: TODO(""not a property: $variableDescriptor"")
     }
+
+    private val Visibility.admitsFakeOverride: Boolean
+        get() = this != Visibilities.PRIVATE && this != Visibilities.PRIVATE_TO_THIS && this != Visibilities.INVISIBLE_FAKE",Looks like this can be simplified to `!Visibilities.isPrivate(this)` and inlined because invisible fakes have been filtered out in the first line of `generateFakeOverrideProperty`?,2019-08-13 14:52:17
639,"@@ -172,6 +202,33 @@ abstract class KaptTask : ConventionTask(), TaskWithLocalState {
         }
     }
 
+    private fun findClasspathChanges(changedClasspath: Iterable<File>): KaptClasspathChanges {
+        incAptCache!!.mkdirs()","Minor, style: I find creating a local val with the same or using `lateinit` modifier for property more readable than using `!!` operator multiple times.",2019-04-09 20:50:38
80,"@@ -1730,14 +1730,14 @@ public fun <T> Stream<T>.lastOrNull(): T? {
 }
 
 /**
- * Returns last element, or null if collection is empty
+ * Returns the last character, or null if the string is empty
  */
 public fun String.lastOrNull(): Char? {
     return if (isEmpty()) null else this[length() - 1]
 }
 
 /**
- * Returns last element matching the given *predicate*, or null if element was not found
+ * Returns the last element matching the given [predicate], or *null* if no such element was found.","_null_ -> `null`
",2015-02-09 15:48:49
235,"@@ -175,6 +175,23 @@ class KotlinQuickDocumentationProvider : AbstractDocumentationProvider() {
                 // element is not an KtReferenceExpression, but KtClass of enum
                 return renderEnum(element, originalElement, quickNavigation)
             }
+            else if (element is KtEnumEntry && !quickNavigation) {
+                val desc = element.resolveToDescriptorIfAny()
+                val ordinal =",It's better to calculate ordinal with `val ordinal = element.containingClassOrObject?.run { getChildrenOfType<KtEnumEntry>().indexOf(element) }`,2017-07-06 12:32:45
490,"@@ -175,7 +195,9 @@ class ExpressionCodegen(
 
     override fun visitBlockBody(body: IrBlockBody, data: BlockInfo): StackValue {
         return body.statements.fold(none()) { _, exp ->
-            exp.accept(this, data)
+            val result = exp.accept(this, data)
+            (exp as? IrExpression)?.markEndOfStatementIfNeeded()","```
exp.accept(this, data).also {
       (exp as? IrExpression)?.markEndOfStatementIfNeeded()
}
```",2018-08-28 08:57:45
747,"@@ -175,8 +188,8 @@ internal class ConstraintSystemImpl(
 
     override fun toBuilder(filterConstraintPosition: (ConstraintPosition) -> Boolean): ConstraintSystem.Builder {
         val result = ConstraintSystemBuilderImpl()
-        for ((typeParameter, typeBounds) in allTypeParameterBounds) {
-            result.allTypeParameterBounds.put(typeParameter, typeBounds.filter(filterConstraintPosition))
+        for (typeParameter in allTypeParameterBounds.entries) {","Since `entries` returns a destructurable class, I suppose you can keep the `for ((typeParameter, typeBounds) ...` syntax here",2019-07-01 12:26:17
647,"@@ -176,6 +174,18 @@ class FoldConstantLowering(private val context: JvmBackendContext) : IrElementTr
                     else -> expression
                 }
             }
+
+            override fun visitStringConcatenation(expression: IrStringConcatenation): IrExpression {
+                expression.transformChildrenVoid(this)
+                return if (expression.arguments.all { it is IrConst<*> && it.value is String }) {","@pyos Seems it's possible to support some additional cases when begining of IrStringConcatenation is constant concatenation:
expression.arguments.takeWhile {it is IrConst<*> && it.value is String }  and  ...",2019-04-23 10:34:57
880,"@@ -178,7 +181,7 @@ abstract class AbstractDebugTest : CodegenTestCase() {
         var inBoxMethod = false
         vmLoop@
         while (true) {
-            val eventSet = virtualMachine.eventQueue().remove(1000)
+            val eventSet = virtualMachine.eventQueue().remove(1000) ?: continue",Seems it's equals to remove without timeout,2019-11-06 08:46:36
622,"@@ -1793,6 +1793,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.ConvertToObjectDeclarationInspection""
+                     displayName=""Class containing only a companion object can be converted to object declaration""
+                     groupPath=""Kotlin""
+                     groupName=""Style issues""
+                     enabledByDefault=""true""
+                     level=""INFO""","`INFO` is deprecated, use `WEAK WARNING` instead.",2019-04-05 05:40:36
477,"@@ -1794,7 +1794,7 @@ QUnit.diff = (function() {
 	};
 }());
 
-// for CommonJS enviroments, export everything
+// for CommonJS eenvironments, export everything",This is some strange change,2018-08-14 15:58:44
899,"@@ -18,7 +17,7 @@ interface KInterface2 : KInterface  {
 // +
 // 0 INVOKESTATIC KInterface2.access\$test2\$jd
 // =
-// 1 INVOKESTATIC
+// 1 INVOKESTATIC KInterface",The test was over-specified: the IR backend produces a nullcheck on `this` in `KInterface$DefaultImpls$test2` which is a static method.,2019-11-25 17:46:46
340,"@@ -18,7 +18,6 @@
       </option>
       <option name=""vmOptions"" value="""" />
     </ExternalSystemSettings>
-    <extension name=""coverage"" enabled=""false"" merge=""false"" sample_coverage=""true"" runner=""idea"" />","This change is not related to samples, better to revert
  ",2018-01-09 20:19:25
483,"@@ -18,7 +23,18 @@ class RedundantVisibilityModifierInspection : AbstractKotlinInspection(), Cleanu
     override fun buildVisitor(holder: ProblemsHolder, isOnTheFly: Boolean, session: LocalInspectionToolSession): PsiElementVisitor {
         return declarationVisitor { declaration ->
             val visibilityModifier = declaration.visibilityModifier() ?: return@declarationVisitor
-            val implicitVisibility = declaration.implicitVisibility()
+            val implicitVisibility = when {",I'd say here we should fix `KtDeclaration.implicitVisibility()` itself and not insert some work-arounds just here.,2018-08-27 09:39:03
105,"@@ -18,72 +18,118 @@
 
 package kotlin
 
+/** A function that takes 0 arguments. */
 public trait Function0<out R> {
+    /** Invokes the function with the specified arguments. */","no arguments
",2015-03-12 14:49:28
106,"@@ -18,72 +18,118 @@
 
 package kotlin
 
+/** A function that takes 0 arguments. */
 public trait Function0<out R> {
+    /** Invokes the function with the specified arguments. */
     public fun invoke(): R
 }
+/** A function that takes 1 arguments. */","plural use for 1
",2015-03-12 14:49:50
104,"@@ -18,72 +18,118 @@
 
 package kotlin
 
+/** An extension function that takes 0 arguments. */
 public trait ExtensionFunction0<in T, out R> {
+    /** Invokes the function with the specified arguments. */","There are no arguments, so just ""Invokes the function""
",2015-03-12 14:48:48
103,"@@ -18,72 +18,118 @@
 
 package kotlin
 
+/** An extension function that takes 0 arguments. */
 public trait ExtensionFunction0<in T, out R> {
+    /** Invokes the function with the specified arguments. */
     public fun T.invoke(): R
 }
+/** An extension function that takes 1 arguments. */","""argument"", no ""s""
",2015-03-12 14:48:29
289,"@@ -181,10 +181,15 @@ class ConvertSecondaryConstructorToPrimaryIntention : SelfTargetingRangeIntentio
         with (constructorInClass.replace(constructor)) {
             constructorCommentSaver.restore(this)
         }
-        element.delete()
 
-        if ((initializer.body as? KtBlockExpression)?.statements?.isNotEmpty() ?: false) {
-            klass.addDeclaration(initializer)
+        if ((initializer.body as? KtBlockExpression)?.statements?.isNotEmpty() == true) {",Why not simply add after `element` and then delete `element`?,2017-08-28 10:44:06
826,"@@ -183,6 +214,6 @@ class NativeLibraryInfo(project: Project, library: Library, root: File) : Librar
     override fun toString() = ""Native"" + super.toString()
 
     companion object {
-        val NATIVE_LIBRARY_CAPABILITY = ModuleDescriptor.Capability<KonanLibrary>(""KonanLibrary"")
+        val NATIVE_LIBRARY_CAPABILITY = ModuleDescriptor.Capability<KotlinLibrary>(""KotlinLibrary"")","Maybe keep ""KotlinNativeLibrary"" as the name of capability? ""KotlinLibrary"" can be misunderstood.",2019-10-01 04:19:42
181,"@@ -1839,6 +1844,14 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.intentions.RemoveEmptyClassBodyInspection""
+                     displayName=""Replace empty class body""
+                     groupName=""Kotlin""
+                     enabledByDefault=""true""
+                     level=""WARNING""","There is nothing bad about an empty class body, so this should be severity INFO, not WARNING
",2016-10-10 11:04:46
885,"@@ -184,15 +184,11 @@ private val syntheticAccessorPhase = makeIrFilePhase(
     prerequisite = setOf(objectClassPhase, staticDefaultFunctionPhase, interfacePhase)
 )
 
-private val mainMethodGenerationPhase = makeIrFilePhase(
-    ::MainMethodGenerationLowering,
-    name = ""MainMethodGeneration"",
-    description = ""Identify parameterless main methods and generate bridge main-methods""
-)
-
 @Suppress(""Reformat"")
 private val jvmFilePhases =
+        jvmOverloadsAnnotationPhase then","Can we move `mainMethodGenerationPhase` at the end instead? We would probably like to have a common prefix of lowerings across all backends some day in the future, so it seems useful to minimize the number of platform-specific lowerings in the beginning",2019-11-11 13:11:24
29,"@@ -184,6 +184,22 @@ public inline fun <K> BooleanArray.groupByTo(result: MutableMap<K, MutableList<B
 }
 
 /**
+ * Returns first index of item, or -1 if the array does not contain item
+ */
+public fun BooleanArray.indexOf(item : Boolean) : Int {
+    if (item == null) {","Value of 'Boolean' type cannot be 'null' in Kotlin.
",2013-12-26 20:32:09
166,"@@ -185,6 +169,15 @@ object LightClassUtil {
         return null
     }
 
+    private fun getWrappingClasses(declaration: KtDeclaration): List<PsiClass> {","You can simplify this code by changing the return type to `Sequence<PsiClass>` and using `generateSequence()`
",2016-09-05 17:29:17
815,"@@ -185,7 +185,9 @@ abstract class AbstractKotlinNativeCompile<T : KotlinCommonToolOptions> : Abstra
     protected open fun buildCommonArgs(defaultsOnly: Boolean = false): List<String> = mutableListOf<String>().apply {
         add(""-Xmulti-platform"")
         // Endorsed libs are disabled in plugin.",Comment is no longer actual,2019-09-24 11:55:24
198,"@@ -186,6 +187,14 @@ class K2JVMCompiler : CLICompiler<K2JVMCompilerArguments>() {
                 val environment = createEnvironmentWithScriptingSupport(rootDisposable, configuration, arguments, messageCollector)
                                   ?: return COMPILATION_ERROR
 
+                if (arguments.useJavac) {",Looks like this if / else is better to be moved above (just before environment definition). It's more consistent with previous code.,2017-04-05 11:27:20
951,"@@ -188,3 +190,11 @@ fun createTextForHelpers(isReleaseCoroutines: Boolean, checkStateMachine: Boolea
             |${if (checkTailCallOptimization) checkTailCallOptimizationString else """"}
         """""".trimMargin()
 }
+
+// Add the directive `// WITH_HELPERS` to use these helpers in codegen tests (see CodegenTestCase.java).
+fun createTextForCodegenTestHelpers(backend: TargetBackend) =
+    """"""
+        |package helpers
+        |
+        |fun getTargetBackend() = ""${backend.name}""","Maybe `fun isIR(): Boolean = ""${backend.isIR}""` instead? Seems less error-prone than to compare strings, where you can have a typo...",2020-01-21 15:45:14
633,"@@ -189,6 +208,14 @@ class SourceFileStructure(
     fun addPrivateType(name: String) {
         privateTypes.add(name)
     }
+
+    fun addMentionedConstant(containingClass: String, name: String) {
+        if (!declaredTypes.contains(containingClass)) {
+            val names = mentionedConstants[containingClass] ?: HashSet()",Minor: also could be written as `mentionedConstants.getOrPut(containingClass) { HashSet() }.add(name)`,2019-04-08 13:05:16
81,"@@ -1893,7 +1893,7 @@ public inline fun String.lastOrNull(predicate: (Char) -> Boolean): Char? {
 }
 
 /**
- * Returns single element, or throws exception if there is no or more than one element
+ * Returns the single element, or throws an exception if if the collection is empty or has more than one element.","if if
",2015-02-09 15:49:12
98,"@@ -19,18 +19,39 @@ package kotlin.jvm
 import java.lang.annotation.Retention
 import java.lang.annotation.RetentionPolicy
 
+/**
+ * Marks the JVM backing field of the annotated property as `volatile`, meaning that it can
+ * be modified asynchronously by concurrently running threads.","""can be modified async"" is strange wording. Even if field is not volatile, you still can modify it async by concurrent threads, but effect may be different. Need better description.
",2015-02-11 08:41:43
987,"@@ -19,22 +19,47 @@ package org.jetbrains.kotlin.cli.common.messages
 import java.io.Serializable
 
 data class CompilerMessageLocation private constructor(","This is a common part used extensively outside of the scripting, so I suggest to make changes less intrusive, i.e. leave `line` and `column` intact, add `endLine` and `endColumn`, and put this change into a separate commit with an explanation ""why"" in the commit message.",2020-02-10 10:28:35
140,"@@ -19,6 +19,7 @@ package org.jetbrains.kotlin.codegen
 import org.jetbrains.kotlin.descriptors.ValueParameterDescriptor
 import org.jetbrains.kotlin.psi.KtExpression
 import org.jetbrains.kotlin.resolve.calls.model.ResolvedCall
+import org.jetbrains.kotlin.codegen.binding.CodegenBinding.*","Unused import
",2016-02-09 08:33:51
553,"@@ -19,7 +19,7 @@ package org.jetbrains.kotlin.name
 import java.util.*
 
 object NameUtils {
-    private val SANITIZE_AS_JAVA_INVALID_CHARACTERS = ""[^\\p{L}\\p{Digit}]"".toRegex()
+    private val SANITIZE_AS_JAVA_INVALID_CHARACTERS = ""[^\\p{L}\\p{Digit}\\$]"".toRegex()","Purpose of this change: LocalDeclarationsLowering uses sanitizeAsJavaIdentifier when naming the ""lifted"" local functions. The generated synthetic function for local function `bar` inside function `foo` is named `bar$default`. When lifted, the name should be `foo$bar$default` but without this change, `bar$default` is incorrectly sanitized and the lifted function name becomes `foo$bar_default`. This change ensures that `$` is not sanitized into `_`. ExpressionCodegen assumes that the names of the generated function end with `$default`.",2019-02-19 22:01:19
848,"@@ -190,12 +184,11 @@ class InnerClassConstructorCallsLowering(val context: BackendContext) : BodyLowe
                 }
 
                 newReference.let {
+                    it.copyTypeArgumentsFrom(expression)
+                    // TODO: This is wrong, since we moved all parameters into value parameters,
+                    //       but changing it breaks JS IR in CallableReferenceLowering.",@romanart FYI,2019-10-07 15:51:35
872,"@@ -194,7 +194,7 @@ private class AddContinuationLowering(private val context: JvmBackendContext) :
 
                     override fun visitReturn(expression: IrReturn): IrExpression {
                         val ret = super.visitReturn(expression) as IrReturn
-                        return IrReturnImpl(ret.startOffset, ret.endOffset, context.irBuiltIns.anyType, function.symbol, ret.value)
+                        return IrReturnImpl(ret.startOffset, ret.endOffset, ret.type, function.symbol, ret.value)","Thank you for the catch! This, in fact, should be `anyNType`, since `invokeSuspend` returns `ret.type | COROUTINE_SUSPENDED` and `ret.type` can be nullable. Thus, `ret.type` is also incorrect.",2019-10-25 17:32:31
277,"@@ -195,6 +195,7 @@ enum class TraversalOrder {
     BACKWARD
 }
 
+",Remove me,2017-08-16 09:42:12
206,"@@ -195,6 +205,11 @@ class K2JVMCompiler : CLICompiler<K2JVMCompilerArguments>() {
                 }
 
                 KotlinToJVMBytecodeCompiler.compileBunchOfSources(environment)
+
+                if (arguments.useJavac) {
+                    val success = JavacWrapper.getInstance(environment.project).use(JavacWrapper::compile)
+                    if (!success) return COMPILATION_ERROR
+                }",And this code should also be performed for previous branches,2017-04-11 09:57:39
363,"@@ -1957,7 +1961,10 @@ private CodegenContext getBackingFieldContext(
             fieldAccessorKind = FieldAccessorKind.LATEINIT_INTRINSIC;
         }
         else if (isBackingFieldInClassCompanion &&
-            (forceField || propertyDescriptor.isConst() && Visibilities.isPrivate(propertyDescriptor.getVisibility()))) {
+                 (forceField ||
+                  (Visibilities.isPrivate(propertyDescriptor.getVisibility()) &&
+                   (propertyDescriptor.isConst() ||",`propertyDescriptor.isConst()` looks unnecessary here because `const` properties always have default accessors,2018-02-27 12:57:10
837,"@@ -196,15 +196,18 @@ class ExpressionCodegen(
         if (state.isParamAssertionsDisabled)
             return
 
-        val isSyntheticOrBridge = irFunction.origin.isSynthetic ||
+        val notCallableFromJava = isInlineLambda ||
+                Visibilities.isPrivate(irFunction.visibility) ||
+                irFunction.origin.isSynthetic ||
+                (irFunction is IrConstructor && irFunction.parentAsClass.isAnonymousObject) ||","As I understand there would be similar problem with redundant assertions on captured variables in other cases,e.g.:
```
fun foo() {
    val captured = ""123""
    
    class Z(val withAssertion: String) {
           
        val x = captured
    }
    
    Z(""12"")
}
```
So maybe it's best to specify special (synthetic?) kind for captured variables and additional one for variables passed to super constructor (anonymous object case) and don't generate for such variable assertions",2019-10-02 18:17:01
316,"@@ -196,6 +192,5 @@ public fun File.readLines(charset: Charset = Charsets.UTF_8): List<String> {
  * @param charset character set to use. By default uses UTF-8 charset.
  * @return the value returned by [block].
  */
-@RequireKotlin(""1.2"", versionKind = RequireKotlinVersionKind.COMPILER_VERSION, message = ""Requires newer compiler version to be inlined correctly."")","This annotation originates from `use` function and is contagious for all inline functions in the standard library, so it would be incorrect to remove it here.",2017-10-28 20:55:54
792,"@@ -197,7 +197,7 @@ class LoopExpressionGenerator(statementGenerator: StatementGenerator) : Statemen
                     irNextCall
                 )
             } else {
-                scope.createTemporaryVariable(irNextCall, ""loop_parameter"", origin = IrDeclarationOrigin.FOR_LOOP_IMPLICIT_VARIABLE)
+                scope.createTemporaryVariable(irNextCall, ""loop_parameter"")","@madsager Maybe we should switch K/N to common for-lowers in first cause FOR_LOOP_IMPLICIT_VARIABLE is used in K/N HeaderProcessor. But from opposite I don't see any usage of it outside of them so looks like there would be safe to perform it even now.

@homuroll Would it be a problem with serialized ir if we remove FOR_LOOP_IMPLICIT_VARIABLE is some feature?",2019-09-03 09:24:50
657,"@@ -198,6 +198,7 @@ class IrBuiltIns(
 
     val eqeqeqSymbol = defineOperator(OperatorNames.EQEQEQ, bool, listOf(anyN, anyN))
     val eqeqSymbol = defineOperator(OperatorNames.EQEQ, bool, listOf(anyN, anyN))
+    val andandSymbol = defineOperator(OperatorNames.ANDAND, bool, listOf(bool, bool))","Since this operator is only used in JVM, could you please declare it in `IrIntrinsicMethods` instead? Similarly to how for example JS operator intrinsics are declared in [`JsIntrinsics`](https://github.com/JetBrains/kotlin/blob/master/compiler/ir/backend.js/src/org/jetbrains/kotlin/ir/backend/js/JsIntrinsics.kt)",2019-04-25 10:40:27
132,"@@ -198,6 +202,8 @@
             <fileset dir=""compiler/builtins-serializer/src""/>
             <fileset dir=""compiler/cli/src""/>
             <fileset dir=""compiler/cli/cli-common/src""/>
+            <include name=""compiler/rmi/rmi-server/src""/>
+            <include name=""compiler/rmi/rmi-interface/src""/>","Other lines here use `<fileset dir=...>`
",2015-09-01 07:28:05
364,"@@ -1986,6 +1993,10 @@ else if ((syntheticBackingField &&
         boolean skipPropertyAccessors;
 
         PropertyDescriptor originalPropertyDescriptor = DescriptorUtils.unwrapFakeOverride(propertyDescriptor);
+        boolean directAccessToGetterProperty = couldUseDirectAccessToProperty(propertyDescriptor, true, isDelegatedProperty, context,","Minor: these could be named shorter, `directAccessToGetter` and `directAccessToSetter`",2018-02-27 12:59:14
26,"@@ -199,6 +199,22 @@ public inline fun <T, K> Array<out T>.groupByTo(result: MutableMap<K, MutableLis
 }
 
 /**
+ * Returns first index of item, or -1 if the array does not contain item
+ */
+public fun <T> Array<out T>.indexOf(item : T) : Int {","We usually don't add space before colon in parameters list
",2013-12-26 20:29:36
27,"@@ -199,6 +199,22 @@ public inline fun <T, K> Array<out T>.groupByTo(result: MutableMap<K, MutableLis
 }
 
 /**
+ * Returns first index of item, or -1 if the array does not contain item
+ */
+public fun <T> Array<out T>.indexOf(item : T) : Int {
+    if (item == null) {","Why do you need to handle 'item==null' case separately? '==' operator works properly with nulls.
",2013-12-26 20:30:31
28,"@@ -199,6 +199,22 @@ public inline fun <T, K> Array<out T>.groupByTo(result: MutableMap<K, MutableLis
 }
 
 /**
+ * Returns first index of item, or -1 if the array does not contain item
+ */
+public fun <T> Array<out T>.indexOf(item : T) : Int {
+    if (item == null) {
+        for (i in 0..size - 1) if (this[i] == null) {","size-1 can be replaced by lastIndex.
",2013-12-26 20:31:11
285,"@@ -2,12 +2,13 @@ internal class Test {
     fun test() {
         val i1 = 0x21
         val i2 = 0x33
-        val i3 = -1
+        val i3 = -0x1
         val i4 = 0XCCCC
         val i5 = 0x6fffffff
-        val l1: Long = -1
+        val l1: Long = -0x1
         val l2 = 0xffffffffL
         val l3 = 0xffffffffffL
-        val l4 = -1
+        val l4 = -0x1","`L` is missing after conversion, so result type of `l4` would be `Int` instead of `Long`",2017-08-21 12:06:58
557,"@@ -2,16 +2,16 @@ class A
 
 fun foo(x: Any?) {}
 
-fun box() {
+fun box(u: Int) {",Why you touch this test?,2019-02-26 08:52:15
109,"@@ -2,36 +2,65 @@ package kotlin.concurrent
 
 import java.util.concurrent.*
 
+/**
+ * Return the current thread.","Returns
",2015-03-12 14:56:56
474,"@@ -2,4 +2,4 @@ fun main(args: Array<String>) {
     String.class<EOLError descr=""Name expected""></EOLError>
 }
 
-// EA-56152: An attempt to build light class in checker to get diagnotics
\ No newline at end of file
+// EA-56152: An attempt to build light class in checker to get diagnosis","It certainly should be ""diagnostics""",2018-08-14 15:52:15
912,"@@ -2,5 +2,5 @@ fun foo() {
     val test : <caret>","Could you please add a test for completion in function argument type parameter? 

Like this: 

```kt
fun foo(a: <caret>) {}
```",2019-12-18 11:19:05
590,"@@ -2,6 +2,10 @@ import com.moowork.gradle.node.NodeExtension
 import com.moowork.gradle.node.npm.NpmTask
 import org.gradle.internal.os.OperatingSystem
 
+tasks.withType<Test> {",Could we turn it for JS off for now?,2019-03-25 10:10:24
458,"@@ -20,4 +20,23 @@ class Tuples {
         assertPrints(c, ""[null]"")
     }
 
+    @Sample
+    fun pairToList() {
+        val list = Pair(1, ""a"").toList()","It would be informative to show what is the static type of `list` by using explicit type specification
```
val list: List<...> = ...
```
It's worth to add another example, where both components have the same type.",2018-08-06 13:00:59
459,"@@ -20,4 +20,23 @@ class Tuples {
         assertPrints(c, ""[null]"")
     }
 
+    @Sample
+    fun pairToList() {
+        val list = Pair(1, ""a"").toList()
+        assertPrints(list, ""[1, a]"")
+        assertTrue(list[0] is Int)
+        assertTrue(list[1] is String)
+        assertFalse(list[1] is Int)","I'm not sure this assertion adds something, after you've asserted that this element is `String`",2018-08-06 13:01:30
247,"@@ -20,6 +20,15 @@ package kotlin.script.dependencies
 
 import java.io.File
 
+// discuss
+
+// Currently File is used to disambiguate between plain strings and paths
+// One of the ideas is to use java.nio.Path but this requires JDK 7
+// that means that script templates would require higher JDK (but since script are run by calling koltinc it seems ok to me after consideration)",I think requiring JDK 8 in scripts is fine,2017-07-25 10:15:27
325,"@@ -20,6 +20,6 @@
   </component>
   <component name=""VcsDirectoryMappings"">
     <mapping directory="""" vcs=""Git"" />
+    <mapping directory=""$PROJECT_DIR$"" vcs=""Git"" />
   </component>
-</project>
-
+</project>",Please avoid commiting changes in all configuration files without a reason,2017-11-30 12:30:24
996,"@@ -20,6 +20,7 @@ private val DIAGNOSTIC_FACTORY_TO_RENDERER by lazy {
             ErrorsNative.INCOMPATIBLE_THROWS_INHERITED, ""Member inherits different @Throws filters from {0}"",
             Renderers.commaSeparated(Renderers.NAME)
         )
+        put(ErrorsNative.INCOMPATIBLE_SHARED_IMMUTABLE, ""@SharedImmutable isn't applicable to mutable variable"")","> variable

property (or field) actually.",2020-02-17 10:24:18
997,"@@ -20,6 +20,8 @@ object ErrorsNative {
     val INCOMPATIBLE_THROWS_OVERRIDE = DiagnosticFactory1.create<KtElement, DeclarationDescriptor>(Severity.ERROR)
     @JvmField
     val INCOMPATIBLE_THROWS_INHERITED = DiagnosticFactory1.create<KtDeclaration, Collection<DeclarationDescriptor>>(Severity.ERROR)
+    @JvmField
+    val INCOMPATIBLE_SHARED_IMMUTABLE = DiagnosticFactory0.create<KtElement>(Severity.ERROR)","Not ""incompatible"". More like ""inapplicable"".",2020-02-17 10:25:40
998,"@@ -20,6 +20,8 @@ private val DIAGNOSTIC_FACTORY_TO_RENDERER by lazy {
             ErrorsNative.INCOMPATIBLE_THROWS_INHERITED, ""Member inherits different @Throws filters from {0}"",
             Renderers.commaSeparated(Renderers.NAME)
         )
+        put(ErrorsNative.INAPPLICABLE_SHARED_IMMUTABLE_VAR, ""@SharedImmutable isn't applicable to var"")
+        put(ErrorsNative.INAPPLICABLE_SHARED_IMMUTABLE_TOP_LEVEL, ""@SharedImmutable is applicable only to top level entities"")","> entities

declarations",2020-02-18 12:49:49
552,"@@ -20,7 +21,7 @@ class RedundantExplicitTypeInspection : AbstractKotlinInspection() {
             if (!property.isLocal) return
             val typeReference = property.typeReference ?: return
             val initializer = property.initializer ?: return
-
+            if ((typeReference.typeElement as? KtUserType)?.referenceExpression?.mainReference?.resolve() is KtTypeAlias) return","I'm almost sure this can be done easier, without additional reference resolve. Probably `type` should be `WrappedType` for type alias (not sure exactly).",2019-02-02 08:18:16
11,"@@ -200,4 +202,14 @@ public static PsiElement createPrimaryConstructor(Project project) {
         JetClass aClass = createClass(project, ""class A()"");
         return aClass.findElementAt(7).getParent();
     }
+
+    public static PsiElement createClassLabel(Project project, @NotNull String labelName) {
+        JetExpression expression = createExpression(project, ""this@"" + labelName);
+        return expression.getLastChild();","However I have one question: in current variant org.jetbrains.jet.JetNodeTypes#LABEL_QUALIFIER returned - this is normal that org.jetbrains.jet.lexer.JetTokens#FIELD_IDENTIFIER replaced by org.jetbrains.jet.JetNodeTypes#LABEL_QUALIFIER?
",2013-01-11 16:27:42
445,"@@ -201,7 +201,7 @@ abstract class AbstractKotlinCompile<T : CommonCompilerArguments>() : AbstractKo
 
     @Suppress(""UNCHECKED_CAST"")
     @get:Internal
-    protected val friendTask: AbstractKotlinCompile<T>?
+    val friendTask: AbstractKotlinCompile<T>?","We'd like to keep the visibility of this `val` restricted, maybe use `internal` if it is not needed outside the module.",2018-07-26 10:29:30
399,"@@ -201,7 +201,7 @@ private static String renderTypeConstructorVerboseDebugInformation(TypeConstruct
 
         List<TypeConstructor> order = null;
         for (SimpleType type : types) {
-            Set<TypeConstructor> visited = new HashSet<>();","As far as I see, we never iterate over this set, so it can remain a `HashSet`",2018-04-30 16:56:12
700,"@@ -202,6 +208,21 @@ class ExpressionCodegen(
         )
     }
 
+    private fun writeReceiverParameterInLocalVariableTable(param: IrValueParameter, startLabel: Label, endLabel: Label) {","As name is the only thing that changes, I'd move the code back to `writeValueParameterInLocalVariableTable()` and added a `when` (or moved only the name calculation to the separate function).",2019-05-22 03:31:44
90,"@@ -205,7 +241,9 @@ public inline fun <K, V> Map<K, V>.filterValues(predicate: (V) -> Boolean): Map<
 
 
 /**
- * Appends all elements matching the given *predicate* into the given *destination*
+ * Appends all entries matching the given [predicate] into the given [destination] mutable map.","""[destination] mutable map."", looks confusing a bit.
",2015-02-09 16:08:37
841,"@@ -207,8 +207,6 @@ open class FunctionCodegen(
                 } else {
                     frameMap.enterTemp(parameter.asmType)
                 }
-            } else if (parameter.kind != JvmMethodParameterKind.VALUE) {",Please add assertion that there are only VALUE or RECEIVER kinds,2019-10-05 06:46:03
286,"@@ -209,7 +209,7 @@ class ForConverter(
         return if (reversed)
             DownToExpression(startConverted, convertBound(bound, if (inclusiveComparison) 0 else +1))
         else
-            RangeExpression(startConverted, convertBound(bound, if (inclusiveComparison) 0 else -1))
+            UntilExpression(startConverted, convertBound(bound, if (inclusiveComparison) +1 else 0))",I don't think this is correct. `until` should be used only in the case where the original code used `-1`. Cases where `0..9` was generated should remain unchanged.,2017-08-23 14:57:17
87,"@@ -21,15 +21,18 @@ private object EmptyMap : Map<Any, Any> {
 /** Returns an empty read-only map of specified type */
 public fun emptyMap<K, V>(): Map<K, V> = EmptyMap as Map<K, V>
 
-/** Returns a new read-only map of given pairs, where the first value is the key, and the second is value */
+/**
+ * Returns a new read-only map with the specified contents, given as a list of pairs
+ * where the first value is the key and the second is the value.
+ */","specify, that it behaves as sequential `put` calls, so that if conflicting keys exist in source sequence, last one wins.
",2015-02-09 16:01:42
598,"@@ -21,29 +35,29 @@ public enum class FileWalkDirection {
     /** Depth-first search, directory is visited BEFORE its files */
     TOP_DOWN,
     /** Depth-first search, directory is visited AFTER its files */
-    BOTTOM_UP
-    // Do we want also breadth-first search?
+    BOTTOM_UP;",Nit: Unnecessary change.,2019-03-29 08:09:42
195,"@@ -21,5 +21,6 @@
     <orderEntry type=""module"" module-name=""tests-common"" scope=""TEST"" />
     <orderEntry type=""module"" module-name=""idea-core"" />
     <orderEntry type=""module"" module-name=""lint-idea"" scope=""TEST"" />
+    <orderEntry type=""module"" module-name=""light-classes"" />","Try to avoid light classes, some explanation below",2017-01-25 12:51:11
246,"@@ -21,6 +21,24 @@ package kotlin.script.dependencies
 import java.io.File
 import kotlin.script.dependencies.DependenciesResolver.ResolveResult
 
+//discuss
+
+// Provides api to discover dependencies of scripts
+// Dependencies can be content-dependent
+//
+// Some concerns on naming:
+// Environment -> ScriptEnvironment (top level class with too common a name)
+// ResolveResult -> ResolutionResult",+1 for ResolutionResult,2017-07-25 10:13:47
430,"@@ -21,6 +21,8 @@ package kotlin
  * represented as values of the primitive type `boolean`.
  */
 public class Boolean private constructor() : Comparable<Boolean> {
+    companion object {}","This is only sufficient to _declare_ that `Boolean` has a companion. Boolean class is not compiled neither in JVM nor in JS, thus in order to provide the actual companion object some special support in the compiler is required.",2018-06-22 10:27:36
472,"@@ -21,7 +21,7 @@ class Outer<E> {
 fun factoryString(): Outer<String>.Inner<String> = null!!
 
 fun <T, Y> infer(x: T, y: Y): Outer<T>.Inner<Y> = null!!
-val infered = infer("""", 1)
+val inferred = infer("""", 1)","Here and below: this change affects descriptors-dump (corresponding `.txt`-files). I think, the easiest way to check that nothing else is affected is to launch all tests. ",2018-08-14 15:48:34
452,"@@ -21,7 +21,7 @@ class ProcessorLoader(
 ) : Closeable {
     private var annotationProcessingClassLoader: URLClassLoader? = null
 
-    fun loadProcessors(parentClassLoader: ClassLoader = ClassLoader.getSystemClassLoader()): List<Processor> {
+    fun loadProcessors(parentClassLoader: ClassLoader = javaClass.classLoader): List<Processor> {","Can you introspect that please? I'm afraid that'd pass classpath of whole kapt plugin here

You probably want something more isolated that only have `tools.jar` classes",2018-08-03 20:05:05
866,"@@ -210,4 +210,9 @@ pluginBundle {
         id = ""org.jetbrains.kotlin.native.cocoapods"",
         display = ""Kotlin Native plugin for CocoaPods integration""
     )
+    create(",Is publishing this plugin to the plugin portal necessary?,2019-10-21 16:11:47
787,"@@ -210,6 +210,8 @@ private Primitives(
         public final FqNameUnsafe intRange = rangesFqName(""IntRange"");
         public final FqNameUnsafe longRange = rangesFqName(""LongRange"");
 
+        public final FqNameUnsafe stringsKt = textFqName(""StringsKt"");","This is a JVM-specific name, so I prefer not to declare it here, but rather store it as a constant at the use site",2019-08-27 09:42:04
755,"@@ -211,11 +211,11 @@ fun IrBuilderWithScope.irEquals(arg1: IrExpression, arg2: IrExpression, origin:
         arg1, arg2
     )
 
+fun IrBuilderWithScope.irNot(arg: IrExpression, origin: IrStatementOrigin? = null) =",There's already an irNot in LowerUtils.kt.,2019-07-08 09:13:12
400,"@@ -213,7 +213,7 @@ private static String renderTypeConstructorVerboseDebugInformation(TypeConstruct
         }
         assert order != null;
 
-        Set<TypeConstructor> notSource = new HashSet<>();",This one can also remain a `HashSet`,2018-04-30 16:56:44
14,"@@ -214,21 +214,32 @@ public static void addTypeAnnotation(Project project, JetParameter parameter, @N
         ReferenceToClassesShortening.compactReferenceToClasses(Collections.singletonList(parameter));
     }
 
-    private static void removeTypeAnnotation(@NotNull JetNamedDeclaration property, @Nullable JetTypeReference typeReference) {
+    private static void removeTypeAnnotation(@NotNull PsiElement removeAfter, @Nullable JetTypeReference typeReference) {","I don't love name 'removeAfter' but I didn't come up with anything better.
",2013-02-09 17:40:01
571,"@@ -215,5 +215,19 @@ class IrBuiltIns(
 
     companion object {
         val KOTLIN_INTERNAL_IR_FQN = FqName(""kotlin.internal.ir"")
+
+        const val OPERATOR_NAME_LESS = ""less""
+        const val OPERATOR_NAME_LESS_OR_EQUAL = ""lessOrEqual""","Maybe it's best to extract const's to separate object:

```
class IrBuiltIns {
   .....
    object OperatorNames {
        const val LESS = ""less""
       ....
     }
}
```
cc @udalov ",2019-03-12 13:14:52
234,"@@ -2165,6 +2183,9 @@ public fun Iterable<Int>.sum(): Int {
  */
 @kotlin.jvm.JvmName(""sumOfLong"")
 public fun Iterable<Long>.sum(): Long {
+    if (this is LongProgression) {
+        return (this.first + this.last) * this.count() / 2",Is this as overflow safe as the old approach? `(this.first + this.last) * this.count()` might overflow when `(this.first + this.last) * (this.count() / 2)` wouldn't.,2017-07-05 09:28:29
92,"@@ -217,14 +255,16 @@ public inline fun <K, V, C : MutableMap<K, V>> Map<K, V>.filterTo(destination: C
 }
 
 /**
- * Returns a map containing all key-value pairs matching the given *predicate*
+ * Returns a map containing all key-value pairs matching the given [predicate].","Returns a _new_ map
",2015-02-09 16:09:53
214,"@@ -217,6 +216,34 @@ class KotlinCoreEnvironment private constructor(
         project.registerService(VirtualFileFinderFactory::class.java, finderFactory)
     }
 
+    // Maybe there is another way to obtain all java files
+    private val VirtualFile.javaFiles: List<VirtualFile>","This is rather inefficient because it creates a lot of lists. Try something like this:
```
    private val VirtualFile.javaFiles: List<VirtualFile>
        get() = mutableListOf<VirtualFile>().apply {
            VfsUtilCore.processFilesRecursively(this@javaFiles) { file ->
                if (file.fileType == JavaFileType.INSTANCE) {
                    add(file)
                }
                true
            }
        }
```
",2017-04-25 07:44:49
733,"@@ -217,6 +217,7 @@ public inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collectio
 @kotlin.internal.InlineOnly
 public inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)
 
+@PublishedApi",`optimizeReadOnlyList` was introduced after the release of Kotlin 1.0. We cannot make it public and reference it from user code (via inlining) while we support `-api-version 1.0` option.,2019-06-19 21:27:27
227,"@@ -2180,6 +2180,14 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.MemberVisibilityCanPrivateInspection""
+                     displayName=""Can have 'private' visibility""","Better to show a more full name here: ""Class member can have 'private' visibility""",2017-05-23 17:07:14
958,"@@ -22,10 +23,12 @@ class DeferredResultUnusedInspection(@JvmField var standardOnly: Boolean = false
                 (!inspection.standardOnly || expression.calleeExpression?.text in shortNames),
     callChecker = fun(resolvedCall, inspection): Boolean {
         if (inspection !is DeferredResultUnusedInspection) return false
+        val resultingDescriptor = resolvedCall.resultingDescriptor
+        if (resultingDescriptor.fqNameSafe == FqName(""kotlin.test.assertNotNull"")) return false","But the called function may have an arbitrary name, see https://youtrack.jetbrains.com/issue/KT-33741#focus=streamItem-27-3697460.0-0",2020-01-28 10:57:21
254,"@@ -22,13 +22,28 @@ import kotlin.reflect.KClass
 import kotlin.script.dependencies.DependenciesResolver.NoDependencies
 import kotlin.script.dependencies.ScriptDependenciesResolver
 
+// discuss",Maybe move this file to package `kotlin.script.annotations`? To leave `kotlin.script.templates` for actual templates only,2017-07-25 11:38:05
3,"@@ -22,5 +22,5 @@
 public class CompilerVersion {
     // The value of this constant is generated by the build script
     // DON'T MODIFY IT
-    public static final String VERSION = ""@snapshot@"";
+    public static final String VERSION = ""snapshot"";","This will crash the build miserably.
",2012-05-15 18:34:55
716,"@@ -22,6 +22,8 @@ pluginManagement {
 include "":kotlin-build-common"",
         "":compiler"",
         "":compiler:util"",
+        "":kotlin-util-io"",
+        "":kotlin-util-klib"",","I'd prefer if these projects were named `:compiler:util-io` and `:compiler:util-klib` which is more similar to `:compiler:util` and reflects directory structure, which means less work needed when trying to do anything with our build",2019-06-05 11:13:51
217,"@@ -22,6 +22,9 @@
     <property name=""javax.inject.jar"" value=""${basedir}/lib/javax.inject.jar""/>
     <property name=""gradle.logging.level"" value=""""/>
 
+    <property environment=""env""/>
+    <property name=""tools.jar"" value=""${env.JDK_18}/lib/tools.jar""/>",Do you know if it's possible to download sources of this artifact from somewhere? This would be very useful,2017-04-25 08:16:39
32,"@@ -220,6 +220,7 @@ add.name.to.argument.single=Add name to argument\: ''{0}''
 add.name.to.argument.multiple=Add name to argument...
 add.name.to.argument.action=Add name to argument...
 add.name.to.parameter.name.chooser.title=Choose parameter name
+get.call.replacement=Get Call Replace","That's not a good name for an intention. The name should be ""Do something"", with correct capitalization.

In such cases, always refer to existing UI elements, so the new features will be consistent with common style.
",2014-01-27 21:28:35
856,"@@ -220,7 +230,7 @@ abstract class AbstractWriteSignatureTest : CodegenTestCase() {
             ).joinToString(""\n"") { ""// $it"" }
         }
 
-        val expectationRegex = Regex(""^// (class|method|field): *([^:]+)(::(.+))? *(//.*)?"")
+        val expectationRegex = Regex(""^// (class|method|field|!method): *([^:]+)(::(.+))? *(//.*)?"")",Is the new expectation kind used somewhere? I can't find usages in the tests in this PR,2019-10-16 15:12:45
343,"@@ -221,6 +221,7 @@ interface DescriptorRendererOptions {
     var renderConstructorKeyword: Boolean
     var renderUnabbreviatedType: Boolean
     var includeAdditionalModifiers: Boolean
+    var includeSuspendModifier: Boolean",Are there any cases when this option should be false?,2018-01-09 22:20:01
937,"@@ -221,7 +221,7 @@ class JvmSymbols(
                 addValueParameter(""completion"", continuationType.makeNullable())
             }
             klass.addFunction(""invokeSuspend"", irBuiltIns.anyNType, Modality.ABSTRACT).apply {
-                addValueParameter(""result"", resultClassStub.typeWith(irBuiltIns.anyNType))
+                addValueParameter(""\$result"", resultClassStub.typeWith(irBuiltIns.anyNType))","I somehow missed it. Thanks!
Minor: there is `SUSPEND_CALL_RESULT_NAME`, which, in fact, I should've used.",2020-01-09 11:04:33
371,"@@ -221,9 +221,18 @@ class AnnotationChecker(
             }.toSet()
         }
 
-        fun getDeclarationSiteActualTargetList(annotated: KtElement, descriptor: ClassDescriptor?, trace: BindingTrace):
+        fun getDeclarationSiteActualTargetList(","I don't like an idea to change front-end code in this commit: as result we get an additional parameter used only from IDE code. I think it's better to call `getActualTargetList` from fix (make it public for this), and then take necessary targets from this list (effectively inlining your function here). As alternative idea, you can write separate function in IDE for a case with `all = true`.",2018-02-28 08:38:11
811,"@@ -222,7 +225,7 @@ internal val interfaceDefaultCallsPhase = makeIrFilePhase(
 )
 
 private class InterfaceDefaultCallsLowering(val context: JvmBackendContext) : IrElementTransformerVoid(), FileLoweringPass {
-
+    // TODO If there are no default _implementations_ we can avoid generating defaultImpls class entirely by moving default arg dispatchers to the interface class",NB: if any annotation on property is present it's stored on synthetic methods in DI (and we can support interface as storage class),2019-09-24 07:10:18
891,"@@ -223,6 +223,10 @@ private val jvmFilePhases =
         typeAliasAnnotationMethodsPhase then
         stripTypeAliasDeclarationsPhase then
         provisionalFunctionExpressionPhase then
+
+        jvmOverloadsAnnotationPhase then
+        mainMethodGenerationPhase then","Please add a `inventNamesForLocalClassesPhase` -> `mainMethodGenerationPhase` phase prerequisite, maybe with a comment.",2019-11-19 11:38:03
4,"@@ -225,38 +225,7 @@","ignore this file
",2012-05-24 14:20:57
36,"@@ -226,6 +226,10 @@ replace.with.dot.qualified.method.call.intention=Replace with simple method call
 replace.with.dot.qualified.method.call.intention.family=Replace with simple method call
 replace.with.infix.function.call.intention=Replace with infix function call
 replace.with.infix.function.call.intention.family=Replace with infix function call
+remove.braces=Remove Braces
+remove.braces.family=Remove Braces
+add.braces=Add Braces
+add.braces.family=Add Braces","Capitalization of family name is correct, but of intention text is not. See other intentions as a reference.
",2014-02-21 16:36:51
119,"@@ -227,7 +228,7 @@ private void checkForCastImpossibilityOrRedundancy(
                 expression.getLeft(), context.dataFlowInfo, actualType, context);
         for (JetType possibleType : possibleTypes) {
             if (typeChecker.isSubtypeOf(possibleType, targetType)) {
-                context.trace.report(USELESS_CAST_STATIC_ASSERT_IS_FINE.on(expression));
+                context.trace.report(USELESS_CAST.on(expression));","Probably this shouldn't be reported at all here?

Consider this example:

```
trait A
trait B
trait C : A, B

fun foo(a: A) {}
fun foo(b: B) {}

fun bar(c: C) = foo(c as A)   // <-- incorrect warning here, the cast is not useless
```
",2015-04-24 13:25:55
236,"@@ -2278,6 +2278,14 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.RedundantProgressionStepInspection""
+                     displayName=""Redundant progression step""
+                     groupName=""Kotlin""",Please provide a group path and group name for the inspection according to https://github.com/JetBrains/kotlin/commit/a09b31b5680952c56bb3ea5bbcb7939084e9f027,2017-07-07 11:45:43
161,"@@ -228,6 +228,8 @@ fun createSpacingBuilder(settings: CodeStyleSettings, builderUtil: KotlinSpacing
             betweenInside(REFERENCE_EXPRESSION, LAMBDA_ARGUMENT, CALL_EXPRESSION).spaces(1)
             betweenInside(TYPE_ARGUMENT_LIST, LAMBDA_ARGUMENT, CALL_EXPRESSION).spaces(1)
 
+            around(IS_KEYWORD).spaces(1)","This is really minor, but still: to make the code easier to follow, I'd move this line next to the rule for the AS keyword.
",2016-05-30 17:32:26
392,"@@ -229,7 +229,7 @@ class Kapt3ComponentRegistrar : ComponentRegistrar {
         try {
             Class.forName(JAVAC_CONTEXT_CLASS)
         } catch (e: ClassNotFoundException) {
-            logger.warn(""'$JAVAC_CONTEXT_CLASS' class can't be found ('tools.jar' is absent in the plugin classpath). Kapt won't work."")
+            logger.error(""'$JAVAC_CONTEXT_CLASS' class can't be found ('tools.jar' is absent in the plugin classpath). Kapt won't work."")",Maybe it's better to use strong warning here? See `CompilerMessageSeverity.STRONG_WARNING`,2018-04-11 14:58:21
121,"@@ -23,14 +23,14 @@
 import org.jetbrains.kotlin.resolve.DescriptorUtils;
 
 public abstract class AbstractClassTypeConstructor implements TypeConstructor {
-    private boolean hashCodeComputed;
+    private volatile boolean hashCodeComputed;
     private int hashCode;
 
     @Override
     public final int hashCode() {","@yole, Maybe there would be best to use String.hashCode() approach? It doesn't require additional volatile field. 
What about caching fqnames for descriptors? Will it waste memory?
",2015-06-03 08:46:12
876,"@@ -23,4 +23,12 @@ internal open class BareAdapter : FrameworkAdapter {
             testFn()
         }
     }
-}
\ No newline at end of file
+
+    override fun beforeEach(name: String, beforeFn: () -> Any?) {
+        beforeFn()
+    }
+
+    override fun afterEach(name: String, afterFn: () -> Any?) {
+        afterFn()
+    }",This way `beforeEach` hook gets executed once for the suite.,2019-10-30 15:40:03
469,"@@ -230,6 +231,7 @@ project(':compiler:ir.psi2ir').projectDir = ""$rootDir/compiler/ir/ir.psi2ir"" as
 project(':compiler:ir.ir2cfg').projectDir = ""$rootDir/compiler/ir/ir.ir2cfg"" as File
 project(':compiler:ir.backend.common').projectDir = ""$rootDir/compiler/ir/backend.common"" as File
 project(':compiler:backend.js').projectDir = ""$rootDir/compiler/ir/backend.js"" as File
+project(':native:kotlin-native-utils').projectDir = ""$rootDir/native/utils"" as File","Lets double check if we are going to keep K/N stuff in ""native"" or ""konan"" folder.",2018-08-14 14:46:50
144,"@@ -235,6 +235,22 @@ public fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, com
 }
 
 /**
+ * Returns the elements from the list from indexes specified in range.
+ */
+operator fun <T> List<T>.get(indexesRange: IntRange): List<T> =
+        if(indexesRange.first < 0 || indexesRange.last > lastIndex)","What is the value of `last` of empty range and of `lastIndex` of the empty list? Don't they throw an exception? You have to add corresponding tests 
",2016-02-27 13:50:01
145,"@@ -235,6 +235,22 @@ public fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, com
 }
 
 /**
+ * Returns the elements from the list from indexes specified in range.
+ */
+operator fun <T> List<T>.get(indexesRange: IntRange): List<T> =
+        if(indexesRange.first < 0 || indexesRange.last > lastIndex)
+            throw IndexOutOfBoundsException()","It should be more debug information: exact range bounds and the list size
",2016-02-27 13:52:37
146,"@@ -235,6 +235,22 @@ public fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, com
 }
 
 /**
+ * Returns the elements from the list from indexes specified in range.
+ */
+operator fun <T> List<T>.get(indexesRange: IntRange): List<T> =
+        if(indexesRange.first < 0 || indexesRange.last > lastIndex)
+            throw IndexOutOfBoundsException()
+        else if(indexesRange.first<=indexesRange.last)","Formatting
",2016-02-27 13:52:52
887,"@@ -235,7 +235,7 @@ class JvmSymbols(
     }
 
     val suspendLambdaClass: IrClassSymbol = createClass(FqName(""kotlin.coroutines.jvm.internal.SuspendLambda"")) { klass ->
-        klass.superTypes += suspendFunctionInterface.typeWith()
+        klass.superTypes += suspendFunctionInterface.owner.defaultType","Maybe we could introduce an extension `val IrClassSymbol.defaultType: IrType` beside `starProjectedType`, to remove the `.owner.defaultType` pattern?",2019-11-13 16:38:43
626,"@@ -2350,6 +2350,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.ConvertEqualsDoubleNaNInspection""
+                     displayName=""Convert '== Double.NaN' to 'equals' call""",This name contradicts with description and inspection logic.,2019-04-05 15:48:47
627,"@@ -2350,6 +2350,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.ConvertEqualsDoubleNaNInspection""
+                     displayName=""Convert '== Double.NaN' to 'equals' call""
+                     groupPath=""Kotlin""
+                     groupName=""Probable bugs""",I think it would be good to explain in description why it's a probable bug.,2019-04-05 15:49:18
91,"@@ -236,7 +276,7 @@ public inline fun <K, V, C : MutableMap<K, V>> Map<K, V>.filterNotTo(destination
 }
 
 /**
- * Returns a map containing all key-value pairs matching the given *predicate*
+ * Returns a map containing all key-value pairs not matching the given [predicate].","Returns a _new_ map
",2015-02-09 16:09:41
894,"@@ -239,6 +240,14 @@ open class ClassCodegen protected constructor(
                     }
                 }
             }
+            is MetadataSource.Function -> {
+                val functionProto = serializer!!.functionProto(metadata.descriptor)?.build()","I suppose you can call `createFreeFakeLambdaDescriptor` on this descriptor (as in `ClosureCodegen.generateKotlinMetadataAnnotation`) to also support `functionNtoStringGeneric.kt`.
",2019-11-22 16:25:38
668,"@@ -24,10 +24,13 @@ abstract class AbstractIrLineNumberTest : AbstractLineNumberTest() {
 
     override fun compareCustom(psiFile: KtFile, wholeFile: File) {
         val fileText = psiFile.text
-        val expectedLineNumbers = normalize(
-            fileText.substring(fileText.indexOf(""//"") + 2)
-                .trim().split("" "").map { it.trim() }.toMutableList()
-        )
+        val expectedLineNumbers = fileText.split(""\n"".toRegex()).filter { line ->","How about simplifying this to:

        val expectedLineNumbers = normalize(
            fileText.substring(Regex(""// \\d+"").find(fileText)!!.range.start + 2)
                .trim().split("" "").map { it.trim() }.toMutableList()
        )

Then we are looking for a line that starts with ""// "" with a number of digits after it. That should work to exclude the comment lines with text. That looks consistent with what the old backend expects from these tests.",2019-05-08 10:52:58
632,"@@ -24,12 +23,12 @@ fun box(): String {
 }
 
 // 0 reversed
+// 0 iterator
 // 0 getStart
 // 0 getEnd
 // 0 getFirst
 // 0 getLast
 // 0 getStep
-// 0 IFEQ
-// 0 IF_ICMPEQ
-// 2 IF_ICMPLT
-// 1 LCMP
+// 2 IF_ICMP","// 2 IF_ICMP[LG]T
// 1 IF[LG]T
// 3 IF",2019-04-08 13:04:25
670,"@@ -24,15 +30,28 @@ class WhenWithOnlyElseInspection : AbstractKotlinInspection() {
 
             val usedAsExpression = expression.isUsedAsExpression(expression.analyze())
 
-            holder.registerProblem(expression,",I think we shouldn't change this file.,2019-05-12 13:35:33
789,"@@ -24,6 +24,16 @@ import com.sun.tools.javac.util.List as JavacList
 import org.jetbrains.kotlin.kapt3.base.plus
 
 fun isJava9OrLater(): Boolean = !System.getProperty(""java.version"").startsWith(""1."")
+fun isJava11OrLater(): Boolean {","Alternatively,
```kotlin
fun isJava11OrLater(): Boolean = try {
  Runtime.Version.parse(System.getProperty(""java.version"")).major() >= 11
} catch (_: NoClassDefFoundError) {
  false
}
```",2019-08-29 21:42:42
314,"@@ -24,7 +24,13 @@ class Iterables {
 
     @Sample
     fun iterable() {
-        val iterator = Iterable { buildIterator { yieldAll(listOf(1, 2, 3)) } }.iterator()
+        val iterator = buildIterator {","Sorry, I don't see `Iterable` function call here again. Have you forgotten for which function this sample is? :)

What I've meant is something like:
```
val someIterable = Iterable { buildIterator { ... } }

// now you can call extensions on the Iterable
val result: List<String> = someIterable.mapIndexed { index, value -> ""$index => $value"" }
assertPrints(result, ""..."")
```",2017-10-27 16:17:46
124,"@@ -24,7 +24,7 @@ fileAnnotations
   ;
 
 fileAnnotation
-  : ""@"" ""file"" "":"" (""["" annotationEntry+ ""]"" | annotationEntry)
+  : ""@"" ""file"" "":"" (""["" annotation+ ""]"" | annotation)","I think it should be `unescapedAnnotation` instead of `annotation`.
Probably we should also remove `("":"" ""file"")?` part from `annotationPrefix`.
",2015-07-15 11:50:08
902,"@@ -24,7 +26,7 @@ open class NodeJsSetupTask : DefaultTask() {
     init {
         @Suppress(""LeakingThis"")
         onlyIf {
-            settings.download && !env.nodeBinDir.isDirectory
+            settings.download && !env.nodeExecutable.isFile","`nodeExecutable` now is only String, not File
Maybe we need to wrap `env.nodeExecutable` in constructor call of File?",2019-11-28 09:06:26
966,"@@ -240,7 +240,7 @@ internal open class GradleCompilerRunner(protected val task: Task) {
                 ?: return null
             val sourceSet = javaConvention.sourceSets.findByName(sourceSetName) ?: return null
             val jarTask = project.tasks.findByName(sourceSet.jarTaskName) as? Jar","This will cause the tasks to be realized. You can use named, and also precise the type if the lowest gradle version is bumped to 5.1.",2020-01-29 15:28:40
279,"@@ -241,7 +241,8 @@ class DefaultExpressionConverter : JavaElementVisitor(), ExpressionConverter {
         }
         val name = if (primitiveType != null) {
             ""javaPrimitiveType""
-        } else {
+        }
+        else {",It is wrong according to Java Code Conventions,2017-08-16 15:39:44
354,"@@ -242,19 +242,23 @@ KtFile: NewlinesInParentheses.kt
           WHEN_CONDITION_IS_PATTERN
             PsiElement(is)('is')
             PsiWhiteSpace(' ')
-            TYPE_REFERENCE
-              USER_TYPE
-                REFERENCE_EXPRESSION
-                  PsiElement(IDENTIFIER)('T')
-                PsiWhiteSpace('\n    ')
-                TYPE_ARGUMENT_LIST
-                  PsiElement(LT)('<')
-                  TYPE_PROJECTION
+            PATTERN","Changing PSI for existing files can be dangerous. For example, some IDE actions may cease to operate after it. We should either consider keeping PSI for old code or check attentively that IDE tests (like IntentionTestGenerated, InspectionTestGenerated, LocalInspectionTestGenerated, QuickFixTestGenerated) still pass.",2018-02-06 09:07:42
288,"@@ -247,6 +252,19 @@ class KotlinLanguageInjector(
         return null
     }
 
+    private fun injectInAnnotationCall(host: KtElement): InjectionInfo? {
+        val argument = host.parent as? KtValueArgument ?: return null
+        val annotationEntry = argument.parent.parent as? KtAnnotationEntry ?: return null
+        val callDescriptor = annotationEntry.getResolvedCall(annotationEntry.analyze())?.candidateDescriptor",Would love to see an optimization here that skips `getResolvedCall()` if there are no injections into classes with the name of the annotation entry.,2017-08-23 15:47:47
805,"@@ -247,7 +245,7 @@ internal abstract class IndicesHandler(protected val context: CommonBackendConte
 
 internal class ArrayIndicesHandler(context: CommonBackendContext) : IndicesHandler(context) {",Suggestion: Rename to `CollectionIndicesHandler`,2019-09-13 20:21:12
814,"@@ -248,7 +248,7 @@ open class ConvertLambdaToReferenceIntention(text: String) :
                     val selector = singleStatement.selectorExpression
                     val selectorReferenceName = when (selector) {
                         is KtCallExpression -> selector.getCallReferencedName() ?: return null
-                        is KtNameReferenceExpression -> selector.getSafeReferencedName()
+                        is KtNameReferenceExpression -> selector.getReferencedName()",You should also escape this.,2019-09-24 11:43:37
574,"@@ -251,4 +251,20 @@ class IrBuiltIns(
     companion object {
         val KOTLIN_INTERNAL_IR_FQN = FqName(""kotlin.internal.ir"")
     }
+
+    object OperatorNames {
+        const val OPERATOR_NAME_LESS = ""less""
+        const val OPERATOR_NAME_LESS_OR_EQUAL = ""lessOrEqual""
+        const val OPERATOR_NAME_GREATER = ""greater""",@ting-yuan Please remove also OPERATOR_NAME prefixes (it wasn't clearly mentioned but presented in suggested example in https://github.com/JetBrains/kotlin/pull/2111/files#r264669713),2019-03-13 07:54:46
291,"@@ -2539,8 +2539,14 @@
                      groupName=""Redundant constructs""
                      enabledByDefault=""true""
                      level=""WEAK WARNING""
-                     language=""kotlin""
-    />
+                     language=""kotlin""/>
+
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.RemoveRedundantBackticksInspection""
+                     displayName=""Remove redundant backticks""
+                     groupName=""Kotlin""","Please specify groupPath and groupName as in other Kotlin inspections (the groupName should be ""Redundant constructs"")",2017-09-01 10:04:01
683,"@@ -254,13 +256,17 @@ class DataClassMembersGenerator(
                     irLetS(",I think with your comments to irLetS this might not be needed. It looks like irLetS will just return the symbol for the IrGet and therefore I don't think it is needed for this?,2019-05-14 14:58:31
312,"@@ -254,6 +254,10 @@ abstract class KotlinParameterInfoWithCallHandlerBase<TArgumentList : KtElement,
         return buildString {
             if (named) append(""["")
 
+            parameter.annotations.getAllAnnotations().forEach {
+                it.annotation.fqName?.shortName()?.asString()?.let { append(""@$it "") }","Please, extract fqName to variable to reduce safe-call count",2017-10-25 15:08:53
356,"@@ -255,6 +260,25 @@ class KtLightAnnotationForSourceEntry(
 
     override fun findDeclaredAttributeValue(name: String?) = clsDelegate.findDeclaredAttributeValue(name)?.let { wrapAnnotationValue(it) }
 
+    override fun getParameterList(): PsiAnnotationParameterList = KtLightAnnotationParameterList(super.getParameterList())
+
+    inner class KtLightAnnotationParameterList(private val list: PsiAnnotationParameterList) : KtLightElementBase(this),
+        PsiAnnotationParameterList {",Formatting: `{` should be on the next line.,2018-02-06 15:28:27
271,"@@ -256,6 +255,16 @@ public KotlinType getBodyExpressionType(
         DataFlowInfo beforeJumpInfo = newContext.dataFlowInfo;
         boolean jumpOutPossible = false;
         for (Iterator<? extends KtElement> iterator = block.iterator(); iterator.hasNext(); ) {
+            // Use filtering trace to keep effect system cache only for one statement","For me this place is not very clear, check it with @erokhins ",2017-08-15 16:02:59
546,"@@ -258,29 +140,45 @@ class KotlinUastLanguagePlugin : UastLanguagePlugin {
             else -> false
         }
     }
+
+    @Suppress(""UNCHECKED_CAST"")
+    fun <T : UElement> convertElement(element: PsiElement, parent: UElement?, requiredTypes: Array<out Class<out T>>): T? {
+        val nonEmptyRequiredTypes = requiredTypes.nonEmptyOr(DEFAULT_TYPES_LIST)
+//        if (!canConvert(element.javaClass, requiredTypes)) return null",Maybe delete the comment?,2019-01-28 21:31:28
352,"@@ -26,7 +26,7 @@ fun t1(x: Int) = when(<!UNUSED_EXPRESSION!>x<!>) {
 }
 
 fun t5(x: Int) = <!NO_ELSE_IN_WHEN!>when<!> (x) {
-    <!USELESS_IS_CHECK!>is Int<!> -> 1
+    is <!USELESS_IS_CHECK!>Int<!> -> 1",Why should this diagnostic be moved?,2018-02-06 08:56:36
982,"@@ -262,3 +267,26 @@ private class UpdateFunctionCallSites(
         }
     }
 }
+
+private class UpdateConstantFacadePropertyReferences(private val context: JvmBackendContext) : ClassLoweringPass {","~~Do you need this as a ClassLoweringPass? You're creating it only to call lower(). It can just be a private method, or merge it with the anonymous IrElementTransformerVoid.~~ Never mind I thought you were passing in an IrClass, didn't notice it was an IrModuleFragment",2020-02-07 08:01:03
317,"@@ -2622,6 +2622,16 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.SelfAssignmentInspection""
+                     displayName=""Self assignment""
+                     groupPath=""Kotlin""
+                     groupName=""Probable bugs""
+                     enabledByDefault=""true""
+                     cleanupTool=""true""","Please do not set `cleanupTool = true` if you are not absolutely sure that your inspection should be included into ""Code Cleanup"" action.",2017-11-01 10:22:06
318,"@@ -2633,6 +2633,16 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.RecursiveEqualsCallInspection""
+                     displayName=""Recursive equals call""
+                     groupPath=""Kotlin""
+                     groupName=""Probable bugs""
+                     enabledByDefault=""true""
+                     cleanupTool=""true""","Please, do not mark everything as `cleanupTool=true`",2017-11-09 13:18:07
412,"@@ -267,7 +267,7 @@ public inline fun String(chars: CharArray): String =
  * Converts the characters from a portion of the specified array to a string.
  */
 @kotlin.internal.InlineOnly
-public inline fun String(chars: CharArray, offset: Int, length: Int): String =
+public actual inline fun String(chars: CharArray, offset: Int, length: Int): String =",It's worth to provide common `String(chars: CharArray)` too.,2018-05-21 15:40:42
503,"@@ -269,7 +271,10 @@ fun KtDeclaration.implicitVisibility(): KtModifierKeywordToken? =
         }
     }
 
-fun KtModifierListOwner.canBePrivate() = modifierList?.hasModifier(KtTokens.ABSTRACT_KEYWORD) != true
+fun KtModifierListOwner.canBePrivate(): Boolean {",What about `internal` visibility?,2018-09-26 15:55:42
878,"@@ -27,4 +27,8 @@ internal class JasmineLikeAdapter : FrameworkAdapter {
             it(name, testFn)
         }
     }
-}
\ No newline at end of file
+
+    override fun beforeEach(name: String, beforeFn: () -> Any?) = kotlin.test.adapters.beforeEach(name, beforeFn)
+
+    override fun afterEach(name: String, afterFn: () -> Any?) = kotlin.test.adapters.afterEach(name, afterFn)","JasmineLikeAdapter handles Mocha, Jasmine, and Jest at the moment.

The `beforeEach` and `afterEach` API differs between Mocha and Jasmine/Jest (see https://jasmine.github.io/api/3.5/global and https://jestjs.io/docs/en/setup-teardown

It seems that this change makes Jasmine and Jest use wrong API, even for non-async tests.

One way to solve this would be using different adapters for Mocha and Jasmine/Jest. Not sure there is a reliable way to detect which one it is though.

P.S. `beforeEach('', function() {});`  results in `Error: beforeEach expects a function argument; received [object String]` in Jasmine",2019-10-31 08:41:13
745,"@@ -27,6 +27,27 @@ class SmartIdentityTable<K, V> {
     val size: Int
         get() = keysArray?.size ?: largeMap!!.size
 
+
+    val keys: Sequence<K>
+        get() = keysArray?.asSequence() ?: largeMap!!.keys.asSequence()
+
+
+    val entries: Sequence<Entry<K, V>>","I'm somewhat concerned that this method behaves slightly different depending on the size of the table. Namely, if there are no more than 10 elements, it returns a new collection, otherwise it returns a view into the current collection. Which means that if you save the result of `entries` into a variable `x` and then add more elements to the table, you'll observe the newly added elements in `x` if and only if the table size was > 10 at the point where `x` was defined. This could lead to obscure bugs in certain situations. Note that `keys` doesn't suffer from this problem, it always returns a view.

I suggest either providing a view even if the table is small (more preferably, for consistency with `keys`), or return a new collection even if it's large. In any case, it might be worth to document the specific behavior (keys vs new collection) both on `keys` and `entries`",2019-07-01 12:15:40
309,"@@ -27,7 +23,7 @@ class UastKotlinPsiVariable private constructor(
         name: String,
         typeProducer: () -> PsiType,
         val ktInitializer: KtExpression?,
-        val psiParent: PsiElement?,
+        psiParentProvider: () -> PsiElement?,",Minor nit: we're using 'producer' and 'provider' for two parameters that work in exactly the same way. Better be consistent.,2017-10-20 15:57:45
821,"@@ -27,7 +27,8 @@ class ClosureGenerationStrategy(
 ) : FunctionGenerationStrategy.FunctionDefault(state, declaration) {
 
     override fun doGenerateBody(codegen: ExpressionCodegen, signature: JvmMethodSignature) {
-        initializeVariablesForDestructuredLambdaParameters(codegen, codegen.context.functionDescriptor.valueParameters)
+        initializeVariablesForDestructuredLambdaParameters(","Minor. Can you, please, remove default argument from `initializeVariablesForDestructuredLambdaParameters`, since this was the only place, which used it?",2019-09-26 15:13:02
760,"@@ -27,7 +28,7 @@ class ScratchRunLineMarkerContributor : RunLineMarkerContributor() {
         val ktFile = element.containingFile as? KtFile
         if (ktFile?.isScript() != true) return null
         val file = ktFile.virtualFile
-        if (ScratchFileService.getInstance().getRootType(file) !is ScratchRootType) return null
+        if (!(ScratchFileService.getInstance().getRootType(file) is ScratchRootType || file.isKotlinWorksheet)) return null","Let's extract the similar `isKotlinScratch` property, so this `if` become more readable (fix also the usage in `ScratchFileHook`)",2019-07-18 09:53:18
415,"@@ -270,3 +270,13 @@ expect fun Long.toString(radix: Int): String
 internal expect fun checkRadix(radix: Int): Int
 
 internal expect fun digitOf(char: Char, radix: Int): Int
+
+/**
+ * Converts the characters in the specified array to a string.
+ */
+expect inline fun String(chars: CharArray): String
+
+/**
+ * Converts the characters from a portion of the specified array to a string.
+ */
+expect inline fun String(chars: CharArray, offset: Int, length: Int): String","`inline` is an implementation detail of these functions, which may be or may not be suitable on a particular platform.
There's no reason to require it to be inline in the expectation.",2018-05-23 03:33:28
322,"@@ -270,6 +270,8 @@ class UnusedSymbolInspection : AbstractKotlinInspection() {
             return false
         }
 
+        if (!ReferencesSearch.search(declaration, useScope).forEach(::checkReference)) return true","It's Ok but I don't like that we now invoke references search twice, it can affect performance. I'd consider here to do this only for particular case with `JvmName`. Will fix myself.",2017-11-27 08:41:37
504,"@@ -271,10 +269,7 @@ fun KtDeclaration.implicitVisibility(): KtModifierKeywordToken? =
         }
     }
 
-fun KtModifierListOwner.canBePrivate(): Boolean {
-    if (this is KtProperty && this.findAnnotation(FqName(""kotlin.jvm.JvmField"")) != null) return false
-    return modifierList?.hasModifier(KtTokens.ABSTRACT_KEYWORD) != true
-}
+fun KtModifierListOwner.canBePrivate() = modifierList?.hasModifier(KtTokens.ABSTRACT_KEYWORD) != true","I'd say it's not the best way to fix it. It's more correct to have all necessary checks inside `canBePrivate` and `canBeInternal` (which does not yet exist). Take into account the fact that both `ChangeVisibilityFix` and `ChangeVisibilityModifierIntention` use `canBePrivate` (and should probably share the same logic). Also I'd recommend to consider content of `canBePrivate` inside `MemberVisibilityCanBePrivateInspection` (private fun). I suspect that some checks from there (not all) could be used inside global `canBePrivate` (that can also fix a bunch of minor bugs, not reported yet).",2018-09-27 07:48:55
344,"@@ -271,6 +271,14 @@ class Collections {
             assertTrue(set == other, ""Empty sets are equal"")
             assertPrints(set, ""[]"")
         }
+
+        @Sample
+        fun readOnlySet() {
+            val emptySet: Set<Int> = setOf()",`setOf` is already covered by the sample above. Take a look at `readOnlyList` and `singletonReadOnlyList` samples for an example.,2018-01-15 02:31:44
373,"@@ -2710,6 +2715,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.intentions.ConvertPairConstructorToToFunctionInspection""
+                     displayName=""Convert Pair constructor to 'to' function""
+                     groupPath=""Kotlin""
+                     groupName=""Style issues""
+                     enabledByDefault=""true""
+                     level=""WEAK WARNING""","Not quite sure but I'd prefer `INFORMATION` level here. I think these two kinds of syntax are more or less equivalent. May be `to` looks a bit nicer, but not in every case.",2018-02-28 09:01:48
380,"@@ -2713,6 +2713,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.RedundantCompanionReferenceInspection""
+                     displayName=""Redundant Companion reference""
+                     groupPath=""Kotlin""
+                     groupName=""Style issues""",Redundant constructs should be better here,2018-03-07 12:09:40
381,"@@ -2713,6 +2713,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.RedundantCompanionReferenceInspection""
+                     displayName=""Redundant Companion reference""
+                     groupPath=""Kotlin""
+                     groupName=""Style issues""
+                     enabledByDefault=""true""
+                     level=""WEAK WARNING""",I'd upgrade it to WARNING,2018-03-07 12:11:50
953,"@@ -274,6 +272,7 @@ private val jvmFilePhases =
         singleAbstractMethodPhase then
         assertionPhase then
         returnableBlocksPhase then
+        sharedVariablesPhase then",Why this move is required?,2020-01-23 08:45:52
807,"@@ -278,7 +279,12 @@ open class ConvertLambdaToReferenceIntention(text: String) :
             }
         }
 
-        private fun KtCallExpression.getCallReferencedName() = (calleeExpression as? KtNameReferenceExpression)?.getReferencedName()
+        private fun KtCallExpression.getCallReferencedName() = (calleeExpression as? KtNameReferenceExpression)?.getSafeReferencedName()
+        
+        private fun KtNameReferenceExpression.getSafeReferencedName(): String {",I think you should replace the body of this function with `getReferencedNameAsName().render()`.,2019-09-23 05:58:33
874,"@@ -28,14 +27,14 @@ fun box(): String {
         withLineBreak()
         return ""FAIL 0""
     } catch (e: RuntimeException) {
-        if (e.stackTrace[0].lineNumber != 19) return ""FAIL 1 ${e.stackTrace[0].lineNumber}""",I would prefer to avoid unecessery test data changes: so it's best to add new line after // FULL_JDK,2019-10-29 14:39:07
160,"@@ -28,41 +28,47 @@ import org.jetbrains.kotlin.resolve.lazy.BodyResolveMode
 class UnnecessaryJavaUsageInspection : AbstractKotlinInspection(), CleanupLocalInspectionTool {
 
     val patterns = mapOf(
-            ""java.io.PrintStream.println"" to ""println($0)"",
-            ""java.io.PrintStream.print"" to ""print($0)"",
-            ""java.util.Collections.sort"" to ""$0.sort()""
+            ""java.io.PrintStream.println"" to Pair(""println($0)"", false),","This boolean value is quite unclear. Much better to use an enum instead.
",2016-05-23 17:59:43
862,"@@ -28,6 +26,7 @@ class Dummy
 fun enableAssertions(): CheckerJvmAssertInlineFunctionAssertionsEnabled {
     val loader = Dummy::class.java.classLoader
     loader.setClassAssertionStatus(""CheckerJvmAssertInlineFunctionAssertionsEnabled"", true)
+    loader.setClassAssertionStatus(""InlineKt"", false)",Looks like redundant.,2019-10-18 12:25:48
677,"@@ -28,6 +30,7 @@ import org.jetbrains.kotlin.ir.util.transformDeclarationsFlat
 import org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid
 import org.jetbrains.kotlin.ir.visitors.transformChildrenVoid
 
+// This pass has to run after LocalDeclarationsLowering, since we don't handle nested functions.","Now, instead of documenting the dependency in a comment, you could specify it in the `prerequisite` field of the phase.",2019-05-13 13:14:06
270,"@@ -28,60 +28,60 @@ public inline fun TODO(reason: String): Nothing = throw NotImplementedError(""An
  * Calls the specified function [block] and returns its result.
  */
 @kotlin.internal.InlineOnly
-public inline fun <R> run(block: () -> R): R = block()
+public inline fun <R> run(@kotlin.internal.CalledInPlace(kotlin.internal.InvocationCount.EXACTLY_ONCE) block: () -> R): R = block()",Can we annotate also both `TODO` functions?,2017-08-15 15:56:21
705,"@@ -28,7 +28,7 @@ private fun Name.shouldBeEscaped(): Boolean {
     if (isSpecial) return false
 
     val string = asString()
-    return string in KeywordStringsGenerated.KEYWORDS || string.any { !Character.isLetterOrDigit(it) && it != '_' }
+    return string in KeywordStringsGenerated.KEYWORDS || string.any { !Character.isLetterOrDigit(it) }","Look at https://teamcity.jetbrains.com/viewLog.html?buildId=2319666
This is incorrect fix.",2019-05-23 09:00:03
357,"@@ -28,8 +28,10 @@ private fun <T : Throwable> assertFailsWithImpl(exceptionClass: Class<T>, messag
         block()
     } catch (e: Throwable) {
         if (exceptionClass.isInstance(e)) {
-            @Suppress(""UNCHECKED_CAST"")
-            return e as T
+            if (message == null || message == e.message) {","This should be replaced with a proper assertion and failure. If the message doesn't match you'll get a cryptic failure saying ""Expected an exception of type RuntimeException to be thrown, but was RuntimeException"".",2018-02-15 16:06:37
780,"@@ -285,6 +285,25 @@ open class SymbolTable : ReferenceSymbolTable {
 
     val unboundEnumEntries: Set<IrEnumEntrySymbol> get() = enumEntrySymbolTable.unboundSymbols
 
+    fun declareFieldWithVisibility(
+        startOffset: Int,
+        endOffset: Int,
+        origin: IrDeclarationOrigin,
+        descriptor: PropertyDescriptor,
+        type: IrType,
+        visibility: Visibility,","Similarly, would be nice to have a default value in `declareField` instead. Also consider specifying the actual argument value for clarity (when it's for example obviously private or public) in as many call sites as possible",2019-08-13 14:58:25
788,"@@ -285,8 +285,7 @@ internal class HeaderProcessor(
                         progressionType.elementCastFunctionName
                     ),
                     nameHint = ""inductionVariable"",
-                    isMutable = true,
-                    origin = IrDeclarationOrigin.FOR_LOOP_IMPLICIT_VARIABLE",I left the declaration of this origin in the source code as kotlin-native is still using it until we unify the for loops lowerings.,2019-08-29 11:57:36
979,"@@ -286,7 +286,7 @@ fun IrSimpleFunction.collectRealOverrides(): Set<IrSimpleFunction> {
 // This implementation is from kotlin-native
 // TODO: use this implementation instead of any other
 fun IrSimpleFunction.resolveFakeOverride(): IrSimpleFunction? {
-    return collectRealOverrides().singleOrNull { it.modality != Modality.ABSTRACT }
+    return collectRealOverrides().firstOrNull { it.modality != Modality.ABSTRACT }",I think there is an assumption that we could have only one real implementation for a fake override and it would be nice to keep it. I'd suggest adding another implementation with Deprecated annotation instead of modifying this one.,2020-02-03 18:43:30
429,"@@ -2863,6 +2863,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.AnnotationTargetExpressionInspection""
+                     displayName=""Annotation with target 'EXPRESSION' and retention 'BINARY' or 'RUNTIME'""","This doesn't describe the problem. `should have a 'SOURCE"" retention` or `should not have a 'BINARY' or 'RUNTIME' retention` would be better.",2018-06-19 18:19:12
46,"@@ -287,6 +287,10 @@ convert.negated.expression.with.demorgans.law=Convert negated expression to DeMo
 convert.negated.expression.with.demorgans.law.family=Convert negated expression to DeMorgan's equivalent
 split.if=Split into 2 if's
 split.if.family=Split If
+make.type.explicit.in.lambda=Make types explicit
+make.type.explicit.in.lambda.family=Make Types Explicit
+make.type.implicit.in.lambda=Make types implicit
+make.type.implicit.in.lambda.family=Make Types Implicit","Why not `... in lambda` ?
",2014-04-09 15:57:50
823,"@@ -287,8 +287,7 @@ public boolean checkAvailable(@NotNull Editor editor, @NotNull PsiFile file, @No
 
         PsiElement sibling = getLastNonWhiteSiblingInLine(firstNonWhiteSibling(sourceRange, down), editor, down);
 
-        // Either reached last sibling, or jumped over multi-line whitespace
-        if (sibling == null)  {
+        if (sibling == null || sibling instanceof KtPackageDirective || sibling instanceof KtImportList)  {",This is also actual for expressions because of scripts.,2019-09-30 10:04:43
986,"@@ -29,11 +30,14 @@ object ArrayIterator : IntrinsicMethod() {
         signature: JvmMethodSignature,
         context: JvmBackendContext
     ): IrIntrinsicFunction {
-        val owner = context.typeMapper.mapClass(expression.symbol.owner.parentAsClass)
+        val isPrimitive = ((expression.type as? IrSimpleType)?.arguments?.size ?: 0) == 0","This change can break other back-ends, we should at least check it by remote run (I will do). In general, it's better to avoid changes in back-ends when fixing FIR2IR. I think @udalov can tell us more precise whether this change is acceptable or not.",2020-02-10 07:52:28
293,"@@ -29,6 +29,7 @@ abstract class KotlinControlFlowExpressionSurrounderBase : KotlinExpressionSurro
 
     override fun isApplicable(expression: KtExpression) = true
     override fun isApplicableToUnit() = true
+    override fun isApplicableToStatements() = false",It looks like `isApplicableToStatements() == !isApplicableToUnit()` is always true while there's separation to to `KotlinExpressionSurrounder` and `KotlinStatementsSurrounder`.,2017-09-11 17:00:12
421,"@@ -29,6 +32,21 @@ class RedundantCompanionReferenceInspection : AbstractKotlinInspection() {
             if (!objectDeclaration.isCompanion()) return
             if (expression.text != objectDeclaration.name) return
 
+            val property = parent.getStrictParentOfType<KtProperty>()
+            if (property != null && property.name == parent.selectorExpression?.text) return","What about case like below? Here we still cannot delete `Companion`, but your check does not work here.

```
class My {
    val name = ""My name""
    val greeting = ""Hello "" + Companion.name
    companion object {
        val name = ""Your name""
    }
}
```",2018-06-05 12:08:27
58,"@@ -292,6 +292,10 @@ convert.negated.boolean.sequence=Replace negated sequence with DeMorgan equivale
 convert.negated.boolean.sequence.family=Replace negated sequence with DeMorgan equivalent
 convert.negated.expression.with.demorgans.law=Convert negated expression to DeMorgan's equivalent
 convert.negated.expression.with.demorgans.law.family=Convert negated expression to DeMorgan's equivalent
+add.for.loop.indices=Add indices to for loop
+add.for.loop.indices.family=Add indices to for loop","Should be `Add Indices to For Loop`, take a look at https://github.com/JetBrains/kotlin/commit/5a0055cbeb90b0c6d80c223d4d68cc451d0ccfc1
",2014-05-12 12:49:03
588,"@@ -294,6 +364,7 @@ abstract class KotlinIrLinker(
             ?: error(""findDeserializedDeclaration: property descriptor $propertyDescriptor} is not present in propertyTable after deserialization}"")
     }
 
+    // TODO: This is Native specific. Eliminate me.",I agree that this method should be abstract ,2019-03-21 16:22:22
102,"@@ -2945,6 +2946,12 @@ public Unit invoke(InstructionAdapter v) {
         });
     }
 
+    private static boolean isInRangeValueType(Type type) {","There's `AsmUtil#isIntPrimitive`
",2015-03-04 20:31:13
533,"@@ -296,6 +296,7 @@ private val terminations = listOf(
     ""singleOrNull"",
     ""sum"",
     ""sumBy"",
+    ""sumByLong"",","I guess all these call are intentionally alphabetically ordered, thus `sumByLong` should go below `sumByDouble`",2018-12-11 19:00:27
547,"@@ -298,7 +196,8 @@ internal object KotlinConverter {
 
     internal fun convertPsiElement(element: PsiElement?,
                                    givenParent: UElement?,
-                                   requiredType: Class<out UElement>?): UElement? {
+                                   requiredType: Array<out Class<out UElement>>","I feel like it would be a good idea to rename this to something like `allowedTypes`.
Not critical, of course.",2019-01-28 21:35:00
488,"@@ -2985,6 +2985,15 @@ The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.RedundantElseInIfInspection""
+                     displayName=""Redundant 'else' in 'if'""
+                     groupPath=""Kotlin""
+                     groupName=""Redundant constructs""","Here I'd prefer just ""Style issues""",2018-08-27 10:45:52
487,"@@ -2985,6 +2985,15 @@ The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.RedundantElseInIfInspection""
+                     displayName=""Redundant 'else' in 'if'""
+                     groupPath=""Kotlin""
+                     groupName=""Redundant constructs""
+                     enabledByDefault=""true""
+                     level=""WEAK WARNING""",I suggest it should be `INFORMATION` by default,2018-08-27 10:45:31
510,"@@ -2985,6 +2985,15 @@ The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.SuspiciousCollectionReassignmentInspection""
+                     displayName=""Collection augmented assignment creates a new collection under the hood""","I think we should remove first ""Collection"": ""Augmented assignment creates ...""",2018-10-04 14:48:47
466,"@@ -2985,6 +2985,15 @@ The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.SuspiciousCollectionReassignmentInspection""
+                     displayName=""Suspicious collection reassignment by augmented assignment""","I don't like this description. It says nothing to normal user. I think we should say something about list under the hood, at least.",2018-08-14 12:52:21
508,"@@ -2988,6 +2988,15 @@ The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.SetterBackingFieldAssignmentInspection""
+                     displayName=""Setter backing field should be assigned""","I'd change name to something like ""Existing backing field is not assigned by the setter"" or ""Setter for a property with backing field should assign backing field"". Choose what you think is better, or suggest your own name (current name is grammatically incorrect).",2018-10-04 14:27:06
509,"@@ -2988,6 +2988,15 @@ The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.SetterBackingFieldAssignmentInspection""
+                     displayName=""Setter backing field should be assigned""
+                     groupPath=""Kotlin""
+                     groupName=""Redundant constructs""","It's not a redundant construct, it's much more likely to be in ""Probable bugs"".",2018-10-04 14:27:34
493,"@@ -299,19 +299,23 @@ internal fun KtIfExpression.buildSelectTransformationData(): IfThenToSelectData?
 internal fun KtExpression?.isClauseTransformableToLetOnly() =
     this is KtCallExpression && resolveToCall()?.getImplicitReceiverValue() == null
 
-internal fun KtIfExpression.shouldBeTransformed(): Boolean {
+internal fun KtIfExpression.shouldBeTransformed(transformToSafeAccess: Boolean = false): Boolean {","I think this parameter should be always true (yes, even for `IfThenToElvisInspection`), so it's not required.",2018-08-29 16:00:24
86,"@@ -3,12 +3,12 @@ package kotlin
 import java.util.*
 
 /**
- * Returns a new [[SortedSet]] with the initial elements
+ * Returns a new [SortedSet] with the given elements.
  */
 public fun sortedSetOf<T>(vararg values: T): TreeSet<T> = values.toCollection(TreeSet<T>())
 
 /**
- * Returns a new [[SortedSet]] with the given *comparator* and the initial elements
+ * Returns a new [SortedSet] with the given [comparator] and initial elements.","initial -> given as in the function above
",2015-02-09 16:00:52
261,"@@ -3,13 +3,13 @@ import kotlinApi.*
 //TODO: Formatter works incorrectly
 internal class A {
     fun foo(c: KotlinClass): Int {
-        return c.nullableProperty!!.length
-        +c.property.length
-        +KotlinClass.nullableStaticVar!!
-        +KotlinClass.staticVar
-        +KotlinClass.nullableStaticFun(1)!!
-        +KotlinClass.staticFun(1)
-        +nullableGlobalFunction("""")!!.length
-        +globalFunction("""").length
+        return (c.nullableProperty!!.length",After changes TODO comment above your code should be removed. You've already fixed it.,2017-08-04 08:43:46
818,"@@ -3,16 +3,9 @@ fun foo() {
     val range = 1 until 2
     for (i in range) {
     }
-
-    for (i in 1..2 step 4) {}",Why it's removed?,2019-09-25 08:41:43
478,"@@ -3,5 +3,5 @@ function A(v) {
 }
 
 function nativeBox(b) {
-    return b.bar_a13ma$(new A(""foo""), function($reciever, i, s) { return """" + $reciever.v + s + i })
+    return b.bar_a13ma$(new A(""foo""), function($receiver, i, s) { return """" + $reciever.v + s + i })","Even though I don't know much about JS backend, I'm pretty sure that this change will break test",2018-08-14 16:00:36
591,"@@ -3,6 +3,10 @@ import org.gradle.api.tasks.bundling.Jar
 import org.jetbrains.kotlin.gradle.dsl.KotlinCompile
 import org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile
 
+tasks.withType<Test> {
+    maxParallelForks = (Runtime.getRuntime().availableProcessors() / 2).takeIf { it > 0 } ?: 1",@sfs Please use Math.max,2019-03-25 10:13:48
642,"@@ -3,7 +3,7 @@
 
 class My {
     companion object {
-        private val my: String = ""OK""
+        val my: String = ""OK""",@pyos Please keep old test,2019-04-11 13:07:34
197,"@@ -3,7 +3,7 @@
     <property file=""resources/kotlinManifest.properties""/>
 
     <!-- Set to false to disable proguard run on kotlin-compiler.jar. Speeds up the build -->
-    <property name=""shrink"" value=""true""/>
+    <property name=""shrink"" value=""false""/>",Why? :(,2017-04-05 11:15:01
84,"@@ -3,7 +3,7 @@ package kotlin
 import java.util.Enumeration
 
 /**
- * Helper to make java.util.Enumeration usable in for
+ * Helper to make [Enumeration] usable in `for` loops.","""Creates `Iterator<T>` for an `Enumeration<T>`""
",2015-02-09 15:59:24
816,"@@ -3,7 +3,9 @@
  * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
  */
 
-@file:Suppress(""PackageDirectoryMismatch"") // Old package for compatibility
+@file:Suppress(""PackageDirectoryMismatch"")
+
+// Old package for compatibility",This comment is rather about the suppressing than about a certain package. IMO it's better to leave it at the same line with `Suppress`,2019-09-25 05:07:17
473,"@@ -3,8 +3,8 @@ package kara.internal
 /* Test <TYPO descr=""Typo: In word 'somthing'"">somthing</TYPO> */
 class <TYPO descr=""Typo: In word 'Moree'"">Moree</TYPO>Fun {
   fun <TYPO descr=""Typo: In word 'wrte'"">wrte</TYPO>() {
-    val <TYPO descr=""Typo: In word 'childen'"">childen</TYPO> = 12
-    val <warning descr=""[UNUSED_VARIABLE] Variable 'come' is never used"">come</warning> = childen
+    val <TYPO descr=""Typo: In word 'children'"">children</TYPO> = 12","Excuse me? This test is *about typos*, you shouldn't change it.",2018-08-14 15:51:36
184,"@@ -3,9 +3,9 @@ fun foo() {
         fun test() {}
     }
 
-    val d: A
+    val d =
     if (<caret>) {
-        d = A()
+        A()","I expected to generate following code

``` kotlin
    class A {
        fun test() {}
    }
    val d = if () {
        A()
    }
```

I don't think this new line is the problem with this pull request.

If I have following case

``` kotlin
fun foo() {
    <selection>class A {
        fun test() {}
    }



    val d: A = A()</selection>

    d.test()
    A()
}
```

For current kotlin plugin converts them into 

``` kotlin
    class A {
        fun test() {
        }
    }

    val d: A


    if () {
        d = A()
    }
```
",2016-10-16 07:46:40
769,"@@ -30,7 +30,7 @@ fun primitiveOp1(
     startOffset: Int, endOffset: Int,
     primitiveOpSymbol: IrSimpleFunctionSymbol,
     primitiveOpReturnType: IrType,
-    origin: IrStatementOrigin,
+    origin: IrStatementOrigin?,",Is it neccessery?,2019-07-31 07:07:31
625,"@@ -30,7 +32,7 @@ import org.jetbrains.kotlin.resolve.lazy.BodyResolveMode
 class CoroutineNonBlockingContextChecker : NonBlockingContextChecker {
 
     override fun isApplicable(file: PsiFile): Boolean {
-        val languageVersionSettings = file.project.getLanguageVersionSettings()
+        val languageVersionSettings = file.module?.languageVersionSettings ?: file.project.getLanguageVersionSettings()","I think here you should write just `file.languageVersionSettings` without these hacks. If you look inside, you see it handles your case, as well as some other cases.",2019-04-05 15:27:49
554,"@@ -302,7 +302,8 @@ public static boolean isAbstractMethod(FunctionDescriptor functionDescriptor, Ow
     }
 
     public static boolean isStaticMethod(OwnerKind kind, CallableMemberDescriptor functionDescriptor) {
-        return isStaticKind(kind) ||
+        return isStaticDeclaration(functionDescriptor) ||","Purpose of this change: Without this, the generated functions are not invoked with the correct descriptor; the enclosing class is included in the descriptor as the dispatch receiver parameter. This causes a stack underflow error during verification.",2019-02-19 22:02:06
692,"@@ -303,6 +302,12 @@ class Maps {
             assertPrints(props.getProperty(""z"", ""fail""), ""fail"")
         }
 
+        @Sample
+        fun mapMap() {
+            val peopleToAge = mapOf(""alice"" to 20, ""bob"" to 21)
+            assertPrints(peopleToAge.map { it.value }, ""[20, 21]"")","I propose to add another example (in addition to this one) with entry argument destructuring:
`peopleToAge.map { (name, age) -> ""$name is $age years old"" }`",2019-05-17 18:44:46
499,"@@ -3039,6 +3039,15 @@ The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.PropertyVarInspection""
+                     displayName=""Property 'var' has no meaning""","I think something like ""Property setter does not influence its getter result""",2018-09-19 14:37:05
500,"@@ -3039,6 +3039,15 @@ The Kotlin plugin provides language support in IntelliJ IDEA and Android Studio.
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.PropertyVarInspection""
+                     displayName=""Property 'var' has no meaning""
+                     groupPath=""Kotlin""
+                     groupName=""Style issues""","""Probable bugs""",2018-09-19 14:37:13
967,"@@ -307,13 +307,15 @@ internal class Kotlin2JsSourceSetProcessor(
 
     private fun registerCleanSourceMapTask() {
         val taskName = kotlinCompilation.composeName(""clean"", ""sourceMap"")
-        val registerTask = registerTask(project, taskName, Delete::class.java) {
+        project.registerTask<Delete>(taskName) {
             it.onlyIf { kotlinTask.get().kotlinOptions.sourceMap }","I am wondering here when the `onlyIf` statement is gonna be evaluated as calling `get()` will realize the task.
TBH, it would be nice to have someone from Gradle having a look at it.",2020-01-29 15:29:41
520,"@@ -3078,6 +3078,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.BooleanLiteralArgumentInspection""
+                     displayName=""Boolean literal arguments""
+                     groupPath=""Kotlin""
+                     groupName=""Style issues""
+                     enabledByDefault=""true""
+                     level=""INFO""",I confess I'm not sure about default level it should have. Will discuss it with my colleagues.,2018-10-24 07:04:23
870,"@@ -31,6 +31,7 @@ class RedundantGotoMethodTransformer : MethodTransformer() {
      *  (1) subsequent labels
      *      ...
      *      goto Label (can be removed)
+     *      nop        (will be removed by RedundantNopsCleanupMethodTransformer)",@pyos Please mark nop as optional,2019-10-23 06:37:38
775,"@@ -31,6 +31,7 @@ import org.jetbrains.kotlin.ir.util.*
 import org.jetbrains.kotlin.ir.visitors.IrElementTransformerVoid
 import org.jetbrains.kotlin.ir.visitors.transformChildrenVoid
 import org.jetbrains.kotlin.load.java.JvmAbi.JVM_FIELD_ANNOTATION_FQ_NAME
+import org.jetbrains.kotlin.synthetic.isVisibleOutside",Redundant import,2019-08-09 12:44:34
199,"@@ -31,7 +31,7 @@ import java.io.InputStream
 class CliVirtualFileFinder(
         private val index: JvmDependenciesIndex,
         private val scope: GlobalSearchScope
-) : VirtualFileFinder() {
+) : JavacVirtualFileFinder() {",Check attentively that nothing is changed without `use-javac` option,2017-04-05 11:29:09
919,"@@ -31,7 +32,7 @@ import org.jetbrains.org.objectweb.asm.Type
 object IteratorNext : IntrinsicMethod() {
 
     override fun toCallable(expression: IrFunctionAccessExpression, signature: JvmMethodSignature, context: JvmBackendContext): IrIntrinsicFunction {
-        val type = AsmUtil.unboxType(signature.returnType)
+        val type = if (expression.type.isPrimitiveType()) signature.returnType else AsmUtil.unboxType(signature.returnType)","@juan-chen The aim of this change is not clear, could you explain a bit?",2019-12-23 08:49:21
921,"@@ -31,7 +32,8 @@ import org.jetbrains.org.objectweb.asm.Type
 object IteratorNext : IntrinsicMethod() {
 
     override fun toCallable(expression: IrFunctionAccessExpression, signature: JvmMethodSignature, context: JvmBackendContext): IrIntrinsicFunction {
-        val type = AsmUtil.unboxType(signature.returnType)
+        // If the array element type is unboxed primitive, do not unbox. Otherwise AsmUtil.unbox throws exception",This change breaks 16 IR black box codegen tests.,2019-12-24 07:33:38
351,"@@ -3107,6 +3108,18 @@ private StackValue generateEquals(
             );
         }
 
+        if ((opToken == KtTokens.EQEQ || opToken == KtTokens.EXCLEQ) &&
+            (isEnumClass(bindingContext.getType(left).getConstructor().getDeclarationDescriptor()) ||","LHS should also be non-null. Use `TypeUtils.isNullableType` to check that type is (non-)nullable (it implements detailed check for a possibly parameterized type).

The following test should pass:
```
enum class Test { A, B }

fun eq(x: Test?, y: Test) = x == y

fun box() = if (!eq(null, A)) ""OK"" else ""Fail""
```",2018-02-05 10:56:08
358,"@@ -311,6 +311,28 @@ class Collections {
             assertPrints(moreFrequencies, ""{o=1, t=4, f=2, s=2, e=2, n=1}"")
         }
 
+        @Sample
+        fun joinTo() {
+            val sb = StringBuilder(""An existing string and a list:"")",minor: add a space after colon,2018-02-18 02:22:38
359,"@@ -311,6 +311,28 @@ class Collections {
             assertPrints(moreFrequencies, ""{o=1, t=4, f=2, s=2, e=2, n=1}"")
         }
 
+        @Sample
+        fun joinTo() {
+            val sb = StringBuilder(""An existing string and a list:"")
+            val numbers = listOf(1, 2, 3)
+            assertPrints(numbers.joinTo(sb, prefix = ""["", postfix = ""]"").toString(), ""An existing string and a list:[1, 2, 3]"")
+            
+            val lotOfNumbers = (1..100).asIterable()",`IntRange` is already an `Iterable`. What does this conversion intend to show?,2018-02-18 02:30:00
905,"@@ -314,6 +314,7 @@ object Mapping : TemplateGroupBase() {
         specialFor(ArraysOfUnsigned) { inlineOnly() }
 
         doc { ""Appends all elements yielded from results of [transform] function being invoked on each ${f.element} of original ${f.collection}, to the given [destination]."" }
+        sample(""samples.collections.Collections.Transformations.flatMap"")","The sample is for `flatMap` function, but it's placed into **`flatMapTo`**'s function template. 
But no worries: I'll fix it before merging.",2019-11-29 14:14:02
781,"@@ -319,9 +319,6 @@ FILE fqName:<root> fileName:/enum.kt
               public final fun <get-ordinal> (): kotlin.Int declared in <root>.TestEnum4
             $this: VALUE_PARAMETER name:<this> type:kotlin.Enum<<root>.TestEnum4>
         PROPERTY FAKE_OVERRIDE name:x visibility:public modality:FINAL [val]
-          FIELD FAKE_OVERRIDE name:x type:kotlin.Int visibility:public [final]",Is it expected that this fake field override was removed?,2019-08-13 15:27:33
99,"@@ -32,15 +32,49 @@ public annotation class noinline
  */
 public annotation class inline(public val strategy: InlineStrategy = InlineStrategy.AS_FUNCTION)
 
+/**
+ * Specifies the strategy for JVM bytecode generation for an inline function.","It's not JVM specific.
",2015-03-02 12:11:37
785,"@@ -32,4 +30,11 @@ open class GeneratorExtensions {
 
         companion object Instance : SamConversion()
     }
+
+    open fun computeFieldVisibility(descriptor: PropertyDescriptor): Visibility =
+        when {","Suggestion to move this logic inside the `PropertyDescriptor.fieldVisibility` in `PropertyGenerator` and return null in this method, to have only truly platform-specific code in `GeneratorExtensions` implementations",2019-08-22 16:34:21
714,"@@ -32,6 +32,7 @@ interface IrDeclarationOrigin {
     object FILE_CLASS : IrDeclarationOriginImpl(""FILE_CLASS"")
     object GENERATED_DATA_CLASS_MEMBER : IrDeclarationOriginImpl(""GENERATED_DATA_CLASS_MEMBER"")
     object GENERATED_INLINE_CLASS_MEMBER : IrDeclarationOriginImpl(""GENERATED_INLINE_CLASS_MEMBER"")
+    object SYNTHETIC_INLINE_CLASS_MEMBER : IrDeclarationOriginImpl(""SYNTHETIC_INLINE_CLASS_MEMBER"", isSynthetic = true)",Let's add this to `JvmLoweredDeclarationOrigin` instead. These origins are used in IR serialization format in Native and JS (`KotlinIr.proto`) and it's probably better to avoid adding JVM specifics here at this point,2019-05-31 13:26:43
446,"@@ -32,6 +32,7 @@ public open class CharProgression
     ) : Iterable<Char> {
     init {
         if (step == 0) throw kotlin.IllegalArgumentException(""Step must be non-zero"")
+        else if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(""Step must have an inverse"")","The exception message isn't correct because `Int.MIN_VALUE` does have an inverse: it's `Int.MAX_VALUE`.

I'll reword the message.",2018-08-01 13:24:20
253,"@@ -32,6 +50,7 @@ interface DependenciesResolver : @Suppress(""DEPRECATION"") ScriptDependenciesReso
 
     sealed class ResolveResult {","I'd simplify this by assuming that the result is ""success"" iff there are no errors:
```
data class ResolutionResult(
    val dependencies: ScriptDependencies, // ScriptDependencies.Empty in case of failure
    val diagnostics: List<ScriptDiagnostic>
) {
    val isSuccess: Boolean get() = diagnostics.none { it.severity == ERROR } // maybe an extension
}
```
",2017-07-25 11:29:13
252,"@@ -32,6 +50,7 @@ interface DependenciesResolver : @Suppress(""DEPRECATION"") ScriptDependenciesReso
 
     sealed class ResolveResult {
         abstract val dependencies: ScriptDependencies?
+        // reports -> diagnostics",+1 for `val diagnostics: List<ScriptDiagnostic>`,2017-07-25 11:25:01
294,"@@ -32,7 +33,11 @@ class KotlinIfElseExpressionSurrounder(private val withBraces: Boolean) : Kotlin
     }
 
     override fun getRange(editor: Editor, replaced: KtExpression): TextRange? {
-        return KotlinIfSurrounderBase.getRange(editor, replaced as KtIfExpression?)
+        val expression = when(replaced) {
+            is KtParenthesizedExpression -> replaced.expression as? KtIfExpression
+            else -> replaced as? KtIfExpression",`as? KtIfExpression` can be moved our of `when`.,2017-09-11 17:10:46
932,"@@ -325,15 +329,19 @@ class Fir2IrDeclarationStorage(
             }
             if (containingClass != null && !isStatic) {
                 val thisType = containingClass.thisReceiver!!.type
+                val descriptor = WrappedReceiverParameterDescriptor()","If you make similar changes in `declareDefaultSetterParameter`, this also fixes `testData/codegen/box/traits/inheritedVar.kt` 🙂 (sorry GitHub won't let me comment on line 281)",2020-01-08 09:49:13
963,"@@ -326,15 +333,13 @@ internal class KotlinCommonSourceSetProcessor(
             project.tasks.findByName(kotlinCompilation.target.artifactsTaskName)?.dependsOn(kotlinTask)","findByName triggers all task creations. There is no direct equivalent, named is the closest but might fail, so you would have to introduce a try catch.",2020-01-28 23:09:27
208,"@@ -33,10 +33,18 @@ public class StringBuilder(content: String = """") : Appendable, CharSequence {
     override val length: Int
         get() = string.asDynamic().length
 
+    fun setLength(newLength : Int) {
+        string = string.substring(0, newLength)",This implementation doesn't conform to the `setLength` method contract.,2017-04-17 19:05:52
717,"@@ -33,4 +33,6 @@ class A {
             block { block { val x = 4 }}
         }
     }
-}
\ No newline at end of file
+}
+
+// IGNORE_BACKEND: JVM_IR",I usually see this in the top of the test files. Is there any consideration putting it here?,2019-06-05 20:17:42
210,"@@ -33,6 +33,7 @@
 public class KotlinEditorOptions implements PersistentStateComponent<KotlinEditorOptions> {
     private boolean donTShowConversionDialog = false;
     private boolean enableJavaToKotlinConversion = true;
+    private boolean enableSmartEditing = true;","I don't like the idea of adding a preference for this behavior. First of all, the name of the preference says nothing at all to the user. Second, if anyone becomes annoyed by the behavior, it's quite hard for them to discover how to change it.",2017-04-19 10:20:22
936,"@@ -33,6 +33,7 @@ import org.jetbrains.kotlin.ir.types.impl.IrUninitializedType
 import org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid
 import org.jetbrains.kotlin.ir.visitors.acceptChildrenVoid
 import org.jetbrains.kotlin.ir.visitors.acceptVoid
+import org.jetbrains.kotlin.name.Name",Minor: unused import. I'll remove it before pushing.,2020-01-09 08:15:31
570,"@@ -33,6 +33,7 @@ interface JvmLoweredDeclarationOrigin : IrDeclarationOrigin {
     object JVM_OVERLOADS_WRAPPER : IrDeclarationOriginImpl(""JVM_OVERLOADS_WRAPPER"")
     object SYNTHETIC_METHOD_FOR_PROPERTY_ANNOTATIONS :
         IrDeclarationOriginImpl(""SYNTHETIC_METHOD_FOR_PROPERTY_ANNOTATIONS"", isSynthetic = true)
+    object GENERATED_PROPERTY_REFERENCE : IrDeclarationOriginImpl(""GENERATED_PROPERTY_REFERECE"", isSynthetic = true)",There's a typo in the string... :) REFERECE -> REFERENCE,2019-03-12 11:34:49
515,"@@ -33,6 +33,8 @@ class CommentSaver(originalElements: PsiChildRange, private val saveLineBreaks:
     private val SAVED_TREE_KEY = Key<TreeElement>(""SAVED_TREE"")
     private val psiFactory = KtPsiFactory(originalElements.first!!)
 
+    private var testCount = 0",Looks like not used,2018-10-23 09:39:08
283,"@@ -33,7 +33,11 @@
             new KotlinWhenSurrounder() ,
             new KotlinRuntimeTypeCastSurrounder(),
             new KotlinWithIfExpressionSurrounder(/* withElse = */false),
-            new KotlinWithIfExpressionSurrounder(/* withElse = */true)
+            new KotlinWithIfExpressionSurrounder(/* withElse = */true),
+            new KotlinTryCatchExpressionSurrounder(),
+            new KotlinTryCatchFinallyExpressionSurrounder(),
+            new KotlinIfElseExpressionSurrounder(false),","I am not a decisive person, not Kotlin team member, but I think that you should follow an example above - I believe that was made for a specific purpose - and add commented parameter to `KotlinIfElseExpressionSurrounder` callings.

So your code would be:
```
            new KotlinWithIfExpressionSurrounder(/* withElse = */false),
            new KotlinWithIfExpressionSurrounder(/* withElse = */true),
            new KotlinTryCatchExpressionSurrounder(),
            new KotlinTryCatchFinallyExpressionSurrounder(),
            new KotlinIfElseExpressionSurrounder(/* withBraces = */false),
            new KotlinIfElseExpressionSurrounder(/* withBraces = */true)",2017-08-19 20:35:02
162,"@@ -33,7 +33,7 @@
         <dependency>
             <groupId>com.android.tools.build</groupId>
             <artifactId>gradle</artifactId>
-            <version>1.1.0</version>
+            <version>1.3.0</version>","I suppose this isn't strictly needed since the plugin is looked up by name.
",2016-06-06 03:48:55
593,"@@ -3322,6 +3322,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.KotlinCovariantEqualsInspection""
+                     displayName=""Covariant 'equals()'""
+                     groupPath=""Kotlin""
+                     groupName=""Probable bugs""
+                     enabledByDefault=""false""",`enabledByDefault` should be `true`.,2019-03-28 12:57:05
608,"@@ -3322,6 +3322,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.ReplaceNotNullAssertionWithElvisReturnInspection""
+                     displayName=""Replace '!!' with '?: return'""
+                     groupPath=""Kotlin""
+                     groupName=""Style issues""
+                     enabledByDefault=""false""
+                     level=""INFORMATION""",`WEAK WARNING`,2019-04-01 16:17:11
619,"@@ -3346,8 +3346,8 @@
                      language=""kotlin""
     />
 
-    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.ReplaceJavaIntegerToStringWithMemberInspection""
-                     displayName=""Replace 'Integer.toString(int)' with 'int.toString()'""
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.ReplaceJavaNumberToStringWithMemberInspection""
+                     displayName=""Replace 'Number.toString(int)' with 'number.toString()'""","I find `Number.toString(int)` here slightly confusing, because `Number` class doesn't have such method. Also `int` parameter would be confusing for other numeric types.

Perhaps `Replace static 'toString(number)' with 'number.toString()'` would read better?",2019-04-04 15:24:36
726,"@@ -336,10 +337,10 @@ public void visitMaxs(int maxStack, int maxLocals) {
          */
         int max = 0;
         Stack<LabelWrapper> stack = new Stack<>();
-        Set<LabelWrapper> pushed = new HashSet<>();
+        Map<LabelWrapper, LabelWrapper> pushed = new SmartHashMap<>();",Why not use `org.jetbrains.kotlin.utils.SmartSet` here?,2019-06-11 13:07:17
695,"@@ -336,7 +336,7 @@ internal class HeaderProcessor(
     }
 
     private fun DeclarationIrBuilder.ensureNotNullable(expression: IrExpression) =
-        if (expression.type is IrSimpleType && expression.type.isNullable()) {
+        if (expression.type is IrSimpleType && expression.type.isNullable) {","In the future, please extract refactorings that don't change behavior (function -> property conversion, renames, moves between packages) into separate commits. This simplifies review a lot.",2019-05-20 15:00:40
896,"@@ -337,6 +337,94 @@ class Collections {
 
     class Transformations {
 
+        @Sample
+        fun associate() {
+            data class Person(val firstName: String, val lastName: String)
+
+            val scientists = listOf(Person(""Grace"", ""Hopper""), Person(""Jacob"", ""Bernoulli""), Person(""Johann"", ""Bernoulli""))
+
+            val byLastName = scientists.associate { it.lastName to it.firstName }","While this reads good, it can be replaced with more efficient, though little less pretty  `associate({ it.lastName }, { it.firstName })`. The real strength of _this_ overload is that it can map the item somehow and then use the properties of that result as key and value.
For example, suppose we have a list of names as `listOf(""Grace Hopper"", ""Jacob Bernoulli"", ...)`. Then we can build the same map as in this sample as following:
```
names.associate { it.split("" "").let { (firstName, lastName) -> lastName to firstName } }
```
Without this overload we would have to split the name string twice or use an intermediate `map` operation.
",2019-11-22 20:16:39
323,"@@ -34,3 +34,5 @@ build/
 .idea/compiler.xml
 .idea/inspectionProfiles/profiles_settings.xml
 .idea/.name
+*.class
+*.kotlin_module",Please avoid commiting changes in all configuration files without a reason,2017-11-30 12:29:35
387,"@@ -34,6 +34,7 @@
     public static final Type NUMBER_TYPE = getType(Number.class);
     public static final Type BOOLEAN_WRAPPER_TYPE = getType(Boolean.class);
     public static final Type CHARACTER_WRAPPER_TYPE = getType(Character.class);
+    public static final Type VOID_TYPE = getType(Void.class);","There's already `Type.VOID_TYPE`, please use it instead",2018-03-20 18:11:12
355,"@@ -34,6 +34,7 @@ object OperatorNameConventions {
     @JvmField val HAS_NEXT = Name.identifier(""hasNext"")
 
     @JvmField val COMPONENT_REGEX = Regex(""component\\d+"")
+    @JvmField val DECONSTRUCT = Name.identifier(""deconstruct"")","Don't quite understand why this is needed. If you write a design document, please mention this moment there.",2018-02-06 09:09:33
645,"@@ -3404,7 +3404,16 @@
                      level=""WEAK WARNING""
                      language=""kotlin""
     />
-    
+
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.ReplaceNotNullAssertionWithMapNotNullInspection""
+                     displayName=""Replace '!!' with 'mapNotNull'""",`'map' with not-null assertion should be simplified to 'mapNotNull'` looks better.,2019-04-19 13:07:31
669,"@@ -342,7 +344,9 @@ private val IrClass.flags: Int
 private val IrField.flags: Int
     get() = origin.flags or visibility.flags or
             (if (isFinal) Opcodes.ACC_FINAL else 0) or
-            (if (isStatic) Opcodes.ACC_STATIC else 0)
+            (if (isStatic) Opcodes.ACC_STATIC else 0) or
+            (annotations.findAnnotation(VOLATILE_ANNOTATION_FQ_NAME)?.let { Opcodes.ACC_VOLATILE } ?: 0) or",Maybe `if` with `hasAnnotation`?,2019-05-10 13:23:04
302,"@@ -344,6 +343,15 @@ class KotlinCompletionContributor : CompletionContributor() {
 
                 super.handleInsert(context)
             }
+
+            private fun getToken(file: PsiFile, document: Document, startOffset: Int): PsiElement {",Minor note: the second parameter could probably be generalized to `document.charsSequence`,2017-09-18 10:44:45
860,"@@ -3456,6 +3456,15 @@
                      language=""kotlin""
     />
 
+    <localInspection implementationClass=""org.jetbrains.kotlin.idea.inspections.UnusedUnaryOperatorInspection""
+                     displayName=""Unused unary operator""
+                     groupPath=""Kotlin""
+                     groupName=""Redundant constructs""",`Probable bugs` will be more correct.,2019-10-18 08:48:19
601,"@@ -346,6 +346,7 @@ object Aggregates : TemplateGroupBase() {
             if (!iterator.hasNext()) return null
 
             var minElem = iterator.next()
+            if (!iterator.hasNext()) return minElem
             var minValue = selector(minElem)
             while (iterator.hasNext()) {",Condition check now can be moved to the end of the loop by replacing `while(...) { }` loop with `do { } while(...)` to avoid checking `iterator.hasNext()` twice on the first iteration.,2019-03-30 02:26:15
512,"@@ -35,12 +36,18 @@ class SetterBackingFieldAssignmentInspection : AbstractKotlinInspection(), Clean
                                 arg.text == parameter?.text
                                         && arg.getArgumentExpression().getResolvedCall(context)?.resultingDescriptor == parameterDescriptor
                             }
+                        is KtNameReferenceExpression -> {
+                            hasBackingField = it.text == KtTokens.FIELD_KEYWORD.value","There is `BindingContext.BACKING_FIELD_REQUIRED`, please use it and not a raw text check",2018-10-09 07:48:01
585,"@@ -35,17 +35,11 @@ class JvmBuiltinOptimizationLowering(val context: JvmBackendContext) : FileLower
 
     companion object {
         fun isNegation(expression: IrExpression, context: JvmBackendContext): Boolean {",I think both these functions can now be inlined,2019-03-18 12:05:55
12,"@@ -35,33 +34,35 @@
 
 import javax.swing.*;
 
-public class DescriptorClassMember implements ClassMemberWithElement {
+public class DescriptorClassMember extends MemberChooserObjectBase implements ClassMemberWithElement {","Copying replaced with delegation, please, pay attention - I rebased on master and squash fix into existing commit.
",2013-01-15 19:29:16
131,"@@ -35,6 +35,16 @@ target(AnnotationTarget.FUNCTION, AnnotationTarget.PROPERTY, AnnotationTarget.FI
 public annotation(retention = AnnotationRetention.RUNTIME, mustBeDocumented = true) class jvmStatic
 
 /**
+ * Specifies the name for the target platform element (Java method, JavaScript function)","Documentation should probably not mention JavaScript anymore
",2015-08-25 12:48:50
691,"@@ -35,6 +35,7 @@ import org.jetbrains.kotlin.util.ExtensionProvider
 
 interface DiagnosticSuppressor {
     fun isSuppressed(diagnostic: Diagnostic): Boolean
+    fun isSuppressed(diagnostic: Diagnostic, bindingContext: BindingContext?): Boolean = isSuppressed(diagnostic)","Why `bindingContext` is nullable here?
Note that we have `BindingContext.EMPTY` that can be used when there is no binding context",2019-05-17 14:30:07
506,"@@ -36,10 +39,11 @@ class AddWhenElseBranchFix(element: KtWhenExpression) : KotlinQuickFixAction<KtW
     override fun invoke(project: Project, editor: Editor?, file: KtFile) {
         val element = element ?: return
         val psiFactory = KtPsiFactory(file)
-        val entry = psiFactory.createWhenEntry(""else -> {}"")
+        val entry = psiFactory.createWhenEntry(""else -> TODO()"")","Not quite sure adding `TODO()` is a good idea here (because removing it can be also not easy enough). I'd agree with the suggestion from an issue comment: ""generate `""else -> ""` and put the caret after it (do not forget space after the arrow: `""-> ""`!)""",2018-10-01 06:09:38
482,"@@ -360,6 +357,11 @@ fun main(args: Array<String>) {
             model(""checkLocalVariablesTable"", targetBackend = TargetBackend.JVM_IR)
         }
 
+        testClass<AbstractIrLineNumberTest> {
+            model(""lineNumber"", recursive = false, targetBackend = TargetBackend.JVM_IR)",A bit obsolete: see updated origin,2018-08-24 11:42:46
419,"@@ -366,13 +366,20 @@ object KSerializerDescriptorResolver {
 
         val args = mutableListOf<ValueParameterDescriptor>()
         var i = 0
+
+        val targ = TypeParameterDescriptorImpl.createWithDefaultBound(f, Annotations.EMPTY, false, Variance.INVARIANT, Name.identifier(""T""), 0)","It would be perfect to take type arguments from `thisClass` instead of creating them in-place, because they should match – to operate on `Data<E,V>` we need `KSerializer<E>` and `KSerializer<V>`. 
However, this might be tricky and requires knowledge of compiler API; to bypass annotation processors/bytecode validators, AFAIK, it is sufficient just to declare them in-place.",2018-05-24 11:14:20
417,"@@ -366,13 +366,20 @@ object KSerializerDescriptorResolver {
 
         val args = mutableListOf<ValueParameterDescriptor>()
         var i = 0
+
+        val targ = TypeParameterDescriptorImpl.createWithDefaultBound(f, Annotations.EMPTY, false, Variance.INVARIANT, Name.identifier(""T""), 0)
+        val typeArguments = listOf(TypeProjectionImpl(targ.defaultType))
+
+        val koutputClass = KotlinTypeFactory.simpleNotNullType(Annotations.EMPTY,","`KOutput` does not have type parameters, so I have no idea why it helps here",2018-05-24 11:06:08
664,"@@ -366,6 +369,11 @@ class ExpressionCodegen(
             }
         }
 
+        //Reset line number if this call has non-const argument","This doesn't seem like the right fix to me. It seems to me that we should always mark the line number here for the call instead of marking it in the callers so that we get the line number for the call after evaluating the parameters. The other issue for these tests seems to be that we do not get the last line number emitted by the inline codegen correctly reflected here and therefore, we thing that the last line number emitted is still the line number of the call even though it isn't. ",2019-05-06 09:52:27
276,"@@ -367,7 +368,8 @@ class ControlFlowInformationProvider private constructor(
         // Do not consider top-level properties
         if (containingDeclarationDescriptor is PackageFragmentDescriptor) return false
         var parentDeclaration = getElementParentDeclaration(writeValueInstruction.element)
-        while (true) {
+
+        loop@ while (true) {",I recommend some self-describing name for this label,2017-08-16 09:39:02
407,"@@ -37,3 +37,17 @@ public fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {
  * Returns `true` if this character is a Unicode surrogate code unit.
  */
 public fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE
+
+/**
+ * Minimum value for character
+ * @see <a href=""https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"">",I don't think this way of linking is supported in `@see` tag.  I'm not sure what is the purpose of these links anyway.,2018-05-14 15:53:38
984,"@@ -37,6 +37,7 @@ interface IrDeclarationOrigin {
     object MOVED_EXTENSION_RECEIVER : IrDeclarationOriginImpl(""MOVED_EXTENSION_RECEIVER"")
 
     object FILE_CLASS : IrDeclarationOriginImpl(""FILE_CLASS"")
+    object MULTIFILE_PART_CLASS : IrDeclarationOriginImpl(""MULTIFILE_PART_CLASS"", isSynthetic = true)","We have another compilation mode of multifile class facades and parts, enabled by `-Xmultifile-parts-inherit` and used for example in kotlin-stdlib, where instead of generating delegating ""bridges"" in the facade, we just sort all the parts and inherit them from each other, and then inherit the facade from the last part.

In that mode I believe the parts should _not_ be synthetic, since otherwise methods declared there would not be visible from Java. I'm not sure why there are no tests on this (maybe because we use kotlin-stdlib itself as a test case).",2020-02-07 17:32:25
151,"@@ -371,6 +371,8 @@ class QuickFixRegistrar : QuickFixContributor {
 
         DATA_CLASS_NOT_PROPERTY_PARAMETER.registerFactory(AddValVarToConstructorParameterAction.QuickFixFactory)
 
-        NON_LOCAL_RETURN_NOT_ALLOWED.registerFactory(AddCrossInlineFix)
+        NON_LOCAL_RETURN_NOT_ALLOWED.registerFactory(ConvertExtensionToFunctionTypeFix)","This seems to be an accidental change, please revert
",2016-04-28 08:30:42
796,"@@ -375,16 +380,22 @@ internal class ArrayIterationHandler(context: CommonBackendContext) : IndexedGet
         get() = getClass()!!.properties.first { it.name == Name.identifier(""size"") }.getter!!
 
     override val IrType.getFunction
-        get() = getClass()!!.functions.first { it.name.asString() == ""get"" }
+        get() = getClass()!!.functions.first { it.name == Name.identifier(""get"") }","I would prefer to use 'name.asString() == ""get""' instead of Name object creation or at least extract Name object to global properties",2019-09-03 13:55:41
222,"@@ -375,6 +382,7 @@
                 <zipfileset src=""${dependencies}/jline.jar""/>
                 <zipfileset src=""${dependencies}/javaslang-2.0.6.jar""/>
                 <zipfileset src=""${protobuf.jar}""/>
+                <zipfileset src=""${tools.jar}""/>",This string must be removed due to licensing problems,2017-05-03 13:13:59
868,"@@ -38,6 +38,21 @@ class FriendPathsTest : TestCaseWithTmpdir() {
         )
     }
 
+    /** Regression test for KT-34251. */
+    fun testArchive_relativePath() {","
```suggestion
    fun testArchiveWithRelativePath() {
```",2019-10-22 21:45:27
618,"@@ -38,6 +41,13 @@ interface IrComposite : IrContainerExpression {
 
 interface IrReturnableBlock : IrBlock, IrSymbolOwner, IrReturnTarget {
     override val symbol: IrReturnableBlockSymbol
-    val sourceFileSymbol: IrFileSymbol?
-    val sourceFileName: String
-}
\ No newline at end of file
+    val inlineFunctionSymbol: IrFunctionSymbol?
+}
+
+val IrReturnableBlock.sourceFileSymbol: IrFileSymbol?
+    get() = inlineFunctionSymbol?.owner?.file?.symbol
+
+
+val IrReturnableBlock.sourceFileName: String",how about deprecating it?,2019-04-04 13:24:38
401,"@@ -381,7 +381,7 @@ private static void markAll(@NotNull TypeConstructor typeConstructor, @NotNull S
                     @Override
                     public boolean beforeChildren(SimpleType current) {
                         Set<SimpleType> instances =
-                                constructorToAllInstances.computeIfAbsent(current.getConstructor(), k -> new HashSet<>());",This one can also remain a `HashSet`,2018-04-30 16:58:10
675,"@@ -383,7 +383,7 @@ class KotlinTypeMapper @JvmOverloads constructor(
         resolvedCall: ResolvedCall<*>? = null
     ): CallableMethod {
         // we generate constructors of inline classes as usual functions
-        if (descriptor is ConstructorDescriptor && kind !== OwnerKind.ERASED_INLINE_CLASS) {
+        if (descriptor is ConstructorDescriptor && (kind !== OwnerKind.ERASED_INLINE_CLASS || isIrBackend)) {","It looks like the checking on ir backend is a little all over the place here. Looks like the IrBackend does a lot less here. Would it be simpler to just do separate methods to implement this for IR and non-IR and then share most of it via methods with reasonable names? 

That could maybe polute the current type mapper less and maybe make it easier to reuse this in a new type mapper for the JVM_IR backend?",2019-05-13 11:33:28
101,"@@ -3833,6 +3833,9 @@ public Unit invoke(InstructionAdapter v) {
                                 v.mark(nonnull);
                             }
                         }
+                        else if (value.type == Type.VOID_TYPE) {
+                            v.aconst(null);
+                        }
                         else {
                             v.dup();
                             generateInstanceOfInstruction(rightType);","Similar code is present in `generateInstanceOf` which probably means `Unit is Int?` is also affected?
",2015-03-04 20:27:42
115,"@@ -386,6 +386,10 @@ else if (containingDeclaration instanceof PackageFragmentDescriptor) {
     @Override
     public void visitCallExpression(@NotNull JetCallExpression expression) {
         super.visitCallExpression(expression);
+        checkSamCall(expression);
+    }
+
+    public void checkSamCall(@NotNull JetCallElement expression) {","public?
",2015-03-26 17:11:14
656,"@@ -387,13 +417,23 @@ private class SyntheticAccessorLowering(val context: JvmBackendContext) : IrElem
             return false
 
         val contextDeclarationContainer = allScopes.lastOrNull { it.irElement is IrDeclarationContainer }?.irElement
+        // context for functions in an interface is DefaultImpls
+        val adjustedContext = contextDeclarationContainer.let {","Nitpick: maybe rename to `adjustedContextContainer`, to avoid `JvmBackendContext` associations.",2019-04-25 04:39:24
882,"@@ -3871,12 +3871,11 @@ private StackValue genCmpWithNull(KtExpression exp, IElementType opToken, @Nulla
         Type type = expressionType(exp);
         StackValue argument = pregeneratedExpr != null ? pregeneratedExpr : gen(exp);
 
-        if (kotlinType == null || TypeUtils.isNullableType(kotlinType)) {
+        if (kotlinType == null ||
+            !AsmUtil.isPrimitive(type) && (TypeUtils.isNullableType(kotlinType) || !InlineClassesUtilsKt.isInlineClassType(kotlinType))) {","I've checked the behavior on a similar test, but with `String` replaced to `Int`, and kotlinc 1.3.50 returns ""OK"" for that too. So I think the `!AsmUtil.isPrimitive(type)` condition is not needed here. And similarly in the IR backend",2019-11-08 17:34:06
948,"@@ -388,10 +389,12 @@ private fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {
 
 @PublishedApi
 @SinceKotlin(""1.3"")
+@Suppress(""NO_ACTUAL_FOR_EXPECT"") // JS IR","For JS_IR we copy JS sources during build, so this suppress should not be needed.",2020-01-17 19:57:10
531,"@@ -39,22 +39,35 @@ Kotlin.callSetter = function (thisObject, klass, propertyName, value) {
     Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);
 };
 
-function isInheritanceFromInterface(ctor, iface) {
-    if (ctor === iface) return true;
-
+function getAllInterfaces(ctor) {
+    if (ctor.$metadata$ == null) ctor.$metadata$ = {};",Why do we need this check? ,2018-11-26 15:23:46
532,"@@ -39,22 +39,35 @@ Kotlin.callSetter = function (thisObject, klass, propertyName, value) {
     Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);
 };
 
-function isInheritanceFromInterface(ctor, iface) {
-    if (ctor === iface) return true;
-
+function getAllInterfaces(ctor) {
+    if (ctor.$metadata$ == null) ctor.$metadata$ = {};
     var metadata = ctor.$metadata$;
-    if (metadata != null) {
+    if (metadata._allInterfaces === undefined) {",would be better to use `void 0` instead of `undefined`,2018-11-26 19:09:58
498,"@@ -39,5 +42,8 @@ interface KotlinTarget: Named, HasAttributes {
 
     fun createUsageContexts(): Set<UsageContext>
 
+    fun publication(action: Closure<Unit>)","Maybe a better naming scheme would provide more concrete understanding that this publication comes from the `maven-publish` plugin, like `mavenPublication { ... }` (probably not the best option, since there's also the older `maven` plugin).",2018-09-16 13:42:13
133,"@@ -39,54 +39,111 @@ import kotlin.concurrent.read
 import kotlin.concurrent.write
 
 
+fun nowSeconds() = System.nanoTime() / 1000000000L
+
 class CompileServiceImpl<Compiler: CLICompiler<*>>(
         val registry: Registry,","How long this thing work? Does it shutdown itself?
",2015-09-08 18:34:25
170,"@@ -39,7 +39,10 @@ class SwitchConverter(private val codeConverter: CodeConverter) {
                 continue
             }
             pendingSelectors.add(codeConverter.convertStatement(case.label) as WhenEntrySelector)
-            if (case.statements.isNotEmpty()) {
+            if (!case.label.isDefaultCase && case.statements.isEmpty() && cases[i + 1]?.label!!.isDefaultCase){","You are accessing `cases[i+1]` without checking that `i+1` is a valid index in the `cases` collection.
",2016-09-12 18:39:58
239,"@@ -39,7 +39,9 @@ class ClassBody (
         builder append "" "" append lBrace append ""\n""
 
         if (!classKind.isEnum()) {
-            builder.append(membersFiltered, ""\n"")
+            builder.append(membersFiltered.sortedWith(Comparator { o1, o2 ->",Please extract variable to deduplicate this code,2017-07-14 00:12:32
95,"@@ -39,7 +41,7 @@ class GenericFunction(val signature: String) : Comparable<GenericFunction> {
     var receiverAsterisk = false
     val inlineFamilies = HashMap<Family, Boolean>()
 
-    val buildFamilies = HashSet(defaultFamilies.toList())
+    val buildFamilies = HashSet(defaultFamilies.filter { it != RangesOfPrimitives && it != ProgressionsOfPrimitives }.toList())","Why is this filtering here? It seem to have no effect, anyway.
",2015-02-10 20:05:32
663,"@@ -393,6 +393,12 @@ class Collections {
             assertPrints(chars.joinToString(limit = 5, truncated = ""...!"") { it.toUpperCase().toString() }, ""A, B, C, D, E, ...!"")
         }
 
+        @Sample
+        fun map() {
+            val numbers = listOf(75, 111, 116, 108, 105, 110)
+            assertPrints(numbers.map { it.toChar() }, ""[K, o, t, l, i, n]"")","I'd consider using some more simple operation, for example squaring numbers or taking `length` property of string elements. ",2019-05-03 04:18:33
666,"@@ -394,13 +423,20 @@ private class SyntheticAccessorLowering(val context: JvmBackendContext) : IrElem
             return false
 
         val contextDeclarationContainer = allScopes.lastOrNull { it.irElement is IrDeclarationContainer }?.irElement
+//        val contextDeclarationContainer = allScopes.lastOrNull { it.irElement is IrDeclarationContainer }?.irElement.let {if (it is IrClass && it.origin == JvmLoweredDeclarationOrigin.DEFAULT_IMPLS) it.parent else it} as IrElement",@ting-yuan Obsolete?,2019-05-07 07:13:45
418,"@@ -394,7 +401,7 @@ object KSerializerDescriptorResolver {
                 f.source)
         )
 
-        val kSerialClass = thisClass.getClassFromSerializationPackage(""KSerializer"").toSimpleType(false)
+        val kSerialClass = KotlinTypeFactory.simpleNotNullType(Annotations.EMPTY, thisClass.getClassFromSerializationPackage(""KSerializer""), typeArguments)","In general, this seems to be the right approach to fix issue, because `KSerializer` indeed has type arguments. However, you've created here one typearg `T`, and if your class will have more than one typearg, e.g. `Data<T0, T1>`, signature should look like `write$Self(KOutput, KSerialClassDesc, KSerializer<T0>, KSerializer<T1>`, not `...KSerializer<T>, KSerializer<T>)`. You can take a look at how `createSerializerGetterDescriptor` implemented, since it should has almost same signature.",2018-05-24 11:11:43
142,"@@ -3975,4 +3981,19 @@ private NonLocalReturnInfo(Type type, String name) {
             labelName = name;
         }
     }
+
+    private StackValue getCompileTimeConstant(@NotNull KtExpression expression) {","Combine this method with original one by adding checkPure flag, and create overload with original signature to keep old invocations
",2016-02-10 09:48:42
292,"@@ -4,10 +4,18 @@ import java.nio.charset.Charset
 import java.util.*
 
 internal class A {
+
+    val FIELD_CONSTANT = ""field_constant""
+
     @Throws(Exception::class)
     fun constructors() {
         String()
-        // TODO: new String(""original"");
+
+        val LOCAL_CONSTANT = ""local_constant""
+        val s1 = FIELD_CONSTANT
+        val s2 = LOCAL_CONSTANT
+        val s3 = java.lang.String(""original"") as String",The copy constructor is not needed here.,2017-09-01 10:15:26
909,"@@ -4,28 +4,12 @@ FILE: bangbang.kt
 
     }
     public final fun test_0(a: R|A?|): R|kotlin/Unit| {
-        when (lval <bangbang>: R|A?| = R|<local>/a|) {
-            ==($subj$, Null(null)) ->  {
-                throw R|kotlin/KotlinNullPointerException.KotlinNullPointerException|()
-            }
-            else ->  {
-                R|<local>/<bangbang>|
-            }
-        }
-        .R|/A.foo|()
+        !!(R|<local>/a|).R|/A.foo|()","Add test case with bangbang over type parameter to this test please

```
fun <X : A?> test_6(x: X) {
    x!!.foo()
}
```",2019-12-05 11:49:59
366,"@@ -4,5 +4,7 @@ class ClassObjectField {
     companion object {
         val x: String? = """"
         private val y: String? = """"
+            // Custom getter is needed, otherwise no need to generate getY",Please remove the accessor from the `.java` file in this test instead of this change,2018-02-27 13:17:44
365,"@@ -4,5 +4,7 @@ interface TraitClassObjectField {
     companion object {
         const val x: String? = """"
         private val y: String? = """"
+            // Custom getter is needed, otherwise no need to generate getY",Please remove the accessor from the `.java` file in this test instead of this change,2018-02-27 13:17:39
653,"@@ -4,7 +4,7 @@
 // - In argument to 2nd call to foo() inside string literal
 fun test(s1: String, s2: String, s3: String): String {
     fun foo(s: String) = s
-    return ""foo: "" + foo(s1 + s2 + "" ${foo(""\${s3.length} = ${s3.length}"")}"")
+    return ""foo: "" + foo(s1 + s2 + "" ${foo(""\${s3.length} = ${s3.length} "")}"") + "" """,@sfs Why test update is required?,2019-04-24 05:34:25
260,"@@ -4,7 +4,7 @@ object A {
             ""text3""
 
 
-    val TEXT2 = ""text1\n""
-    + ""text2\n""
-    + ""text3""
+    val TEXT2 = (""text1\n""","If I were you, I would reduce space from 2 to 1 line. I think one is enough to make this object readable.",2017-08-04 08:42:49
258,"@@ -4,8 +4,8 @@ internal class C {
     fun foo(): Int {
         KotlinObject.property1 = 1
         KotlinObject.property2 = 2
-        return KotlinObject.foo() +
+        return (KotlinObject.foo() +",The parentheses are only required if the line break is before the operator. In this case they should not be added.,2017-08-03 10:41:40
528,"@@ -40,6 +40,7 @@ class RedundantCompanionReferenceInspection : AbstractKotlinInspection() {
             if (expression.text != objectDeclaration.name) return
 
             val containingClass = objectDeclaration.containingClass() ?: return
+            if (parent.getStrictParentOfType<KtEnumEntry>()?.containingClass() == containingClass) return","Self-referencing our own `companion object` is always redundant, similar to how we never qualify static methods when inside the class that declares it.",2018-11-06 10:21:20
728,"@@ -40,6 +40,9 @@ inline fun IrBuilderWithScope.irLetS(
     nameHint: String? = null,
     body: (IrValueSymbol) -> IrExpression
 ): IrExpression {
+    if (value is IrGetValue)","@sfs Is this optimization still required?
As I see this method only used in DataClassMembersGenerator and a getter call is always passed ",2019-06-11 13:57:58
556,"@@ -40,6 +42,35 @@ internal class DeprecatedJavaAnnotationFix(element: KtAnnotationEntry,
         file.importList?.add(psiFactory.createImportDirective(ImportPath(annotationFqName, false, null)))
     }
 
+    private fun updateAnnotationArgument(file: KtFile, args: List<KtValueArgument>): String {
+        return args.joinToString("","") {
+            val type = it.text.split('.')","I was trying to find a better way to do this using the PSI elements, but nothing seemed to work. I am relatively new at PSI though, so I'm very much aware that I could be missing something obvious. Please point it out if you know!

I need to handle things like `@Retention(RetentionPolicy.SOURCE)` but also `@Target(CLASS, PACKAGE, METHOD)` in a way that lets me know the type of the arguments, so that I can map the old Java arguments to their Kotlin versions. ",2019-02-22 16:08:32
906,"@@ -40,7 +40,7 @@ fun Candidate.resolveArgumentExpression(
     typeProvider: (FirExpression) -> FirTypeRef?
 ) {
     return when (argument) {
-        is FirFunctionCall, is FirWhenExpression, is FirTryExpression -> resolveSubCallArgument(
+        is FirFunctionCall, is FirWhenExpression, is FirTryExpression, is FirCheckNotNullCall -> resolveSubCallArgument(",Could this (and similar change in `CandidateFactory.kt`) be simplified if we insert a new node in the FIR tree that is a parent of all 4 of these?,2019-12-04 23:42:19
991,"@@ -40,7 +41,7 @@ internal class MainMethodGenerationLowering(val context: JvmBackendContext) : Cl
 
     override fun lower(irClass: IrClass) {
         if (!context.configuration.languageVersionSettings.supportsFeature(LanguageFeature.ExtendedMainConvention)) return
-        if (irClass.origin != IrDeclarationOrigin.FILE_CLASS) return
+        if (!irClass.isFileClass) return","I wonder if parameterless main in JvmMultifileClass works in the old backend, and if there are tests on it?",2020-02-10 17:50:56
992,"@@ -40,7 +42,9 @@ data class CompiledReplCodeLine(val className: String, val source: ReplCodeLine)
 }
 
 data class CompiledClassData(val path: String, val bytes: ByteArray) : Serializable {
-    override fun equals(other: Any?): Boolean = (other as? CompiledClassData)?.let { path == it.path && Arrays.equals(bytes, it.bytes) } ?: false","Functional changes get lost in the formatting ones. If you really want to submit formatting changes of that magnitude (I'm not against it in general), I would suggest to make it with a separate commit.
On the other hand, small formatting changes in comparison with the functional ones, in most cases look fine for me.",2020-02-11 15:59:20
204,"@@ -40,9 +41,12 @@ class KotlinClassFinderTest : KotlinTestWithEnvironmentManagement() {
         val environment = createEnvironment(tmpdir)
         val project = environment.project
 
+        val classFinder = createClassFinder(project)","Here you also should create your own separate test, and leave the old one as is. ",2017-04-05 15:37:43
704,"@@ -406,6 +409,14 @@ private class SyntheticAccessorLowering(val context: JvmBackendContext) : IrElem
         return Name.identifier(""access\$prop\$$setterName"")
     }
 
+    private val Visibility.isPrivate
+        get() = Visibilities.isPrivate(this)
+
+    private val Visibility.isProtected
+        get() = this == Visibilities.PROTECTED ||
+                this == JavaVisibilities.PROTECTED_AND_PACKAGE ||
+                this == JavaVisibilities.PROTECTED_STATIC_VISIBILITY
+",This is probably worth moving to one of the `IrUtils` files.,2019-05-23 08:13:42
379,"@@ -41,6 +41,8 @@ class KotlinGradleMultiplatformWizardStep(
     private val wizardContext: WizardContext
 ) : ModuleWizardStep() {
 
+    private val rootIsCommonCheckBox: JCheckBox =","I don't think people will actually understand what this means. I'd change this into two radio buttons: ""Create top-level empty module with common and platform modules as children"" and ""Make platform modules children of common module"".",2018-03-05 13:03:59
5,"@@ -410,6 +410,9 @@","ignore this file
",2012-05-24 14:21:07
494,"@@ -411,6 +411,10 @@ open class KotlinNativeTargetConfigurator(
             // TODO: Provide a normal test path!
             outputDir = project.layout.buildDirectory.dir(""test-results"").get().asFile
 
+            if (project.hasProperty(""teamcity"")) {","Check the value that TC sets, possibly handle `-Pteamcity=false`",2018-09-10 16:26:51
884,"@@ -413,9 +413,18 @@ class MethodInliner(
 
         val capturedParamsSize = parameters.capturedParametersSizeOnStack
         val realParametersSize = parameters.realParametersSizeOnStack
+        val newArgumentList = if (node != inliningContext.lambdaInfo?.node?.node) {","I would prefer to make smth like this:
```
        val isInsideInliningLambda = inliningContext.isInliningLambda
        val reorderParametersForRootIrLambdaInvoke =
            isInsideInliningLambda &&
                    inliningContext.parent?.isInliningLambda == false &&
                    inliningContext.lambdaInfo is IrExpressionLambda
        val newArgumentList = if (reorderParametersForRootIrLambdaInvoke) {
            // ...
            Type.getArgumentTypes(inliningContext.lambdaInfo!!.invokeMethod.descriptor) + parameters.capturedTypes
        } else {
            Type.getArgumentTypes(node.desc) + parameters.capturedTypes
        }
```
and then...",2019-11-11 08:13:15
25,"@@ -414,6 +414,14 @@ class CollectionTest {
         expect(arrayList(2, 3, 1)) { list }
     }
 
+    test fun sum() {
+        expect(0) {ArrayList<Int>().sum()}
+        expect(14) {arrayListOf(2,3,9).sum()}
+        expect(3.0) {arrayListOf(1.0,2.0).sum()}
+        expect(3000000000000) {arrayListOf<Long>(1000000000000,2000000000000).sum()}","Formatting: space after comma
",2013-11-27 07:35:41
495,"@@ -42,6 +42,10 @@ open class KotlinNativeCompile : DefaultTask() {
     val libraries: FileCollection
         @InputFiles get() = compilation.compileDependencyFiles
 
+    val friendModule: FileCollection?",Consider restricting access,2018-09-10 16:39:21
568,"@@ -42,6 +42,7 @@ interface IrDeclarationOrigin {
     object IR_BUILTINS_STUB : IrDeclarationOriginImpl(""IR_BUILTINS_STUB"")
     object BRIDGE : IrDeclarationOriginImpl(""BRIDGE"", isSynthetic = true)
     object BRIDGE_SPECIAL: IrDeclarationOriginImpl(""BRIDGE_SPECIAL"")
+    object GENERATED_PROPERTY_REFERENCE : IrDeclarationOriginImpl(""GENERATED_PROPERTY_REFERECE"", isSynthetic = true)",Please move to `JvmLoweredDeclarationOrigin`,2019-03-12 09:41:40
809,"@@ -42,6 +42,8 @@ interface IrDeclarationOrigin {
     object IR_BUILTINS_STUB : IrDeclarationOriginImpl(""IR_BUILTINS_STUB"")
     object BRIDGE : IrDeclarationOriginImpl(""BRIDGE"", isSynthetic = true)
     object BRIDGE_SPECIAL: IrDeclarationOriginImpl(""BRIDGE_SPECIAL"")
+    object SYNTHETIC_METHOD_FOR_TYPEALIAS_ANNOTATIONS :",As it's only jvm-specific please move it to JvmLoweredDeclarationOrigin,2019-09-24 06:28:50
643,"@@ -420,6 +420,15 @@ class ExpressionCodegen(
     }
 
     override fun visitFieldAccess(expression: IrFieldAccessExpression, data: BlockInfo): PromisedValue {
+        classCodegen.fieldConstantValue(expression.symbol.owner)?.let {","@pyos Is it possible to move this part to ConstLowering? In such case additional optimization would be applied during lowers phase, e.g. foldConstantLoweringPhase ",2019-04-15 09:17:32
641,"@@ -420,6 +420,15 @@ class ExpressionCodegen(
     }
 
     override fun visitFieldAccess(expression: IrFieldAccessExpression, data: BlockInfo): PromisedValue {
+        classCodegen.fieldConstantValue(expression.symbol.owner)?.let {
+            if (expression is IrSetField) {",@pyos Old backend also checks const modifier: StackValue.inlineConstantIfNeeded,2019-04-11 11:41:08
901,"@@ -422,17 +425,23 @@ fun StatementGenerator.generateSamConversionForValueArgumentsIfRequired(call: Ca
                 ""$originalDescriptor has ${originalDescriptor.typeParameters}""
     }
 
+    val partialSam = context.languageVersionSettings.supportsFeature(LanguageFeature.SamConversionPerArgument)","Minor: give it some meaningful name, like `isPartialSamConversionSupported` or something.",2019-11-27 13:00:41
167,"@@ -424,6 +425,24 @@ class Converter private constructor(
         }
     }
 
+
+    private fun specialAnnotationPropertyCases(field: PsiField): Annotations {
+        val javaSerializableInterface = PsiType.getTypeByName(""java.io.Serializable"", project, GlobalSearchScope.allScope(project)).resolve()","It's a minor issue, but the correct way is to use `field.getResolveScope()` instead of `allScope` here. Otherwise you may get incorrect results if the project uses multiple JDKs in different modules.
",2016-09-12 08:56:16
661,"@@ -424,8 +424,14 @@ public inline fun String.toPattern(flags: Int = 0): java.util.regex.Pattern {
  *
  * @sample samples.text.Strings.capitalize
  */
-public actual fun String.capitalize(): String {
-    return if (isNotEmpty() && this[0].isLowerCase()) substring(0, 1).toUpperCase() + substring(1) else this
+public actual fun String.capitalize() = capitalize(Locale.getDefault())",Better to leave the previous implementation to avoid accidentally changing behavior in 1.3.x release.,2019-04-30 01:42:56
845,"@@ -427,6 +434,36 @@ class JvmSymbols(
     }
 
     val systemArraycopy: IrSimpleFunctionSymbol = systemClass.functionByName(""arraycopy"")
+
+    val javaLangString: IrClassSymbol = createClass(FqName(""java.lang.String"")) { klass ->","I think we can safely assume that we have JDK in the classpath, otherwise nothing would work anyway. So let's look for the class in the module instead of creating a stub for it, with `context.getTopLevelClass(FqName(""java.lang.String""))`",2019-10-07 09:17:40
771,"@@ -428,14 +428,18 @@ class Kapt3KotlinGradleSubplugin : KotlinGradleSubplugin<KotlinCompile> {
             kaptTask.annotationProcessorOptionProviders.add(it)
         }
 
+        val dslJavacOptions = kaptExtension.getJavacOptions().toMutableMap()
+        if (javaCompile != null && ""-source"" !in dslJavacOptions) {","Probably need to check for `--release N` too which combines `-source N`, `-target N` and `-bootclasspath <from-N>` http://openjdk.java.net/jeps/247",2019-08-02 09:56:34
977,"@@ -428,3 +429,8 @@ fun BodyResolveComponents.transformQualifiedAccessUsingSmartcastInfo(qualifiedAc
     }
     return FirExpressionWithSmartcastImpl(qualifiedAccessExpression, intersectedTypeRef, typesFromSmartCast)
 }
+
+fun CallableId.isInvoke() =
+    packageName == KotlinBuiltIns.BUILT_INS_PACKAGE_FQ_NAME
+            && className?.asString()?.startsWith(""Function"") == true",How does it work if `className` is e.g. `KFunction*`?,2020-02-03 14:38:46
196,"@@ -428,4 +428,37 @@ class KotlinGradleIT: BaseGradleIT() {
             assertSuccessful()
         }
     }
+
+    @Test
+    fun testGradleJavaIcWorking() {
+        val project = Project(""kotlinJavaProject"", ""2.14.1"")","What about newer Gradle versions?
Btw, it would be interesting to test if Java compile avoidance works in this case with the Gradle 3.4 (in other words that Java is not compiled if Kotlin public API is not changed). ",2017-03-14 10:01:02
993,"@@ -43,13 +46,13 @@ class ReplCodeAnalyzer(environment: KotlinCoreEnvironment) {
 
     val module: ModuleDescriptorImpl
 
-    val trace: BindingTraceContext = NoScopeRecordCliBindingTrace()
+    val trace: BindingTraceContext = CliBindingTrace()",I'm not sure that unconditional change is good here. I suspect that CliBindingsTrace is more expensive than NoScopeRecordCliBindingTrace. I'd suggest using either one depending on whether the completion is requested.,2020-02-11 16:04:55
310,"@@ -43,6 +43,40 @@ class Arrays {
             assertPrints(matrix.contentDeepToString(), ""[[3, 7, 9], [0, 1, 0], [2, 4, 8]]"")
         }
 
+        @Sample","Better to introduce another nested class, since `ContentOperations` class is to group samples for `content*` array extensions.",2017-10-23 03:20:50
297,"@@ -43,6 +44,7 @@ class RedundantUnitReturnTypeInspection : AbstractKotlinInspection() {
                     if (!function.hasBlockBody()) {
                         val bodyExpression = function.bodyExpression
                         if (bodyExpression != null) {
+                            if (bodyExpression is KtThrowExpression) return","It's not the correct way. `KtThrowException` is not the only one that has `Nothing` type, e.g. `null!!` has the same type. You should check `bodyExpression` type directly.",2017-09-15 14:56:25
71,"@@ -43,6 +83,15 @@ public trait MutableListIterator<T> : ListIterator<T>, MutableIterator<T> {
 
     // Modification Operations
     override fun remove(): Unit
+
+    /**
+     * Replaces the last element returned by [next] or [previous] with the specified element [e].
+     */
     public fun set(e: T): Unit
+
+    /**
+     * Adds the specified element [e] into the underlying collection immediately before the element that would be
+     * returned by [next].","Will it affect what is returned next? Unclear from the text. What if previous was called?
",2015-02-09 15:36:05
299,"@@ -430,7 +431,18 @@ public static String doLoadFile(String myFullDataPath, String name) throws IOExc
     }
 
     public static String doLoadFile(@NotNull File file) throws IOException {
-        return FileUtil.loadFile(file, CharsetToolkit.UTF8, true);
+        try {
+            return FileUtil.loadFile(file, CharsetToolkit.UTF8, true);
+        }
+        catch (FileNotFoundException fileNotFoundException) {
+            // Display the absolute path of the file that wasn't loaded","You're explaining the code behavior in a comment.
The code you wrote is clear enough in that regard, no need for the comment :)",2017-09-16 11:54:06
969,"@@ -433,25 +437,24 @@ internal abstract class AbstractKotlinPlugin(
         }
 
         private fun configureClassInspectionForIC(project: Project) {
-            val classesTask = project.tasks.findByName(JavaPlugin.CLASSES_TASK_NAME)
-            val jarTask = project.tasks.findByName(JavaPlugin.JAR_TASK_NAME)
+            val classesTask = project.locateTaskByName(JavaPlugin.CLASSES_TASK_NAME)
+            val jarTask = project.locateTask<Jar>(JavaPlugin.JAR_TASK_NAME)",Can we change all the variable/property names that refer to providers to use the suffix `Provider` (e.g. `jarTaskProvider`). It will help maintenance and the API will be more clear.,2020-01-29 15:36:18
220,"@@ -439,6 +443,13 @@ class PatternMatchingTypingVisitor internal constructor(facade: ExpressionTyping
             context.trace.report(Errors.USELESS_NULLABLE_CHECK.on(element as KtNullableType))
         }
         checkTypeCompatibility(context, targetType, subjectType, typeReferenceAfterIs)
+        if (!subjectType.containsError() && !targetType.containsError() && subjectType.isSubtypeOf(targetType)) {","Note that this isn't correct for platform types (see https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types)

Currently there will be warning for case like this:
```
// Java
class A {
  static A create() { return null; }
}
--
// Kotlin
fun test() {
  A.create() is A // false warning 
}
```",2017-05-02 18:40:04
424,"@@ -44,6 +44,31 @@
       </list>
     </option>
   </component>
+  <component name=""NullableNotNullManager"">",Please remove changes in non-md files.,2018-06-09 07:11:34
589,"@@ -44,7 +43,7 @@ abstract class IrModuleDeserializer(
     val logger: LoggingContext,
     val builtIns: IrBuiltIns,
     val symbolTable: SymbolTable
-) : IrDeserializer {
+) {",That weird that `IrModuleDeserializer` is no longer `IrDeserializer` when `KotlinIrLinker` is ,2019-03-21 16:27:43
334,"@@ -44,7 +44,10 @@ class ReplaceArrayOfWithLiteralInspection : AbstractKotlinInspection() {
 
                 val parent = expression.parent
                 when (parent) {
-                    is KtValueArgument -> parent.parent.parent as? KtAnnotationEntry ?: return
+                    is KtValueArgument -> {
+                        if (parent.parent.parent !is KtAnnotationEntry) return
+                        if (parent.getSpreadElement() != null && !parent.isNamed()) return","Why so? Quick-fix can still be applied, but `*` should be preserved!",2017-12-15 10:12:43
266,"@@ -44,7 +44,7 @@ object MakeVisibleFactory  : KotlinIntentionActionsFactory() {
 
         val module = DescriptorUtils.getContainingModule(descriptor)
         val targetVisibilities = when (descriptor.visibility) {
-            PRIVATE, INVISIBLE_FAKE -> if (module != usageModule) listOf(PUBLIC) else listOf(PUBLIC, INTERNAL)
+            PRIVATE, INVISIBLE_FAKE -> if (module != usageModule) listOf(PUBLIC) else listOf(PUBLIC, INTERNAL, PROTECTED)","It's not so easy, because `protected` should not be offered if member is referenced not from a subclass. Please add necessary checks here and such a test.",2017-08-14 10:29:34
739,"@@ -440,18 +440,29 @@ fun irConstructorCall(
     }
 
 fun irCall(
-    call: IrMemberAccessExpression,
+    call: IrFunctionAccessExpression,
     newFunction: IrFunction,
-    dispatchReceiverAsFirstArgument: Boolean = false,
-    firstArgumentAsDispatchReceiver: Boolean = false
+    dispatchReceiverAsArgument: Boolean = false,
+    argumentAsDispatchReceiver: Boolean = false,
+    extensionReceiverAsArgument: Boolean = dispatchReceiverAsArgument,",These defaults look confusing. Any objections on changing it to `false` to make intent explicit?,2019-06-26 12:14:21
496,"@@ -441,4 +441,17 @@ object Mapping : TemplateGroupBase() {
         }
     }
 
+    val f_withEach = fn(""withEach(operation: T.() -> Unit)"") {
+      include(Iterables)","Consider providing it for the same receivers as `forEach`.
Also it makes sense to make it inline same as `forEach` (note that different overloads have different inline modifiers)",2018-09-11 04:04:19
985,"@@ -444,3 +444,6 @@ fun CallableId.isInvoke() =
     packageName == KotlinBuiltIns.BUILT_INS_PACKAGE_FQ_NAME
             && className?.asString()?.startsWith(""Function"") == true
             && callableName.asString() == ""invoke""
+
+fun CallableId.isArrayOperator() =","Why this function is called so strange? As I can see, it has nothing relevant with arrays, as well as with operators. `isIteratorNext`?",2020-02-10 07:48:09
871,"@@ -45,11 +46,19 @@ inline fun <K, V : Any> Generator.getOrFail(slice: ReadOnlySlice<K, V>, key: K,
     context.bindingContext[slice, key] ?: throw RuntimeException(message(key))
 
 fun Generator.getInferredTypeWithImplicitCasts(key: KtExpression): KotlinType? =
-    context.bindingContext.getType(key)
+    if (key.isUsedAsExpression(context.bindingContext))","Minor: I'd rather rename this function, because it no longer returns a type inferred by the front-end, but uses some extra logic to determine that implicit coercion to Unit should happen. Like, `getExpressionTypeWithCoercionToUnit` or something.",2019-10-24 14:32:19
188,"@@ -45,15 +46,7 @@ class JoinBlockIntoSingleStatementHandler : JoinRawLinesHandlerDelegate {
             // if outer if has else-branch and inner does not have it, do not remove braces otherwise else-branch will belong to different if!","I can't unify the check because while the intention is simply not available, the join handler still has to go into this branch.
",2016-10-21 17:36:22
548,"@@ -45,4 +45,13 @@ class Regexps {
         // Because the search starts from the index 2, it finds the last ""to be"".
         assertPrints(regex3.find(inputString, 2)!!.range, ""13..17"")
     }
+
+    @Sample
+    fun findAll() {
+        val text = ""Hello Alice. Hello Bob. Hello Eve.""
+        val regex = Regex(""Hello (.*?)[.]"")
+        val matches = regex.findAll(text)
+        val names = matches.map(MatchResult::groupValues).map {it[1]} .joinToString("","")","Two subsequent `map` calls can be joined together.
The default delimiter of `joinToString` would produce more pretty output.",2019-01-29 04:49:20
751,"@@ -45,6 +45,14 @@ internal actual fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array
     else
         java.util.Arrays.copyOf(this, this.size, Array<Any?>::class.java)
 
+@PublishedApi
+@SinceKotlin(""1.3"")
+@InlineOnly
+internal actual inline fun <T> List<T>.optimizeReadOnlyListCompat(): List<T> =
+    if (apiVersionIsAtLeast(1, 1, 0))","I wasn't sure what version `optimizeReadOnlyList` was added. If you do, let me know and I'll change this check to the correct value.",2019-07-03 23:27:39
136,"@@ -45,6 +47,13 @@ public abstract class AbstractReplInterpreterTest : UsefulTestCase() {
 
     private data class OneLine(val code: String, val expected: String)
 
+    override fun setUp() {
+        super.setUp()
+        // set to false if not present or set to true or unknown (empty considered true)
+        if (System.getProperty(KOTLIN_COMPILER_ENVIRONMENT_KEEPALIVE_PROPERTY)?.let { it.toBooleanLenient() ?: true } ?: true )","This could be written as

```
if (KOTLIN_COMPILER_ENVIRONMENT_KEEPALIVE_PROPERTY.systemPropertyAsBooleanOrTrueOtherwise(negate = false)) {
```
",2015-11-27 18:22:30
201,"@@ -45,6 +49,37 @@ import org.jetbrains.kotlin.resolve.lazy.KotlinCodeAnalyzer
 import org.jetbrains.kotlin.resolve.lazy.ResolveSession
 import org.jetbrains.kotlin.resolve.lazy.declarations.DeclarationProviderFactory
 
+private fun StorageComponentContainer.configureJavaTopDownAnalysisWithJavac(
+        moduleContentScope: GlobalSearchScope,
+        project: Project,
+        lookupTracker: LookupTracker",I think it's better to remove this function and add boolean flag `useJavac` to the next one instead. The code is mostly the same,2017-04-05 12:23:40
544,"@@ -45,7 +45,6 @@ import org.jetbrains.kotlin.types.KotlinType
 import org.jetbrains.kotlin.types.typeUtil.isPrimitiveNumberType
 import org.jetbrains.kotlin.types.typeUtil.makeNotNullable
 import org.jetbrains.kotlin.types.typeUtil.makeNullable
-import java.lang.AssertionError",Pls remove this file from pr,2019-01-22 13:39:50
152,"@@ -454,3 +454,17 @@ fun checkReservedPrefixWord(sink: DiagnosticSink, element: PsiElement, word: Str
     }
 }
 
+fun KtNameReferenceExpression.getPrimaryConstructorParameterWithSameName(): KtParameter? {","I think this is far too specific to live in a general PSI utlilities class; I'd move it into the quickfix file.
",2016-04-28 08:57:16
153,"@@ -454,3 +454,17 @@ fun checkReservedPrefixWord(sink: DiagnosticSink, element: PsiElement, word: Str
     }
 }
 
+fun KtNameReferenceExpression.getPrimaryConstructorParameterWithSameName(): KtParameter? {
+    return getPrimaryConstructorParameterWithName(getReferencedName())
+}
+
+private fun KtElement.getPrimaryConstructorParameterWithName(name: String): KtParameter? {","The name of this function doesn't describe what it does. A more descriptive name would be ""findContainingClassConstructorParameterWithName"" (which is long enough to hint that it may be better to split the logic: a function to generate a sequence of outer classes for a class and a single-line call to find the parameter of the class by name).
",2016-04-28 09:00:23
832,"@@ -46,6 +46,7 @@ abstract class AbstractCheckLocalVariablesTableTest : CodegenTestCase() {
             assertNotNull(""Couldn't find class file for pattern $classFileRegex in: $pathsString"", outputFile)
 
             val actualLocalVariables = readLocalVariable(ClassReader(outputFile.asByteArray()), methodName)
+            checkLocalVariableTypes(ClassReader(outputFile.asByteArray()), methodName, actualLocalVariables)",Could we reuse class reader from previous line?,2019-10-02 06:39:23
191,"@@ -46,7 +45,7 @@ internal fun MethodNode.getParametersInfo(containingClass: ClassNode): List<Para
     for (index in startParameterIndex..parameterTypes.lastIndex) {
         val type = parameterTypes[index]
         var name = parameters.getOrNull(index - startParameterIndex)?.name
-                   ?: localVariables.getOrNull(index + (if (isStatic) 0 else 1))?.name
+                   ?: localVariables.getOrNull(index)?.name
                    ?: ""p${index - startParameterIndex}""","@yanex Removing this offset fixes https://youtrack.jetbrains.com/issue/KT-15024, but I'm not sure exactly what the offset was for in the first place. Could you let me know what it's for and I can update this PR if needed. I have included a static method in the test and it still works fine. ",2016-11-29 09:50:18
924,"@@ -46,7 +53,13 @@ fun <T> File.withZipFileSystem(mutable: Boolean = false, action: (FileSystem) ->
     return try {
         action(zipFileSystem)
     } finally {
-        zipFileSystem.close()
+        val counter = counters[zipFileSystem]!!
+        if (counter == 0) {","Why 0? We're decrementing after this check, so probably here we need to compare with 1.",2019-12-25 12:23:21
923,"@@ -46,7 +53,13 @@ fun <T> File.withZipFileSystem(mutable: Boolean = false, action: (FileSystem) ->
     return try {
         action(zipFileSystem)
     } finally {
-        zipFileSystem.close()
+        val counter = counters[zipFileSystem]!!
+        if (counter == 0) {
+            zipFileSystem.close()
+            counters.remove(zipFileSystem)
+        } else {
+            counters.computeIfPresent(zipFileSystem, { t, u -> u + 1})",`u - 1`,2019-12-25 12:22:21
926,"@@ -46,7 +53,13 @@ fun <T> File.withZipFileSystem(mutable: Boolean = false, action: (FileSystem) ->
     return try {
         action(zipFileSystem)
     } finally {
-        zipFileSystem.close()
+        val counter = counters[zipFileSystem]!!
+        if (counter == 1) {
+            zipFileSystem.close()
+            counters.remove(zipFileSystem)
+        } else {
+            counters.computeIfPresent(zipFileSystem, { t, u -> u - 1})","`_, value -> value - 1`",2019-12-27 12:22:32
414,"@@ -461,6 +461,7 @@ class QuickFixRegistrar : QuickFixContributor {
         CANNOT_CHECK_FOR_ERASED.registerFactory(MakeTypeParameterReifiedAndFunctionInlineFix)
 
         TOO_MANY_CHARACTERS_IN_CHARACTER_LITERAL.registerFactory(TooLongCharLiteralToStringFix)
+        ILLEGAL_ESCAPE.registerFactory(TooLongCharLiteralToStringFix)",What if ILLEGAL_ESCAPE is reported inside string literal?,2018-05-22 13:23:14
250,"@@ -47,18 +66,23 @@ interface DependenciesResolver : @Suppress(""DEPRECATION"") ScriptDependenciesReso
     }
 }
 
+// is File a could type to use here?
+// No way to get script name if file is not present, should add another property (val fileName: String)
 interface ScriptContents {
     val file: File?
     val annotations: Iterable<Annotation>",Maybe use `Collection` here?,2017-07-25 11:17:04
251,"@@ -47,18 +66,23 @@ interface DependenciesResolver : @Suppress(""DEPRECATION"") ScriptDependenciesReso
     }
 }
 
+// is File a could type to use here?
+// No way to get script name if file is not present, should add another property (val fileName: String)
 interface ScriptContents {
     val file: File?
     val annotations: Iterable<Annotation>
     val text: CharSequence?",Why not `String?`?,2017-07-25 11:22:57
330,"@@ -47,6 +47,11 @@ UFile (package = )
         UAnnotationMethod (name = A)
             UParameter (name = str)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
+            UBlockExpression
+                UBlockExpression",Probably should be unwrapped also as in secondary ones,2017-12-01 21:22:21
274,"@@ -47,6 +48,9 @@ public void updateInfo(@NotNull ValueArgument valueArgument, @NotNull DataFlowIn
             throw new IllegalStateException();
         }
 
+        @Override
+        public void updateResultInfo(@NotNull DataFlowInfo dataFlowInfo) { }",Should we throw here `IllegalStateException`?,2017-08-15 16:10:01
448,"@@ -47,6 +53,10 @@ class GenerateProgressions(out: PrintWriter) : BuiltInsSourceGenerator(out) {
             else -> throw IllegalArgumentException()
         }
 
+        val cast = when (kind) {
+            CHAR -> "".toInt()""
+            else -> """"
+        }","The cast like `Int.toInt` is a no-op, so it isn't worth to complicate generator code to avoid it.",2018-08-01 14:24:36
540,"@@ -47,7 +47,7 @@ class SortModifiersInspection : AbstractKotlinInspection(), CleanupLocalInspecti
 
                 val descriptor = holder.manager.createProblemDescriptor(
                     startElement,
-                    list,
+                    modifierElements.last(),","I think it would be better to highlight all modifiers, not only the last one (but annotations should not be included)",2019-01-17 10:20:37
39,"@@ -47,7 +47,7 @@ public class AddBracesIntention : JetSelfTargetingIntention<JetExpressionImpl>(""
         val jetBlockElement = element.findBlockInExpression(expressionKind)","[this is a dummy comment, please ignore it]
",2014-03-15 18:44:12
722,"@@ -47,7 +47,9 @@
 package org.jetbrains.kotlin.codegen.inline;
 
 import com.intellij.util.containers.ContainerUtil;
+import com.intellij.util.containers.SmartHashSet;",Unused now,2019-06-08 00:12:13
470,"@@ -478,7 +478,7 @@ public final int yylength() {
 
 
   /**
-   * Reports an error that occured while scanning.
+   * Reports an error that occurred while scanning.","File says that it is autogenerated file; is it really OK to fix this typo? I mean, if this is how generator generates this code, then change will be overwritten as soon as anyone will re-generate this file. 

@semoro probably knows this part of code better",2018-08-14 15:32:20
213,"@@ -48,7 +48,7 @@ class JCClass<out T : JCTree.JCClassDecl>(tree: T,
         get() = tree.modifiers.isAbstract
 
     override val isStatic
-        get() = outerClass?.isInterface ?: tree.modifiers.isStatic
+        get() = if (outerClass?.isInterface ?: false) true else tree.modifiers.isStatic","It's better to write here

```
(outerClass?.isInterface ?: false) || tree.modifiers.isStatic
```",2017-04-19 16:00:50
178,"@@ -48,7 +48,8 @@ class ReplaceContainsIntention : SelfTargetingRangeIntention<KtDotQualifiedExpre
         if (!element.isReceiverExpressionWithValue()) return null
 
         val functionDescriptor = getFunctionDescriptor(element) ?: return null
-        if (!functionDescriptor.isOperator || !OperatorChecks.check(functionDescriptor).isSuccess) return null
+
+        if (!functionDescriptor.isOperator) return null","This will break the use of the intention with Java methods, which don't use an explicit `operator` modifier but still can be used as operators. The correct fix is to replace || with && in the original check.
",2016-09-30 13:48:52
680,"@@ -48,7 +51,21 @@ open class ProcessorLoader(private val options: KaptOptions, private val logger:
             logger.info { ""Annotation processors: "" + processors.joinToString { it::class.java.canonicalName } }
         }
 
-        return LoadedProcessors(processors, classLoader)
+        return LoadedProcessors(wrapInIncrementalProcessor(processors, classpath), classLoader)",qq: should this be checking options.incrementalKapt before wrapping the processors? I'm seeing new behavior related to reading zip entries from the classpath from the getIncrementalProcessorsFromClasspath() method despite the incrementalKapt option being in its default state (off). Unsure if this is intentional or not.,2019-05-14 06:48:19
63,"@@ -48,8 +56,11 @@ else if (argument instanceof VarargValueArgument) {
                 generateOther(i, argument);
             }
         }
-
-        return mask;
+        masks.add(mask);
+        if (!maskIsNeeded) {
+            masks = null;","Not sure why you're encoding no masks with `null` when an empty list would work just fine. Might also be a good idea to annotate the return type of the method with `@NotNull`
",2014-08-20 07:20:13
727,"@@ -484,4 +503,4 @@ fun IrClass.addFakeOverrides() {
 }
 
 fun IrValueParameter.isInlineParameter() =",@sfs As I see this method is only used in JVM backend so it's best to move it back to JVM utils cause extension inlining could depend on backend: ```index >=0```,2019-06-11 13:46:46
933,"@@ -487,7 +484,7 @@ private data class SignatureWithSource(val signature: Method, val source: IrSimp
 
 
 fun IrSimpleFunction.overriddenInClasses(): Sequence<IrSimpleFunction> =
-    allOverridden().filter { !(it.parent.safeAs<IrClass>()?.isInterface ?: true) }
+    allOverridden().filter { !it.hasInterfaceParent() }",Consider `filterNot(IrDeclaration::hasInterfaceParent)`,2020-01-08 15:33:00
497,"@@ -488,6 +488,17 @@ abstract class IterableTests<T : Iterable<String>>(val createFrom: (Array<out St
         assertEquals(listOf(""bar""), result as? List)
     }
 
+    @Test
+    fun withEach() {
+        val substringList = mutableListOf<String>()
+        data.withEach {
+          substringList.add(substring(0, 1))
+        }
+        assertEquals(2, substringList.size)","Could be just `assertEquals(listOf(""f"", ""b""), substrinList)`",2018-09-11 04:06:16
397,"@@ -49,10 +49,10 @@ public inline fun Int.toString(radix: Int): String = java.lang.Integer.toString(
 public inline fun Long.toString(radix: Int): String = java.lang.Long.toString(this, checkRadix(radix))
 
 /**
- * Returns `true` if the contents of this string is equal to the word ""true"", ignoring case, and `false` otherwise.
+ * Returns `true` if the this string is not `null` and its content equals the word ""true"", ignoring case, and `false` otherwise.","Remove ""the"" from ""if the this string"".",2018-04-24 13:09:35
436,"@@ -49,6 +49,7 @@ dependencies {
     compileOnly(intellijPluginDep(""copyright""))
     compileOnly(intellijPluginDep(""properties""))
     compileOnly(intellijPluginDep(""java-i18n""))
+    compileOnly(intellijPluginDep(""stream-debugger""))",Is this needed? Looks like all 'stream-debugger'-related code is either in `idea-jvm` or in tests.,2018-07-18 19:39:03
802,"@@ -49,6 +49,8 @@ fun getBoxMethodOrNull(aClass: Class<*>): Method? {
 //Use only JDK 1.6 compatible api
 object TestProcessServer {
 
+    val DEBUG_TEST = ""--debugTest""",'const val',2019-09-06 06:34:56
847,"@@ -49,6 +55,53 @@ private class SyntheticAccessorLowering(val context: JvmBackendContext) : IrElem
 
     override fun lower(irFile: IrFile) {
         inlineLambdaToCallSite.putAll(InlineReferenceLocator.scan(context, irFile).lambdaToCallSite)
+
+        // Unconditionally add bridges for hidden constructors
+        irFile.transformChildrenVoid(object: IrElementTransformerVoid() {","Why not override `visitConstructor` & `visitConstructorCall` in `SyntheticAccessorLowering` itself, instead of an extra object?",2019-10-07 15:45:54
190,"@@ -49,7 +49,18 @@ public inline fun File.printWriter(charset: Charset = Charsets.UTF_8): PrintWrit
  *
  * @return the entire content of this file as a byte array.
  */
-public fun File.readBytes(): ByteArray = FileInputStream(this).use { it.readBytes(length().toInt()) }
+public fun File.readBytes(): ByteArray = FileInputStream(this).use { input ->",Changed exception type to OutOfMemoryError,2016-11-22 20:38:41
972,"@@ -49,7 +50,9 @@ class KotlinJvmTargetConfigurator(kotlinPluginVersion: String) :
     ): KotlinJvmTestRun = KotlinJvmTestRun(name, target).apply {
         val testTaskOrProvider = target.project.registerTask<KotlinJvmTest>(testTaskName) { testTask ->",`testTaskProvider`,2020-01-29 15:50:58
349,"@@ -5,24 +5,21 @@ import org.testng.*
 import java.util.concurrent.*
 
 class TestNGContributorTest {
+
     @Test
     fun smokeTest() {
-        Assert.assertEquals(""TestNGAsserter"", asserter.`class`.simpleName)
+        Assert.assertEquals(""TestNGAsserter"", kotlin.test.asserter)","This won't pass most likely, you're comparing `Asserter` object with a String",2018-01-31 19:48:38
536,"@@ -5,4 +5,6 @@ fun foo() {
         else -> System.out?.println()
     }
 }
-// 1 LINENUMBER 3
\ No newline at end of file
+// 1 LINENUMBER 3
+// Adding ignore flags below the test since the test relies on line numbers.
+// IGNORE_BACKEND: JVM_IR",This is the only special handling. As this test relies on line numbers the suppression line cannot be above the code.,2018-12-21 13:16:33
205,"@@ -5,6 +5,12 @@
     <!-- Set to false to disable proguard run on kotlin-compiler.jar. Speeds up the build -->
     <property name=""shrink"" value=""true""/>
 
+    <!-- Set to false to disable compiler's javadoc generation. Speeds up the build -->
+    <property name=""generate.javadoc"" value=""false""/>
+
+    <!-- Set to false to prevent jarjar and metadata stripping on kotlin-reflect.jar and reflection sources. Use to debug reflection -->
+    <property name=""obfuscate.reflect"" value=""true""/>
+",I think this should be dropped,2017-04-11 09:55:56
155,"@@ -5,6 +5,12 @@ import org.junit.Test as test
 
 class StringBuilderTest {
 
+    @test fun stringBuildWithInitialCapacity() {
+        val s = buildString(123) {
+            assertEquals(123, capacity())","This test won't compile in JS because there is no `StringBuilder.capacity` there.
To make this test JVM-only, move it to `StringBuilderJVMTest.kt`
",2016-05-17 17:42:06
774,"@@ -5,6 +5,7 @@
     public static final int cc = 1;
     @org.jetbrains.annotations.NotNull
     public static final java.lang.String cv = ""A"";
+    @org.jetbrains.annotations.NotNull","...as a result, this test currently fails.",2019-08-08 22:15:08
524,"@@ -5,7 +5,9 @@ buildscript {
 apply plugin: ""antlr""
 apply plugin: ""kotlin""
 
-configurePublishing(project)
+if (System.getProperty(""idl2k.deploy"", ""false"").toBoolean()) {","`system.idl2k.deploy` teamcity parameter translates to a project property `idl2k.deploy` in Gradle, rather than a JVM system property. So we need to use gradle's `Project.findProperty/getProperty/hasProperty`",2018-10-31 14:11:56
96,"@@ -5,8 +5,8 @@ import java.util.concurrent.locks.ReentrantReadWriteLock
 import java.util.concurrent.CountDownLatch
 
 /**
- * Executes given calculation under lock
- * Returns result of the calculation
+ * Executes the given calculation under this lock.","calculation -> action
",2015-02-11 08:34:56
396,"@@ -50,13 +50,15 @@ class SyntheticClassOrObjectDescriptor(
     val syntheticDeclaration: KtPureClassOrObject = SyntheticDeclaration(parentClassOrObject, name.asString())
 
     private val thisDescriptor: SyntheticClassOrObjectDescriptor get() = this // code readability
+    var typeParameters: List<TypeParameterDescriptor> = emptyList()","TBH I'd prefer this to be `private lateinit var` + an `init` method that takes type parameters as a parameter, and require everyone to call `init` after construction explicitly, for clarity. What do you think?",2018-04-19 14:12:35
629,"@@ -50,33 +52,31 @@ class JvmDeclarationFactory(
     private val defaultImplsMethods = HashMap<IrSimpleFunction, IrSimpleFunction>()
     private val defaultImplsClasses = HashMap<IrClass, IrClass>()
 
-    override fun getFieldForEnumEntry(enumEntry: IrEnumEntry, type: IrType): IrField =
+    override fun getFieldForEnumEntry(enumEntry: IrEnumEntry, entryType: IrType): IrField =",Please keep old name or rename it in base class too,2019-04-08 09:47:01
579,"@@ -50,7 +50,7 @@ object ExpectedActualResolver {
                     // TODO: support non-source definitions (e.g. from Java)
                     actual.source.containingFile != SourceFile.NO_SOURCE_FILE
                 }.groupBy { actual ->
-                    areCompatibleCallables(expected, actual)
+                    areCompatibleCallables(expected, actual, platformModule)",Missed,2019-03-13 14:45:44
287,"@@ -501,6 +501,14 @@ class DefaultExpressionConverter : JavaElementVisitor(), ExpressionConverter {
                 }
             }
 
+            if (type?.canonicalText == CommonClassNames.JAVA_LANG_STRING) {
+                val argument = expression.argumentList?.expressions?.singleOrNull()
+                if (argument != null && argument.type?.canonicalText == CommonClassNames.JAVA_LANG_STRING) {
+                    result = codeConverter.convertExpression(argument)",See my comment to https://youtrack.jetbrains.com/issue/KT-19555,2017-08-23 15:22:09
420,"@@ -51,3 +52,7 @@ fun writeSyntheticClassMetadata(cb: ClassBuilder, state: GenerationState) {
         // Do nothing
     }
 }
+
+fun markMethodAsGenerated(mv: MethodVisitor) {",Kotlin doc? Probably pretty simple. Might be useful information though.,2018-05-24 14:32:51
869,"@@ -51,4 +66,19 @@ class FriendPathsTest : TestCaseWithTmpdir() {
             )
         )
     }
+
+    /** Regression test for KT-34251. */
+    fun testDirectory_relativePath() {","```suggestion
    fun testDirectoryWithRelativePath() {
```",2019-10-22 21:45:40
501,"@@ -51,6 +53,7 @@ class ChangeVariableMutabilityFix(
         val factory = KtPsiFactory(project)
         val newKeyword = if (makeVar) factory.createVarKeyword() else factory.createValKeyword()
         element.valOrVarKeyword!!.replace(newKeyword)
+        if (deleteInitializer) (element as? KtProperty)?.initializer = null",Add braces,2018-09-19 14:39:07
864,"@@ -51,6 +54,11 @@ open class ChangeVisibilityFix(
         }
 
         element?.setVisibility(visibilityModifier)","Use `SmartPsiElementPointer`. Otherwise, you can catch `PsiInvalidElementAccessException`.
```kotlin
val pointer = element?.createSmartPointer()

val originalElement = pointer?.element
if (originalElement is KtDeclaration) {
    originalElement.runOnExpectAndAllActuals { it.setVisibility(visibilityModifier) }
}

pointer?.element?.setVisibility(visibilityModifier)

val propertyAccessor = pointer?.element as? KtPropertyAccessor
```",2019-10-18 14:32:38
31,"@@ -51,7 +51,7 @@
   <component name=""ProjectResources"">
     <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>
   </component>
-  <component name=""ProjectRootManager"" version=""2"" languageLevel=""JDK_1_6"" assert-keyword=""true"" jdk-15=""true"" project-jdk-name=""1.6"" project-jdk-type=""JavaSDK"">
+  <component name=""ProjectRootManager"" version=""2"" languageLevel=""JDK_1_6"" assert-keyword=""true"" jdk-15=""true"" project-jdk-name=""1.7"" project-jdk-type=""JavaSDK"">","This change is harmful, as well.
",2014-01-27 21:24:06
257,"@@ -513,6 +513,16 @@ public static boolean areParenthesesNecessary(
             return false;
         }
 
+        if (innerExpression instanceof KtBinaryExpression) {
+            PsiElement expr = innerExpression.getFirstChild();
+            while (expr != null) {
+                if (expr instanceof PsiWhiteSpace && (expr.textContains('\n') || expr.textContains('\r'))) {","IntelliJ always normalizes text of files to use \n line breaks, the \r will never be there. Please remove it from the check.",2017-08-03 10:34:35
389,"@@ -516,7 +516,12 @@ static void genHashCode(MethodVisitor mv, InstructionAdapter iv, Type type, JvmT
             }
         }
         else if (type.getSort() == Type.OBJECT) {
-            iv.invokevirtual(""java/lang/Object"", ""hashCode"", ""()I"", false);
+            if (isInterface) {","Similarly to the `equals` case, I propose to replace this with something like
```
iv.invokevirtual((isInterface ? AsmTypes.OBJECT_TYPE : type).getInternalName(), ""hashCode"", ""()I"", false);
```
",2018-04-05 11:55:04
879,"@@ -52,7 +52,10 @@ private class SingletonReferencesLowering(val context: JvmBackendContext) : File
     }
 
     override fun visitGetObjectValue(expression: IrGetObjectValue): IrExpression {
-        val instanceField = context.declarationFactory.getFieldForObjectInstance(expression.symbol.owner)
+        val instanceField = if (allScopes.any { it.irElement == expression.symbol.owner })","Looks like `$$INSTANCE` field should be used only in companion `<clinit>`, otherwise it could be exposed by inline through synthetic accessor:
```
interface Test {
    companion object {
        fun ok() = ""OK""
        
        inline fun test() = run {
            Test.ok()
        }
    }
}
```",2019-11-06 08:17:25
713,"@@ -521,6 +521,7 @@ class CollectionTest {
         val coll = listOf(""foo"", ""bar"", ""abc"")
         assertEquals(listOf(""bar"", ""abc""), coll.drop(1))
         assertEquals(listOf(""abc""), coll.drop(2))
+        assertEquals(listOf(2147483647L, 2147483648), (0L..2147483648).drop(2147483647))","- I expect this test running for some noticeable time, so better to place it in stdlib/jvm/testLongRunning/collections/IndexOverflowJVMTest.kt
- I believe we can express these numbers with `Int.MAX_VALUE` constant",2019-05-27 17:33:54
941,"@@ -529,15 +529,10 @@ private class AddContinuationLowering(private val context: JvmBackendContext) :
                     it.putValueArgument(i++, irGet(irFunction.dispatchReceiverParameter!!))
                 }
                 if (irFunction.extensionReceiverParameter != null) {
-                    val defaultValueForParameter = irFunction.extensionReceiverParameter!!.type.defaultValue(
-                        UNDEFINED_OFFSET, UNDEFINED_OFFSET, backendContext","Total nit, but these are probably the only usages of backendContext defined on line 512, so that can be removed.",2020-01-14 10:04:54
842,"@@ -529,7 +538,7 @@ class ExpressionCodegen(
         )
 
     override fun visitClass(declaration: IrClass, data: BlockInfo): PromisedValue {
-        classCodegen.generateLocalClass(declaration, irFunction.isInline).also {
+        classCodegen.generateLocalClass(declaration, generateSequence(this) { it.inlinedInto }.any { it.irFunction.isInline }).also {","Please note there is also withinInline check inside generateLocalClass, maybe it's a bug with it?",2019-10-05 11:10:25
779,"@@ -53,10 +53,20 @@ class IrFieldImpl(
         origin: IrDeclarationOrigin,
         symbol: IrFieldSymbol,
         type: IrType
+    ) :
+            this(startOffset, endOffset, origin, symbol, type, symbol.descriptor.visibility)
+
+    constructor(
+        startOffset: Int,
+        endOffset: Int,
+        origin: IrDeclarationOrigin,
+        symbol: IrFieldSymbol,
+        type: IrType,
+        visibility: Visibility",I'd prefer to add a default parameter to an existing constructor,2019-08-13 14:53:25
110,"@@ -53,15 +82,15 @@ public fun thread(start: Boolean = true, daemon: Boolean = false, contextClassLo
 
 /**
  * Allows you to use the executor as a function to","""Allows you"" - not good for docs.
",2015-03-12 14:58:09
111,"@@ -53,15 +82,15 @@ public fun thread(start: Boolean = true, daemon: Boolean = false, contextClassLo
 
 /**
  * Allows you to use the executor as a function to
- * execute the given block on the [[Executor]].
+ * execute the given block on the [Executor].
  */
 public fun Executor.invoke(action: () -> Unit) {
     execute(action)
 }
 
 /**
- * Allows you to use the executor as a function to
- * execute the given block on the [[Executor]].
+ * Allows you to use the executor service as a function to","Allows you.
",2015-03-12 14:58:17
662,"@@ -53,17 +59,6 @@ public class CharArray(size: Int) {
     public operator fun iterator(): CharIterator
 }
 
-@kotlin.internal.InlineOnly","@pyos Seems this removal causes next fail: https://teamcity.jetbrains.com/viewLog.html?buildId=2236246&tab=buildResultsDiv&buildTypeId=Kotlin_dev_Compiler
//cc @anton-bannykh ",2019-04-30 13:19:55
319,"@@ -53,6 +54,9 @@ class K2MetadataCompiler : CLICompiler<K2MetadataCompilerArguments>() {
     ): ExitCode {
         val collector = configuration.getNotNull(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY)
 
+        val plugLoadResult = PluginCliParser.loadPluginsSafe(arguments, configuration)",`val pluginLoadResult` please,2017-11-10 13:08:59
320,"@@ -53,6 +54,9 @@ class K2MetadataCompiler : CLICompiler<K2MetadataCompilerArguments>() {
     ): ExitCode {
         val collector = configuration.getNotNull(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY)
 
+        val pluginLoadResult = PluginCliParser.loadPluginsSafe(arguments, configuration)
+        if (pluginLoadResult != ExitCode.OK) return pluginLoadResult","I think would be better to report something here.

cc @udalov 
",2017-11-15 16:57:34
324,"@@ -53,9 +60,7 @@
   <component name=""SuppressABINotification"">
     <option name=""modulesWithSuppressedNotConfigured"">
       <set>
-        <option value=""kotlin-stdlib-common"" />
-        <option value=""kotlin-stdlib-js"" />
-        <option value=""kotlin-test-common"" />
+        <option value=""kotlin"" />",Please avoid commiting changes in all configuration files without a reason,2017-11-30 12:30:17
281,"@@ -534,6 +538,21 @@ public static boolean areParenthesesNecessary(
         return innerPriority < parentPriority;
     }
 
+    private static boolean isKeepParenthesesInBE(KtBinaryExpression expression) {",I'd named this function `isKeepBinaryExpressionParenthesized`,2017-08-18 12:32:42
173,"@@ -538,6 +538,13 @@ class DefaultExpressionConverter : JavaElementVisitor(), ExpressionConverter {
         val qualifier = expression.qualifierExpression
 
         var identifier = Identifier.withNoPrototype(referenceName, isNullable)
+
+
+        if (expression.getContainingClass()?.getParentOfType<PsiField>(false).let { it != null && it == expression.qualifierExpression?.reference?.resolve() }) {","Why are you checking for `PsiField` specifically? Won't the same problem happen if the anonymous class is used as a local variable initializer?
",2016-09-22 10:04:48
128,"@@ -54,13 +62,14 @@ public static void runK2JvmCompiler(
             CompilerSettings compilerSettings,
             MessageCollector messageCollector,
             CompilerEnvironment environment,
-            File moduleFile,
+            Map<String, IncrementalCache> incrementalCaches, File moduleFile,","It seems it is better to have one parameter per line.
",2015-08-20 14:10:55
269,"@@ -54,6 +54,8 @@ enum class LanguageFeature(
     InlineDefaultFunctionalParameters(KOTLIN_1_2),
     SoundSmartCastsAfterTry(KOTLIN_1_2),
     DeprecatedFieldForInvisibleCompanionObject(KOTLIN_1_2),
+    ContractEffects(KOTLIN_1_1),
+    CalledInPlaceEffect(KOTLIN_1_1),","Also, I suspect we require also the third feature, something like ""value analysis in conditions"". I have in mind checks like `if (1 == 2)`.",2017-08-15 15:46:32
620,"@@ -54,7 +51,10 @@ open class KaptWithKotlincTask : KaptTask(), CompilerArgumentAwareWithInput<K2JV
         val pluginOptionsWithKapt: CompilerPluginOptions = pluginOptions.withWrappedKaptOptions(
             withApClasspath = kaptClasspath,
             changedFiles = changedFiles,
-            compiledSourcesDir = getCompiledSources())
+            classpathChanges = classpathChanges,
+            compiledSourcesDir = getCompiledSources(),
+            processIncrementally = processIncrementally",I think it would be simpler to use `KaptTask#isIncremental` ,2019-04-04 15:43:09
630,"@@ -54,9 +54,15 @@ class PatchDeclarationParentsVisitor() : IrElementVisitorVoid {
     }
 
     override fun visitProperty(declaration: IrProperty) {
-        declaration.getter?.let { it.correspondingProperty = declaration }
-        declaration.setter?.let { it.correspondingProperty = declaration }
-        declaration.backingField?.let { it.correspondingProperty = declaration }
+        declaration.getter?.let {",Please keep correspondingProperty  initialization,2019-04-08 12:36:52
78,"@@ -548,7 +548,7 @@ public fun String.elementAt(index: Int): Char {
 }
 
 /**
- * Returns first element
+ * Returns first element. Throws [NoSuchElementException] if the collection is empty.","Should it be `@throws` tag instead?
",2015-02-09 15:45:56
968,"@@ -55,6 +53,12 @@ internal fun <T : Task> Project.registerTask(
 }
 
 
+internal fun Project.locateTaskByName(name: String): TaskProvider<*>? = try {","nice, but maybe `namedOrNull` would be a better name. It would show clearly that we use the TCA API.",2020-01-29 15:30:43
107,"@@ -55,6 +58,8 @@ public enum class InlineStrategy {
  * receiving function are allowed to use non-local control flow statements. Lambdas which are called from
  * a different execution context (for example, from an object contained in the receiving function)
  * are restricted to local control flow statements.
+ *
+ * @property value the inlining options selected for this lambda.","""this lambda"" is unclear, may be ""options for annotated functional parameter""?
",2015-03-12 14:50:46
393,"@@ -55,7 +55,7 @@ class ReplaceWithOperatorAssignmentInspection : AbstractApplicabilityBasedInspec
     override val defaultFixText = ""Replace with operator-assignment""
 
     override fun fixText(element: KtBinaryExpression) =
-            ""Replace with '${element.operationReference.operationSignTokenType?.value}='""
+        ""Replace with '${(element.right as KtBinaryExpression).operationReference.operationSignTokenType?.value}='""","Just for safety, I'd use `as?` instead of `as` here",2018-04-18 15:06:43
521,"@@ -55,7 +59,9 @@ class KotlinScriptDependenciesClassFinder(project: Project,
 
     override fun clearCache() {
         super.clearCache()
-        myCaches.clear()
+        if (myCaches != null) {",Consider using safe call here: `myCaches?.clear()`,2018-10-29 10:33:36
123,"@@ -55,8 +55,8 @@ protected void postProcess(PsiFile createdElement, String templateName, Map<Stri
     @Override
     protected void buildDialog(Project project, PsiDirectory directory, CreateFileFromTemplateDialog.Builder builder) {
         builder
-                .setTitle(JetBundle.message(""new.kotlin.file.action""))
-                .addKind(""Kotlin file"", JetFileType.INSTANCE.getIcon(), ""Kotlin File"")
+                .setTitle(""New Kotlin File/Class"")","Other stuff under the `New...` menu doesn't start with ""New"", this probably shouldn't start as well
",2015-07-14 13:19:40
754,"@@ -556,3 +557,11 @@ fun createStaticFunctionWithReceivers(
         metadata = oldFunction.metadata
     }
 }
+
+val IrBody.statements: List<IrStatement>
+    get() = when (this) {
+        is IrBlockBody -> statements
+        is IrExpressionBody -> listOf(expression)
+        is IrSyntheticBody -> error(""Synthetic body contains no statements $this"")
+        else -> throw IllegalStateException()",maybe add some text on exception?,2019-07-08 07:56:58
776,"@@ -559,3 +568,18 @@ fun getLabeledThisName(callableName: String, prefix: String, defaultName: String
         defaultName
     } else prefix + mangleNameIfNeeded(callableName)
 }
+
+val IrAnnotationContainer.deprecationFlags: Int
+    get() {
+        val annotation = annotations.findAnnotation(FQ_NAMES.deprecated) ?: return 0
+        val isHidden = (annotation.getValueArgument(2) as? IrGetEnumValue)?.symbol?.owner?.name?.asString() == ""HIDDEN""","Maybe `DeprecationLevel.HIDDEN.name()` instead of `""HIDDEN""`",2019-08-12 10:17:06
138,"@@ -56,11 +60,37 @@ fun generateIsCheck(
         }
     }
     else {
-        generateInstanceOfInstruction(v)
+        TypeIntrinsics.instanceOf(v, kotlinType, asmType)
+    }
+}
+
+fun generateAsCheck(","`is` is a ""check"", but `as` is not :) `generateCast`?
",2015-12-28 15:07:05
744,"@@ -56,6 +57,13 @@ object InlineClassAbi {
      * to avoid clashes between overloaded methods.
      */
     fun mangledNameFor(irFunction: IrFunction): Name {
+        val suffix = when {",@ilmirus Could you take a look there is similar code that is used in MemoizedInlineClassReplacements from https://github.com/JetBrains/kotlin/commit/7a096b305f11bece9e39ffd8875a766db5df677a,2019-06-27 08:17:03
768,"@@ -57,9 +57,7 @@ object InitializePropertyQuickFixFactory : KotlinIntentionActionsFactory() {
 
         override fun invoke(project: Project, editor: Editor?, file: KtFile) {
             val element = element ?: return
-            val descriptor = element.resolveToDescriptorIfAny() as? PropertyDescriptor ?: return
-            val initializerText = CodeInsightUtils.defaultInitializer(descriptor.type) ?: ""null""",May be we should replace only the default value `null` with `TODO()`? ,2019-07-30 18:03:53
676,"@@ -57,9 +58,15 @@ class IrTypeMapper(val kotlinTypeMapper: KotlinTypeMapper) {
     fun mapType(irType: IrType, sw: JvmSignatureWriter, mode: TypeMappingMode) =
         kotlinTypeMapper.mapType(irType.toKotlinType(), sw, mode)
 
+    fun mapTypeAsDeclaration(irType: IrType) =","Since we have an IrTypeMapper, maybe the code from the TypeMapper that is conditional on whether or not we are in the IrBackend should have an actual implementation here to not polute the current type mapper?",2019-05-13 12:36:25
886,"@@ -58,11 +58,11 @@ class IrSourceCompilerForInline(
 
     override val inlineCallSiteInfo: InlineCallSiteInfo
         get() {
-            //TODO: support nested inline calls
+            val root = generateSequence(codegen) { it.inlinedInto }.last()",If I understand  correctly this change should affect only `smap` related tests but no one of them is unmuted(,2019-11-12 09:36:42
693,"@@ -58,6 +58,8 @@ public inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo
 /**
  * Returns a list containing the results of applying the given [transform] function
  * to each entry in the original map.
+ * 
+ * @sample samples.collections.Maps.Transformations.mapMap","Too many `map`s in the sample qualified name :)
`mapToList` would be better.",2019-05-17 18:45:45
481,"@@ -58,7 +58,7 @@ private KotlinCoreEnvironment createEnvironment() {
     public void setUp() throws Exception {
         super.setUp();
 
-        KotlinCoreEnvironment environment = createEnvironment();
+        KotlinCoreEnvironment environment = createEnvironment(true);",Why not compile this with ir backend?,2018-08-24 10:26:33
431,"@@ -583,11 +583,11 @@ public SyntaxErrorDiagnostic(@NotNull PsiErrorElement errorElement) {
     }
 
     public static class DebugInfoDiagnosticFactory extends DiagnosticFactory<DebugInfoDiagnostic> {
-        public static final DebugInfoDiagnosticFactory SMARTCAST = new DebugInfoDiagnosticFactory(""SMARTCAST"");
+        public static final DebugInfoDiagnosticFactory SMARTCAST = new DebugInfoDiagnosticFactory(""SMARTCAST"", Severity.INFO);","We've discussed internally this change: it's OK, but could you please also change `Severity` to `INFO` for: `IMPLICIT_RECEIVER_SMARTCAST`,  `CONSTANT` and `DYNAMIC`",2018-07-03 15:38:25
332,"@@ -59,7 +60,8 @@ class UnusedLambdaExpressionBodyInspection : AbstractKotlinInspection() {
         }
     }
 
-    private fun KtExpression.used(context: BindingContext): Boolean = context[BindingContext.USED_AS_EXPRESSION, this] ?: true
+    private fun KtExpression.used(context: BindingContext): Boolean =
+            context[BindingContext.USED_AS_EXPRESSION, this] ?: true || getStrictParentOfType<KtValueArgument>() != null","This is not a very good fix. A value argument may contain a lambda with a lot of code, and your check would consider all expressions in the lambda to be used, which could hide many problems. I think the right fix there would be to understand why USED_AS_EXPRESSION is not recorded in this case, and to fix it if possible.",2017-12-08 11:45:11
228,"@@ -596,6 +596,12 @@ public void testSpaceBeforeFunctionLiteral() throws Exception {
             doTest(fileName);
         }
 
+        @TestMetadata(""SpaceBeforeIndices.after.kt"")
+        public void testSpaceBeforeIndices() throws Exception {
+            String fileName = KotlinTestUtils.navigationMetadata(""idea/testData/formatter/SpaceBeforeIndices.after.kt"");
+            doTest(fileName);
+        }
+
         @TestMetadata(""SpacedInsideParans.after.kt"")",Lenor ,2017-05-31 19:47:02
455,"@@ -6,6 +6,7 @@
 package kotlin.text
 
 import kotlin.js.RegExp
+import kotlin.math.min",`minOf` is available without import,2018-08-04 16:03:16
989,"@@ -6,6 +6,7 @@ plugins { java }
 
 dependencies {
     embedded(project("":kotlin-scripting-jvm-host"")) { isTransitive = false }
+    embedded(project("":idea:ide-common"")) { isTransitive = false }",I think this should go into a separate jar. Let's discuss the structure separately.,2020-02-10 10:53:24
93,"@@ -6,7 +6,10 @@ public fun String.trim(text: String): String = trimLeading(text).trimTrailing(te
 /** Returns the string with the prefix and postfix text trimmed */
 public fun String.trim(prefix: String, postfix: String): String = trimLeading(prefix).trimTrailing(postfix)
 
-/** Returns the string with the leading prefix of this string removed */
+/**
+ * If this string starts with the given [prefix], returns a copy of this string","Documentation is backwards. Normally it reads ""Returns a … if …, otherwise …""
",2015-02-09 16:16:54
1,"@@ -60,6 +60,8 @@ public inline fun String.format(format : String, vararg args : Any?) : String =
 
 public inline fun String.split(regex : String) : Array<String> = (this as java.lang.String).split(regex) as Array<String>
 
+public inline fun String.split(ch : Char) : Array<String> = (this as java.lang.String).split(java.util.regex.Pattern.quote(ch.toString())) as Array<String>","Why here you are casting ""this"" to String? 
",2012-04-23 06:52:06
971,"@@ -61,11 +61,11 @@ open class KotlinJvmTarget @Inject constructor(
 
         javaPluginConvention.sourceSets.all { javaSourceSet ->
             val compilation = compilations.getByName(javaSourceSet.name)
-            val compileJavaTask = project.tasks.getByName(javaSourceSet.compileJavaTaskName) as AbstractCompile
+            val compileJavaTask = project.locateTask<AbstractCompile>(javaSourceSet.compileJavaTaskName)!!","sometimes we use `named`, sometimes we use `locateTask!!`. It would be better to stick to one method.",2020-01-29 15:49:32
122,"@@ -61,6 +64,8 @@ protected void applyEditorTo(JetRunConfiguration configuration) throws Configura
         myModuleSelector.applyTo(configuration);
         myCommonProgramParameters.applyTo(configuration);
         configuration.setRunClass(myMainClassField.getText());
+        configuration.setAlternativeJrePath(alternativeJREPanel.getPath());
+        configuration.setAlternativeJrePathEnabled(alternativeJREPanel.isPathEnabled());","Has it real effect during run? Is it enough to just set it to a configuration?
",2015-06-23 13:19:02
172,"@@ -61,6 +66,13 @@ class KotlinIndicesHelper(
 
     private val moduleDescriptor = resolutionFacade.moduleDescriptor
     private val project = resolutionFacade.project
+    private val scopeWithoutKotlin = ScopeWithoutKotlin(scope)","You can use `SearchUtil.excludeKotlinSources`
",2016-09-21 16:20:25
64,"@@ -614,10 +614,22 @@ public JvmMethodSignature mapSignature(@NotNull FunctionDescriptor f, @NotNull O
     }
 
     @NotNull
+    public static String getDefaultDescriptor(@NotNull String descriptor) {","Take a look on the usages, this method should take a `Method` as a parameter rather than a `String`
",2014-08-20 07:22:45
62,"@@ -614,10 +614,22 @@ public JvmMethodSignature mapSignature(@NotNull FunctionDescriptor f, @NotNull O
     }
 
     @NotNull
+    public static String getDefaultDescriptor(@NotNull String descriptor) {
+        // read Type.getArgumentsAndReturnSizes documentation for explanations","This comment is useless :) If I don't understand `>> 2`, I'll go and read what the method returns by myself, and if I do, I need not this comment at all
",2014-08-20 07:14:50
61,"@@ -614,10 +614,22 @@ public JvmMethodSignature mapSignature(@NotNull FunctionDescriptor f, @NotNull O
     }
 
     @NotNull
+    public static String getDefaultDescriptor(@NotNull String descriptor) {
+        // read Type.getArgumentsAndReturnSizes documentation for explanations
+        int argumentsSize = (Type.getArgumentsAndReturnSizes(descriptor) >> 2) - 1;
+        int maskArgumentsCont = argumentsSize / Integer.SIZE + (argumentsSize % Integer.SIZE == 0 ? 0 : 1);","Typo? _count_, not cont
",2014-08-20 07:10:01
686,"@@ -615,6 +617,9 @@ class KotlinTypeMapper @JvmOverloads constructor(
             return name
         }
 
+        if (isIrBackend)","Looks like this ends up duplicating some code. Could we refactor this along these lines:

```
return if (isIrBackend) mangleNonInlineClassMemberNames() else mangleMemberNames()
```

And then have:

```
mangleMemberNames() {
  // all the early returns for inline class members.
  ...
  return mangleNonInlinClassMemberNames()
}
```

The we have sharing of the common parts in `mangleNonInlineClassMemberNames()`?",2019-05-16 07:32:27
674,"@@ -616,13 +618,13 @@ class KotlinTypeMapper @JvmOverloads constructor(
         }
 
         // Special methods for inline classes.
-        if (InlineClassDescriptorResolver.isSynthesizedBoxMethod(descriptor)) {
+        if (!isIrBackend && InlineClassDescriptorResolver.isSynthesizedBoxMethod(descriptor)) {","Check for isIrBackend around these three branches instead of in all of them?

// Nice comment explaining why we don't want to do this for the IrBackend.
if (!isIrBackend) {
   ...
}",2019-05-13 11:29:34
398,"@@ -62,17 +63,19 @@ interface SyntheticResolveExtension {
                 // todo revert
                 override fun generateSyntheticMethods(
                     thisDescriptor: ClassDescriptor, name: Name,
+                    ctx: BindingContext,","Would be nice to name this `bindingContext` or `context`, since we don't usually use abbreviations for identifier names in our project",2018-04-25 14:05:58
858,"@@ -62,8 +62,7 @@ class RedundantGotoMethodTransformer : MethodTransformer() {
                         currentLabels.clear()
                     }
                 }
-                insn is LineNumberNode -> pendingGoto = null
-                insn.isMeaningful -> {
+                insn is LineNumberNode || (insn.isMeaningful && insn.opcode != Opcodes.NOP) -> {",Could you clarify a bit this change?,2019-10-18 07:46:04
9,"@@ -63,3 +63,16 @@ public inline fun String.count(predicate: (Char) -> Boolean): Int {
     }
     return answer
 }
+
+/**
+ * Repeats a given string n times. With n <= 0, the empty string is returned.","I think it's better to throw IllegalArgumentException if n < 0, because it doesn't make much sense to hide user's error and return empty string in this case.
",2012-11-15 09:52:35
8,"@@ -63,3 +63,16 @@ public inline fun String.count(predicate: (Char) -> Boolean): Int {
     }
     return answer
 }
+
+/**
+ * Repeats a given string n times. With n <= 0, the empty string is returned.
+ * @includeFunctionBody ../../test/StringTest.kt times
+ */
+public inline fun String.times(var n: Int) : String {
+    var answer = """";","semicolons are noise which is unnecessary in Kotlin :)
",2012-11-15 09:48:58
7,"@@ -63,3 +63,16 @@ public inline fun String.count(predicate: (Char) -> Boolean): Int {
     }
     return answer
 }
+
+/**
+ * Repeats a given string n times. With n <= 0, the empty string is returned.
+ * @includeFunctionBody ../../test/StringTest.kt times
+ */
+public inline fun String.times(var n: Int) : String {
+    var answer = """";
+    while (n > 0) {
+        answer = answer.concat(this)","I think that it'll be good to use StringBuilder#append instead of strings concatenations.
",2012-11-15 09:45:38
238,"@@ -63,6 +63,13 @@ val PsiElement.parentsWithSelf: Sequence<PsiElement>
 val PsiElement.parents: Sequence<PsiElement>
     get() = parentsWithSelf.drop(1)
 
+fun PsiElement.matchParents(vararg parentClasses: Class<out PsiElement>): Boolean {
+    return this.parents.zip(sequenceOf(*parentClasses)).all {
+        val (elem, clazz) = it
+        clazz.isAssignableFrom(elem.javaClass)","With lambda argument destructuring and `isInstance` method you could write this method as

```
    return this.parents.zip(sequenceOf(*parentClasses)).all { (elem, clazz) ->
        clazz.isInstance(elem)
    }
```",2017-07-12 10:26:50
518,"@@ -63,6 +64,21 @@ class AddBracesIntention : SelfTargetingIntention<KtElement>(KtElement::class.ja
                 semicolon.delete()
         }
 
+        // Check for single line if expression
+        if (element is KtIfExpression && expression.isInSingleLine() && element.`else` == null) {
+            // Check if a comment is actually underneath (\n) the expression
+            val allElements = element.siblings(withItself = false).filterIsInstance<PsiElement>()","I think separate `allElements` aren't required, because anyway you perform additional filtering for `sibling`.",2018-10-23 09:44:14
137,"@@ -63,6 +65,10 @@ public abstract class KotlinLightCodeInsightFixtureTestCase : LightCodeInsightFi
                 super.processError(message, t, details, logger)
             }
         })
+
+        // set to false if not present or set to true or unknown (empty considered true)
+        if (System.getProperty(KOTLIN_COMPILER_ENVIRONMENT_KEEPALIVE_PROPERTY)?.let { it.toBooleanLenient() ?: true } ?: true )","This could be written as

```
if (KOTLIN_COMPILER_ENVIRONMENT_KEEPALIVE_PROPERTY.systemPropertyAsBooleanOrTrueOtherwise(negate = false)) {
```
",2015-11-27 18:22:54
432,"@@ -63,7 +63,7 @@ object ClassMapperLite {
             add(""reflect/KFunction$i"", ""kotlin/reflect/KFunction"")
         }
 
-        for (klass in listOf(""Char"", ""Byte"", ""Short"", ""Int"", ""Float"", ""Long"", ""Double"", ""String"", ""Enum"")) {
+        for (klass in listOf(""Char"", ""Byte"", ""Short"", ""Int"", ""Float"", ""Long"", ""Double"", ""String"", ""Enum"", ""Boolean"")) {","This change will probably confuse the compiler and reflection of older versions when they encounter a declaration with `kotlin.Boolean.Companion` in the signature. The generated bytecode will be correct, but annotations (such as `Deprecated`, for example) will not be loaded, and reflective call will throw an exception. For more information, see the comment on this class.

Please revert this change and add a short comment noting that we explicitly omit `Boolean` here. Thanks!",2018-07-11 15:13:05
342,"@@ -630,6 +634,8 @@ internal class DescriptorRendererImpl(
 
                 if (includeAdditionalModifiers) {
                     renderAdditionalModifiers(function, builder)
+                } else if (includeSuspendModifier) {",Why else?,2018-01-09 22:17:27
761,"@@ -6338,6 +6338,51 @@ public expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): Boolea
  */
 public expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray
 
+/**
+ * Fills original array with the provided value.
+ */
+public expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit",Isn't `Array<in T>` enough here?,2019-07-20 09:56:37
434,"@@ -636,6 +639,20 @@ fun main(args: Array<String>) {
             model(""debugger/tinyApp/src/evaluate/multipleBreakpoints"", testMethod = ""doMultipleBreakpointsTest"")
         }
 
+        // Not supported yet",(Here and there) please do not commit commented code to the repository.,2018-07-18 19:36:02
583,"@@ -64,10 +64,10 @@
     private final IntrinsicsMap intrinsicsMap = new IntrinsicsMap();
 
     public IntrinsicMethods(JvmTarget jvmTarget) {
-        this(jvmTarget, true);
+        this(jvmTarget, false, true);
     }
 
-    public IntrinsicMethods(JvmTarget jvmTarget, boolean shouldThrowNpeOnExplicitEqualsForBoxedNull) {
+    public IntrinsicMethods(JvmTarget jvmTarget, boolean canReplaceStdlibRuntimeApiBehavior, boolean shouldThrowNpeOnExplicitEqualsForBoxedNull) {",Open to different/better names for this.,2019-03-15 14:05:23
465,"@@ -64,3 +64,35 @@ public inline val CharSequence.size: Int get() = length
 
 @kotlin.internal.InlineOnly
 internal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)
+
+@kotlin.internal.InlineOnly
+public actual inline fun String.compareTo(other: String, ignoreCase: Boolean): Int {","I don't think we should inline it, given its current size.",2018-08-10 23:27:31
454,"@@ -64,3 +65,30 @@ public inline val CharSequence.size: Int get() = length
 
 @kotlin.internal.InlineOnly
 internal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)
+
+@kotlin.internal.InlineOnly
+public actual inline fun String.compareTo(other: String, ignoreCase: Boolean): Int {
+    if (ignoreCase) {
+        val n1 = this.length
+        val n2 = other.length
+        val min = min(n1, n2) - 1
+        for (i in 0..min) {",You can use `until` instead of subtracting 1 from the end.,2018-08-04 16:03:03
659,"@@ -64,4 +69,8 @@ class IrIntrinsicMethods(irBuiltIns: IrBuiltIns) {
         }
         return irMapping[descriptor.original]
     }
+
+    object OperatorNames {",`private`,2019-04-26 10:11:24
60,"@@ -64,6 +64,13 @@
             KotlinBuiltIns.getInstance().getChar()
     );
 
+    private static final Set<String> STRINGBULDER_OBJECT_APPEND_ARG_TYPES = Sets.newHashSet(","I think declaring a `Set<Type>` would be more straightforward. You can use `Type.getType(Class<?>)` to create corresponding `Type` objects
",2014-05-12 20:45:35
895,"@@ -64,6 +64,159 @@ class Arrays {
 
     class Transformations {
 
+        @Sample
+        fun associate() {
+            data class Person(val firstName: String, val lastName: String)
+
+            val scientists = arrayOf(Person(""Grace"", ""Hopper""), Person(""Jacob"", ""Bernoulli""), Person(""Johann"", ""Bernoulli""))","Provided that [`associate` doc page](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate.html) shows overloads for both collections and all arrays, I suggest leaving only one sample for all arrays: the one for primitive arrays `associateArrayOfPrimitives`.
",2019-11-22 20:07:10
904,"@@ -64,6 +64,7 @@ object SetOps : TemplateGroupBase() {
             returns(""Sequence<T>"")
             body { ""return this.distinctBy { it }"" }
         }
+        sample(""samples.collections.Collections.Sets.distinctAndDistinctBy"")","It'd be better to place the sample into `Collections.Transformations` class: `distinct` is a general collection operation, the fact that it uses a set to filter out duplicates is an implementation detail.",2019-11-29 14:04:55
749,"@@ -64,7 +65,7 @@ open class ConstraintSystemBuilderImpl(private val mode: Mode = ConstraintSystem
         EQUAL(EXACT_BOUND)
     }
 
-    internal val allTypeParameterBounds = LinkedHashMap<TypeVariable, TypeBoundsImpl>()
+    internal val allTypeParameterBounds = SmartIdentityTable<TypeVariable, TypeBoundsImpl>()","Unfortunately we'll now lose the order of iteration reflecting the sequence in which the type variables were added, as soon as the size of this map becomes greater than 10, which I think could lead to very hard-to-debug problems (those in which you can't minimize the test case because it starts to behave correctly)",2019-07-01 12:52:57
617,"@@ -65,13 +65,14 @@ fun IrBlockImpl.inlineStatement(statement: IrStatement) {
     }
 }
 
-class IrReturnableBlockImpl(
-    startOffset: Int,
-    endOffset: Int,
-    type: IrType,
-    override val symbol: IrReturnableBlockSymbol,
-    origin: IrStatementOrigin? = null,
-    override val sourceFileSymbol: IrFileSymbol? = null
+open class IrReturnableBlockImpl(",Why is it `open`? ,2019-04-04 11:37:10
898,"@@ -65,6 +65,9 @@ object JvmGeneratorExtensions : GeneratorExtensions() {
             descriptor.visibility
         else
             null
+
+    override fun isPropertyWithPlatformField(descriptor: PropertyDescriptor): Boolean =
+        descriptor.hasJvmFieldAnnotation()","I don't really like the idea of copying this, though. Maybe it's best to merge the two extension classes instead?",2019-11-25 14:12:14
193,"@@ -650,7 +650,7 @@ class DefaultExpressionConverter : JavaElementVisitor(), ExpressionConverter {
             result = MethodCallExpression.buildNonNull(operandConverted, typeConversion)
         }
         else {
-            val nullability = if (operandConverted.isNullable && !expression.isQualifier())
+            val nullability = if ((operandConverted.isNullable && !expression.isQualifier()) || operandType == PsiType.NULL)","Better not to hack this check, but fix problem with `operandConverted.isNullable == false` for `null` literal  ",2016-12-27 11:47:32
539,"@@ -653,8 +652,23 @@ class ExpressionCodegen(
                 condition = negationArgument(condition as IrCall)
                 jumpIfFalse = false
             }
-            gen(condition, data).put(condition.asmType, mv)
-            BranchedValue.condJump(StackValue.onStack(condition.asmType), elseLabel, jumpIfFalse, mv)
+            if (isNullCheck(condition)) {",Maybe extract whole if (!elseBranch)  branch body to separate method: 'genConditionWithOptimizationsIfPossible()',2019-01-15 10:16:50
957,"@@ -659,6 +663,12 @@ class FirRenderer(builder: StringBuilder) : FirVisitorVoid() {
         lambdaArgumentExpression.expression.accept(this)
     }
 
+    override fun visitVarargArgumentExpression(varargArgumentExpression: FirVarargArgumentExpression) {
+        print(""vararg("")",I think some tests in `compiler:fir:resolve` will change behavior because of this change in renderer,2020-01-28 07:45:28
607,"@@ -67,6 +67,32 @@ class Kapt3WorkersIT : Kapt3IT() {
             assertSuccessful()
         }
     }
+
+    private fun testSimpleWithCustomJdk(gradleVersion: String, javaHome: File) {
+        val gradleVersionRequired = GradleVersionRequired.AtLeast(gradleVersion)
+
+        // Skip test if the specified jdk isn't available in the test environment.
+        if (!javaHome.isDirectory)
+            return","I recommend to replace `return` with `org.junit.Assume#assumeTrue`.
When assumption is violated, a test is also skipped (it is not considered failed),
but it is shown as ignored in IJ and in TeamCity test reports. ",2019-04-01 12:21:18
163,"@@ -67,7 +73,15 @@ abstract class KtCodeFragment(
 
     override fun isValid() = true
 
-    override fun getContext() = context
+    override fun getContext(): PsiElement? {
+        if (fakeContextForJavaFile != null) return fakeContextForJavaFile
+        if (context !is KtElement) {
+            LOG.warn(""CodeFragment with non-kotlin context should have fakeContextForJavaFile set: \noriginalContext = ${context?.getElementTextWithContext()}"")","We shouldn't create kotlin codeFragments for scala files. See KotlinCodeFragmentFactory.isContextAccepted
",2016-08-03 14:06:55
336,"@@ -677,6 +677,7 @@ public fun Short.coerceAtLeast(minimumValue: Short): Short {
 
 /**
  * Ensures that this value is not less than the specified [minimumValue].
+ * @sample samples.number.Int.coerceAtLeast","These functions are generated from a template. I think it'd be ok to provide the single sample for all overloads, so this sample reference can be placed in that template. You can find this template here: https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-stdlib-gen/src/templates/Comparables.kt#L27",2017-12-28 05:06:15
2,"@@ -68,10 +70,14 @@ public inline fun String.startsWith(prefix: String) : Boolean = (this as java.la
 
 public inline fun String.startsWith(prefix: String, toffset: Int) : Boolean = (this as java.lang.String).startsWith(prefix, toffset)
 
+public inline fun String.startsWith(ch: Char) : Boolean = (this as java.lang.String).startsWith(ch.toString())","The same
",2012-04-23 06:52:41
242,"@@ -68,3 +64,9 @@ class ClassBody(
         builder.append(companionObjectMembers, ""\n"", ""companion object {\n"", ""\n}"")
     }
 }
+
+private object PropertyComparator : Comparator<Member> {
+    override fun compare(o1: Member?, o2: Member?): Int {
+        return if (o1 is Property) if (o2 is Property) 0 else -1 else if (o2 is Property) 1 else 0",I'd use when for readability ,2017-07-17 18:14:59
425,"@@ -68,6 +68,31 @@
     <MarkdownNavigatorCodeStyleSettings>
       <option name=""RIGHT_MARGIN"" value=""72"" />
     </MarkdownNavigatorCodeStyleSettings>
+    <Objective-C-extensions>",Please remove changes in non-md files.,2018-06-09 07:11:48
623,"@@ -68,7 +66,7 @@ class AddBracesIntention : SelfTargetingIntention<KtElement>(KtElement::class.ja
         }
 
         // Check for single line if expression
-        if (element is KtIfExpression && expression.isInSingleLine() && element.`else` == null) {
+        if (element is KtIfExpression && element.`else` == null) {","Please change (or delete) the comment above, because after your change it becomes incorrect.",2019-04-05 15:13:05
819,"@@ -68,7 +71,11 @@ private fun KtExpression?.getWhenConditionSubjectCandidate(): KtExpression? = wh
         val lhs = left
         when (operationToken) {
             KtTokens.IN_KEYWORD, KtTokens.NOT_IN -> lhs
-            KtTokens.EQEQ -> lhs as? KtNameReferenceExpression ?: right
+            KtTokens.EQEQ -> {
+                lhs as? KtNameReferenceExpression
+                    ?: (lhs as? KtQualifiedExpression)?.takeIf { it.selectorExpression is KtNameReferenceExpression }","It's better to apply here the same checks for the right part, if the left one does not satisfy our conditions.",2019-09-26 07:43:32
562,"@@ -684,6 +684,9 @@ class ExpressionCodegen(
 
     override fun visitWhen(expression: IrWhen, data: BlockInfo): StackValue {
         expression.markLineNumber(startOffset = true)
+        val switchGen = SwitchGenerator(expression, data, this)
+        if (switchGen.match())","I'd somewhat prefer if the public API would be something like this:
```
val switch = SwitchGenerator(expression, data, this).generate()
if (switch != null) return switch
```

In this case, you wouldn't need mutable fields in `SwitchGenerator` to retain information between `match` and `gen`; the logic in `match` could be inlined into `gen` with local variables holding things like `thenExpressions ` and `elseExpression`",2019-03-05 14:28:46
959,"@@ -686,7 +686,8 @@ class Fir2IrDeclarationStorage(
                 IrValueParameterImpl(
                     startOffset, endOffset, origin, symbol,
                     valueParameter.name, index, type,
-                    null, valueParameter.isCrossinline, valueParameter.isNoinline
+                    valueParameter.varargElementType?.toIrType(session, this),",You could extract varargElementType from `type` by using `org.jetbrains.kotlin.fir.resolve.calls.ArgumentsKt#varargElementType`,2020-01-28 14:27:19
479,"@@ -69,44 +91,20 @@ internal class ExplicitReceiverScopeTowerProcessor<C : Candidate>(
 ) : AbstractSimpleScopeTowerProcessor<C>(context) {
     override fun simpleProcess(data: TowerData): Collection<C> {
         return when (data) {
-            TowerData.Empty -> resolveAsMember()
-            is TowerData.TowerLevel -> resolveAsExtension(data.level)
+            TowerData.Empty -> resolve(","Code is supposed to be formatted like
```
            TowerData.Empty -> resolve(
                MemberScopeTowerLevel(scopeTower, explicitReceiver).collectCandidates(null),
                { !it },
                ExplicitReceiverKind.DISPATCH_RECEIVER,
                null
            )
            is TowerData.TowerLevel -> resolve(
                data.level.collectCandidates(explicitReceiver),
                { it },
                ExplicitReceiverKind.EXTENSION_RECEIVER,
                explicitReceiver
            )
```",2018-08-22 12:34:19
267,"@@ -69,6 +68,15 @@ class KotlinRedundantOverrideInspection : AbstractKotlinInspection(), CleanupLoc
                 }
             }
 
+    private fun KtNamedFunction.containsOtherModifier(): Boolean {
+        MODIFIER_EXCLUDE_OVERRIDE.forEach {",You can simplify this to `return MODIFIER_EXCLUDE_OVERRIDE.any { hasModifier(it) }`,2017-08-15 09:48:07
408,"@@ -69,6 +70,13 @@ class UnusedReceiverParameterInspection : AbstractKotlinInspection() {
 
                 if (callable != null && MainFunctionDetector.isMain(callable)) return
 
+                if ((callableDeclaration is KtProperty || callableDeclaration is KtNamedFunction)","`(callableDeclaration is KtProperty || callableDeclaration is KtNamedFunction)` check is probably reduntant, as `check` is called only for such declarations.",2018-05-17 14:37:59
410,"@@ -69,6 +70,13 @@ class UnusedReceiverParameterInspection : AbstractKotlinInspection() {
 
                 if (callable != null && MainFunctionDetector.isMain(callable)) return
 
+                if ((callableDeclaration is KtProperty || callableDeclaration is KtNamedFunction)
+                    && callable?.containingDeclaration == receiverTypeDeclaration
+                ) {
+                    registerProblem(receiverTypeReference)","I'm afraid it works incorrectly for this test case: 

```
class A {
  fun String.foo() {
    print(this@foo)
  }
}
```

Can you please take a look if something can be done to fix it?",2018-05-17 14:47:59
10,"@@ -69,7 +72,18 @@ public TextRange getRangeInElement() {
 
     @Override
     public PsiElement handleElementRename(String newElementName) throws IncorrectOperationException {
-        PsiElement element = JetPsiFactory.createNameIdentifier(myExpression.getProject(), newElementName);
+        IElementType type = myExpression.getReferencedNameElementType();
+        final PsiElement element;","We do not mark variables final unless this is required by the compiler.
",2013-01-11 15:18:39
129,"@@ -69,7 +78,7 @@ public static void runK2JsCompiler(
             @NotNull CompilerSettings compilerSettings,
             @NotNull MessageCollector messageCollector,
             @NotNull CompilerEnvironment environment,
-            @NotNull OutputItemsCollector collector,
+            Map<String, IncrementalCache> incrementalCaches, @NotNull OutputItemsCollector collector,","Same here --- one parameter per line.
",2015-08-20 14:11:23
817,"@@ -691,6 +691,25 @@ class NewMultiplatformIT : BaseGradleIT() {
         }
     }
 
+    @Test
+    fun testEndorsedLibsController() {
+        with(
+            transformProjectWithPluginsDsl(""kotlin-dsl"", gradleVersion, ""new-mpp-native-binaries"")","`transformProjectWithPluginsDsl(""kotlin-dsl"", gradleVersion, ""new-mpp-native-binaries"")` ->
`transformProjectWithPluginsDsl(""new-mpp-native-endorsed"", gradleVersion)`",2019-09-25 05:14:54
326,"@@ -695,7 +695,7 @@ else if (!parseLiteralConstant()) {
      *   : OPEN_QUOTE stringTemplateElement* CLOSING_QUOTE
      *   ;
      */
-    private void parseStringTemplate() {
+    void parseStringTemplate() {",Is it necessary?,2017-11-30 12:45:24
563,"@@ -695,9 +696,16 @@ class ExpressionCodegen(
         val elseLabel = Label()
         val thenBranch = branch.result
         //TODO don't generate condition for else branch - java verifier fails with empty stack
-        val elseBranch = branch is IrElseBranch
-        if (!elseBranch) {
+        // Else branch comes from ""if (ALWAYS_TRUE)"", where ALWAYS_TRUE can be handwritten, inferred by compiler,
+        // or a construct of IrElseBranch.
+        val isElseBranch = branch.condition.isTrueConst()",@ting-yuan Please name variable properly: 'true' condition could also be in non-else,2019-03-06 10:04:09
284,"@@ -7,7 +7,7 @@ internal class A {
     @Throws(Exception::class)
     fun constructors() {
         String()
-        // TODO: new String(""original"");
+        ""original""","In `stringMethods` class constructor you used `String(""original"")`, here you put only its parameter. I am not sure if putting directly `""original""` here is a proper thing.",2017-08-19 20:42:59
255,"@@ -70,7 +72,11 @@ fun KtLambdaArgument.moveInsideParenthesesAndReplaceWith(
     val newCallExpression = oldCallExpression.copy() as KtCallExpression
 
     val psiFactory = KtPsiFactory(project)
-    val argument = if (newCallExpression.getValueArgumentsInParentheses().any { it.isNamed() }) {
+
+    val argument = if (newCallExpression.getValueArgumentsInParentheses().run {",I think this nested `run` expression is far too complex. Better to extract this logic into a method.,2017-08-03 09:53:52
307,"@@ -70,7 +81,7 @@ public open class $progression
     /**
      * The last element in the progression.
      */
-    public val last: $t = getProgressionLastElement(start.to$incrementType(), endInclusive.to$incrementType(), step).to$t()
+    public val last: $t = getProgressionLastElement(start$cast, endInclusive$cast, step).to$t()",should I eliminate the ending cast also?,2017-09-21 09:54:03
311,"@@ -71,4 +71,11 @@ class Strings {
         assertPrints(proteins.take(5).toList(), ""[Isoleucine, Arginine, Glycine, Arginine, Glutamine]"")
     }
 
+    @Sample
+    fun stringToByteArray() {
+        val charset = Charsets.UTF_8
+        val byteArray = ""Hello"".toByteArray(charset)",We can also print the contents of `byteArray` here.,2017-10-25 00:24:38
940,"@@ -71,4 +71,14 @@ internal class A {
         val d4 = Double.NEGATIVE_INFINITY
         val d5 = Double.NaN
     }
+
+    fun kt35593() {
+        val number: Number = 1
+        val b: Byte = number.byteValue()
+        val d: Double = number.doubleValue()
+        val f: Float = number.floatValue()
+        val i: Int = number.intValue()
+        val l: Long = number.longValue()
+        val s: Short = number.shortValue()","correct one is: 
```
   val b = number.toByte()
   val d = number.toDouble()
   val f = number.toFloat()
   val i = number.toInt()
   val l = number.toLong()
   val s = number.toShort()
```",2020-01-10 08:13:12
918,"@@ -710,7 +713,7 @@ class Fir2IrVisitor(
     private fun FirAnnotationCall.toIrExpression(): IrExpression {
         val coneType = (annotationTypeRef as? FirResolvedTypeRef)?.type as? ConeLookupTagBasedType
         val firSymbol = coneType?.lookupTag?.toSymbol(session) as? FirClassSymbol
-        val type = coneType?.toIrType(this@Fir2IrVisitor.session, declarationStorage)
+        val type = coneType?.toIrType(this@Fir2IrVisitor.session, declarationStorage, this@Fir2IrVisitor.irBuiltIns)",Can this be just `session` and `irBuiltIns` for the arguments?,2019-12-23 08:34:12
156,"@@ -714,6 +714,43 @@ class StringTest {
         }
     }
 
+    @test fun occurencesOf() {
+        // Multiple overlapping occurances
+        assertEquals(""abaabaaababac"".occurrencesOf(""abaa"", matchOverlapping = true).toList(), listOf(0, 3))","`expected` value comes first, `actual` value second.
",2016-05-17 19:17:46
839,"@@ -719,11 +717,12 @@ class JavaToJKTreeBuilder constructor(
             visibility(referenceSearcher) { ast, psi -> ast.withFormattingFrom(psi) }
 
         fun PsiField.toJK(): JKField {
+            val (annotationList, typeUseAnnotationList) = annotationList(this)
             return JKField(
-                JKTypeElement(type.toJK()).withFormattingFrom(typeElement),
+                JKTypeElement(type.toJK(), typeUseAnnotationList).withFormattingFrom(typeElement),","Please, take annotations directly from `PsiField.typeElement`",2019-10-04 20:54:40
843,"@@ -719,8 +719,9 @@ class JavaToJKTreeBuilder constructor(
             visibility(referenceSearcher) { ast, psi -> ast.withFormattingFrom(psi) }
 
         fun PsiField.toJK(): JKField {
+            val typeElement = typeElement",Why we need this variable?,2019-10-06 11:28:33
961,"@@ -72,7 +73,10 @@ sealed class NativeBinary(
         get() = lowerCamelCaseName(""link"", name, target.targetName)
 
     val linkTask: KotlinNativeLink
-        get() = project.tasks.getByName(linkTaskName) as KotlinNativeLink
+        get() = linkTaskProvider.get()
+
+    val linkTaskProvider: TaskProvider<out KotlinNativeLink>
+        get() = project.tasks.withType(KotlinNativeLink::class.java).named(linkTaskName)","It would be more clear to use `named(java.lang.String, java.lang.Class)` ",2020-01-28 18:33:25
278,"@@ -73,10 +73,10 @@ object SwitchDemo {
         val status = """"
         when (status) {
             ""init"", ""dial"", ""transmit"" -> return 0x111111
-            ""ok"" -> return 0xFF006600.toInt()
-            ""cancel"" -> return 0xFF666666.toInt()
-            ""fail"", ""busy"", ""error"" -> return 0xFF660000.toInt()
-            else -> return 0xFF660000.toInt()
+            ""ok"" -> return -16751104","Please, write out these numbers in hex, if input in hex. ",2017-08-16 12:34:22
649,"@@ -73,11 +73,11 @@ class FlattenStringConcatenationLowering(val context: CommonBackendContext) : Fi
             return when (expression) {
                 is IrStringConcatenation -> true
                 is IrCall -> {
-                    val dispatchReceiver = expression.dispatchReceiver
-                    dispatchReceiver != null &&
-                            dispatchReceiver.type.isString() &&
+                    val receiver = expression.dispatchReceiver ?: expression.extensionReceiver","@sfs Please also check package for irCall, this code would not work correctly for next cases (please also add test for it):
```
operator fun String?.plus(p: String): String {
    return """" + this
}

fun test(a: String?, b: String): String {
    return a + b
}
```
",2019-04-23 11:51:10
16,"@@ -73,6 +73,14 @@ public static ASTNode createColonNode(Project project) {
         return property.getNode().findChildByType(JetTokens.COLON);
     }
 
+    @NotNull
+    public static PsiElement createSemicolon(Project project) {
+        JetProperty property = createProperty(project, ""val x: Int;"");
+        PsiElement colon = property.findElementAt(10);","Colon variable should be renamed to senilicon
",2013-02-21 14:22:36
394,"@@ -73,7 +73,7 @@ object RangeOps : TemplateGroupBase() {
             """"""
             Returns a progression from this value down to the specified [to] value with the step -1.
 
-            The [to] value has to be less than this value.
+            The [to] value has to be less than or equal to this value.","Actually this statement is incorrect, `to` has not be <= `this`, but if it isn't, the returned progression will be empty.",2018-04-19 02:17:06
840,"@@ -735,18 +734,29 @@ class JavaToJKTreeBuilder constructor(
             }
         }
 
-        fun <T : PsiModifierListOwner> T.annotationList(docCommentOwner: PsiDocCommentOwner?): JKAnnotationList {
+        fun <T : PsiModifierListOwner> T.annotationList(docCommentOwner: PsiDocCommentOwner?): Pair<JKAnnotationList, JKAnnotationList> {",And in this function just filter out type-use annotations by checking `owner` property,2019-10-04 20:56:01
580,"@@ -74,6 +74,11 @@ message IrDeclarationOrigin {
   }
 }
 
+message Name {",Why isn't it enough to encode names as strings with `Name.guessByFirstCharacter` as a way to distinguish special names from identifiers?,2019-03-14 15:52:38
935,"@@ -74,6 +80,17 @@ class JvmGeneratorExtensions(private val generateFacades: Boolean = true) : Gene
         else
             null
 
+    override fun computeParameterName(descriptor: ParameterDescriptor): Name {","Minor, just curious: why is it JVM-specific?",2020-01-09 08:00:10
888,"@@ -74,7 +74,7 @@ class MethodSignatureMapper(private val context: JvmBackendContext) {
         if (nameForSpecialFunction != null) return nameForSpecialFunction
 
         val property = (function as? IrSimpleFunction)?.correspondingPropertySymbol?.owner
-        if (property != null) {
+        if (property != null && function.name.isSpecial) {",Could you clarify why this is needed? It would seem that property accessor's name is always `isSpecial`,2019-11-13 17:31:57
900,"@@ -741,6 +741,7 @@ abstract class AbstractAndroidProjectHandler(private val kotlinConfigurationTool
             ).apply {
                 kotlin.srcDir(project.file(project.file(""src/${sourceSet.name}/kotlin"")))
                 kotlin.srcDirs(sourceSet.java.srcDirs)
+                sourceSet.java.srcDir(project.file(""src/$name/kotlin""))","Having this path declared here might cause inconsistency if the path changes in the other places where it's used.
Kotlin source sets have their `srcDirs` initialized here: https://github.com/JetBrains/kotlin/blob/0c9d962f9f474479fd6328df9e13e539e25a31b5/libraries/tools/kotlin-gradle-plugin/src/main/kotlin/org/jetbrains/kotlin/gradle/plugin/sources/KotlinSourceSetFactory.kt#L36
I think it would be safer not to duplicate the path pattern here and reuse the existing content of the `srcDirs`. For example, this could be done as follows:
```
sourceSet.java.srcDirs(*kotlin.srcDirs.minus(sourceSet.java.srcDirs).toTypedArray())
```
(the `.minus(...)` part is a safety measure to avoid duplicating the Java source directories, for instance, if some plugin or a build script uses both collections to pack a sources JAR)",2019-11-26 01:54:15
108,"@@ -75,6 +75,9 @@ public fun ByteArray.toString(charset: String): String = String(this, charset)
  */
 public fun ByteArray.toString(charset: Charset): String = String(this, charset)
 
+/**
+ * Returnsn an array containing the elements of this collection.","typo ""returnsn""
",2015-03-12 14:54:06
808,"@@ -75,6 +77,10 @@ private fun KtWhenExpression.findDeclarationNear(): KtProperty? {
     return previousProperty.takeIf { !it.isVar && it.hasInitializer() && it.nameIdentifier?.text == subjectExpression?.text }
 }
 
+private fun KtProperty.hasReturnOrThrowExpression(): Boolean {
+    return this.initializer?.anyDescendantOfType<KtExpression> { it is KtReturnExpression || it is KtThrowExpression } == true","I think the same should be true for `break` & `continue`, so for all kinds of jumps.",2019-09-23 08:39:11
519,"@@ -76,11 +78,22 @@ class RemoveUnusedFunctionParameterFix(parameter: KtParameter) : KotlinQuickFixA
     }
 
     private fun runRemoveUnusedTypeParameters(typeParameters: List<KtTypeParameter>) {
-        val unusedTypeParams = typeParameters.filter { ReferencesSearch.search(it).findFirst() == null }
+        val unusedTypeParams = typeParameters.filter { typeParameter ->","After merge of KT-23512, this requires some rewriting.",2018-10-23 10:05:45
453,"@@ -76,6 +76,17 @@ public inline fun <T> T.apply(block: T.() -> Unit): T {
     return this
 }
 
+/**
+ * Calls the specified function [block] with `this` value as its receiver and returns Unit.
+ */
+@kotlin.internal.InlineOnly
+public inline fun <T> T.unit(block: T.() -> Unit) {","Perhaps a more appropriate name would be `scope`?

```kotlin
fun foo(): Unit = listOf(""one"", ""two"", ""three"").scope {
    forEach {
        println(""item: $it"")
    }

    map(String::capitalize).forEach(::println)

    ...
}
```",2018-08-03 22:30:07
514,"@@ -76,6 +77,20 @@ class AddBracesIntention : SelfTargetingIntention<KtElement>(KtElement::class.ja
 
         val result = expression.replace(psiFactory.createSingleStatementBlock(expression))
 
+        // Ensure that expression is in single line, due to possible multiple comments","And yes, you should add tests to this pull request. You need to create some files in `idea\testData\intentions\<YourIntention>` (look at existing examples please), then run ""Generate All Tests"" and then run `IntentionTestGenerated` to check your tests are passing. Please add tests to this pull request.",2018-10-10 16:19:26
685,"@@ -77,6 +77,18 @@ class ElvisToIfThenIntention : SelfTargetingRangeIntention<KtBinaryExpression>(K
         val left = KtPsiUtil.safeDeparenthesize(element.left!!)
         val right = KtPsiUtil.safeDeparenthesize(element.right!!)
 
+        val property = (KtPsiUtil.safeDeparenthesize(element).parent as? KtProperty)
+        val propertyName = property?.name
+        if (propertyName != null && right is KtReturnExpression) {","We can do the same for `break`, `continue` and `throw`",2019-05-15 10:22:12
990,"@@ -77,6 +78,12 @@ sealed class ReplCheckResult : Serializable {
     }
 }
 
+// --- complete
+
+interface ReplCompleteAction {","I'm not sure that it makes sense to modify obsolete API unless we need implementation on top of it. This will complicate migration in the future.
Ideally, the best will be to create an independent API, parallel to the new REPL API (@nikitinas).
Let's discuss this topic separately.",2020-02-10 15:14:44
565,"@@ -77,7 +77,7 @@ class BranchingExpressionGenerator(statementGenerator: StatementGenerator) : Sta
         if (irBranches.size == 1) {","@dnpetrov Shoudn't we use IF origin  for irBranches.size > 1 below:
```
val irWhen = IrWhenImpl(ktIf.startOffsetSkippingComments, ktIf.endOffset, resultType, IrStatementOrigin.WHEN)
```

@ting-yuan Please also add next test:
```
fun cond() = false

fun bar() {}

fun foo() {
    if (cond()) {
        bar()
    } else if (true) {
        bar()
    } else {
        bar()
    }
}
// 1 LINENUMBER 6
// 1 LINENUMBER 8
```",2019-03-06 10:24:55
599,"@@ -77,7 +92,13 @@ public class FileTreeWalk private constructor(
         }
 
         override fun computeNext() {
-            val nextFile = gotoNext()
+            val nextFile: File?
+            if (algorithm.equals(WalkAlgorithm.BFS)) {","It's probably nicer to use `if` as an expression here:

            val nextFile = if (algorithm.equals(WalkAlgorithm.BFS)) {
                ++currentDepth
                gotoNextBfs()
            } else {
                gotoNextDfs()
            }",2019-03-29 08:12:37
82,"@@ -773,7 +773,7 @@ public fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {
 }
 
 /**
- * Returns a list containing elements at specified positions
+ * Returns a string containing characters at specified positions","copypasta: Array is not a string
",2015-02-09 15:52:41
581,"@@ -777,17 +779,26 @@ class DoubleColonExpressionResolver(
     }
 
     companion object {
+        private fun receiverTypeFor(descriptor: CallableDescriptor, lhs: DoubleColonLHS?): KotlinType? =
+            (descriptor.extensionReceiverParameter ?: descriptor.dispatchReceiverParameter)?.let { (lhs as? DoubleColonLHS.Type)?.type }",IMHO an `if` was simpler (in the original version) but it's minor,2019-03-14 17:40:15
949,"@@ -778,9 +777,13 @@ class ExpressionCodegen(
         jump.markLineNumber(startOffset = true)
         val endLabel = Label()
         val stackElement = unwindBlockStack(endLabel, data) { it is LoopInfo && it.loop == jump.loop } as LoopInfo?
-            ?: throw AssertionError(""Target label for break/continue not found"")
-        mv.fixStackAndJump(if (jump is IrBreak) stackElement.breakLabel else stackElement.continueLabel)
-        mv.mark(endLabel)
+        if (stackElement == null) {","Is it possible to search proper loop outside (in inlinedInto codegens)?. And if not present throw exception, otherwise generate global return flag?",2020-01-20 12:40:39
502,"@@ -78,6 +78,7 @@
 
         <scriptDefinitionContributor implementation=""org.jetbrains.kotlin.idea.core.script.GradleScriptDefinitionsContributor"" order=""first""/>
 
+        <moduleBuilder implementation=""org.jetbrains.kotlin.ide.konan.gradle.KotlinGradleNativeMultiplatformModuleBuilder""/>","You should (probably) change also `gradle.xml.181`, otherwise your wizard will not bee seen in IDEA 181 or earlier versions.",2018-09-25 07:22:41
232,"@@ -78,7 +81,7 @@ private fun collectNullCheckExpressions(expression: KtBinaryExpression): Triple<
 
 private fun isNullChecksToSafeCallFixAvailable(expression: KtBinaryExpression): Boolean {
     val (lte, rte) = collectNullCheckExpressions(expression) ?: return false
-    return getDuplicates(lte, rte)?.parent as? KtDotQualifiedExpression != null
+    return lte.isChainStable() && getDuplicates(lte, rte)?.parent as? KtDotQualifiedExpression != null",At least one or two tests required here,2017-07-03 12:02:22
471,"@@ -781,7 +781,7 @@ public final int yylength() {
 
 
   /**
-   * Reports an error that occured while scanning.
+   * Reports an error that occurred while scanning.",The same concern as for `_KDocLexer`,2018-08-14 15:32:54
441,"@@ -79,10 +82,14 @@ class SimplifiableCallChainInspection : AbstractCallChainChecker() {
     }
 }
 
-private fun KotlinType?.isMapOrSubType(): Boolean {
-    return this != null && (isMap() || constructor.supertypes.any { it.isMap() })
-}
-
-private fun KotlinType.isMap(): Boolean {
-    return constructor.declarationDescriptor?.name?.asString()?.endsWith(""Map"") == true
-}
+private fun KotlinType?.isMap(builtIns: KotlinBuiltIns): Boolean {","@t-kameyama Why don't you just use the implementation I've suggested in my [first comment](https://github.com/JetBrains/kotlin/pull/1753#discussion_r204414873) in this PR? Is there anything wrong with it?
```
private fun KotlinType?.isMap(builtIns: KotlinBuiltIns): Boolean {
    return this != null && constructor.declarationDescriptor?.name?.asString()?.endsWith(""Map"") == true && isSubtypeOf(map)
}
```
(note that this is copied from https://github.com/JetBrains/kotlin/pull/1753#discussion_r204414873)",2018-07-24 15:12:14
395,"@@ -79,4 +79,10 @@ class Strings {
         assertPrints(byteArray.toString(charset), ""Hello"")
     }
 
+    @Sample
+    fun stringToUpperCase() {
+        assertPrints(""Hello"".toUpperCase(), ""HELLO"")
+        assertPrints(""Hello"".toUpperCase(Locale.ENGLISH), ""HELLO"")","I wonder, is there such an example that shows why locale could be used for toUpper/LowerCase? I mean so that it would result in a different result compared to no locale overload.",2018-04-19 03:00:00
341,"@@ -79,4 +79,196 @@ class Strings {
         assertPrints(byteArray.toString(charset), ""Hello"")
     }
 
+
+    //Indices is IntRange
+    @Sample
+    fun slice() {
+        assertPrints(""abcdef"".slice(IntRange(1,2)),""bc"")
+        assertPrints(""abcdef"".slice(IntRange(0,0)),""a"")",Usually `IntRange` is constructed with the `..` operator: `1..2`,2018-01-09 20:20:22
411,"@@ -79,6 +79,8 @@
 
     boolean isSuspend();
 
+    boolean isGenerated();","While it is might be beneficial to know if a function was generated or is present in a code (some IDE inspections can use this information), I would recommend removing it from this pull request. 

The problem is that descriptors are used everywhere and usually are read-only after initialization. They are also expected to be serialized/deserialized to metadata, so descriptor retrieved from compiled code are equivalent to descriptors before compilation. 

As current implementation violates all those implicit rules and uses `isGenerated` only for passing message inside JVM backend code, I'm sure we may avoid bringing it in for now.",2018-05-19 15:04:39
120,"@@ -8,6 +8,7 @@ false
 for
 if
 in
+interface","Why?
",2015-04-27 10:32:01
696,"@@ -8,8 +8,6 @@
  * that can be found in the license/LICENSE.txt file.
  */",@Ololoshechkin I suppose copyrights in `build.gradle.kts` files added in your commits are also not needed,2019-05-20 15:26:06
295,"@@ -8,8 +8,7 @@ internal class A// this is a primary constructor
 
     // this is a secondary constructor 2
     constructor(s: String) : this(s.length) {} // end of secondary constructor 2 body
-}// this is a secondary constructor 1
-// end of secondary constructor 1 body","Not sure that it nice to silently drop the comment. 
It's better to place it after comment for declaration where default parameters inferred now.",2017-09-13 15:26:09
746,"@@ -80,7 +101,15 @@ class SmartIdentityTable<K, V> {
         }
     }
 
+    fun putAll(other: SmartIdentityTable<K, V>) {
+        for (key in other.keys) {
+            this[key] = other[key]!!
+        }
+    }
+
     companion object {
         private const val ARRAY_UNTIL_SIZE = 10
     }
+
+    data class Entry<K, V>(val key: K, val value: V)","Might be nice to inherit this from `Map.Entry<K, V>` and make `entries` return `Sequence<Map.Entry<K, V>>` to avoid rewrapping map entries into these entries in the implementation",2019-07-01 12:19:32
828,"@@ -80,7 +79,9 @@ object ConversionsRunner {
         RemoveRedundantQualifiersForCallsConversion(context),
         FilterImportsConversion(context),
         MoveInitBlocksToTheEndConversion(context),
-        AddElementsInfoConversion(context)
+        AddElementsInfoConversion(context),
+        ContinueStatementConversion(context),","Please, do not add new conversions after `AddElementsInfoConversion` It is better to have all new conversions in before `TypeMappingConversion`. I will mention it in code later :)",2019-10-01 15:08:28
688,"@@ -80,7 +80,8 @@ class SharedVariablesLowering(val context: BackendContext) : FunctionLoweringPas
                 override fun visitVariable(declaration: IrVariable, data: IrDeclarationParent?) {
                     declaration.acceptChildren(this, data)
 
-                    if (declaration.isVar) {
+                    // `val` locals can be initialized in a lambda inlined into `run` or similar.
+                    if (declaration.isVar || declaration.initializer == null) {","What about such cases:
```
val z: Int
z = 1
val x ={ z }()
```
seems we also should check kind of IrValueAccessExpression below",2019-05-16 07:52:43
748,"@@ -81,10 +79,12 @@ internal class ConstraintSystemImpl(
 
         override fun hasViolatedUpperBound() = !isSuccessful() && filterConstraintsOut(TYPE_BOUND_POSITION).status.isSuccessful()
 
-        override fun hasConflictingConstraints() = localTypeParameterBounds.values.any { it.values.size > 1 }
+        override fun hasConflictingConstraints() =
+            allTypeParameterBounds.entries.any { !it.key.isExternal && it.value.values.size > 1 }",Please use destructuring lambda parameter here and below instead of `it.key`/`it.value`,2019-07-01 12:42:46
370,"@@ -81,14 +84,30 @@ private fun KtAnnotationEntry.getRequiredAnnotationTargets(annotationClass: KtCl
     }.flatten().toSet()
 
     val annotationTargetValueNames = AnnotationTarget.values().map { it.name }
-    return (requiredTargets + otherReferenceRequiredTargets).filter { it.name in annotationTargetValueNames }
+    return (requiredTargets + otherReferenceRequiredTargets).toSet().filter { it.name in annotationTargetValueNames }",Probably `distinct()` is better here,2018-02-28 08:32:53
440,"@@ -82,17 +79,10 @@ class SimplifiableCallChainInspection : AbstractCallChainChecker() {
     }
 }
 
-private fun KotlinType?.isMap(builtIns: KotlinBuiltIns): Boolean {
-    if (this == null) return false
-
-    val map = builtIns.map.defaultType
-    val mutableMap = builtIns.mutableMap.defaultType
+private fun KotlinType?.isMapOrSubType(): Boolean {
+    return this != null && (isMap() || constructor.supertypes.any { it.isMap() })","It's not the implementation that @mglukhikh or me have suggested. Please re-read the discussion. This code would return true on a Java class named `SomethingMap` which does not inherit from `Map`, which is incorrect. What we're looking for is classes whose names both end with `""Map""` _and_ who inherit from `Map`.",2018-07-24 11:14:25
462,"@@ -82,17 +85,31 @@ protected void doTest(@NotNull String ktFileName) throws Exception {
         ClassReader cr = new ClassReader(outputFile.asByteArray());
         List<LocalVariable> actualLocalVariables = readLocalVariable(cr, methodName);
 
-        KotlinTestUtils.assertEqualsToFile(ktFile, text.substring(0, text.indexOf(""// VARIABLE : "")) + getActualVariablesAsString(actualLocalVariables));
+        List<String> actual = getActualVariablesAsString(actualLocalVariables);",It's best to keep old compare logic cause it's allow FileComparisonFailure allows easily update failed testdata,2018-08-08 07:15:34
897,"@@ -82,5 +55,22 @@ private class SortModifiersFix(private val modifiers: List<KtModifierKeywordToke
             .let { it.second + it.first }
             .forEach { owner.addModifier(it) }
     }
-}
 
+    private fun KtModifierList.modifierKeywordTokens(): List<KtModifierKeywordToken> {
+        return allChildren.toList().asSequence().mapNotNull { it.node.elementType as? KtModifierKeywordToken }.toList()",Redundant conversion from sequence to list and back :),2019-11-25 13:33:58
838,"@@ -82,6 +83,13 @@ open class ClassCodegen protected constructor(
             else -> null
         }
 
+    fun getRegeneratedObjectNameGenerator(function: IrFunction): NameGenerator {
+        val name = function.name.takeIf { !it.isSpecial }",This should fix tests on Windows.,2019-10-03 10:26:29
836,"@@ -82,6 +84,11 @@ open class ClassCodegen protected constructor(
             else -> null
         }
 
+    fun getRegeneratedObjectNameGenerator(function: Name) =
+        context.regeneratedObjectNameGenerators.getOrPut(irClass to function) {",Actually it's possible to keep name generator in ClassCodegen with class related prefix (it would be more local) and for other purposes create subgenerator via NameGenerator.subGenerator,2019-10-02 13:31:30
822,"@@ -82,6 +88,15 @@ private fun KtExpression?.getWhenConditionSubjectCandidate(): KtExpression? = wh
     else -> null
 }
 
+private fun KtExpression.hasCandidateNameReferenceExpression(): Boolean {
+    val nameReferenceExpression = this as? KtNameReferenceExpression
+        ?: (this as? KtQualifiedExpression)?.selectorExpression as? KtNameReferenceExpression
+        ?: return false
+    val resolved = nameReferenceExpression.mainReference.resolve()","@t-kameyama This change breaks ""if to when"" intention because resolve of factory-created elements is not possible. Yet I forbid these checks during ""if to when"", but you may try to make a nicer fix.",2019-09-27 06:13:45
538,"@@ -82,7 +82,11 @@ open class KaptWithoutKotlincTask @Inject constructor(private val workerExecutor
         val kaptClasspath = kaptJars + findKotlinStdlibClasspath(project)
 
         workerExecutor.submit(KaptExecution::class.java) { config ->
-            config.isolationMode = IsolationMode.PROCESS","Not critical, but:
Maybe use case-insensitive comparison instead of hard-coding several possible combinations?",2019-01-09 13:30:53
273,"@@ -82,7 +89,8 @@ public inline fun <T:Any> checkNotNull(value: T?): T = checkNotNull(value) { ""Re
  * @sample samples.misc.Preconditions.failCheckWithLazyMessage
  */
 @kotlin.internal.InlineOnly
-public inline fun <T:Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {
+@kotlin.internal.Returns
+public inline fun <T:Any> checkNotNull(@kotlin.internal.Equals(kotlin.internal.ConstantValue.NOT_NULL) value: T?, lazyMessage: () -> Any): T {",Can we annotate also `error` below?,2017-08-15 16:08:34
219,"@@ -824,6 +824,8 @@
     DiagnosticFactory0<KtExpression> ALWAYS_NULL = DiagnosticFactory0.create(WARNING);
 
     DiagnosticFactory0<KtNullableType> USELESS_NULLABLE_CHECK = DiagnosticFactory0.create(WARNING, NULLABLE_TYPE);
+    DiagnosticFactory0<KtElement> USELESS_IS_CHECK = DiagnosticFactory0.create(WARNING);
+    DiagnosticFactory0<KtElement> USELESS_IS_NOT_CHECK = DiagnosticFactory0.create(WARNING);","I'd propose to use one diagnostiс: 
```
DiagnosticFactory1<KtElement, Boolean> USELESS_IS_CHECK = DiagnosticFactory1.create(WARNING);
```",2017-05-02 18:34:14
185,"@@ -83,6 +83,35 @@ object MoveDeclarationsOutHelper {
         return PsiUtilCore.toPsiElementArray(resultStatements)
     }
 
+    private fun addSymbolAfterDeclaration(container: PsiElement, declaration: KtProperty, isLastStatemnt: Boolean) {","typo: statemnt -> statement
",2016-10-18 18:48:22
186,"@@ -83,6 +83,35 @@ object MoveDeclarationsOutHelper {
         return PsiUtilCore.toPsiElementArray(resultStatements)
     }
 
+    private fun addSymbolAfterDeclaration(container: PsiElement, declaration: KtProperty, isLastStatemnt: Boolean) {
+        if (isLastStatemnt) {
+            container.addAfter(KtPsiFactory(declaration).createEQ(), declaration)
+        }
+        else {
+            container.addAfter(KtPsiFactory(declaration).createNewLine(), declaration)","It should never be necessary to create newlines from text. All newlines should be inserted by the formatter.
",2016-10-18 18:53:52
230,"@@ -83,7 +84,9 @@ sealed class ReplCompileResult : Serializable {
                           val mainClassName: String,
                           val classes: List<CompiledClassData>,
                           val hasResult: Boolean,
-                          val classpathAddendum: List<File>) : ReplCompileResult()
+                          val classpathAddendum: List<File>) : ReplCompileResult() {
+        val type = LastInferredTypeHolder.inferredType.get()","It would be easier to pass the expression type explicitly to `ReplCompileResult.CompiledClasses`'s constructor where it's created at `GenericReplCompiler.compile` with:
```
val expression = psiFile.getChildOfType<KtExpression>()
compilerState.analyzerEngine.trace.bindingContext.getType(expression)
```
(+ handle the case when there's no expression in a REPL line)",2017-06-13 14:33:56
517,"@@ -83,7 +99,9 @@ class AddBracesIntention : SelfTargetingIntention<KtElement>(KtElement::class.ja
             is KtIfExpression ->
                 (result?.parent?.nextSibling as? PsiWhiteSpace)?.delete()
         }
-        saver.restore(result)
+
+        // Check for single line expression with comment beneath.
+        saver.restore(result, isCommentBeneath, false)",Please use named argument syntax for boolean arguments,2018-10-23 09:41:04
679,"@@ -83,9 +84,15 @@ private class MoveCompanionObjectFieldsLowering(val context: CommonBackendContex
         companion.declarations.removeAll { it is IrAnonymousInitializer }
     }
 
-    private fun IrClass.allFieldsAreJvmField() =
-        declarations.filterIsInstance<IrProperty>()
-            .mapNotNull { it.backingField }.all { it.hasAnnotation(JVM_FIELD_ANNOTATION_FQ_NAME) }
+    private fun shouldExposeProperty(irClass: IrClass, irProperty: IrProperty): Boolean {","What does ""exposing"" the property mean? I suggest renaming it (`shouldMoveProperty`?) since ""expose"" isn't used anywhere else.",2019-05-14 06:21:04
907,"@@ -833,7 +844,7 @@ class FirDataFlowAnalyzer(private val components: FirAbstractBodyResolveTransfor
         if (fir is FirThisReceiverExpressionImpl) {
             return variableStorage.getOrCreateNewThisRealVariable(fir.calleeReference.boundSymbol ?: return null)
         }
-        val symbol: AbstractFirBasedSymbol<*> = fir.resolvedSymbol ?: return null
+        val symbol = fir.resolvedSymbol as? FirVariableSymbol<*> ?: return null","I made this change because of an issue I found with `codegen/box/unaryOp/callNullable.kt` (snippet below):

```kt
    val a1: Byte? = 1.unaryMinus()
    val a2: Short? = 1.unaryMinus()
    val a3: Int? = 1.unaryMinus()
// ...
    if (a1!! != (-1).toByte()) return ""fail 1""
    if (a2!! != (-1).toShort()) return ""fail 2""
    if (a3!! != -1) return ""fail 3""
```

`exitVariableDeclaration` would create a ""real variable"" for the initializer with the `unaryMinus` function as the symbol, and create an alias variable for `a1` pointing to the `unaryMinus` variable. It would also create similar alias variables for `a2`, `a3` etc. Each `!!` call would add the not-nullable type to the type info for the `unaryMinus` function, which does not make sense (it builds an intersection type, e.g., `Byte & Short & Int` after `a3!!`).

FWIW, this issue also exists with the `as` type operator. If you changed all the `!!` to `as` (e.g., `a1 as Byte` instead of `a1!!`, etc.), you would see some failure: `Caused by: java.lang.ClassCastException: java.lang.Short cannot be cast to java.lang.Byte` (JVM tries to cast `a2` to `Byte`).

This change makes sure that only put real variable symbols in storage. Let me know if this seems right (or not)!",2019-12-05 00:09:01
461,"@@ -836,12 +836,12 @@ private static void generateLocalVariablesForParameters(
 
             if (kind == JvmMethodParameterKind.VALUE) {
                 ValueParameterDescriptor parameter = valueParameterIterator.next();
-                List<VariableDescriptor> destructuringVariables = ValueParameterDescriptorImpl.getDestructuringVariablesOrNull(parameter);
+                String joinedParameterNames = ValueParameterDescriptorImpl.joinParameterNamesOrNull(parameter);","I'm not sure that name is good, maybe 'nameForDestructuredParameter' or smth else",2018-08-07 11:20:56
851,"@@ -84,6 +83,23 @@ open class DefaultArgumentStubGenerator(
                 variables[it] = newIrFunction.extensionReceiverParameter!!
             }
 
+            // In order to deal with forward references in default value lambdas,","An easier way to achieve the same effect is to do

```kotlin
irFunction.valueParameters.associateWithTo(variables) {
    newIrFunction.valueParameters[it.index]
}
```

and leave the rest of the code as it was before so that reads of `f1` before the temporary is created are redirected to the original argument.",2019-10-09 08:22:13
910,"@@ -840,6 +840,63 @@ object Aggregates : TemplateGroupBase() {
         }
     }
 
+    val f_reduceOrNull = fn(""reduceOrNull(operation: (acc: T, T) -> T)"") {
+        include(ArraysOfPrimitives, ArraysOfUnsigned, CharSequences)
+    } builder {
+        inline()
+        specialFor(ArraysOfUnsigned) { inlineOnly() }","We can introduce this function in 1.3.70 as experimental: then we need to annotate it with `@SinceKotlin(""1.3"")` and `@ExperimentalStdlibApi`. Otherwise we need to set SinceKotlin to 1.4.",2019-12-11 04:21:51
831,"@@ -845,30 +844,7 @@ else if (kind == JvmMethodParameterKind.RECEIVER) {
             mv.visitLocalVariable(parameterName, type.getDescriptor(), null, methodBegin, methodEnd, shift);
             shift += type.getSize();
         }
-
         shift += shiftForDestructuringVariables;",Could be deleted,2019-10-02 06:38:22
148,"@@ -854,4 +854,41 @@ class CollectionTest {
         // we need toString() inside pattern because of KT-8666
         assertEquals(""[1, a, null, ${Long.MAX_VALUE.toString()}]"", listOf(1, ""a"", null, Long.MAX_VALUE).toString())
     }
+
+    @test fun testGetRange() {
+        val listStr = listOf(""a"", ""b"", ""c"", ""d"", ""e"")","I believe we also need tests on an empty list: should fail at any range but empty range on empty list should produce empty list 
",2016-02-27 17:22:10
147,"@@ -854,4 +854,41 @@ class CollectionTest {
         // we need toString() inside pattern because of KT-8666
         assertEquals(""[1, a, null, ${Long.MAX_VALUE.toString()}]"", listOf(1, ""a"", null, Long.MAX_VALUE).toString())
     }
+
+    @test fun testGetRange() {
+        val listStr = listOf(""a"", ""b"", ""c"", ""d"", ""e"")
+
+        assertTrue(throwsError{listStr[-1..2]})
+        assertTrue(throwsError{listStr[1..10]})
+
+        assertEquals(listStr[IntRange.EMPTY], listOf<String>())","I should be expected value at the first place, the second argument is actual, swap these arguments please
",2016-02-27 17:20:29
130,"@@ -86,6 +86,8 @@
         <include name=""compiler/builtins-serializer/src""/>
         <include name=""compiler/cli/src""/>
         <include name=""compiler/cli/cli-common/src""/>
+        <include name=""compiler/rmi/rmi-server/src""/>
+        <include name=""compiler/rmi/rmi-interface/src""/>","There's another fileset which is used in the `compiler-quick` target and declared just below, please also add these modules there.

Also please add them to `compiler-sources`.
",2015-08-22 02:20:42
127,"@@ -86,7 +86,8 @@ protected void configureSpecificCompilerArguments(@NotNull K2JSCompilerArguments
             collector.add(new File(outputFile).getParent());
         }
         if (metaInfo) {
-            String metaFile = KotlinPackage.substringBeforeLast(outputFile, JavaScript.DOT_EXTENSION, outputFile) + KotlinJavascriptMetadataUtils.META_JS_SUFFIX;
+            String output = com.google.common.base.Objects.firstNonNull(outputFile, """"); // fqname here because of J8 compatibility issues","Is it not possible with Kotlin stdlib?
",2015-07-27 19:30:49
844,"@@ -862,9 +868,10 @@ class JavaToJKTreeBuilder constructor(
                 }
 
 
-        fun PsiLocalVariable.toJK(): JKLocalVariable =
-            JKLocalVariable(
-                JKTypeElement(type.toJK()).withFormattingFrom(typeElement),
+        fun PsiLocalVariable.toJK(): JKLocalVariable {
+            val typeElement = typeElement",Redundant var?,2019-10-06 11:30:51
280,"@@ -867,7 +912,8 @@ class DefaultExpressionConverter : JavaElementVisitor(), ExpressionConverter {
                 if (parameters.size == 1 && !isKotlinFunctionType) {
                     // for lambdas all parameters with types should be present
                     emptyList()
-                } else {
+                }
+                else {",Please restore previous code formatting - actual `if-else` statements and spaces are against accepted conceptions.,2017-08-16 16:24:17
883,"@@ -87,6 +87,10 @@ class JvmBackendContext(
 
     internal val localDelegatedProperties = mutableMapOf<IrClass, List<IrLocalDelegatedPropertySymbol>>()
 
+    // If the JVM fqname of a class differs from what is implied by its parent, e.g. if it's a file class
+    // annotated with @JvmPackageName, the correct name is recorded here.
+    internal lateinit var classNameOverride: MutableMap<IrClass, FqName>","I think it'd be a bit more convenient to store `JvmClassName` (`/`-separated) as values. Then the call site at `FileClassLowering` can use this:
```
context.classNameOverride[this] = JvmClassName.byInternalName(partClassType.internalName)
```
and the call site at `IrTypeMapper` can use this:
```
context.classNameOverride[irClass]?.let { return it.internalName }
```
eliminating the manual `.`-`/`-`$` conversions",2019-11-08 19:07:30
829,"@@ -88,6 +88,8 @@ class JKKtConvertedFromForLoopSyntheticWhileStatement(
 ) : JKStatement() {
     var variableDeclaration: JKStatement by child(variableDeclaration)
     var whileStatement: JKWhileStatement by child(whileStatement)
+    // For the use in ContinueStatementConverter
+    var forLoopUpdaters: List<JKStatement> = listOf()","For storing `JKElement`, please use the `by child/children` approach. It allows to control that we will not use the same element a child twice",2019-10-01 15:18:08
194,"@@ -88,8 +85,10 @@ class ConvertFunctionToPropertyIntention : SelfTargetingIntention<KtNamedFunctio
             function.setName(newName)
 
             val property = originalFunction.replace(psiFactory.createProperty(function.text)) as KtProperty
-            if (needsExplicitType) {
-                elementsToShorten.add(property.typeReference!!)
+
+            if (!hasExplicitType) {
+                val linebreak = property.getter?.node?.treePrev","Ouch. This should be handled by a formatter rule, not by AST manipulations.",2017-01-09 11:16:04
658,"@@ -89,3 +92,38 @@ fun IrType.getPrimitiveArrayElementType() = (this as? IrSimpleType)?.let {
 
 fun IrType.isNonPrimitiveArray() =
     (this.isArray() || this.isNullableArray()) && !this.isPrimitiveArray()
+
+fun IrType.eraseTypeParameters() = when (this) {","Please specify explicit return type, provide a few examples in the kdoc and probably rename function to emphasize what exactly it does since it's not immediately obvious.

Also, the behavior seems very much JVM-specific, consider moving to JVM IR type utils.
",2019-04-25 11:40:20
956,"@@ -89,6 +89,7 @@ fun ConeKotlinType.toIrType(
 
 private fun getPrimitiveArrayType(classId: ClassId?, irBuiltIns: IrBuiltIns): IrClassifierSymbol? {
     val irType = when (classId) {
+        ClassId(FqName(""kotlin""), FqName(""Array""), false) -> return irBuiltIns.arrayClass",It's a bit strange that `getPrimitiveArrayType` can return non-primitive `Array`. Rename function?,2020-01-28 07:04:46
920,"@@ -89,6 +90,12 @@ private class JvmInlineClassLowering(private val context: JvmBackendContext) : F
         return declaration
     }
 
+    private fun copyDefaultArguments(replacement: IrReplacementFunction) {
+        for ((oldParameter, newParameter) in replacement.valueParameterMap) {
+            newParameter.defaultValue = oldParameter.owner.defaultValue?.deepCopyWithSymbols(replacement.function)","Since `deepCopyWithSymbols` doesn't copy attributes, wouldn't it cause problems if an anonymous class is used in such a default argument, since we wouldn't have a name for it in the codegen?
E.g.
```
inline class A(val i: Int)

fun A.f(x: String = object { val v = ""OK"" }.v): String = x
```
",2019-12-23 12:35:14
383,"@@ -89,7 +89,7 @@ public inline operator fun BigDecimal.dec(): BigDecimal = this.subtract(BigDecim
  */
 @SinceKotlin(""1.2"")
 @kotlin.internal.InlineOnly
-public inline fun Int.toBigDecimal(): BigDecimal = BigDecimal(this)
+public inline fun Int.toBigDecimal(): BigDecimal = BigDecimal.valueOf(this)",There's no such overload of `valueOf`. Please ensure it compiles.,2018-03-19 16:56:44
94,"@@ -9,11 +9,11 @@ import java.io.Serializable
  * Pair exhibits value semantics, i.e. two pairs are equal if both components are equal.
  *
  * An example of decomposing it into values:
- * ${code test.tuples.PairTest.pairMultiAssignment}
+ * @sample test.tuples.PairTest.pairMultiAssignment
  *
- * $constructor: Creates new instance of [Pair]
- * $first: First value
- * $second: Second value
+ * @param first First value","Missing @param for type parameters.
",2015-02-09 16:25:50
757,"@@ -9,11 +9,29 @@ import kotlin.annotation.AnnotationTarget.FIELD
 import kotlin.annotation.AnnotationTarget.PROPERTY
 
 
-
+/**
+ * Provides a [comparison] function for imposing a total ordering between instances of a class.","I'll change this to the following upon merge:
```suggestion
 * Provides a comparison function for imposing a total ordering between instances of the type [T].
```",2019-07-12 12:55:15
535,"@@ -9,11 +9,7 @@ package kotlin.system
 /**
  * Executes the given [block] and returns elapsed time in milliseconds.
  */
-public inline fun measureTimeMillis(block: () -> Unit): Long {
-    val start = System.currentTimeMillis()
-    block()
-    return System.currentTimeMillis() - start
-}
+public inline fun measureTimeMillis(block: () -> Unit): Long = measureNanoTime(block) / 1_000_000L","Rounding down always may add a systematic error here, that isn't present when simply using millisecond resolution.",2018-12-18 08:15:18
833,"@@ -9,12 +8,19 @@ fun box() {
     else {
         y = null
     }
-    
+
     y!!
 }
 
+// JVM_TEMPLATES:
 // 0 IFNULL
 // 1 IFNONNULL
 // 1 throwNpe
 // 0 ATHROW
 // 0 checkNotNull
+// JVM_IR_TEMPLATES:
+// 0 IFNULL
+// 0 IFNONNULL
+// 0 throwNpe",This should probably be `// 1 throwNpe`,2019-10-02 11:16:42
614,"@@ -9,5 +8,10 @@ fun test(): Int {
     return sum
 }
 
-// 0 IF_ICMPEQ
-// 1 IF_ICMPGT
\ No newline at end of file
+// 0 iterator
+// 0 getStart
+// 0 getEnd
+// 0 getFirst
+// 0 getLast
+// 0 getStep
+// 1 IF_ICMP","Please change to
```
// 1 IF_ICMPGE
// 1 IF
```
and add similar changes to other changed files below.

Please also add // X IF and specify exact IF_XXXX instuctions when it makes sense for new added tests",2019-04-03 10:19:34
790,"@@ -9,5 +9,3 @@ fun test() {
 // 0 hasNext
 // 0 nextChar
 // 0 INVOKEINTERFACE
-// 1 ISTORE 4","I opted for removing these. I'm not sure why we would want to check that we store and load integers in local 4? With this optimization we don't anymore. What was in local 4 was the constant 1 for the step, and we just use const_1 for that when needed now. ",2019-08-30 09:08:50
628,"@@ -9,7 +9,7 @@ import org.jetbrains.kotlin.ir.declarations.*
 import org.jetbrains.kotlin.ir.types.IrType
 
 interface DeclarationFactory {
-    object FIELD_FOR_OUTER_THIS : IrDeclarationOriginImpl(""FIELD_FOR_OUTER_THIS"")
+    object FIELD_FOR_OUTER_THIS : IrDeclarationOriginImpl(""FIELD_FOR_OUTER_THIS"", isSynthetic = true)",@pyos Please check native tests,2019-04-08 09:40:59
118,"@@ -9,7 +9,7 @@ internal trait One {
 }
 
 internal trait OneImpl : One {
-    invisible_fake open override /*1*/ /*fake_override*/ fun boo(): kotlin.Int
+    invisible_fake final override /*1*/ /*fake_override*/ fun boo(): kotlin.Int","I suspect that this may lead to some unexpected errors in subclasses
",2015-04-20 15:45:51
756,"@@ -9,8 +9,15 @@ import kotlin.annotation.AnnotationTarget.FIELD
 import kotlin.annotation.AnnotationTarget.PROPERTY
 
 
-
+/**
+ * Classes which inherit from this interface impose a total ordering between instances of a class.","- Classes do not inherit an interface, they implement it.
- ""instances of a class"" — not the same class as ""Classes"" in the beginning as it may seem.

Perhaps it's better to describe, what behavior this interface provides without mentioning its implementer classes.",2019-07-09 14:56:14
40,"@@ -9,8 +9,9 @@ import kotlin.test.assertTrue
 import kotlin.test.assertEquals
 import kotlin.test.fail
 
-open class BaseGradleIT {
+open class BaseGradleIT(val resourcesRoot: String = ""src/test/resources"") {","There is no need to make resourcesRoot a property: you can remove val keyword to make it a constructor parameter
",2014-03-24 09:59:47
41,"@@ -9,8 +9,9 @@ import kotlin.test.assertTrue
 import kotlin.test.assertEquals
 import kotlin.test.fail
 
-open class BaseGradleIT {
+open class BaseGradleIT(val resourcesRoot: String = ""src/test/resources"") {
 
+    val resourcesRootFile: File = File(resourcesRoot)","You can avoid specifying type for this property: it can be inferred automatically from the initializer. Also it is better to add a private modifier for properties that are used only in this class
",2014-03-24 10:04:00
361,"@@ -9,9 +9,12 @@ class Foo {
     }
 
     fun foo() {
+        // Access to the property use getstatic on the backed field
         LOCAL_PRIVATE
+        // Access to the property requires an invokestatic
         OUTER_PRIVATE
     }
 }
 
-// 2 INVOKESTATIC
\ No newline at end of file
+// 1 INVOKESTATIC
+// 1 PUTSTATIC",Shouldn't this be `// 1 GETSTATIC`?,2018-02-27 12:36:47
892,"@@ -90,7 +115,7 @@ class PropertiesToFieldsLowering(val context: CommonBackendContext) : IrElementT
     }
 
     private fun substituteGetter(irProperty: IrProperty, expression: IrCall): IrExpression {
-        val backingField = irProperty.backingField!!
+        val backingField = irProperty.backingField!!.resolveFakeOverride()!!.getRealBackingField()","Generally, we do not resolve fake override at compilation time, and I prefer if we didn't do it here as well. The reason is that if a member is moved to a subclass and the clients are not recompiled, in some circumstances the call site can end up calling the incorrect member.

It's not directly applicable to the case of `@JvmField` properties though, because they're always final and moving them is a binary incompatible change anyway. But I think it's still better to keep the old backend's behavior here, at least for some possible obscure migration cases.",2019-11-19 17:15:25
952,"@@ -909,7 +909,7 @@ class MethodInliner(
         }
 
         if (inliningContext.isInliningLambda && inliningContext.lambdaInfo is IrExpressionLambda) {
-            val capturedVars = inliningContext.lambdaInfo.capturedVars
+            val capturedVars = parameters.captured.map { it.desc }","@pyos My apologies for delay in review, actually I couldn't understand root cause in this change (suggested fix had unrecognized conflict with my mind inline model). But after fresh view there are some results.

I'm observing next exception:
```
Caused by: org.jetbrains.kotlin.codegen.inline.InlineException: Transformer for _2Kt$complicatedCast$1$1: couldn't inline method call
Cause: f (Ljava/lang/Object;)Ljava/lang/Object;:
    @Lorg/jetbrains/annotations/Nullable;() // invisible, parameter 0
   L0
    LINENUMBER 8 L0
    ALOAD 1
    ASTORE 2
   L1
    LINENUMBER 9 L1
    GETSTATIC _2Kt$complicatedCast$1.$$$$this : Ljava/lang/Object;
    ICONST_1
    LDC ""A""
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.reifiedOperationMarker (ILjava/lang/String;)V
    CHECKCAST java/lang/Object
    ARETURN
```
And there is very strange     `_2Kt$complicatedCast$1.$$$$this : Ljava/lang/Object;` access inside 'f' function. That shouldn't be at all. This code should be executed only for root inline lambdas, `isInliningLambda` is inherited by inner context of anonymoys object transformation (yes, bad naming). Switching condition (using  original code for this line) makes test pass but add some new failings)",2020-01-22 10:33:46
68,"@@ -91,3 +205,18 @@ public fun File.listFiles(filter: (file: File) -> Boolean): Array<File>? = listF
             override fun accept(file: File) = filter(file)
         }
                                                                                     )
+
+/**
+ * Returns true if the file is a directory and contains a child file with a given name. Otherwise false is returned.
+ */
+public fun File.contains(name: String): Boolean {","Name of the function is not very good. First, it can be perceived if ""path"" contains ""name"", not contents of the folder. Second, it will fit ""in"" by convention, and while `if (""build.gradle"" in folder)` looks nice, for the overload with predicate it is a little bit strange. Consider using a different name.
",2014-11-26 14:56:02
673,"@@ -91,6 +95,16 @@ class InnerClassesLowering(val context: BackendContext) : ClassLoweringPass {
                     enclosingConstructor = null
                 }
 
+            override fun visitFunction(declaration: IrFunction): IrStatement =
+                try {",This way of handling context looks ad-hoc and brittle to me. Why not use `IrElementTransformerVoidWithContext`?,2019-05-13 09:14:26
577,"@@ -91,7 +91,7 @@ object ExpectedActualResolver {
                             Substitutor(expectedClass.declaredTypeParameters, container.declaredTypeParameters)
                         }
                         else null
-                    areCompatibleCallables(declaration, actual, parentSubstitutor = substitutor)
+                    areCompatibleCallables(declaration, actual, commonModule, parentSubstitutor = substitutor)",@sfs Seems this is redundant,2019-03-13 09:40:31
699,"@@ -910,7 +910,8 @@ class KotlinTypeMapper @JvmOverloads constructor(
         val isConstructor = isConstructor(jvmSignature)
         val descriptor = getDefaultDescriptor(
             jvmSignature,
-            if (isStaticMethod(kind, functionDescriptor) || isConstructor) null else ownerType.descriptor,
+            if (isStaticMethod(kind, functionDescriptor) || isStaticDeclaration(functionDescriptor) || isConstructor)",Please add `isIrBackend &&` here so code would be cleaned after switching to new typeMapper,2019-05-21 08:51:55
682,"@@ -910,7 +910,8 @@ class KotlinTypeMapper @JvmOverloads constructor(
         val isConstructor = isConstructor(jvmSignature)
         val descriptor = getDefaultDescriptor(
             jvmSignature,
-            if (isStaticMethod(kind, functionDescriptor) || isConstructor) null else ownerType.descriptor,
+            if (isStaticMethod(kind, functionDescriptor) || isStaticDeclaration(functionDescriptor) || isConstructor)
+                null else ownerType.descriptor,","Nit: is this the preferred indentation for this. I think I would personally prefer:

```
if (condition)
    null
else
    ownerType.descriptor
```",2019-05-14 13:44:11
491,"@@ -919,6 +975,9 @@ class ExpressionCodegen(
         }
 
         if (tryCatchBlockEnd != null) {
+            if (tryInfo != null) {
+                tryInfo.tryBlock.finallyExpression!!.markLineNumber(startOffset = false)","This line is not clear, do we really need it?",2018-08-28 09:02:13
600,"@@ -92,14 +113,14 @@ public class FileTreeWalk private constructor(
             }
         }
 
-        private tailrec fun gotoNext(): File? {
+        private tailrec fun gotoNextDfs(): File? {","Again, I'd prefer to spell out `Dfs`, and likewise for `Bfs` below.",2019-03-29 08:13:22
301,"@@ -92,6 +92,27 @@ public fun <T> MutableList<T>.fill(value: T): Unit {
 }
 
 /**
+ * Randomly shuffles elements in this list.
+ *
+ * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm
+ */
+@SinceKotlin(""1.2"")
+public fun <T> MutableList<T>.shuffle(): Unit {
+    (lastIndex downTo 1).forEach { i ->
+        rand(i + 1).let { j ->
+            swap(i, j)
+        }
+    }
+}
+private fun rand(upperBound: Int) = Math.floor(Math.random() * upperBound)","Couldn't find any way to make `Random` customizable in `JavaScript`, therefore that variant is left out.",2017-09-17 17:51:21
262,"@@ -92,6 +95,14 @@ fun KtLambdaArgument.moveInsideParenthesesAndReplaceWith(
     return oldCallExpression.replace(newCallExpression) as KtCallExpression
 }
 
+private fun shouldLambdaParameterNamed(args: List<ValueArgument>, callExpr: KtCallExpression): Boolean {
+    return args.any { it.isNamed() } ||","Now that it's a separate function, there's no need to cramp it all into a single expression.

```
if (args.any { it.isNamed () }) return true
val callee = ...resolve as? KtFunction ?: return true
return callee.valueParameters.any { ... }
```

Also the grammatically correct name would be `shouldLambdaParameterBeNamed`.",2017-08-04 13:44:39
908,"@@ -923,6 +923,12 @@ class FirRenderer(builder: StringBuilder) : FirVisitorVoid() {
         }
     }
 
+    override fun visitCheckNotNullCall(checkNotNullCall: FirCheckNotNullCall) {
+        checkNotNullCall.annotations.renderAnnotations()
+        print(""!!"")","I think, it's better to swap this and next lines, because of `expression!!` is more readable than `!!expression`",2019-12-05 11:26:22
327,"@@ -925,8 +925,13 @@ else if (!atSet(WHEN_CONDITION_RECOVERY_SET)) {
      * : whenCondition{"",""} ""->"" element SEMI
      */
     private void parseWhenEntryNotElse() {
+        boolean matchFound = false;
         while (true) {
             while (at(COMMA)) errorAndAdvance(""Expecting a when-condition"");
+            if (at(MATCH_KEYWORD)) {
+                if (matchFound) error(""Unexpected second match operator in one when entry. Use @ for concat match patterns"");","When possible, it's better to report simple errors (from Errors.java) and not parsing errors. I think it's not a problem to parse different match patterns separated by a comma, and report an error later in front-end.",2017-11-30 12:48:16
947,"@@ -93,3 +94,30 @@ internal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {
     1 -> setOf(iterator().next())
     else -> this
 }
+
+/**
+ * Build a new read-only [Set] with the [elements][E] from the [builderAction].
+ *
+ * @sample samples.collections.Builders.Sets.buildSetSample
+ */
+@kotlin.internal.InlineOnly
+@SinceKotlin(""1.4"")
+@Suppress(""NEWER_VERSION_IN_SINCE_KOTLIN"", ""API_NOT_AVAILABLE"" /* See KT-30129 */) // TODO: remove this in 1.4","You can use `@SinceKotlin(""1.3"")` + `@ExperimentalStdlibApi`. This way new functions could be published in 1.3.x release",2020-01-17 19:52:00
665,"@@ -93,7 +93,12 @@ class IrInlineCodegen(
         expression: IrFunctionAccessExpression
     ) {
         val typeArguments = expression.descriptor.typeParameters.keysToMap { expression.getTypeArgumentOrDefault(it) }
-        performInline(typeArguments, callDefault, codegen)
+        state.globalInlineContext.enterIntoInlining(null)","Please add TODO, that  IrFunctionAccessExpression should be somehow passed for cycle check",2019-05-06 14:09:58
456,"@@ -94,12 +94,16 @@ public actual fun String.replaceFirst(oldValue: String, newValue: String, ignore
 
 /**
  * Returns a copy of this string converted to upper case using the rules of the default locale.
+ *
+ * @sample samples.text.Strings.toUpperCase","There's `expect` counterpart and another `actual` implementation for JS, it's worth to place a sample reference there too. ",2018-08-04 16:17:11
812,"@@ -94,7 +97,7 @@ private class InterfaceLowering(val context: JvmBackendContext) : IrElementTrans
         }
     }
 
-    private fun shouldRemoveFunction(function: IrFunction): Boolean =
+    private fun mustMoveToDefaultImpls(function: IrFunction): Boolean =
         Visibilities.isPrivate(function.visibility) && function.name != clinitName ||
                 function.origin == IrDeclarationOrigin.FUNCTION_FOR_DEFAULT_PARAMETER ||",Please note that for @JvmDefault function  '$default' companion is not moved to DefaultImpls class (except maybe compatibility mode),2019-09-24 07:14:28
964,"@@ -947,22 +946,27 @@ abstract class AbstractAndroidProjectHandler(private val kotlinConfigurationTool
         }
     }
 
+    private val BaseVariant.javaTaskProvider: TaskProvider<out AbstractCompile>
+        get() = getJavaTaskProvider()
+            // for older versions, get the task instance and wrap it into a TaskProvider
+            ?: getJavaTask(this).let { it.project.tasks.withType(AbstractCompile::class.java).named(it.name) }","you can use `named​(String name, Class<S> type)`",2020-01-28 23:10:16
970,"@@ -948,7 +951,7 @@ abstract class AbstractAndroidProjectHandler(private val kotlinConfigurationTool
 
     private val BaseVariant.javaTaskProvider: TaskProvider<out AbstractCompile>
         get() = getJavaTaskProvider()
-            // for older versions, get the task instance and wrap it into a TaskProvider
+        // for older versions, get the task instance and wrap it into a TaskProvider
             ?: getJavaTask(this).let { it.project.tasks.withType(AbstractCompile::class.java).named(it.name) }","if we use gradle 5.1 apis, this can be shortened to `named(Class, String)`. Or we need to keep using this ""old"" api because this case is a backward compatibility case ?",2020-01-29 15:42:41
973,"@@ -95,12 +96,12 @@ class KotlinTestsRegistry(val project: Project, val allTestsTaskName: String = ""
         return ""clean"" + taskName.capitalize()
     }
 
-    private val Project.cleanAllTestTask: Task
+    private val Project.cleanAllTestTask: TaskProvider<*>","`cleanAllTest(s)TaskProvider`, I am not sure about the `s`.",2020-01-29 15:57:36
567,"@@ -95,6 +96,9 @@ class IrPropertyDelegateDescriptorImpl(
 ) :
     IrDelegateDescriptorBase(
         correspondingProperty.containingDeclaration,
+        // Inherit the source node so that the parent class of package-level","I would prefer to patch KotliTypeMapper.internalNameForPackageMemberOwner
```
if (isIrBackend && directMember is IrPropertyDelegateDescriptor) {
                return internalNameForPackageMemberOwner(directMember.correspondingProperty, publicFacade, isIrBackend)
            }
```

With some time there would be IR-specific KotliTypeMapper without any hacks",2019-03-12 09:28:43
927,"@@ -95,6 +99,33 @@ internal class PropertyReferenceLowering(val context: JvmBackendContext) : Class
             calculateOwner(expression.propertyContainer, this@PropertyReferenceLowering.context)
         }
 
+    private fun IrBuilderWithScope.computeSignatureString(expression: IrCallableReference): IrExpression {
+        return expression.getter?.let {
+            localPropertyIndices[it]?.let { irString(""<v#$it>"") }",Please rename the outer `it` here to something like `getter` to fix the inspection,2020-01-03 14:49:20
338,"@@ -956,12 +956,40 @@ public fun Collection<Short>.toShortArray(): ShortArray {
     return result
 }
 
+/**
+ * Returns a [Map] containing the elements from this [Iterable] as keys
+ * and the elements from the other [Iterable], as values.
+ *
+ * If any of two pairs would have the same key, the last one gets added to the map.
+ *
+ * The returned map preserves the entry iteration order of the original collection.
+ */
+public infix fun <K, V> Iterable<K>.associateWith(values: Iterable<V>): Map<K, V> =","should I make them `inline`, too?",2018-01-01 21:22:30
513,"@@ -957,6 +957,9 @@
     DiagnosticFactory1<PsiElement, KtKeywordToken> VAL_OR_VAR_ON_CATCH_PARAMETER = DiagnosticFactory1.create(ERROR);
     DiagnosticFactory1<PsiElement, KtKeywordToken> VAL_OR_VAR_ON_SECONDARY_CONSTRUCTOR_PARAMETER = DiagnosticFactory1.create(ERROR);
 
+    // If expressions
+    DiagnosticFactory0<KtIfExpression> COMMENT_OUT_OF_IF = DiagnosticFactory0.create(ERROR);","No, you should not create any new compiler diagnostics, you should just modify intention `AddBracesIntention`",2018-10-10 09:45:58
229,"@@ -96,6 +97,9 @@ class RecursivePropertyAccessorInspection : AbstractKotlinInspection() {
             val bindingContext = element.analyze()
             val target = bindingContext[REFERENCE_TARGET, element]",y :-*,2017-06-04 11:54:12
849,"@@ -96,6 +99,12 @@ fun IrType.getArrayElementType(irBuiltIns: IrBuiltIns): IrType =
     else
         irBuiltIns.primitiveArrayElementTypes.getValue(this.classOrNull!!)
 
+val IrStatementOrigin?.isLambda","Would make sense to delete similar utility from `CallableReferenceLowering`

Also please add explicit return type",2019-10-07 15:59:15
13,"@@ -96,7 +96,10 @@ public boolean accept(File pathname) {
             List<File> subdirs = Arrays.asList(files);
             Collections.sort(subdirs);
             for (File subdir : subdirs) {
-                suite.addTest(suiteForDirectory(baseDataDir, dataPath + ""/"" + subdir.getName(), recursive, filter, factory));","This change must sit in a separate commit, as it has no relation to the problem being solved by this one
",2013-01-29 14:00:10
731,"@@ -97,3 +99,13 @@ internal fun IrFunctionMatcherContainer.singleArgumentExtension(
     fqName { it == fqName }
     return this
 }
+
+internal fun IrFunctionMatcherContainer.singleArgumentExtensionBySimpleType(","This looks suspicious, why not change `progressionClassesTypes` to contain IR types?",2019-06-19 08:27:51
734,"@@ -97,6 +101,12 @@ abstract class Symbols<out T : CommonBackendContext>(val context: T, private val
     val progressionClasses = listOf(charProgression, intProgression, longProgression)
     val progressionClassesTypes = progressionClasses.map { it.descriptor.defaultType }.toSet()
 
+    val getProgressionLastElement = builtInsPackage(""kotlin"", ""internal"").getContributedFunctions(","Total nit: since this is a map from return type to functions, maybe change the name to `getProgressionLastElementFunctions` or something similar?",2019-06-22 15:40:47
962,"@@ -973,57 +977,67 @@ abstract class AbstractAndroidProjectHandler(private val kotlinConfigurationTool
         variantData: BaseVariant,
         subpluginEnvironment: SubpluginEnvironment
     ) {
-        val kotlinTask = project.tasks.getByName(compilation.compileKotlinTaskName) as KotlinCompile
-        val javaTask = getJavaTask(variantData)
+        val javaTask = variantData.javaTaskProvider",`javaTaskProvider`,2020-01-28 23:05:06
79,"@@ -988,7 +988,7 @@ public inline fun <T> Stream<T>.firstOrNull(predicate: (T) -> Boolean): T? {
 }
 
 /**
- * Returns first element matching the given *predicate*, or *null* if element was not found
+ * Returns first character matching the given [predicate], or *null* if character was not found","May be replace _null_ with `null`?
",2015-02-09 15:47:09
534,"@@ -99,20 +99,21 @@ object TopDownAnalyzerFacadeForJVM {
             return null
         }
 
+        fun getExtensionsResult(): AnalysisResult? {",I'd prefer moving the line `container.get<JavaClassesTracker>().onCompletedAnalysis(module)` to the beginning of `invokeExtensionsOnAnalysisComplete` since `JavaClassesTracker` is also a kind of extension and `invokeExtensionsOnAnalysisComplete` has the single call-site now,2018-12-13 07:53:41
810,"@@ -99,4 +99,7 @@ class IrClassImpl(
         typeParameters.transform { it.transform(transformer, data) }
         declarations.transform { it.transform(transformer, data) }
     }
+
+    override fun toString(): String = descriptor.toString()","Why you need toString override here and below? 
We have several utilities for debug purpose: ir2string() and dump() ",2019-09-24 07:04:27
