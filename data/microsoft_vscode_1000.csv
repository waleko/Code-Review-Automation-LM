,diff_hunk,human_review,created_at
422,"@@ -0,0 +1 @@
+<svg xmlns=""http://www.w3.org/2000/svg"" width=""16"" height=""16""><path d=""M13.451 5.609l-.579-.939-1.068.812-.076.094c-.335.415-.927 1.341-1.124 2.876l-.021.165.033.163.071.345c0 1.654-1.346 3-3 3-.795 0-1.545-.311-2.107-.868-.563-.567-.873-1.317-.873-2.111 0-1.431 1.007-2.632 2.351-2.929v2.926s2.528-2.087 2.984-2.461h.012l3.061-2.582-4.919-4.1h-1.137v2.404c-3.429.318-6.121 3.211-6.121 6.721 0 1.809.707 3.508 1.986 4.782 1.277 1.282 2.976 1.988 4.784 1.988 3.722 0 6.75-3.028 6.75-6.75 0-1.245-.349-2.468-1.007-3.536z"" fill=""#2D2D30""/><path d=""M12.6 6.134l-.094.071c-.269.333-.746 1.096-.91 2.375.057.277.092.495.092.545 0 2.206-1.794 4-4 4-1.098 0-2.093-.445-2.817-1.164-.718-.724-1.163-1.718-1.163-2.815 0-2.206 1.794-4 4-4l.351.025v1.85s1.626-1.342 1.631-1.339l1.869-1.577-3.5-2.917v2.218l-.371-.03c-3.176 0-5.75 2.574-5.75 5.75 0 1.593.648 3.034 1.695 4.076 1.042 1.046 2.482 1.694 4.076 1.694 3.176 0 5.75-2.574 5.75-5.75-.001-1.106-.318-2.135-.859-3.012z"" fill=""#C5C5C5""/></svg>","Are you reusing an icon here?
",2016-10-24 15:59:57
421,"@@ -0,0 +1 @@
+<svg xmlns=""http://www.w3.org/2000/svg"" width=""16"" height=""16""><path d=""M13.451 5.609l-.579-.939-1.068.812-.076.094c-.335.415-.927 1.341-1.124 2.876l-.021.165.033.163.071.345c0 1.654-1.346 3-3 3-.795 0-1.545-.311-2.107-.868-.563-.567-.873-1.317-.873-2.111 0-1.431 1.007-2.632 2.351-2.929v2.926s2.528-2.087 2.984-2.461h.012l3.061-2.582-4.919-4.1h-1.137v2.404c-3.429.318-6.121 3.211-6.121 6.721 0 1.809.707 3.508 1.986 4.782 1.277 1.282 2.976 1.988 4.784 1.988 3.722 0 6.75-3.028 6.75-6.75 0-1.245-.349-2.468-1.007-3.536z"" fill=""#F6F6F6""/><path d=""M12.6 6.134l-.094.071c-.269.333-.746 1.096-.91 2.375.057.277.092.495.092.545 0 2.206-1.794 4-4 4-1.098 0-2.093-.445-2.817-1.164-.718-.724-1.163-1.718-1.163-2.815 0-2.206 1.794-4 4-4l.351.025v1.85s1.626-1.342 1.631-1.339l1.869-1.577-3.5-2.917v2.218l-.371-.03c-3.176 0-5.75 2.574-5.75 5.75 0 1.593.648 3.034 1.695 4.076 1.042 1.046 2.482 1.694 4.076 1.694 3.176 0 5.75-2.574 5.75-5.75-.001-1.106-.318-2.135-.859-3.012z"" fill=""#424242""/></svg>","Are you reusing an icon here?
",2016-10-24 15:59:51
208,"@@ -0,0 +1,101 @@
+/*---------------------------------------------------------------------------------------------","Awesome work :+1:
",2016-07-08 13:57:42
403,"@@ -0,0 +1,101 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TreeExplorerNodeProvider } from 'vscode';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Disposable } from 'vs/workbench/api/node/extHostTypes';
+import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
+import { MainContext, ExtHostTreeExplorersShape, MainThreadTreeExplorersShape } from './extHost.protocol';
+import { InternalTreeExplorerNode } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
+import { ExtHostCommands } from 'vs/workbench/api/node/extHostCommands';
+import { asWinJsPromise } from 'vs/base/common/async';
+import { Severity } from 'vs/platform/message/common/message';
+
+export class ExtHostTreeExplorers extends ExtHostTreeExplorersShape {
+	private _proxy: MainThreadTreeExplorersShape;
+
+	private _treeExplorerNodeProviders: { [providerId: string]: TreeExplorerNodeProvider<any> };
+	private _externalNodeMaps: { [providerId: string]: { [id: number]: any } };
+
+	constructor(
+		threadService: IThreadService,
+		private commands: ExtHostCommands
+	) {
+		super();
+
+		this._proxy = threadService.get(MainContext.MainThreadExplorers);
+
+		this._treeExplorerNodeProviders = Object.create(null);
+		this._externalNodeMaps = Object.create(null);
+	}
+
+	registerTreeExplorerNodeProvider(providerId: string, provider: TreeExplorerNodeProvider<any>): Disposable {","Shouldn't this return `vscode.Disposable` from `import * as vscode from 'vscode';`?
",2016-10-24 15:36:37
404,"@@ -0,0 +1,101 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TreeExplorerNodeProvider } from 'vscode';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Disposable } from 'vs/workbench/api/node/extHostTypes';
+import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
+import { MainContext, ExtHostTreeExplorersShape, MainThreadTreeExplorersShape } from './extHost.protocol';
+import { InternalTreeExplorerNode } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
+import { ExtHostCommands } from 'vs/workbench/api/node/extHostCommands';
+import { asWinJsPromise } from 'vs/base/common/async';
+import { Severity } from 'vs/platform/message/common/message';
+
+export class ExtHostTreeExplorers extends ExtHostTreeExplorersShape {
+	private _proxy: MainThreadTreeExplorersShape;
+
+	private _treeExplorerNodeProviders: { [providerId: string]: TreeExplorerNodeProvider<any> };
+	private _externalNodeMaps: { [providerId: string]: { [id: number]: any } };
+
+	constructor(
+		threadService: IThreadService,
+		private commands: ExtHostCommands
+	) {
+		super();
+
+		this._proxy = threadService.get(MainContext.MainThreadExplorers);
+
+		this._treeExplorerNodeProviders = Object.create(null);
+		this._externalNodeMaps = Object.create(null);
+	}
+
+	registerTreeExplorerNodeProvider(providerId: string, provider: TreeExplorerNodeProvider<any>): Disposable {
+		this._proxy.$registerTreeExplorerNodeProvider(providerId);
+		this._treeExplorerNodeProviders[providerId] = provider;
+
+		return new Disposable(() => {
+			delete this._treeExplorerNodeProviders[providerId];","Don't you need to clean up `_externalNodeMaps` too?
",2016-10-24 15:37:16
400,"@@ -0,0 +1,101 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TreeExplorerNodeProvider } from 'vscode';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Disposable } from 'vs/workbench/api/node/extHostTypes';
+import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
+import { MainContext, ExtHostTreeExplorersShape, MainThreadTreeExplorersShape } from './extHost.protocol';
+import { InternalTreeExplorerNode } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
+import { ExtHostCommands } from 'vs/workbench/api/node/extHostCommands';
+import { asWinJsPromise } from 'vs/base/common/async';
+import { Severity } from 'vs/platform/message/common/message';
+
+export class ExtHostTreeExplorers extends ExtHostTreeExplorersShape {
+	private _proxy: MainThreadTreeExplorersShape;
+
+	private _treeExplorerNodeProviders: { [providerId: string]: TreeExplorerNodeProvider<any> };
+	private _externalNodeMaps: { [providerId: string]: { [id: number]: any } };
+
+	constructor(
+		threadService: IThreadService,
+		private commands: ExtHostCommands
+	) {
+		super();
+
+		this._proxy = threadService.get(MainContext.MainThreadExplorers);
+
+		this._treeExplorerNodeProviders = Object.create(null);
+		this._externalNodeMaps = Object.create(null);
+	}
+
+	registerTreeExplorerNodeProvider(providerId: string, provider: TreeExplorerNodeProvider<any>): Disposable {
+		this._proxy.$registerTreeExplorerNodeProvider(providerId);
+		this._treeExplorerNodeProviders[providerId] = provider;
+
+		return new Disposable(() => {
+			delete this._treeExplorerNodeProviders[providerId];
+		});
+	}
+
+	$provideRootNode(providerId: string): TPromise<InternalTreeExplorerNode> {
+		const provider = this.getProvider(providerId);
+
+		return asWinJsPromise(() => provider.provideRootNode()).then(externalRootNode => {
+			const treeNodeMap = Object.create(null);
+			this._externalNodeMaps[providerId] = treeNodeMap;
+
+			const internalRootNode = new InternalTreeExplorerNode(externalRootNode, provider);
+			this._externalNodeMaps[providerId][internalRootNode.id] = externalRootNode;
+			return internalRootNode;
+		}, err => {
+			this.showErrorMessage(`TreeExplorerNodeProvider '${providerId}' failed to provide root node.`);
+		});
+	}
+
+	$resolveChildren(providerId: string, mainThreadNode: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]> {
+		const provider = this.getProvider(providerId);
+
+		const externalNodeMap = this._externalNodeMaps[providerId];
+		const externalNode = externalNodeMap[mainThreadNode.id];
+
+		return asWinJsPromise(() => provider.resolveChildren(externalNode)).then(children => {
+			return children.map(externalChild => {
+				const internalChild = new InternalTreeExplorerNode(externalChild, provider);
+				externalNodeMap[internalChild.id] = externalChild;
+				return internalChild;
+			});
+		}, err => {
+			this.showErrorMessage(`TreeExplorerNodeProvider '${providerId}' failed to resolve children.`);
+		});
+	}
+
+	$executeCommand(providerId: string, mainThreadNode: InternalTreeExplorerNode): TPromise<void> {
+		if (mainThreadNode.clickCommand) {
+			const externalNode = this._externalNodeMaps[providerId][mainThreadNode.id];
+			return asWinJsPromise(() => this.commands.executeCommand(mainThreadNode.clickCommand, externalNode)).then(() => {
+				return null;
+			}, err => {
+				this.showErrorMessage(`Failed to execute command '${mainThreadNode.clickCommand}' provided by TreeExplorerNodeProvider '${providerId}'.`);
+			});
+		}
+
+		return TPromise.as(null);
+	}
+
+	getProvider(providerId: string): TreeExplorerNodeProvider<any> {
+		const provider = this._treeExplorerNodeProviders[providerId];
+		if (!provider) {
+			this.showErrorMessage(`No TreeExplorerNodeProvider with id '${providerId}' registered.`);
+		}
+
+		return provider;
+	}
+
+	private showErrorMessage(message: string): void {
+		this._proxy.$showMessage(Severity.Error, message);","You could probably make ExtHostMessageService a dependency and call into that from here?
",2016-10-24 15:30:49
803,"@@ -0,0 +1,102 @@
+/*---------------------------------------------------------------------------------------------","Seems like a lot of overlap with https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/bootstrap/index.js#L48, maybe better to have a common base that both can reuse?",2017-03-07 06:36:13
427,"@@ -0,0 +1,102 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TreeExplorerNodeProvider } from 'vscode';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Disposable } from 'vs/workbench/api/node/extHostTypes';
+import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
+import { MainContext, ExtHostTreeExplorersShape, MainThreadTreeExplorersShape } from './extHost.protocol';
+import { InternalTreeExplorerNode } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
+import { ExtHostCommands } from 'vs/workbench/api/node/extHostCommands';
+import { asWinJsPromise } from 'vs/base/common/async';
+import { Severity } from 'vs/platform/message/common/message';
+
+export class ExtHostTreeExplorers extends ExtHostTreeExplorersShape {
+	private _proxy: MainThreadTreeExplorersShape;
+
+	private _treeExplorerNodeProviders: { [providerId: string]: TreeExplorerNodeProvider<any> };
+	private _externalNodeMaps: { [providerId: string]: { [id: number]: any } };
+
+	constructor(
+		threadService: IThreadService,
+		private commands: ExtHostCommands
+	) {
+		super();
+
+		this._proxy = threadService.get(MainContext.MainThreadExplorers);
+
+		this._treeExplorerNodeProviders = Object.create(null);
+		this._externalNodeMaps = Object.create(null);
+	}
+
+	registerTreeExplorerNodeProvider(providerId: string, provider: TreeExplorerNodeProvider<any>): Disposable {
+		this._proxy.$registerTreeExplorerNodeProvider(providerId);
+		this._treeExplorerNodeProviders[providerId] = provider;
+
+		return new Disposable(() => {
+			delete this._treeExplorerNodeProviders[providerId];
+			delete this._treeExplorerNodeProviders[providerId];
+		});
+	}
+
+	$provideRootNode(providerId: string): TPromise<InternalTreeExplorerNode> {
+		const provider = this.getProvider(providerId);
+
+		return asWinJsPromise(() => provider.provideRootNode()).then(externalRootNode => {
+			const treeNodeMap = Object.create(null);
+			this._externalNodeMaps[providerId] = treeNodeMap;
+
+			const internalRootNode = new InternalTreeExplorerNode(externalRootNode, provider);
+			this._externalNodeMaps[providerId][internalRootNode.id] = externalRootNode;
+			return internalRootNode;
+		}, err => {
+			this.showErrorMessage(`TreeExplorerNodeProvider '${providerId}' failed to provide root node.`);","[needs change] Replace with `return TPromise.wrapError('TreeEx...')`
",2016-11-01 09:49:31
428,"@@ -0,0 +1,102 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TreeExplorerNodeProvider } from 'vscode';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Disposable } from 'vs/workbench/api/node/extHostTypes';
+import { IThreadService } from 'vs/workbench/services/thread/common/threadService';
+import { MainContext, ExtHostTreeExplorersShape, MainThreadTreeExplorersShape } from './extHost.protocol';
+import { InternalTreeExplorerNode } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
+import { ExtHostCommands } from 'vs/workbench/api/node/extHostCommands';
+import { asWinJsPromise } from 'vs/base/common/async';
+import { Severity } from 'vs/platform/message/common/message';
+
+export class ExtHostTreeExplorers extends ExtHostTreeExplorersShape {
+	private _proxy: MainThreadTreeExplorersShape;
+
+	private _treeExplorerNodeProviders: { [providerId: string]: TreeExplorerNodeProvider<any> };
+	private _externalNodeMaps: { [providerId: string]: { [id: number]: any } };
+
+	constructor(
+		threadService: IThreadService,
+		private commands: ExtHostCommands
+	) {
+		super();
+
+		this._proxy = threadService.get(MainContext.MainThreadExplorers);
+
+		this._treeExplorerNodeProviders = Object.create(null);
+		this._externalNodeMaps = Object.create(null);
+	}
+
+	registerTreeExplorerNodeProvider(providerId: string, provider: TreeExplorerNodeProvider<any>): Disposable {
+		this._proxy.$registerTreeExplorerNodeProvider(providerId);
+		this._treeExplorerNodeProviders[providerId] = provider;
+
+		return new Disposable(() => {
+			delete this._treeExplorerNodeProviders[providerId];
+			delete this._treeExplorerNodeProviders[providerId];
+		});
+	}
+
+	$provideRootNode(providerId: string): TPromise<InternalTreeExplorerNode> {
+		const provider = this.getProvider(providerId);
+
+		return asWinJsPromise(() => provider.provideRootNode()).then(externalRootNode => {
+			const treeNodeMap = Object.create(null);
+			this._externalNodeMaps[providerId] = treeNodeMap;
+
+			const internalRootNode = new InternalTreeExplorerNode(externalRootNode, provider);
+			this._externalNodeMaps[providerId][internalRootNode.id] = externalRootNode;
+			return internalRootNode;
+		}, err => {
+			this.showErrorMessage(`TreeExplorerNodeProvider '${providerId}' failed to provide root node.`);
+		});
+	}
+
+	$resolveChildren(providerId: string, mainThreadNode: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]> {
+		const provider = this.getProvider(providerId);
+
+		const externalNodeMap = this._externalNodeMaps[providerId];
+		const externalNode = externalNodeMap[mainThreadNode.id];
+
+		return asWinJsPromise(() => provider.resolveChildren(externalNode)).then(children => {
+			return children.map(externalChild => {
+				const internalChild = new InternalTreeExplorerNode(externalChild, provider);
+				externalNodeMap[internalChild.id] = externalChild;
+				return internalChild;
+			});
+		}, err => {
+			this.showErrorMessage(`TreeExplorerNodeProvider '${providerId}' failed to resolve children.`);","[needs change] Like above `return Promise.wrapError(...)`
",2016-11-01 09:50:08
52,"@@ -0,0 +1,107 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import nls = require('vs/nls');
+import {Promise} from 'vs/base/common/winjs.base';
+import {Action} from 'vs/base/common/actions';
+import {KeyMod, KeyCode} from 'vs/base/common/keyCodes';
+import {Registry} from 'vs/platform/platform';
+import {SyncActionDescriptor} from 'vs/platform/actions/common/actions';
+import {IPanel} from 'vs/workbench/common/panel';
+import {IWorkbenchActionRegistry, Extensions as WorkbenchExtensions} from 'vs/workbench/common/actionRegistry';
+import {Composite, CompositeDescriptor, CompositeRegistry} from 'vs/workbench/browser/composite';
+import {IPartService} from 'vs/workbench/services/part/common/partService';
+import {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';
+
+export abstract class Panel extends Composite implements IPanel { }
+
+/**
+ * A panel descriptor is a leightweight descriptor of a panel in the monaco workbench.
+ */
+export class PanelDescriptor extends CompositeDescriptor<Panel> { }
+
+export class PanelRegistry extends CompositeRegistry<Panel> {
+	private defaultPanelId: string;
+
+	/**
+	 * Registers a panel to the platform.
+	 */
+	public registerPanel(descriptor: PanelDescriptor): void {
+		super.registerComposite(descriptor);
+	}
+
+	/**
+	 * Returns the panel descriptor for the given id or null if none.
+	 */
+	public getPanel(id: string): PanelDescriptor {
+		return this.getComposite(id);
+	}
+
+	/**
+	 * Returns an array of registered panels known to the platform.
+	 */
+	public getPanels(): PanelDescriptor[] {
+		return this.getComposits();
+	}
+
+	/**
+	 * Sets the id of the panel that should open on startup by default.
+	 */
+	public setDefaultPanelId(id: string): void {
+		this.defaultPanelId = id;
+	}
+
+	/**
+	 * Gets the id of the panel that should open on startup by default.
+	 */
+	public getDefaultPanelId(): string {
+		return this.defaultPanelId;
+	}
+}
+
+export const Extensions = {
+	Panels: 'workbench.contributions.panels'
+};
+
+export class ClosePanelAction extends Action {","@isidorn Suggest to move these actions into panelPart. You can see that sidebarPart is also contributing an action!
",2016-01-19 11:10:10
50,"@@ -0,0 +1,107 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import nls = require('vs/nls');
+import {Promise} from 'vs/base/common/winjs.base';
+import {Action} from 'vs/base/common/actions';
+import {KeyMod, KeyCode} from 'vs/base/common/keyCodes';
+import {Registry} from 'vs/platform/platform';
+import {SyncActionDescriptor} from 'vs/platform/actions/common/actions';
+import {IPanel} from 'vs/workbench/common/panel';
+import {IWorkbenchActionRegistry, Extensions as WorkbenchExtensions} from 'vs/workbench/common/actionRegistry';
+import {Composite, CompositeDescriptor, CompositeRegistry} from 'vs/workbench/browser/composite';
+import {IPartService} from 'vs/workbench/services/part/common/partService';
+import {IWorkspaceContextService} from 'vs/workbench/services/workspace/common/contextService';
+
+export abstract class Panel extends Composite implements IPanel { }
+
+/**
+ * A panel descriptor is a leightweight descriptor of a panel in the monaco workbench.
+ */
+export class PanelDescriptor extends CompositeDescriptor<Panel> { }
+
+export class PanelRegistry extends CompositeRegistry<Panel> {
+	private defaultPanelId: string;
+
+	/**
+	 * Registers a panel to the platform.
+	 */
+	public registerPanel(descriptor: PanelDescriptor): void {
+		super.registerComposite(descriptor);
+	}
+
+	/**
+	 * Returns the panel descriptor for the given id or null if none.
+	 */
+	public getPanel(id: string): PanelDescriptor {
+		return this.getComposite(id);
+	}
+
+	/**
+	 * Returns an array of registered panels known to the platform.
+	 */
+	public getPanels(): PanelDescriptor[] {
+		return this.getComposits();
+	}
+
+	/**
+	 * Sets the id of the panel that should open on startup by default.
+	 */
+	public setDefaultPanelId(id: string): void {
+		this.defaultPanelId = id;
+	}
+
+	/**
+	 * Gets the id of the panel that should open on startup by default.
+	 */
+	public getDefaultPanelId(): string {
+		return this.defaultPanelId;
+	}
+}
+
+export const Extensions = {
+	Panels: 'workbench.contributions.panels'
+};
+
+export class ClosePanelAction extends Action {
+	static ID = 'workbench.action.closePanelAction';
+	static LABEL = nls.localize('closePanel', ""Close"");
+
+	constructor(
+		id: string,
+		name: string,
+		@IPartService private partService: IPartService
+	) {
+		super(id, name, 'close-editor-action');
+	}
+
+	public run(): Promise {
+		this.partService.setPanelHidden(false);","I guess this should be ""true"" for closing?
",2016-01-19 11:03:48
907,"@@ -0,0 +1,107 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import strings = require('vs/base/common/strings');
+import uri from 'vs/base/common/uri';
+import { isMacintosh } from 'vs/base/common/platform';
+import * as errors from 'vs/base/common/errors';
+import { IMouseEvent, StandardMouseEvent } from 'vs/base/browser/mouseEvent';
+import * as nls from 'vs/nls';
+import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+
+export class LinkDetector {
+	private static FILE_LOCATION_PATTERNS: RegExp[] = [
+		// group 0: the full thing :)
+		// group 1: absolute path
+		// group 2: drive letter on windows with trailing backslash or leading slash on mac/linux
+		// group 3: line number
+		// group 4: column number
+		// eg: at Context.<anonymous> (c:\Users\someone\Desktop\mocha-runner\test\test.js:26:11)
+		/(?![\(])(?:file:\/\/)?((?:([a-zA-Z]+:)|[^\(\)<>\'\""\[\]:\s]+)(?:[\\/][^\(\)<>\'\""\[\]:]*)?\.[a-zA-Z]+[0-9]*):(\d+)(?::(\d+))?/g","I notice that the comments are the same but the regex is now more complicated.
Could you please add some comments in code to clarify this regex beast",2017-05-05 09:38:51
909,"@@ -0,0 +1,107 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import strings = require('vs/base/common/strings');
+import uri from 'vs/base/common/uri';
+import { isMacintosh } from 'vs/base/common/platform';
+import * as errors from 'vs/base/common/errors';
+import { IMouseEvent, StandardMouseEvent } from 'vs/base/browser/mouseEvent';
+import * as nls from 'vs/nls';
+import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+
+export class LinkDetector {
+	private static FILE_LOCATION_PATTERNS: RegExp[] = [
+		// group 0: the full thing :)
+		// group 1: absolute path
+		// group 2: drive letter on windows with trailing backslash or leading slash on mac/linux
+		// group 3: line number
+		// group 4: column number
+		// eg: at Context.<anonymous> (c:\Users\someone\Desktop\mocha-runner\test\test.js:26:11)
+		/(?![\(])(?:file:\/\/)?((?:([a-zA-Z]+:)|[^\(\)<>\'\""\[\]:\s]+)(?:[\\/][^\(\)<>\'\""\[\]:]*)?\.[a-zA-Z]+[0-9]*):(\d+)(?::(\d+))?/g
+	];
+
+	constructor(
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IWorkspaceContextService private contextService: IWorkspaceContextService
+	) {
+		// noop
+	}
+","Since this `handleLinks` is now a public method we could try to make the API a bit nicer, a personally find it ugly that it returns an `HTMLElement` or a `string`. It is hard to figure out what to expect as a return result for someobdy who just wants to use the link detector.
At least provide some comments to clarify each case, or try to always return an object with the corresponding fields.

For ideas you can also check what does the terminal / editor link detector do and how does their API look like",2017-05-05 09:41:48
908,"@@ -0,0 +1,107 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import strings = require('vs/base/common/strings');
+import uri from 'vs/base/common/uri';
+import { isMacintosh } from 'vs/base/common/platform';
+import * as errors from 'vs/base/common/errors';
+import { IMouseEvent, StandardMouseEvent } from 'vs/base/browser/mouseEvent';
+import * as nls from 'vs/nls';
+import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+
+export class LinkDetector {
+	private static FILE_LOCATION_PATTERNS: RegExp[] = [
+		// group 0: the full thing :)
+		// group 1: absolute path
+		// group 2: drive letter on windows with trailing backslash or leading slash on mac/linux
+		// group 3: line number
+		// group 4: column number
+		// eg: at Context.<anonymous> (c:\Users\someone\Desktop\mocha-runner\test\test.js:26:11)
+		/(?![\(])(?:file:\/\/)?((?:([a-zA-Z]+:)|[^\(\)<>\'\""\[\]:\s]+)(?:[\\/][^\(\)<>\'\""\[\]:]*)?\.[a-zA-Z]+[0-9]*):(\d+)(?::(\d+))?/g
+	];
+
+	constructor(
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IWorkspaceContextService private contextService: IWorkspaceContextService
+	) {
+		// noop
+	}
+
+	public handleLinks(text: string): HTMLElement | string {","As far as I understand there have been no changes till the end of this file, it has just been moved over.
If that is the case it looks good to me",2017-05-05 09:40:14
952,"@@ -0,0 +1,110 @@
+/*---------------------------------------------------------------------------------------------","I like the idea of inferring the tsconfig.json to use from the open active TS file. However if no file is open I think we should still provide a reasonable command and not just look into the workspace root. We should search for all tsconfig.json and return all of them. If a build is trigger the task runner will run all of them

Regarding activation: I have a similar problem in ESLint where I need to active the plugin to simply being able to listen to config changes. This is all I do in activate. In addition I listen to open event and if a JS files opens I start the ESLint server by hand. So basically I have an activate and a realActivate. We could do the same for TS and start the tsserver when we get a open event for a TS file in the listener registered in activate. ",2017-05-23 19:21:21
486,"@@ -0,0 +1,111 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import * as crypto from 'crypto';
+import * as fs from 'fs';
+import * as path from 'path';
+import Uri from 'vs/base/common/uri';
+import { readdirSync } from 'vs/base/node/extfs';
+import { IBackupWorkspacesFormat, IBackupMainService } from 'vs/platform/backup/common/backup';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+
+export class BackupMainService implements IBackupMainService {
+
+	public _serviceBrand: any;
+
+	protected backupHome: string;
+	protected workspacesJsonPath: string;
+
+	private workspacesJsonContent: IBackupWorkspacesFormat;
+
+	constructor(
+		@IEnvironmentService environmentService: IEnvironmentService
+	) {
+		this.backupHome = environmentService.backupHome;
+		this.workspacesJsonPath = environmentService.backupWorkspacesPath;
+		this.loadSync();
+	}
+
+	public getWorkspaceBackupPaths(): string[] {
+		return this.workspacesJsonContent.folderWorkspaces;
+	}
+
+	public pushWorkspaceBackupPathsSync(workspaces: Uri[]): void {
+		workspaces.forEach(workspace => {
+			// Hot exit is disabled for empty workspaces
+			if (!workspace) {
+				return;
+			}
+
+			if (this.workspacesJsonContent.folderWorkspaces.indexOf(workspace.fsPath) === -1) {
+				this.workspacesJsonContent.folderWorkspaces.push(workspace.fsPath);
+			}
+		});
+		this.saveSync();
+	}
+
+	public removeWorkspaceBackupPathSync(workspace: Uri): void {
+		if (!this.workspacesJsonContent.folderWorkspaces) {
+			return;
+		}
+		const index = this.workspacesJsonContent.folderWorkspaces.indexOf(workspace.fsPath);
+		if (index === -1) {
+			return;
+		}
+		this.workspacesJsonContent.folderWorkspaces.splice(index, 1);
+		this.saveSync();
+	}
+
+	public getWorkspaceUntitledFileBackupsSync(workspace: Uri): string[] {
+		const untitledDir = path.join(this.getWorkspaceBackupDirectory(workspace), 'untitled');
+
+		// Allow sync here as it's only used in workbench initialization's critical path
+		try {
+			return readdirSync(untitledDir).map(file => path.join(untitledDir, file));
+		} catch (ex) {
+			return [];
+		}
+	}
+
+	public hasWorkspaceBackup(workspace: Uri): boolean {
+		return fs.existsSync(this.getWorkspaceBackupDirectory(workspace));
+	}
+
+	private getWorkspaceBackupDirectory(workspace: Uri): string {
+		const workspaceHash = crypto.createHash('md5').update(workspace.fsPath).digest('hex');
+		return path.join(this.backupHome, workspaceHash);
+	}
+
+	protected loadSync(): void {
+		try {
+			this.workspacesJsonContent = JSON.parse(fs.readFileSync(this.workspacesJsonPath, 'utf8').toString()); // invalid JSON or permission issue can happen here
+		} catch (error) {
+			this.workspacesJsonContent = Object.create(null);
+		}
+
+		// Ensure folderWorkspaces is a string[]
+		if (this.workspacesJsonContent.folderWorkspaces) {
+			const fws = this.workspacesJsonContent.folderWorkspaces;
+			if (!Array.isArray(fws) || fws.some(f => typeof f !== 'string')) {
+				this.workspacesJsonContent = Object.create(null);
+			}
+		}
+
+		if (!this.workspacesJsonContent.folderWorkspaces) {
+			this.workspacesJsonContent.folderWorkspaces = [];
+		}
+	}
+
+	private saveSync(): void {
+		try {
+			// The user data directory must exist so only the Backup directory needs to be checked.
+			if (!fs.existsSync(this.backupHome)) {
+				fs.mkdirSync(this.backupHome);
+			}
+			fs.writeFileSync(this.workspacesJsonPath, JSON.stringify(this.workspacesJsonContent));
+		} catch (ex) {","@Tyriar maybe add at least some logging here to be able to find out about issues more easily.
",2016-11-11 07:04:09
415,"@@ -0,0 +1,115 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import nls = require('vs/nls');
+import { TPromise } from 'vs/base/common/winjs.base';
+import * as DOM from 'vs/base/browser/dom';
+import { Builder, $ } from 'vs/base/browser/builder';
+import { IWorkspace } from 'vs/platform/workspace/common/workspace';
+import { CollapsibleViewletView } from 'vs/workbench/browser/viewlet';
+import { IAction, IActionRunner } from 'vs/base/common/actions';
+import { IMessageService } from 'vs/platform/message/common/message';
+import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
+import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
+import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
+import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
+import { ITreeExplorerViewletService } from 'vs/workbench/parts/explorers/browser/treeExplorerViewletService';
+import { ITree } from 'vs/base/parts/tree/browser/tree';
+import { Tree } from 'vs/base/parts/tree/browser/treeImpl';
+import { TreeExplorerViewletState, TreeDataSource, TreeRenderer, TreeController } from 'vs/workbench/parts/explorers/browser/views/treeExplorerViewer';
+import { RefreshViewExplorerAction } from 'vs/workbench/parts/explorers/browser/treeExplorerActions';
+
+export class TreeExplorerView extends CollapsibleViewletView {
+	private workspace: IWorkspace;
+
+	constructor(
+		private viewletState: TreeExplorerViewletState,
+		private treeNodeProviderId: string,
+		actionRunner: IActionRunner,
+		headerSize: number,
+		@IMessageService messageService: IMessageService,
+		@IKeybindingService keybindingService: IKeybindingService,
+		@IContextMenuService contextMenuService: IContextMenuService,
+		@IWorkspaceContextService private contextService: IWorkspaceContextService,
+		@IInstantiationService private instantiationService: IInstantiationService,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IEditorGroupService private editorGroupService: IEditorGroupService,
+		@ITreeExplorerViewletService private treeExplorerViewletService: ITreeExplorerViewletService
+	) {
+		super(actionRunner, false, nls.localize('treeExplorerViewletTree', ""Tree Explorer Section""), messageService, keybindingService, contextMenuService, headerSize);
+
+		this.workspace = contextService.getWorkspace();
+
+		this.create();
+	}
+
+	renderBody(container: HTMLElement): void {
+		this.treeContainer = super.renderViewTree(container);
+		DOM.addClass(this.treeContainer, 'tree-explorer-viewlet-tree-view');
+
+		this.tree = this.createViewer($(this.treeContainer));
+	}
+
+	createViewer(container: Builder): ITree {
+		const dataSource = this.instantiationService.createInstance(TreeDataSource, this.treeNodeProviderId);
+		const renderer = this.instantiationService.createInstance(TreeRenderer, this.viewletState, this.actionRunner, container.getHTMLElement());
+		const controller = this.instantiationService.createInstance(TreeController, this.treeNodeProviderId);
+		const sorter = null;
+		const filter = null;
+		const dnd = null;
+		const accessibilityProvider = null;
+
+		return new Tree(container.getHTMLElement(), {
+			dataSource,
+			renderer,
+			controller,
+			sorter,
+			filter,
+			dnd,
+			accessibilityProvider
+		});
+	}
+
+	getActions(): IAction[] {
+		const refresh = this.instantiationService.createInstance(RefreshViewExplorerAction, this);
+		return [refresh];
+	}
+
+	create(): TPromise<void> {
+		return this.updateInput();
+	}
+
+	setVisible(visible: boolean): TPromise<void> {
+		return super.setVisible(visible);
+	}
+
+	updateInput(): TPromise<void> {
+		if (this.treeExplorerViewletService.hasProvider(this.treeNodeProviderId)) {
+			return this.treeExplorerViewletService.provideRootNode(this.treeNodeProviderId).then(tree => {
+				this.tree.setInput(tree);
+			});
+		} else {","else/indent is redundant
",2016-10-24 15:55:25
652,"@@ -0,0 +1,118 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import { CodeLensProvider, CodeLens, CancellationToken, TextDocument, Range, Uri, Location, Position } from 'vscode';
+import * as Proto from '../protocol';
+import * as PConst from '../protocol.const';
+
+import { ITypescriptServiceClient } from '../typescriptService';
+
+import * as nls from 'vscode-nls';
+let localize = nls.loadMessageBundle();
+
+
+class ReferencesCodeLens extends CodeLens {
+	public document: Uri;
+	public file: string;
+
+	constructor(document: Uri, file: string, range: Range) {
+		super(range);
+		this.document = document;
+		this.file = file;
+	}
+}
+
+export default class TypeScriptReferencesCodeLensProvider implements CodeLensProvider {
+	private client: ITypescriptServiceClient;
+
+	constructor(client: ITypescriptServiceClient) {
+		this.client = client;
+	}
+
+	provideCodeLenses(document: TextDocument, token: CancellationToken): Promise<CodeLens[]> {
+		const filepath = this.client.asAbsolutePath(document.uri);
+		if (!filepath) {
+			return Promise.resolve([]);
+		}
+		return this.client.execute('navtree', { file: filepath }, token).then(response => {
+			const tree = response.body;
+			const referenceableSpans: Range[] = [];
+			if (tree && tree.childItems) {
+				tree.childItems.forEach(item => this.extractReferenceableSymbols(item, referenceableSpans));
+			}
+			return Promise.resolve(referenceableSpans.map(span => new ReferencesCodeLens(document.uri, filepath, span)));
+		});
+	}
+
+	resolveCodeLens(inputCodeLens: CodeLens, token: CancellationToken): Promise<CodeLens> {
+		const codeLens = inputCodeLens as ReferencesCodeLens;
+		if (!codeLens.document) {
+			return Promise.reject<CodeLens>(codeLens);
+		}
+		const args: Proto.FileLocationRequestArgs = {
+			file: codeLens.file,
+			line: codeLens.range.start.line + 1,
+			offset: codeLens.range.start.character + 1
+		};
+		return this.client.execute('references', args, token).then(response => {
+			if (response && response.body) {
+				const referenceCount = Math.max(0, response.body.refs.length - 1);
+				const locations = response.body.refs.map(reference =>
+					new Location(codeLens.document,
+						new Range(
+							new Position(reference.start.line - 1, reference.start.offset - 1),
+							new Position(reference.end.line - 1, reference.end.offset - 1))));
+
+				codeLens.command = {
+					title: referenceCount + ' ' + (referenceCount === 1 ? localize('oneReferenceLabel', 'reference') : localize('manyReferenceLabel', 'references')),
+					command: 'editor.action.showReferences',
+					arguments: [codeLens.document, locations[0].range.start, locations.slice(1)]
+				};
+				return Promise.resolve(codeLens);
+			}
+			return Promise.reject(codeLens);
+		}).catch(() => {
+			codeLens.command = {
+				title: localize('referenceErrorLabel', 'Could not determine references'),
+				command: ''
+			};
+			return Promise.resolve(codeLens);","@jrieken What is the proper way to reject code lenses if resolving them fails? I tried using `Promise.reject`, but that leaves a bunch of ugly blank lines in the document:

![screen shot 2017-01-05 at 7 17 23 pm](https://cloud.githubusercontent.com/assets/12821956/21706402/c4a051da-d37b-11e6-9f71-9016f251c61d.png)
",2017-01-06 03:19:16
316,"@@ -0,0 +1,119 @@
+/*---------------------------------------------------------------------------------------------","If this is a service it should move into vs/workbench/services !
",2016-10-13 15:05:00
317,"@@ -0,0 +1,119 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as path from 'path';
+import * as crypto from 'crypto';
+import * as fs from 'original-fs';
+import * as arrays from 'vs/base/common/arrays';
+import Uri from 'vs/base/common/uri';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+import { IBackupService } from 'vs/platform/backup/common/backup';
+
+interface IBackupFormat {
+	folderWorkspaces?: {
+		[workspacePath: string]: string[]
+	};
+}
+
+export class BackupService implements IBackupService {
+
+	public _serviceBrand: any;
+
+	private workspaceResource: Uri;
+	private workspacesJsonFilePath: string;
+	private fileContent: IBackupFormat;
+
+	constructor(
+		@IEnvironmentService private environmentService: IEnvironmentService,
+		@IWorkspaceContextService contextService: IWorkspaceContextService
+	) {
+		this.workspacesJsonFilePath = path.join(environmentService.userDataPath, 'Backups', 'workspaces.json');","Again this should be defined inside IEnvironmentService and not constructed
",2016-10-13 15:05:20
318,"@@ -0,0 +1,119 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as path from 'path';
+import * as crypto from 'crypto';
+import * as fs from 'original-fs';
+import * as arrays from 'vs/base/common/arrays';
+import Uri from 'vs/base/common/uri';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+import { IBackupService } from 'vs/platform/backup/common/backup';
+
+interface IBackupFormat {
+	folderWorkspaces?: {
+		[workspacePath: string]: string[]
+	};
+}
+
+export class BackupService implements IBackupService {
+
+	public _serviceBrand: any;
+
+	private workspaceResource: Uri;
+	private workspacesJsonFilePath: string;
+	private fileContent: IBackupFormat;
+
+	constructor(
+		@IEnvironmentService private environmentService: IEnvironmentService,
+		@IWorkspaceContextService contextService: IWorkspaceContextService
+	) {
+		this.workspacesJsonFilePath = path.join(environmentService.userDataPath, 'Backups', 'workspaces.json');
+		this.workspaceResource = contextService.getWorkspace().resource;
+	}
+
+	public getBackupWorkspaces(): string[] {
+		this.load();
+		return Object.keys(this.fileContent.folderWorkspaces || {});
+	}
+
+	public clearBackupWorkspaces(): void {","Again confused why this guy seems to be doing the same work as the backup service on the main side, plus some additional things.
",2016-10-13 15:06:03
319,"@@ -0,0 +1,119 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as path from 'path';
+import * as crypto from 'crypto';
+import * as fs from 'original-fs';
+import * as arrays from 'vs/base/common/arrays';
+import Uri from 'vs/base/common/uri';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+import { IBackupService } from 'vs/platform/backup/common/backup';
+
+interface IBackupFormat {
+	folderWorkspaces?: {
+		[workspacePath: string]: string[]
+	};
+}
+
+export class BackupService implements IBackupService {
+
+	public _serviceBrand: any;
+
+	private workspaceResource: Uri;
+	private workspacesJsonFilePath: string;
+	private fileContent: IBackupFormat;
+
+	constructor(
+		@IEnvironmentService private environmentService: IEnvironmentService,
+		@IWorkspaceContextService contextService: IWorkspaceContextService
+	) {
+		this.workspacesJsonFilePath = path.join(environmentService.userDataPath, 'Backups', 'workspaces.json');
+		this.workspaceResource = contextService.getWorkspace().resource;
+	}
+
+	public getBackupWorkspaces(): string[] {
+		this.load();
+		return Object.keys(this.fileContent.folderWorkspaces || {});
+	}
+
+	public clearBackupWorkspaces(): void {
+		this.fileContent = {
+			folderWorkspaces: {}
+		};
+		this.save();
+	}
+
+	public removeWorkspace(workspace: string): void {
+		this.load();
+		if (!this.fileContent.folderWorkspaces) {
+			return;
+		}
+		delete this.fileContent.folderWorkspaces[workspace];
+		this.save();
+	}
+
+	public getBackupFiles(workspace: string): string[] {
+		this.load();
+		return this.fileContent.folderWorkspaces[workspace] || [];
+	}
+
+	public getBackupUntitledFiles(workspace: string): string[] {
+		const workspaceHash = crypto.createHash('md5').update(this.workspaceResource.fsPath).digest('hex');","What happens when the same file is edited in 2 windows?
",2016-10-13 15:06:33
320,"@@ -0,0 +1,119 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as path from 'path';
+import * as crypto from 'crypto';
+import * as fs from 'original-fs';
+import * as arrays from 'vs/base/common/arrays';
+import Uri from 'vs/base/common/uri';
+import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+import { IBackupService } from 'vs/platform/backup/common/backup';
+
+interface IBackupFormat {
+	folderWorkspaces?: {
+		[workspacePath: string]: string[]
+	};
+}
+
+export class BackupService implements IBackupService {
+
+	public _serviceBrand: any;
+
+	private workspaceResource: Uri;
+	private workspacesJsonFilePath: string;
+	private fileContent: IBackupFormat;
+
+	constructor(
+		@IEnvironmentService private environmentService: IEnvironmentService,
+		@IWorkspaceContextService contextService: IWorkspaceContextService
+	) {
+		this.workspacesJsonFilePath = path.join(environmentService.userDataPath, 'Backups', 'workspaces.json');
+		this.workspaceResource = contextService.getWorkspace().resource;
+	}
+
+	public getBackupWorkspaces(): string[] {
+		this.load();
+		return Object.keys(this.fileContent.folderWorkspaces || {});
+	}
+
+	public clearBackupWorkspaces(): void {
+		this.fileContent = {
+			folderWorkspaces: {}
+		};
+		this.save();
+	}
+
+	public removeWorkspace(workspace: string): void {
+		this.load();
+		if (!this.fileContent.folderWorkspaces) {
+			return;
+		}
+		delete this.fileContent.folderWorkspaces[workspace];
+		this.save();
+	}
+
+	public getBackupFiles(workspace: string): string[] {
+		this.load();
+		return this.fileContent.folderWorkspaces[workspace] || [];
+	}
+
+	public getBackupUntitledFiles(workspace: string): string[] {
+		const workspaceHash = crypto.createHash('md5').update(this.workspaceResource.fsPath).digest('hex');
+		const untitledDir = path.join(this.environmentService.userDataPath, 'Backups', workspaceHash, 'untitled');
+		try {
+			const untitledFiles = fs.readdirSync(untitledDir).map(file => path.join(untitledDir, file));","Red flag for sync fs API, we should avoid it by all means and use Promises instead if needed.
",2016-10-13 15:07:02
14,"@@ -0,0 +1,12 @@
+# EditorConfig is awesome: http://EditorConfig.org
+
+# top-most EditorConfig file
+root = true
+
+# Tab indentation (no size specified)
+[*]
+indent_style = tab
+
+[{.travis.yml,npm-shrinkwrap.json}]
+indent_style = space
+indent_size = 2","indent must be 4
",2015-11-24 09:12:49
949,"@@ -0,0 +1,128 @@
+{
+  ""name"": ""merge-conflict"",
+  ""publisher"": ""vscode"",
+  ""displayName"": ""merge-conflict"",
+  ""description"": ""Merge Conflict"",
+  ""version"": ""0.7.0"",
+  ""aiKey"": ""AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217"",
+  ""enableProposedApi"": true,","Not needed, I believe. Remove the property to clarify.",2017-05-23 18:19:29
947,"@@ -0,0 +1,128 @@
+{
+  ""name"": ""merge-conflict"",
+  ""publisher"": ""vscode"",
+  ""displayName"": ""merge-conflict"",
+  ""description"": ""Merge Conflict"",
+  ""version"": ""0.7.0"",
+  ""aiKey"": ""AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217"",
+  ""enableProposedApi"": true,
+  ""engines"": {
+    ""vscode"": ""^1.5.0""
+  },
+  ""categories"": [
+    ""Other""
+  ],
+  ""activationEvents"": [
+    ""*""
+  ],
+  ""main"": ""./out/extension"",
+  ""scripts"": {
+    ""compile"": ""gulp compile-extension:merge-conflict"",
+    ""watch"": ""gulp watch-extension:merge-conflict""
+  },
+  ""contributes"": {
+    ""commands"": [
+      {
+        ""category"": ""%command.category%"",
+        ""title"": ""%command.accept.all-incoming%"",
+        ""command"": ""merge-conflict.accept.all-incoming""
+      },
+      {
+        ""category"": ""%command.category%"",
+        ""title"": ""%command.accept.all-both%"",
+        ""command"": ""merge-conflict.accept.all-both""
+      },
+      {
+        ""category"": ""%command.category%"",
+        ""title"": ""%command.accept.current%"",
+        ""command"": ""merge-conflict.accept.current""
+      },
+      {
+        ""category"": ""%command.category%"",
+        ""title"": ""%command.accept.incoming%"",
+        ""command"": ""merge-conflict.accept.incoming""
+      },
+      {
+        ""category"": ""%command.category%"",
+        ""title"": ""Accept selection"",
+        ""command"": ""merge-conflict.accept.selection""
+      },
+      {
+        ""category"": ""%command.category%"",
+        ""title"": ""%command.accept.both%"",
+        ""command"": ""merge-conflict.accept.both""
+      },
+      {
+        ""category"": ""%command.category%"",
+        ""title"": ""%command.next%"",
+        ""command"": ""merge-conflict.next""
+      },
+      {
+        ""category"": ""%command.category%"",
+        ""title"": ""%command.previous%"",
+        ""command"": ""merge-conflict.previous""
+      },
+      {
+        ""category"": ""%command.category%"",
+        ""title"": ""%command.compare%"",
+        ""command"": ""merge-conflict.compare""
+      }
+    ],
+    ""keybindings"": [
+      {
+        ""command"": ""merge-conflict.next"",
+        ""when"": ""editorTextFocus"",
+        ""key"": ""alt+m down""
+      },
+      {
+        ""command"": ""merge-conflict.previous"",
+        ""when"": ""editorTextFocus"",
+        ""key"": ""alt+m up""
+      },
+      {
+        ""command"": ""merge-conflict.accept.selection"",
+        ""when"": ""editorTextFocus"",
+        ""key"": ""alt+m enter""
+      },
+      {
+        ""command"": ""merge-conflict.accept.current"",
+        ""when"": ""editorTextFocus"",
+        ""key"": ""alt+m 1""
+      },
+      {
+        ""command"": ""merge-conflict.accept.incoming"",
+        ""when"": ""editorTextFocus"",
+        ""key"": ""alt+m 2""
+      },
+      {
+        ""command"": ""merge-conflict.accept.both"",
+        ""when"": ""editorTextFocus"",
+        ""key"": ""alt+m 3""
+      }
+    ],
+    ""configuration"": {
+      ""title"": ""Merge Conflict"",",Extract to nls file for completeness.,2017-05-23 18:17:10
116,"@@ -0,0 +1,129 @@
+/*---------------------------------------------------------------------------------------------","This should also live in `electron-browser/`.
",2016-04-18 19:11:53
51,"@@ -0,0 +1,13 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+.monaco-workbench > .panel > .content > .panel {
+	height: 100%;
+}
+
+.monaco-workbench > .part.panel > .title {
+	display: block;
+	border-top: 1px solid #007ACC","@isidorn is this value not dynamic depending on debug, no workspace or workspace? I would check what the statusbar does to set this color.
",2016-01-19 11:07:45
416,"@@ -0,0 +1,130 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { $, Builder } from 'vs/base/browser/builder';
+import { ITree, IDataSource, IRenderer, IElementCallback } from 'vs/base/parts/tree/browser/tree';
+import { InternalTreeExplorerNode } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
+import { ClickBehavior, DefaultController } from 'vs/base/parts/tree/browser/treeDefaults';
+import { IMouseEvent } from 'vs/base/browser/mouseEvent';
+import { IActionRunner } from 'vs/base/common/actions';
+import { IActionProvider, ActionsRenderer } from 'vs/base/parts/tree/browser/actionsRenderer';
+import { ContributableActionProvider } from 'vs/workbench/browser/actionBarRegistry';
+import { IContextViewService } from 'vs/platform/contextview/browser/contextView';
+import { IExtensionService } from 'vs/platform/extensions/common/extensions';
+import { IModeService } from 'vs/editor/common/services/modeService';
+import { ITreeExplorerViewletService } from 'vs/workbench/parts/explorers/browser/treeExplorerViewletService';
+import { IProgressService } from 'vs/platform/progress/common/progress';
+
+export class TreeDataSource implements IDataSource {","Fill in access modifiers
",2016-10-24 15:56:22
417,"@@ -0,0 +1,130 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { $, Builder } from 'vs/base/browser/builder';
+import { ITree, IDataSource, IRenderer, IElementCallback } from 'vs/base/parts/tree/browser/tree';
+import { InternalTreeExplorerNode } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
+import { ClickBehavior, DefaultController } from 'vs/base/parts/tree/browser/treeDefaults';
+import { IMouseEvent } from 'vs/base/browser/mouseEvent';
+import { IActionRunner } from 'vs/base/common/actions';
+import { IActionProvider, ActionsRenderer } from 'vs/base/parts/tree/browser/actionsRenderer';
+import { ContributableActionProvider } from 'vs/workbench/browser/actionBarRegistry';
+import { IContextViewService } from 'vs/platform/contextview/browser/contextView';
+import { IExtensionService } from 'vs/platform/extensions/common/extensions';
+import { IModeService } from 'vs/editor/common/services/modeService';
+import { ITreeExplorerViewletService } from 'vs/workbench/parts/explorers/browser/treeExplorerViewletService';
+import { IProgressService } from 'vs/platform/progress/common/progress';
+
+export class TreeDataSource implements IDataSource {
+
+	constructor(
+		private treeNodeProviderId: string,
+		@ITreeExplorerViewletService private treeExplorerViewletService: ITreeExplorerViewletService,
+		@IProgressService private progressService: IProgressService
+	) {
+
+	}
+
+	getId(tree: ITree, node: InternalTreeExplorerNode): string {
+		return node.id.toString();
+	}
+
+	hasChildren(tree: ITree, node: InternalTreeExplorerNode): boolean {
+		return node.hasChildren;
+	}
+
+	getChildren(tree: ITree, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]> {
+		const promise = this.treeExplorerViewletService.resolveChildren(this.treeNodeProviderId, node);
+
+		this.progressService.showWhile(promise, 800);","Why 800?
",2016-10-24 15:57:30
418,"@@ -0,0 +1,130 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { $, Builder } from 'vs/base/browser/builder';
+import { ITree, IDataSource, IRenderer, IElementCallback } from 'vs/base/parts/tree/browser/tree';
+import { InternalTreeExplorerNode } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
+import { ClickBehavior, DefaultController } from 'vs/base/parts/tree/browser/treeDefaults';
+import { IMouseEvent } from 'vs/base/browser/mouseEvent';
+import { IActionRunner } from 'vs/base/common/actions';
+import { IActionProvider, ActionsRenderer } from 'vs/base/parts/tree/browser/actionsRenderer';
+import { ContributableActionProvider } from 'vs/workbench/browser/actionBarRegistry';
+import { IContextViewService } from 'vs/platform/contextview/browser/contextView';
+import { IExtensionService } from 'vs/platform/extensions/common/extensions';
+import { IModeService } from 'vs/editor/common/services/modeService';
+import { ITreeExplorerViewletService } from 'vs/workbench/parts/explorers/browser/treeExplorerViewletService';
+import { IProgressService } from 'vs/platform/progress/common/progress';
+
+export class TreeDataSource implements IDataSource {
+
+	constructor(
+		private treeNodeProviderId: string,
+		@ITreeExplorerViewletService private treeExplorerViewletService: ITreeExplorerViewletService,
+		@IProgressService private progressService: IProgressService
+	) {
+
+	}
+
+	getId(tree: ITree, node: InternalTreeExplorerNode): string {
+		return node.id.toString();
+	}
+
+	hasChildren(tree: ITree, node: InternalTreeExplorerNode): boolean {
+		return node.hasChildren;
+	}
+
+	getChildren(tree: ITree, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]> {
+		const promise = this.treeExplorerViewletService.resolveChildren(this.treeNodeProviderId, node);
+
+		this.progressService.showWhile(promise, 800);
+
+		return promise;
+	}
+
+	getParent(tree: ITree, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode> {
+		return TPromise.as(null);
+	}
+}
+
+export class TreeRenderer extends ActionsRenderer implements IRenderer {
+
+	constructor(
+		state: TreeExplorerViewletState,
+		actionRunner: IActionRunner,
+		private container: HTMLElement,
+		@IContextViewService private contextViewService: IContextViewService,
+		@IExtensionService private extensionService: IExtensionService,
+		@IModeService private modeService: IModeService
+	) {
+		super({
+			actionProvider: state.actionProvider,
+			actionRunner: actionRunner
+		});
+	}
+
+	getContentHeight(tree: ITree, element: any): number {
+		return 22;","Why 22?
",2016-10-24 15:57:48
748,"@@ -0,0 +1,135 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as editorBrowser from 'vs/editor/browser/editorBrowser';
+import { FastDomNode, createFastDomNode } from 'vs/base/browser/styleMutator';
+import { Widget } from 'vs/base/browser/ui/widget';
+import { IDisposable, dispose } from 'vs/base/common/lifecycle';
+import { Configuration } from 'vs/editor/browser/config/configuration';
+import { Position } from 'vs/editor/common/core/position';
+import { IPosition, TextEditorCursorStyle, IConfigurationChangedEvent } from 'vs/editor/common/editorCommon';
+
+export class DragTargetHintWidget extends Widget implements editorBrowser.IContentWidget {
+
+	static ID = 'editor.contrib.dragTargetHintWidget';
+	protected _editor: editorBrowser.ICodeEditor;
+	protected _showAtPosition: Position;
+	private disposables: IDisposable[] = [];
+	private _cursorStyle: TextEditorCursorStyle;
+	private _lineHeight: number;
+	private _typicalHalfwidthCharacterWidth: number;
+	private readonly _domNode: FastDomNode;","Sorry for the compile error, use `FastDomNode<HTMLElement>`",2017-02-20 11:32:05
749,"@@ -0,0 +1,135 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as editorBrowser from 'vs/editor/browser/editorBrowser';
+import { FastDomNode, createFastDomNode } from 'vs/base/browser/styleMutator';
+import { Widget } from 'vs/base/browser/ui/widget';
+import { IDisposable, dispose } from 'vs/base/common/lifecycle';
+import { Configuration } from 'vs/editor/browser/config/configuration';
+import { Position } from 'vs/editor/common/core/position';
+import { IPosition, TextEditorCursorStyle, IConfigurationChangedEvent } from 'vs/editor/common/editorCommon';
+
+export class DragTargetHintWidget extends Widget implements editorBrowser.IContentWidget {
+
+	static ID = 'editor.contrib.dragTargetHintWidget';
+	protected _editor: editorBrowser.ICodeEditor;
+	protected _showAtPosition: Position;
+	private disposables: IDisposable[] = [];
+	private _cursorStyle: TextEditorCursorStyle;
+	private _lineHeight: number;
+	private _typicalHalfwidthCharacterWidth: number;
+	private readonly _domNode: FastDomNode;
+	private _isVisible: boolean = false;
+
+	protected get isVisible(): boolean {
+		return this._isVisible;
+	}
+
+	protected set isVisible(value: boolean) {
+		this._isVisible = value;
+	}
+
+	constructor(editor: editorBrowser.ICodeEditor) {
+		super();
+		this._editor = editor;
+
+
+		// Create the dom node
+		this._domNode = createFastDomNode(document.createElement('div'));
+		this._domNode.setClassName('cursor secondary');
+		this._domNode.setTop(0);
+		this._domNode.setLeft(0);
+		this._domNode.setAttribute('role', 'presentation');
+		this._domNode.setAttribute('aria-hidden', 'true');
+		this._domNode.setVisibility('hidden');
+		this._editor.addContentWidget(this);
+
+		this._cursorStyle = this._editor.getConfiguration().viewInfo.cursorStyle;","I don't like that we reuse here the cursor style and the cursor CSS. It makes it difficult to make changes in the CSS and e.g. it makes no sense to use a block cursor to paint the insertion point.

IMHO the insertion point should always be rendered as a line, regardless of user settings. It is not a cursor, it is an insertion point.

On top, I would render the insertion point in a distinct way than the cursor. I got very confused when I tried it out, it looks too much like a cursor, it should be orange or dashed or something special to let me know that it represents the drop point and is not some editor bug where a cursor is painted.

It should also go away if the mouse is not sitting directly on text (mouseEvent.target !== CONTENT). If the drag is on top of a view zone, the margin, etc. there should be no drop. IMHO, only on top of content.",2017-02-20 11:35:12
750,"@@ -0,0 +1,135 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as editorBrowser from 'vs/editor/browser/editorBrowser';
+import { FastDomNode, createFastDomNode } from 'vs/base/browser/styleMutator';
+import { Widget } from 'vs/base/browser/ui/widget';
+import { IDisposable, dispose } from 'vs/base/common/lifecycle';
+import { Configuration } from 'vs/editor/browser/config/configuration';
+import { Position } from 'vs/editor/common/core/position';
+import { IPosition, TextEditorCursorStyle, IConfigurationChangedEvent } from 'vs/editor/common/editorCommon';
+
+export class DragTargetHintWidget extends Widget implements editorBrowser.IContentWidget {
+
+	static ID = 'editor.contrib.dragTargetHintWidget';
+	protected _editor: editorBrowser.ICodeEditor;
+	protected _showAtPosition: Position;
+	private disposables: IDisposable[] = [];
+	private _cursorStyle: TextEditorCursorStyle;
+	private _lineHeight: number;
+	private _typicalHalfwidthCharacterWidth: number;
+	private readonly _domNode: FastDomNode;
+	private _isVisible: boolean = false;
+
+	protected get isVisible(): boolean {
+		return this._isVisible;
+	}
+
+	protected set isVisible(value: boolean) {
+		this._isVisible = value;
+	}
+
+	constructor(editor: editorBrowser.ICodeEditor) {
+		super();
+		this._editor = editor;
+
+
+		// Create the dom node
+		this._domNode = createFastDomNode(document.createElement('div'));
+		this._domNode.setClassName('cursor secondary');
+		this._domNode.setTop(0);
+		this._domNode.setLeft(0);
+		this._domNode.setAttribute('role', 'presentation');
+		this._domNode.setAttribute('aria-hidden', 'true');
+		this._domNode.setVisibility('hidden');
+		this._editor.addContentWidget(this);
+
+		this._cursorStyle = this._editor.getConfiguration().viewInfo.cursorStyle;
+		this._lineHeight = this._editor.getConfiguration().lineHeight;
+		this._typicalHalfwidthCharacterWidth = this._editor.getConfiguration().fontInfo.typicalHalfwidthCharacterWidth;
+
+		this._register(this._editor.onDidChangeConfiguration((e: IConfigurationChangedEvent) => {
+			if (e.fontInfo || e.viewInfo || e.lineHeight) {
+				this._typicalHalfwidthCharacterWidth = this._editor.getConfiguration().fontInfo.typicalHalfwidthCharacterWidth;
+				this._lineHeight = this._editor.getConfiguration().lineHeight;
+				this._cursorStyle = this._editor.getConfiguration().viewInfo.cursorStyle;
+			}
+		}));
+
+		// render cursor after preparing the dom node and fetching data from config.
+		this.renderCursor();
+	}
+
+	public getId(): string {
+		return DragTargetHintWidget.ID;
+	}
+
+	public getDomNode(): HTMLElement {
+		return this._domNode.domNode;
+	}
+
+	public showAt(position: IPosition): void {
+		// Position has changed
+		this._showAtPosition = new Position(position.lineNumber, position.column);
+		this.show();
+		this._editor.layoutContentWidget(this);
+		this._editor.render();
+	}
+
+	public show(): void {
+		if (!this._isVisible) {
+			this._domNode.setVisibility('inherit');
+			this._isVisible = true;
+		}
+		this.renderCursor();
+	}
+
+	public hide(): void {
+		if (this._isVisible) {
+			this._domNode.setVisibility('hidden');
+			this._isVisible = false;
+			this._editor.layoutContentWidget(this);
+		}
+	}
+
+	public getPosition(): editorBrowser.IContentWidgetPosition {
+		if (this._isVisible) {
+			return {
+				position: this._showAtPosition,
+				preference: [
+					editorBrowser.ContentWidgetPositionPreference.EXACT
+				]
+			};
+		}
+		return null;
+	}
+
+	public dispose(): void {
+		this._editor.removeContentWidget(this);
+		this.disposables = dispose(this.disposables);
+		super.dispose();
+	}
+
+	private renderCursor() {
+		if (!this.isVisible) {
+			return;
+		}
+
+		Configuration.applyFontInfo(this._domNode, this._editor.getConfiguration().fontInfo);
+		this._domNode.setHeight(this._lineHeight);
+		if (this._cursorStyle === TextEditorCursorStyle.Line) {
+			this._domNode.setWidth(1);
+		} else {
+			this._domNode.setWidth(this._typicalHalfwidthCharacterWidth);
+		}
+
+		if (this._cursorStyle === TextEditorCursorStyle.Underline) {","I would use its own styles, doing this is nasty and to be honest, confused me a lot. I couldn't tell apart the cursor from the drop hint.",2017-02-20 11:35:48
666,"@@ -0,0 +1,14 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as os from 'os';
+import platform = require('vs/base/common/platform');
+import processes = require('vs/base/node/processes');
+
+const powershellPath = `${ process.env.SystemRoot }/system32/WindowsPowerShell/v1.0/powershell.exe`;",I think `sysnative/` should be used on 64 bit machines? Please confirm @daviwil ,2017-01-13 06:53:21
668,"@@ -0,0 +1,14 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as os from 'os';
+import platform = require('vs/base/common/platform');
+import processes = require('vs/base/node/processes');
+
+const powershellPath = `${ process.env.SystemRoot }/system32/WindowsPowerShell/v1.0/powershell.exe`;
+const isAtLeastWindows10 = platform.isWindows && parseFloat(os.release()) >= 10;","I think you'd be better off getting the major version here as `os.release()` may return `x.y.z`?

Something like this should be safe (if Node does indeed give that format):

```js
parseInt(os.release().split('.')[0], 10) >= 10
```",2017-01-13 06:57:17
148,"@@ -0,0 +1,143 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import 'vs/css!./media/terminal.contribution';
+import nls = require('vs/nls');
+import product from 'vs/platform/product';
+//import {KeyMod, KeyCode} from 'vs/base/common/keyCodes';
+import {SyncActionDescriptor} from 'vs/platform/actions/common/actions';
+import {registerSingleton} from 'vs/platform/instantiation/common/extensions';
+import {IWorkbenchActionRegistry, Extensions as ActionExtensions} from 'vs/workbench/common/actionRegistry';
+import {TerminalService} from 'vs/workbench/parts/terminal/electron-browser/terminalService';
+import {ToggleTerminalAction} from 'vs/workbench/parts/terminal/electron-browser/terminalActions';
+import {ITerminalService, TERMINAL_PANEL_ID, TERMINAL_DEFAULT_SHELL_UNIX_LIKE, TERMINAL_DEFAULT_SHELL_WINDOWS} from 'vs/workbench/parts/terminal/common/terminal';
+import * as panel from 'vs/workbench/browser/panel';
+import {Registry} from 'vs/platform/platform';
+import {Extensions, IConfigurationRegistry} from 'vs/platform/configuration/common/configurationRegistry';
+
+// Only enable in the alpha channel until more stable
+if (product.quality === 'alpha') {
+	let configurationRegistry = <IConfigurationRegistry>Registry.as(Extensions.Configuration);
+	configurationRegistry.registerConfiguration({
+		'id': 'terminal',
+		'order': 100,
+		'title': nls.localize('integratedTerminalConfigurationTitle', ""(Experimental) Integrated terminal configuration""),
+		'type': 'object',
+		'properties': {
+			'integratedTerminal.shell.unixLike': {
+				'description': nls.localize('integratedTerminal.shell.unixLike', ""The path of the shell that the terminal uses on Linux and OS X.""),
+				'type': 'string',
+				'default': TERMINAL_DEFAULT_SHELL_UNIX_LIKE
+			},
+			'integratedTerminal.shell.windows': {
+				'description': nls.localize('integratedTerminal.shell.windows', ""The path of the shell that the terminal uses on Windows.""),
+				'type': 'string',
+				'default': TERMINAL_DEFAULT_SHELL_WINDOWS
+			},
+			'integratedTerminal.fontFamily': {
+				'description': nls.localize('integratedTerminal.fontFamily', ""The font family used by the terminal (CSS font-family format).""),
+				'type': 'string',
+				'default': 'Menlo, Monaco, Consolas, ""Droid Sans Mono"", ""Courier New"", monospace, ""Droid Sans Fallback""'
+			},
+			'integratedTerminal.ansiColors.black': {
+				'description': nls.localize('integratedTerminal.ansiColors.black', ""Black color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#000000'
+			},
+			'integratedTerminal.ansiColors.red': {
+				'description': nls.localize('integratedTerminal.ansiColors.red', ""Red color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#cd3131'
+			},
+			'integratedTerminal.ansiColors.green': {
+				'description': nls.localize('integratedTerminal.ansiColors.green', ""Green color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#09885a'
+			},
+			'integratedTerminal.ansiColors.yellow': {
+				'description': nls.localize('integratedTerminal.ansiColors.yellow', ""Yellow color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#e5e510'
+			},
+			'integratedTerminal.ansiColors.blue': {
+				'description': nls.localize('integratedTerminal.ansiColors.blue', ""Blue color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#0451a5'
+			},
+			'integratedTerminal.ansiColors.magenta': {
+				'description': nls.localize('integratedTerminal.ansiColors.magenta', ""Magenta color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#bc05bc'
+			},
+			'integratedTerminal.ansiColors.cyan': {
+				'description': nls.localize('integratedTerminal.ansiColors.cyan', ""Cyan color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#0598bc'
+			},
+			'integratedTerminal.ansiColors.white': {
+				'description': nls.localize('integratedTerminal.ansiColors.white', ""White color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#e5e5e5'
+			},
+			'integratedTerminal.ansiColors.brightBlack': {
+				'description': nls.localize('integratedTerminal.ansiColors.brightBlack', ""Bright black color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#000000'
+			},
+			'integratedTerminal.ansiColors.brightRed': {
+				'description': nls.localize('integratedTerminal.ansiColors.brightRed', ""Bright red color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#cd3131'
+			},
+			'integratedTerminal.ansiColors.brightGreen': {
+				'description': nls.localize('integratedTerminal.ansiColors.brightGreen', ""Bright green color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#09885a'
+			},
+			'integratedTerminal.ansiColors.brightYellow': {
+				'description': nls.localize('integratedTerminal.ansiColors.brightYellow', ""Bright yellow color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#e5e510'
+			},
+			'integratedTerminal.ansiColors.brightBlue': {
+				'description': nls.localize('integratedTerminal.ansiColors.brightBlue', ""Bright blue color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#0451a5'
+			},
+			'integratedTerminal.ansiColors.brightMagenta': {
+				'description': nls.localize('integratedTerminal.ansiColors.brightMagenta', ""Bright magenta color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#bc05bc'
+			},
+			'integratedTerminal.ansiColors.brightCyan': {
+				'description': nls.localize('integratedTerminal.ansiColors.brightCyan', ""Bright cyan color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#0598bc'
+			},
+			'integratedTerminal.ansiColors.brightWhite': {
+				'description': nls.localize('integratedTerminal.ansiColors.brightWhite', ""Bright white color for terminals that support ANSI escape sequences (format: #rrggbb)""),
+				'type': 'string',
+				'default': '#e5e5e5'
+			}
+		}
+	});
+
+	// Register Service
+	registerSingleton(ITerminalService, TerminalService);
+
+	// Register Output Panel
+	(<panel.PanelRegistry>Registry.as(panel.Extensions.Panels)).registerPanel(new panel.PanelDescriptor(
+		'vs/workbench/parts/terminal/electron-browser/terminalPanel',","@Tyriar if you have an AMD entry point like this, it needs to be declared in our buildfile.js (see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/buildfile.js#L34)
",2016-05-17 05:05:31
140,"@@ -0,0 +1,145 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import termJs = require('term.js');
+import fs = require('fs');
+import {fork, Terminal} from 'pty.js';
+import platform = require('vs/base/common/platform');
+import {TPromise} from 'vs/base/common/winjs.base';
+import {Builder, Dimension} from 'vs/base/browser/builder';
+import {IConfigurationService} from 'vs/platform/configuration/common/configuration';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';
+import {ITerminalConfiguration, TERMINAL_PANEL_ID} from 'vs/workbench/parts/terminal/common/terminal';
+import {Panel} from 'vs/workbench/browser/panel';
+import {ScrollableElement} from 'vs/base/browser/ui/scrollbar/scrollableElementImpl';
+import {DomNodeScrollable} from 'vs/base/browser/ui/scrollbar/domNodeScrollable';
+
+const TERMINAL_CHAR_WIDTH = 8;
+const TERMINAL_CHAR_HEIGHT = 18;
+
+export class TerminalPanel extends Panel {
+
+	private ptyProcess: Terminal;
+	private parentDomElement: HTMLElement;
+	private terminal;
+	private terminalDomElement: HTMLDivElement;
+
+	constructor(
+		@IConfigurationService private configurationService: IConfigurationService,
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IWorkspaceContextService private contextService: IWorkspaceContextService
+	) {
+		super(TERMINAL_PANEL_ID, telemetryService);
+	}
+
+	public layout(dimension: Dimension): void {
+		let cols = Math.floor(this.parentDomElement.offsetWidth / TERMINAL_CHAR_WIDTH);
+		let rows = Math.floor(this.parentDomElement.offsetHeight / TERMINAL_CHAR_HEIGHT);
+		this.terminal.resize(cols, rows);
+		this.ptyProcess.resize(cols, rows);
+	}
+
+	public create(parent: Builder): TPromise<void> {
+		super.create(parent);
+
+		this.parentDomElement = parent.getHTMLElement();
+		this.createTerminal();
+
+		return TPromise.as(null);
+	}
+
+	private createTerminal(): void {
+		this.parentDomElement.innerHTML = '';
+		this.ptyProcess = fork(this.getShell(), [], {
+			name: fs.existsSync('/usr/share/terminfo/x/xterm-256color') ? 'xterm-256color' : 'xterm',","⚡ evil sync io inside the main thread. use callbacks/promises esp given your outer caller (`create`) allows you to do that
",2016-04-29 15:14:50
141,"@@ -0,0 +1,145 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import termJs = require('term.js');
+import fs = require('fs');
+import {fork, Terminal} from 'pty.js';
+import platform = require('vs/base/common/platform');
+import {TPromise} from 'vs/base/common/winjs.base';
+import {Builder, Dimension} from 'vs/base/browser/builder';
+import {IConfigurationService} from 'vs/platform/configuration/common/configuration';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';
+import {ITerminalConfiguration, TERMINAL_PANEL_ID} from 'vs/workbench/parts/terminal/common/terminal';
+import {Panel} from 'vs/workbench/browser/panel';
+import {ScrollableElement} from 'vs/base/browser/ui/scrollbar/scrollableElementImpl';
+import {DomNodeScrollable} from 'vs/base/browser/ui/scrollbar/domNodeScrollable';
+
+const TERMINAL_CHAR_WIDTH = 8;
+const TERMINAL_CHAR_HEIGHT = 18;
+
+export class TerminalPanel extends Panel {
+
+	private ptyProcess: Terminal;
+	private parentDomElement: HTMLElement;
+	private terminal;
+	private terminalDomElement: HTMLDivElement;
+
+	constructor(
+		@IConfigurationService private configurationService: IConfigurationService,
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IWorkspaceContextService private contextService: IWorkspaceContextService
+	) {
+		super(TERMINAL_PANEL_ID, telemetryService);
+	}
+
+	public layout(dimension: Dimension): void {
+		let cols = Math.floor(this.parentDomElement.offsetWidth / TERMINAL_CHAR_WIDTH);
+		let rows = Math.floor(this.parentDomElement.offsetHeight / TERMINAL_CHAR_HEIGHT);
+		this.terminal.resize(cols, rows);
+		this.ptyProcess.resize(cols, rows);
+	}
+
+	public create(parent: Builder): TPromise<void> {
+		super.create(parent);
+
+		this.parentDomElement = parent.getHTMLElement();
+		this.createTerminal();
+
+		return TPromise.as(null);
+	}
+
+	private createTerminal(): void {
+		this.parentDomElement.innerHTML = '';
+		this.ptyProcess = fork(this.getShell(), [], {
+			name: fs.existsSync('/usr/share/terminfo/x/xterm-256color') ? 'xterm-256color' : 'xterm',
+			cols: 80,
+			rows: 6,
+			cwd: this.contextService.getWorkspace() ? this.contextService.getWorkspace().resource.path : process.env.HOME
+		});
+		this.terminalDomElement = document.createElement('div');
+		this.parentDomElement.classList.add('integrated-terminal');
+		let terminalScrollable = new DomNodeScrollable(this.terminalDomElement);
+		let terminalContainer = new ScrollableElement(this.terminalDomElement, terminalScrollable, { horizontal: 'hidden', vertical: 'auto' });
+		this.terminal = termJs({
+			cursorBlink: false // term.js' blinking cursor breaks selection
+		});
+
+		this.ptyProcess.on('data', (data) => {
+			this.terminal.write(data);
+		});
+		this.terminal.on('data', (data) => {
+			this.ptyProcess.write(data);
+			return false;
+		});
+		this.ptyProcess.on('exit', (data) => {
+			this.terminal.destroy();
+			// TODO: When multiple terminals are supported this should do something smarter. There is
+			// also a weird bug here at leasy on Ubuntu 15.10 where the new terminal text does not
+			// repaint correctly.
+			this.createTerminal();
+		});
+		this.parentDomElement.addEventListener('mousedown', (event) => {
+			// Drop selection and focus terminal on Linux to enable middle button paste when click
+			// occurs on the selection itself.
+			if (event.which === 2 && platform.isLinux) {
+				this.focusTerminal(true);
+			}
+		});
+		this.parentDomElement.addEventListener('mouseup', (event) => {
+			if (event.which !== 3) {
+				this.focusTerminal();
+			}
+		});",":zap: leakage! Use the `DOM.addDisposableListener` and other unbind/unlisten APIs, keep them, and implement `dispose` in the class
",2016-04-29 15:15:56
142,"@@ -0,0 +1,145 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import termJs = require('term.js');
+import fs = require('fs');
+import {fork, Terminal} from 'pty.js';
+import platform = require('vs/base/common/platform');
+import {TPromise} from 'vs/base/common/winjs.base';
+import {Builder, Dimension} from 'vs/base/browser/builder';
+import {IConfigurationService} from 'vs/platform/configuration/common/configuration';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';
+import {ITerminalConfiguration, TERMINAL_PANEL_ID} from 'vs/workbench/parts/terminal/common/terminal';
+import {Panel} from 'vs/workbench/browser/panel';
+import {ScrollableElement} from 'vs/base/browser/ui/scrollbar/scrollableElementImpl';
+import {DomNodeScrollable} from 'vs/base/browser/ui/scrollbar/domNodeScrollable';
+
+const TERMINAL_CHAR_WIDTH = 8;
+const TERMINAL_CHAR_HEIGHT = 18;
+
+export class TerminalPanel extends Panel {
+
+	private ptyProcess: Terminal;
+	private parentDomElement: HTMLElement;
+	private terminal;
+	private terminalDomElement: HTMLDivElement;
+
+	constructor(
+		@IConfigurationService private configurationService: IConfigurationService,
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IWorkspaceContextService private contextService: IWorkspaceContextService
+	) {
+		super(TERMINAL_PANEL_ID, telemetryService);
+	}
+
+	public layout(dimension: Dimension): void {
+		let cols = Math.floor(this.parentDomElement.offsetWidth / TERMINAL_CHAR_WIDTH);
+		let rows = Math.floor(this.parentDomElement.offsetHeight / TERMINAL_CHAR_HEIGHT);
+		this.terminal.resize(cols, rows);
+		this.ptyProcess.resize(cols, rows);
+	}
+
+	public create(parent: Builder): TPromise<void> {
+		super.create(parent);
+
+		this.parentDomElement = parent.getHTMLElement();
+		this.createTerminal();
+
+		return TPromise.as(null);
+	}
+
+	private createTerminal(): void {
+		this.parentDomElement.innerHTML = '';
+		this.ptyProcess = fork(this.getShell(), [], {
+			name: fs.existsSync('/usr/share/terminfo/x/xterm-256color') ? 'xterm-256color' : 'xterm',
+			cols: 80,
+			rows: 6,
+			cwd: this.contextService.getWorkspace() ? this.contextService.getWorkspace().resource.path : process.env.HOME
+		});
+		this.terminalDomElement = document.createElement('div');
+		this.parentDomElement.classList.add('integrated-terminal');
+		let terminalScrollable = new DomNodeScrollable(this.terminalDomElement);
+		let terminalContainer = new ScrollableElement(this.terminalDomElement, terminalScrollable, { horizontal: 'hidden', vertical: 'auto' });
+		this.terminal = termJs({
+			cursorBlink: false // term.js' blinking cursor breaks selection
+		});
+
+		this.ptyProcess.on('data', (data) => {
+			this.terminal.write(data);
+		});
+		this.terminal.on('data', (data) => {
+			this.ptyProcess.write(data);
+			return false;
+		});
+		this.ptyProcess.on('exit', (data) => {
+			this.terminal.destroy();
+			// TODO: When multiple terminals are supported this should do something smarter. There is
+			// also a weird bug here at leasy on Ubuntu 15.10 where the new terminal text does not
+			// repaint correctly.
+			this.createTerminal();
+		});
+		this.parentDomElement.addEventListener('mousedown', (event) => {
+			// Drop selection and focus terminal on Linux to enable middle button paste when click
+			// occurs on the selection itself.
+			if (event.which === 2 && platform.isLinux) {
+				this.focusTerminal(true);
+			}
+		});
+		this.parentDomElement.addEventListener('mouseup', (event) => {
+			if (event.which !== 3) {
+				this.focusTerminal();
+			}
+		});
+
+		this.terminal.open(this.terminalDomElement);
+		this.parentDomElement.appendChild(terminalContainer.getDomNode());
+
+		let config = this.configurationService.getConfiguration<ITerminalConfiguration>();
+		this.terminalDomElement.style.fontFamily = config.integratedTerminal.fontFamily;
+		this.terminal.colors = this.getTerminalColors();","unsure where/how that is configured but the terminal shows dark tho I use a light theme...
",2016-04-29 15:32:27
461,"@@ -0,0 +1,147 @@
+/*---------------------------------------------------------------------------------------------","@Tyriar I see warnings in this file. you gotta get your ghooks setup to prevent pushing files with warnings 👎 
",2016-11-09 07:05:49
143,"@@ -0,0 +1,147 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+interface Entry<T> {
+	next?: Entry<T>;
+	prev?: Entry<T>;
+	key: string;
+	value: T;
+}
+
+/**
+ * A simple Map<T> that optionally allows to set a limit of entries to store. Once the limit is hit,
+ * the cache will remove the entry that was last recently added.
+ */
+export class LinkedMap<T> {
+	protected map: { [key: string]: Entry<T> };
+	private head: Entry<T>;
+	private tail: Entry<T>;
+	private _size: number;
+
+	constructor(private limit = Number.MAX_VALUE) {
+		this.map = Object.create(null);
+		this._size = 0;
+	}
+
+	public get size(): number {
+		return this._size;
+	}
+
+	public set(key: string, value: T): boolean {
+		if (this.map[key]) {
+			return false; // already present!
+		}
+
+		const entry: Entry<T> = { key, value };
+		this.push(entry);
+
+		if (this._size > this.limit) {","Soon you will end up removing a single item for each new item which is extra cost. Since the limit isn't so hard I would use a load factor, like if 3/4 of limit are reached remove so many items that you at 2/3 usage. That will make you remove less often.
",2016-05-02 10:11:59
983,"@@ -0,0 +1,149 @@
+# Auto-detect text files
+* text=auto",":memo: If the repository requires the use of a specific line ending by all users, it can be added to this line, and we can remove everything below except the *exceptions* to this case. However, the preferable case is to not require a specific line ending and instead allow it to be controlled by the user (or automated system) which checks out the code. For example, a build machine which validates line endings (I believe this is ""hygiene"" or something), could use the following configuration without being a noisy neighbor to all other contributors:

```
git config core.eol lf
```",2017-06-17 20:30:20
981,"@@ -0,0 +1,149 @@
+# Auto-detect text files
+* text=auto
+
+# Some source files are edited with LF endings by everyone
+.editorconfig eol=lf
+.eslintrc eol=lf
+.gitignore eol=lf
+.mention-bot eol=lf
+COMMIT_EDITMSG eol=lf
+Dockerfile eol=lf
+git-rebase-todo eol=lf
+LICENSE eol=lf
+makefile eol=lf
+*.c eol=lf
+*.cc eol=lf
+*.clj eol=lf
+*.coffee eol=lf
+*.cpp eol=lf
+*.cs eol=lf
+*.cshtml eol=lf
+*.css eol=lf
+*.desktop eol=lf
+*.diff eol=lf
+*.fs eol=lf
+*.go eol=lf
+*.groovy eol=lf
+*.handlebars eol=lf
+*.hbs eol=lf
+*.hlsl eol=lf
+*.html eol=lf
+*.ini eol=lf
+*.java eol=lf
+*.js eol=lf
+*.json eol=lf
+*.jsx eol=lf
+*.less eol=lf
+*.lua eol=lf
+*.m eol=lf
+*.md eol=lf
+*.opts eol=lf
+*.php eol=lf
+*.pl eol=lf
+*.plist eol=lf
+*.pug eol=lf
+*.py eol=lf
+*.r eol=lf
+*.rb eol=lf
+*.recipe eol=lf
+*.rs eol=lf
+*.scss eol=lf
+*.shader eol=lf
+*.sql eol=lf
+*.svg eol=lf
+*.swift eol=lf
+*.template eol=lf
+*.tmLanguage eol=lf
+*.tmLanguage.base eol=lf
+*.tmTheme eol=lf
+*.ts eol=lf
+*.ts.disabled eol=lf
+*.tsx eol=lf
+*.txt eol=lf
+*.vb eol=lf
+*.vscodeignore eol=lf
+*.xml eol=lf
+*.xpm eol=lf
+*.yaml eol=lf
+*.yml eol=lf
+
+# Some source files are edited with CRLF endings by everyone
+LICENSE.txt eol=crlf
+ThirdPartyNotices.txt eol=crlf
+*.isl eol=crlf
+*.iss eol=crlf
+*.jxs eol=crlf
+
+# Some scripts require specific endings, others use specific in vscode
+*.bat eol=lf",":memo: Normally this would use `eol=crlf`, but the repository is not currently following this convention.",2017-06-17 20:20:18
982,"@@ -0,0 +1,149 @@
+# Auto-detect text files
+* text=auto
+
+# Some source files are edited with LF endings by everyone
+.editorconfig eol=lf
+.eslintrc eol=lf
+.gitignore eol=lf
+.mention-bot eol=lf
+COMMIT_EDITMSG eol=lf
+Dockerfile eol=lf
+git-rebase-todo eol=lf
+LICENSE eol=lf
+makefile eol=lf
+*.c eol=lf
+*.cc eol=lf
+*.clj eol=lf
+*.coffee eol=lf
+*.cpp eol=lf
+*.cs eol=lf
+*.cshtml eol=lf
+*.css eol=lf
+*.desktop eol=lf
+*.diff eol=lf
+*.fs eol=lf
+*.go eol=lf
+*.groovy eol=lf
+*.handlebars eol=lf
+*.hbs eol=lf
+*.hlsl eol=lf
+*.html eol=lf
+*.ini eol=lf
+*.java eol=lf
+*.js eol=lf
+*.json eol=lf
+*.jsx eol=lf
+*.less eol=lf
+*.lua eol=lf
+*.m eol=lf
+*.md eol=lf
+*.opts eol=lf
+*.php eol=lf
+*.pl eol=lf
+*.plist eol=lf
+*.pug eol=lf
+*.py eol=lf
+*.r eol=lf
+*.rb eol=lf
+*.recipe eol=lf
+*.rs eol=lf
+*.scss eol=lf
+*.shader eol=lf
+*.sql eol=lf
+*.svg eol=lf
+*.swift eol=lf
+*.template eol=lf
+*.tmLanguage eol=lf
+*.tmLanguage.base eol=lf
+*.tmTheme eol=lf
+*.ts eol=lf
+*.ts.disabled eol=lf
+*.tsx eol=lf
+*.txt eol=lf
+*.vb eol=lf
+*.vscodeignore eol=lf
+*.xml eol=lf
+*.xpm eol=lf
+*.yaml eol=lf
+*.yml eol=lf
+
+# Some source files are edited with CRLF endings by everyone
+LICENSE.txt eol=crlf
+ThirdPartyNotices.txt eol=crlf
+*.isl eol=crlf
+*.iss eol=crlf
+*.jxs eol=crlf
+
+# Some scripts require specific endings, others use specific in vscode
+*.bat eol=lf
+*.cmd eol=crlf
+*.ps1 eol=lf",":memo: Normally this would use `eol=crlf`, but the repository is not currently following this convention.",2017-06-17 20:20:29
693,"@@ -0,0 +1,156 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as strings from 'vs/base/common/strings';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { EditorInput, EditorModel, ITextEditorModel } from 'vs/workbench/common/editor';
+import URI from 'vs/base/common/uri';
+import { IReference } from 'vs/base/common/lifecycle';
+import { telemetryURIDescriptor } from 'vs/platform/telemetry/common/telemetry';
+import { ITextModelResolverService } from 'vs/editor/common/services/resolverService';
+import { IFileService } from 'vs/platform/files/common/files';
+import { marked } from 'vs/base/common/marked/marked';
+import { WALK_THROUGH_SNIPPET_SCHEME } from 'vs/workbench/parts/walkThrough/node/walkThroughContentProvider';
+
+export class WalkThroughModel extends EditorModel {
+
+	constructor(
+		private mainRef: IReference<ITextEditorModel>,
+		private snippetRefs: IReference<ITextEditorModel>[]
+	) {
+		super();
+	}
+
+	get main() {
+		return this.mainRef.object;
+	}
+
+	get snippets() {
+		return this.snippetRefs.map(snippet => snippet.object);
+	}
+
+	dispose() {
+		this.snippetRefs.forEach(ref => ref.dispose());
+		this.mainRef.dispose();
+		super.dispose();
+	}
+}
+
+export class WalkThroughInput extends EditorInput {
+
+	static ID: string = 'workbench.editors.walkThroughInput';
+
+	private promise: TPromise<WalkThroughModel>;
+	private resource: URI;
+
+	private name: string;
+	private description: string;
+
+	constructor(
+		name: string,
+		description: string,
+		resource: URI,
+		public readonly onReady: (container: HTMLElement) => void,
+		@IFileService private fileService: IFileService,",Unused,2017-01-19 06:02:00
37,"@@ -0,0 +1,159 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import timer = require('vs/base/common/timer');
+import uuid = require('vs/base/common/uuid');
+import strings = require('vs/base/common/strings');
+import {Registry} from 'vs/platform/platform';
+import {IPanel} from 'vs/workbench/common/panel';
+import {EventType as WorkbenchEventType, CompositeEvent} from 'vs/workbench/common/events';
+import {CompositePart} from 'vs/workbench/browser/parts/compositePart';
+import {Panel, PanelRegistry, Extensions as PanelExtensions} from 'vs/workbench/browser/panel';
+import {IPanelService} from 'vs/workbench/services/panel/common/panelService';
+import {IPartService} from 'vs/workbench/services/part/common/partService';
+import {IStorageService, StorageScope} from 'vs/platform/storage/common/storage';
+import {IContextMenuService} from 'vs/platform/contextview/browser/contextView';
+import {IEventService} from 'vs/platform/event/common/event';
+import {IMessageService, Severity} from 'vs/platform/message/common/message';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';
+
+export class PanelPart extends CompositePart<Panel> implements IPanelService {
+
+	public static activePanelSettingsKey = 'workbench.panelpart.activepanelid';
+
+	public serviceId = IPanelService;
+
+	private blockOpeningPanel: boolean;
+	private currentPanelOpenToken: string;
+
+	constructor(
+		messageService: IMessageService,
+		storageService: IStorageService,
+		eventService: IEventService,
+		telemetryService: ITelemetryService,
+		contextMenuService: IContextMenuService,
+		partService: IPartService,
+		keybindingService: IKeybindingService,
+		id: string
+	) {
+		super(messageService, storageService, eventService, telemetryService, contextMenuService, partService, keybindingService,
+			(<PanelRegistry>Registry.as(PanelExtensions.Panels)), PanelPart.activePanelSettingsKey, id);
+	}
+
+	public openPanel(id: string, focus?: boolean): TPromise<Panel> {
+		if (this.blockOpeningPanel) {","@isidorn I would try to push this down to the compositePart because this seems like lots of duplicated code also in the panelPart. You would then also have just one onCompositeOpen event instead of onViewletOpen and onPanelOpen.
",2016-01-15 15:11:33
38,"@@ -0,0 +1,159 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import timer = require('vs/base/common/timer');
+import uuid = require('vs/base/common/uuid');
+import strings = require('vs/base/common/strings');
+import {Registry} from 'vs/platform/platform';
+import {IPanel} from 'vs/workbench/common/panel';
+import {EventType as WorkbenchEventType, CompositeEvent} from 'vs/workbench/common/events';
+import {CompositePart} from 'vs/workbench/browser/parts/compositePart';
+import {Panel, PanelRegistry, Extensions as PanelExtensions} from 'vs/workbench/browser/panel';
+import {IPanelService} from 'vs/workbench/services/panel/common/panelService';
+import {IPartService} from 'vs/workbench/services/part/common/partService';
+import {IStorageService, StorageScope} from 'vs/platform/storage/common/storage';
+import {IContextMenuService} from 'vs/platform/contextview/browser/contextView';
+import {IEventService} from 'vs/platform/event/common/event';
+import {IMessageService, Severity} from 'vs/platform/message/common/message';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';
+
+export class PanelPart extends CompositePart<Panel> implements IPanelService {
+
+	public static activePanelSettingsKey = 'workbench.panelpart.activepanelid';
+
+	public serviceId = IPanelService;
+
+	private blockOpeningPanel: boolean;
+	private currentPanelOpenToken: string;
+
+	constructor(
+		messageService: IMessageService,
+		storageService: IStorageService,
+		eventService: IEventService,
+		telemetryService: ITelemetryService,
+		contextMenuService: IContextMenuService,
+		partService: IPartService,
+		keybindingService: IKeybindingService,
+		id: string
+	) {
+		super(messageService, storageService, eventService, telemetryService, contextMenuService, partService, keybindingService,
+			(<PanelRegistry>Registry.as(PanelExtensions.Panels)), PanelPart.activePanelSettingsKey, id);
+	}
+
+	public openPanel(id: string, focus?: boolean): TPromise<Panel> {
+		if (this.blockOpeningPanel) {
+			return TPromise.as(null); // Workaround against a potential race condition
+		}
+
+		// First check if panel part is hidden and show if so
+		if (this.partService.isPanelPartHidden()) {
+			try {
+				this.blockOpeningPanel = true;
+				this.partService.setPanelPartHidden(false);
+			} finally {
+				this.blockOpeningPanel = false;
+			}
+		}
+
+		// Check if panel already visible and just focus in that case
+		if (this.activePanel && this.activePanel.getId() === id) {
+			if (focus) {
+				this.activePanel.focus();
+			}
+
+			// Fullfill promise with panel that is being opened
+			return TPromise.as(this.activePanel);
+		}
+
+		// Open
+		return this.doOpenPanel(id, focus);
+	}
+
+	private doOpenPanel(id: string, focus?: boolean): TPromise<Panel> {
+		let timerEvent = timer.start(timer.Topic.WORKBENCH, strings.format('Open Panel {0}', id.substr(id.lastIndexOf('.') + 1)));
+
+		// Use a generated token to avoid race conditions from long running promises
+		let currentPanelOpenToken = uuid.generateUuid();
+		this.currentPanelOpenToken = currentPanelOpenToken;
+
+		// Emit Panel Opening Event
+		this.emit(WorkbenchEventType.PANEL_OPENING, new CompositeEvent(id));
+
+		// Hide current
+		let hidePromise: TPromise<void>;
+		if (this.activePanel) {
+			hidePromise = this.hideActivePanel();
+		} else {
+			hidePromise = TPromise.as(null);
+		}
+
+		return hidePromise.then(() => {
+
+			// Update Title
+			this.updateTitle(id);
+
+			// Create panel
+			return this.createPanel(id, true).then((panel: Panel) => {
+
+				// Check if another panel opened meanwhile and return in that case
+				if ((this.currentPanelOpenToken !== currentPanelOpenToken) || (this.activePanel && this.activePanel.getId() !== panel.getId())) {
+					timerEvent.stop();
+
+					return TPromise.as(null);
+				}
+
+				// Check if panel already visible and just focus in that case
+				if (this.activePanel && this.activePanel.getId() === panel.getId()) {
+					if (focus) {
+						panel.focus();
+					}
+
+					timerEvent.stop();
+
+					// Fullfill promise with panel that is being opened
+					return TPromise.as(panel);
+				}
+
+				// Show Panel and Focus
+				return this.showPanel(panel).then(() => {
+					if (focus) {
+						panel.focus();
+					}
+
+					timerEvent.stop();
+
+					// Fullfill promise with panel that is being opened
+					return panel;
+				});
+			});
+		});
+	}
+
+	private get activePanel(): IPanel {","All of this is super nice and shared.
",2016-01-15 15:11:53
459,"@@ -0,0 +1,160 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as path from 'path';
+import * as crypto from 'crypto';
+import fs = require('fs');
+import Uri from 'vs/base/common/uri';
+import { readdirSync } from 'vs/base/node/extfs';
+import { IBackupWorkspacesFormat } from 'vs/platform/backup/common/backup';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
+
+export const IBackupService = createDecorator<IBackupService>('backupService');
+
+export interface IBackupService {","@Tyriar I suggest to move any service interfaces to `vs/platform`. If you need to distinguish between main and renderer you can call it `IBackupMainService`.
",2016-11-09 07:02:37
460,"@@ -0,0 +1,160 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as path from 'path';
+import * as crypto from 'crypto';
+import fs = require('fs');
+import Uri from 'vs/base/common/uri';
+import { readdirSync } from 'vs/base/node/extfs';
+import { IBackupWorkspacesFormat } from 'vs/platform/backup/common/backup';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
+
+export const IBackupService = createDecorator<IBackupService>('backupService');
+
+export interface IBackupService {
+	_serviceBrand: any;
+
+	/**
+	 * Gets the set of active workspace backup paths being tracked for restoration.
+	 *
+	 * @return The set of active workspace backup paths being tracked for restoration.
+	 */
+	getWorkspaceBackupPathsSync(): string[];
+
+	/**
+	 * Pushes workspace backup paths to be tracked for restoration.
+	 *
+	 * @param workspaces The workspaces to add.
+	 */
+	pushWorkspaceBackupPathsSync(workspaces: Uri[]): void;
+
+	/**
+	 * Removes a workspace backup path being tracked for restoration.
+	 *
+	 * @param workspace The workspace to remove.
+	 */
+	removeWorkspaceBackupPathSync(workspace: Uri): void;
+
+	/**
+	 * Gets the set of untitled file backups for a particular workspace.
+	 *
+	 * @param workspace The workspace to get the backups for.
+	 * @return The absolute paths for all the untitled file _backups_.
+	 */
+	getWorkspaceUntitledFileBackupsSync(workspace: Uri): string[];
+
+	/**
+	 * Gets whether the workspace has backups associated with it (ie. if the workspace backup
+	 * directory exists).
+	 *
+	 * @param workspace The workspace to evaluate.
+	 * @return Whether the workspace has backups.
+	 */
+	doesWorkspaceHaveBackups(workspace: Uri): boolean;","@Tyriar maybe better `hasWorkspaceBackup` or just `hasBackup`
",2016-11-09 07:04:46
458,"@@ -0,0 +1,160 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as path from 'path';
+import * as crypto from 'crypto';
+import fs = require('fs');
+import Uri from 'vs/base/common/uri';
+import { readdirSync } from 'vs/base/node/extfs';
+import { IBackupWorkspacesFormat } from 'vs/platform/backup/common/backup';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
+
+export const IBackupService = createDecorator<IBackupService>('backupService');
+
+export interface IBackupService {
+	_serviceBrand: any;
+
+	/**
+	 * Gets the set of active workspace backup paths being tracked for restoration.
+	 *
+	 * @return The set of active workspace backup paths being tracked for restoration.
+	 */
+	getWorkspaceBackupPathsSync(): string[];
+
+	/**
+	 * Pushes workspace backup paths to be tracked for restoration.
+	 *
+	 * @param workspaces The workspaces to add.
+	 */
+	pushWorkspaceBackupPathsSync(workspaces: Uri[]): void;
+
+	/**
+	 * Removes a workspace backup path being tracked for restoration.
+	 *
+	 * @param workspace The workspace to remove.
+	 */
+	removeWorkspaceBackupPathSync(workspace: Uri): void;
+
+	/**
+	 * Gets the set of untitled file backups for a particular workspace.
+	 *
+	 * @param workspace The workspace to get the backups for.
+	 * @return The absolute paths for all the untitled file _backups_.
+	 */
+	getWorkspaceUntitledFileBackupsSync(workspace: Uri): string[];
+
+	/**
+	 * Gets whether the workspace has backups associated with it (ie. if the workspace backup
+	 * directory exists).
+	 *
+	 * @param workspace The workspace to evaluate.
+	 * @return Whether the workspace has backups.
+	 */
+	doesWorkspaceHaveBackups(workspace: Uri): boolean;
+}
+
+export class BackupService implements IBackupService {
+
+	public _serviceBrand: any;
+
+	protected backupHome: string;
+	protected workspacesJsonPath: string;
+
+	private workspacesJsonContent: IBackupWorkspacesFormat;
+
+	constructor(
+		@IEnvironmentService environmentService: IEnvironmentService
+	) {
+		this.backupHome = environmentService.backupHome;
+		this.workspacesJsonPath = environmentService.backupWorkspacesPath;
+	}
+
+	public getWorkspaceBackupPathsSync(): string[] {
+		this.loadSync();","@Tyriar why the `loadSync` on every method? The main process is a singleton so this should not be needed unless some other process writes to this file (which I would not expect). It should be sufficient to load once, keep in memory and save to disk on each write like we do in `storage.ts`. 
",2016-11-09 07:01:26
469,"@@ -0,0 +1,164 @@
+/*---------------------------------------------------------------------------------------------","@Tyriar seeing again lots of warnings in this file
",2016-11-09 07:32:44
580,"@@ -0,0 +1,167 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import { IExpression } from 'vs/workbench/parts/debug/common/debug';
+import { IDecorationOptions, IRange, IModel } from 'vs/editor/common/editorCommon';
+import { createStringDictionary, IStringDictionary } from 'vs/base/common/collections';
+import { StandardTokenType } from 'vs/editor/common/core/lineTokens';
+
+export const MAX_INLINE_VALUE_LENGTH = 50; // Max string length of each inline 'x = y' string. If exceeded ... is added
+export const MAX_INLINE_DECORATOR_LENGTH = 150; // Max string length of each inline decorator when debugging. If exceeded ... is added
+export const MAX_NUM_INLINE_VALUES = 100; // JS Global scope can have 700+ entries. We want to limit ourselves for perf reasons
+export const MAX_TOKENIZATION_LINE_LEN = 500; // If line is too long, then inline values for the line are skipped
+export const ELLIPSES = '…';
+// LanguageConfigurationRegistry.getWordDefinition() return regexes that allow spaces and punctuation characters for languages like python
+// Using that approach is not viable so we are using a simple regex to look for word tokens.
+export const WORD_REGEXP = /[\$\_A-Za-z][\$\_A-Za-z0-9]*/g;",For simplicity can we just use the regex \b word boundary character?,2016-12-05 15:12:54
581,"@@ -0,0 +1,167 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import { IExpression } from 'vs/workbench/parts/debug/common/debug';
+import { IDecorationOptions, IRange, IModel } from 'vs/editor/common/editorCommon';
+import { createStringDictionary, IStringDictionary } from 'vs/base/common/collections';
+import { StandardTokenType } from 'vs/editor/common/core/lineTokens';
+
+export const MAX_INLINE_VALUE_LENGTH = 50; // Max string length of each inline 'x = y' string. If exceeded ... is added
+export const MAX_INLINE_DECORATOR_LENGTH = 150; // Max string length of each inline decorator when debugging. If exceeded ... is added
+export const MAX_NUM_INLINE_VALUES = 100; // JS Global scope can have 700+ entries. We want to limit ourselves for perf reasons
+export const MAX_TOKENIZATION_LINE_LEN = 500; // If line is too long, then inline values for the line are skipped
+export const ELLIPSES = '…';
+// LanguageConfigurationRegistry.getWordDefinition() return regexes that allow spaces and punctuation characters for languages like python
+// Using that approach is not viable so we are using a simple regex to look for word tokens.
+export const WORD_REGEXP = /[\$\_A-Za-z][\$\_A-Za-z0-9]*/g;
+
+export function getNameValueMapFromScopeChildren(scopeExpressions: IExpression[][]): IStringDictionary<string> {",This as a 2 dimensional array makes things overly complicated. Please make this one dimensional. Caller of this method could just merge mutliple expression arrays into one,2016-12-05 15:13:48
579,"@@ -0,0 +1,167 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import { IExpression } from 'vs/workbench/parts/debug/common/debug';
+import { IDecorationOptions, IRange, IModel } from 'vs/editor/common/editorCommon';
+import { createStringDictionary, IStringDictionary } from 'vs/base/common/collections';
+import { StandardTokenType } from 'vs/editor/common/core/lineTokens';
+
+export const MAX_INLINE_VALUE_LENGTH = 50; // Max string length of each inline 'x = y' string. If exceeded ... is added
+export const MAX_INLINE_DECORATOR_LENGTH = 150; // Max string length of each inline decorator when debugging. If exceeded ... is added
+export const MAX_NUM_INLINE_VALUES = 100; // JS Global scope can have 700+ entries. We want to limit ourselves for perf reasons
+export const MAX_TOKENIZATION_LINE_LEN = 500; // If line is too long, then inline values for the line are skipped
+export const ELLIPSES = '…';
+// LanguageConfigurationRegistry.getWordDefinition() return regexes that allow spaces and punctuation characters for languages like python
+// Using that approach is not viable so we are using a simple regex to look for word tokens.
+export const WORD_REGEXP = /[\$\_A-Za-z][\$\_A-Za-z0-9]*/g;
+
+export function getNameValueMapFromScopeChildren(scopeExpressions: IExpression[][]): IStringDictionary<string> {
+	const nameValueMap = createStringDictionary<string>();
+	let valueCount = 0;
+
+	for (let expressions of scopeExpressions) {
+		for (let expr of expressions) {
+			// Put ellipses in value if its too long. Preserve last char e.g ""longstr…"" or {a:true, b:true, …}
+			let value = expr.value;
+			if (value && value.length > MAX_INLINE_VALUE_LENGTH) {
+				value = value.substr(0, MAX_INLINE_VALUE_LENGTH - ELLIPSES.length) + ELLIPSES + value[value.length - 1];
+			}
+
+			nameValueMap[expr.name] = value;
+
+			// Limit the size of map. Too large can have a perf impact
+			if (++valueCount >= MAX_NUM_INLINE_VALUES) {
+				return nameValueMap;
+			}
+		}
+	}
+
+	return nameValueMap;
+}
+
+export function getDecorators(nameValueMap: IStringDictionary<string>, wordRangeMap: IStringDictionary<IRange[]>, linesContent: string[]): IDecorationOptions[] {
+	const linesNames = createStringDictionary<IStringDictionary<boolean>>();
+	const names = Object.keys(nameValueMap);
+	const decorators: IDecorationOptions[] = [];
+
+	// Compute unique set of names on each line
+	for (let name of names) {
+		const ranges = wordRangeMap[name];
+		if (ranges) {
+			for (let range of ranges) {
+				const lineNum = range.startLineNumber;
+				if (!linesNames[lineNum]) {
+					linesNames[lineNum] = createStringDictionary<boolean>();
+				}
+				linesNames[lineNum][name] = true;
+			}
+		}
+	}
+
+	// Compute decorators for each line
+	const lineNums = Object.keys(linesNames);
+	for (let lineNum of lineNums) {
+		const uniqueNames = Object.keys(linesNames[lineNum]);
+		const decorator = getDecoratorFromNames(parseInt(lineNum), uniqueNames, nameValueMap, linesContent);
+		decorators.push(decorator);
+	}
+
+	return decorators;
+}
+
+export function getDecoratorFromNames(lineNumber: number, names: string[], nameValueMap: IStringDictionary<string>, linesContent: string[]): IDecorationOptions {
+	const margin = '10px';
+	const backgroundColor = 'rgba(255,200,0,0.2)';",Adding css here is ugly. Is it possible to just add a css class and then style the decorations in debug.contribution.css?,2016-12-05 15:11:04
577,"@@ -0,0 +1,167 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import { IExpression } from 'vs/workbench/parts/debug/common/debug';
+import { IDecorationOptions, IRange, IModel } from 'vs/editor/common/editorCommon';
+import { createStringDictionary, IStringDictionary } from 'vs/base/common/collections';
+import { StandardTokenType } from 'vs/editor/common/core/lineTokens';
+
+export const MAX_INLINE_VALUE_LENGTH = 50; // Max string length of each inline 'x = y' string. If exceeded ... is added
+export const MAX_INLINE_DECORATOR_LENGTH = 150; // Max string length of each inline decorator when debugging. If exceeded ... is added
+export const MAX_NUM_INLINE_VALUES = 100; // JS Global scope can have 700+ entries. We want to limit ourselves for perf reasons
+export const MAX_TOKENIZATION_LINE_LEN = 500; // If line is too long, then inline values for the line are skipped
+export const ELLIPSES = '…';
+// LanguageConfigurationRegistry.getWordDefinition() return regexes that allow spaces and punctuation characters for languages like python
+// Using that approach is not viable so we are using a simple regex to look for word tokens.
+export const WORD_REGEXP = /[\$\_A-Za-z][\$\_A-Za-z0-9]*/g;
+
+export function getNameValueMapFromScopeChildren(scopeExpressions: IExpression[][]): IStringDictionary<string> {
+	const nameValueMap = createStringDictionary<string>();
+	let valueCount = 0;
+
+	for (let expressions of scopeExpressions) {
+		for (let expr of expressions) {
+			// Put ellipses in value if its too long. Preserve last char e.g ""longstr…"" or {a:true, b:true, …}
+			let value = expr.value;
+			if (value && value.length > MAX_INLINE_VALUE_LENGTH) {
+				value = value.substr(0, MAX_INLINE_VALUE_LENGTH - ELLIPSES.length) + ELLIPSES + value[value.length - 1];
+			}
+
+			nameValueMap[expr.name] = value;
+
+			// Limit the size of map. Too large can have a perf impact
+			if (++valueCount >= MAX_NUM_INLINE_VALUES) {
+				return nameValueMap;
+			}
+		}
+	}
+
+	return nameValueMap;
+}
+
+export function getDecorators(nameValueMap: IStringDictionary<string>, wordRangeMap: IStringDictionary<IRange[]>, linesContent: string[]): IDecorationOptions[] {
+	const linesNames = createStringDictionary<IStringDictionary<boolean>>();
+	const names = Object.keys(nameValueMap);
+	const decorators: IDecorationOptions[] = [];
+
+	// Compute unique set of names on each line
+	for (let name of names) {
+		const ranges = wordRangeMap[name];
+		if (ranges) {
+			for (let range of ranges) {
+				const lineNum = range.startLineNumber;
+				if (!linesNames[lineNum]) {
+					linesNames[lineNum] = createStringDictionary<boolean>();
+				}
+				linesNames[lineNum][name] = true;
+			}
+		}
+	}
+
+	// Compute decorators for each line
+	const lineNums = Object.keys(linesNames);
+	for (let lineNum of lineNums) {
+		const uniqueNames = Object.keys(linesNames[lineNum]);
+		const decorator = getDecoratorFromNames(parseInt(lineNum), uniqueNames, nameValueMap, linesContent);
+		decorators.push(decorator);
+	}
+
+	return decorators;
+}
+
+export function getDecoratorFromNames(lineNumber: number, names: string[], nameValueMap: IStringDictionary<string>, linesContent: string[]): IDecorationOptions {
+	const margin = '10px';
+	const backgroundColor = 'rgba(255,200,0,0.2)';
+	const lightForegroundColor = 'rgba(0,0,0,0.5)';
+	const darkForegroundColor = 'rgba(255,255,255,0.5)';
+	const lineLength = linesContent[lineNumber - 1].length;
+
+	// Wrap with 1em unicode space for readability
+	let contentText = '\u2003' + names.map(n => `${n} = ${nameValueMap[n]}`).join(', ') + '\u2003';
+
+	// If decoratorText is too long, trim and add ellipses. This could happen for minified files with everything on a single line
+	if (contentText.length > MAX_INLINE_DECORATOR_LENGTH) {
+		contentText = contentText.substr(0, MAX_INLINE_DECORATOR_LENGTH - ELLIPSES.length) + ELLIPSES;
+	}
+
+	const decorator: IDecorationOptions = {
+		range: {
+			startLineNumber: lineNumber,
+			endLineNumber: lineNumber,
+			startColumn: lineLength,
+			endColumn: lineLength + 1
+		},
+		renderOptions: {
+			dark: {
+				after: {
+					contentText,
+					backgroundColor,
+					color: darkForegroundColor,
+					margin
+				}
+			},
+			light: {
+				after: {
+					contentText,
+					backgroundColor,
+					color: lightForegroundColor,
+					margin
+				}
+			}
+		}
+	};
+
+	return decorator;
+}
+
+export function getEditorWordRangeMap(editorModel: IModel): IStringDictionary<IRange[]> {
+	const wordRangeMap = createStringDictionary<IRange[]>();
+	const linesContent = editorModel.getLinesContent();
+
+	// For every word in every line, map its ranges for fast lookup
+	for (let i = 0, len = linesContent.length; i < len; ++i) {
+		const lineContent = linesContent[i];
+
+		// If line is too long then skip the line
+		if (lineContent.length > MAX_TOKENIZATION_LINE_LEN) {
+			continue;
+		}
+
+		const lineTokens = editorModel.getLineTokens(i + 1); // lineNumbers are 1 based
+
+		for (let j = 0, len = lineTokens.getTokenCount(); j < len; ++j) {
+			let startOffset = lineTokens.getTokenStartOffset(j);
+			let endOffset = lineTokens.getTokenEndOffset(j);
+			const tokenStr = lineContent.substring(startOffset, endOffset);
+
+			// Token is a word and not a comment
+			if (lineTokens.getStandardTokenType(j) !== StandardTokenType.Comment) {",Great that you are using getStandardTokenType() since that is the new recommanded way of handling tokens,2016-12-05 15:04:38
184,"@@ -0,0 +1,170 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as vscode from 'vscode';
+import * as path from 'path';
+import { ExtensionContext, TextDocumentContentProvider, EventEmitter, Event, Uri, ViewColumn } from ""vscode"";
+
+const hljs = require('highlight.js');
+const mdnh = require('markdown-it-named-headers');
+const md = require('markdown-it')({
+	html: true,
+	highlight: function (str, lang) {
+		if (lang && hljs.getLanguage(lang)) {
+			try {
+				return `<pre class=""hljs""><code><div>${hljs.highlight(lang, str, true).value}</div></code></pre>`;
+			} catch (error) { }
+		}
+		return `<pre class=""hljs""><code><div>${md.utils.escapeHtml(str)}</div></code></pre>`;
+	}
+}).use(mdnh, {});","If you don't mind me asking.  As it is coded here, anytime a member wants to add a plugin to markdown-it, it seems they will have to:
1. `Npm install markdown-it-plugin --savedev` in extensions folder
2.  Require package here and add package to `.use(...)`

This seems fine to me, but I believe that also means I would have to do this _every_ time that extension is updated.  I don't know of a good solution, but one solution I thought of is to allow for developers to create a ""skeleton"" package that simply exposes and api to the markdown extension that says use this.  So people will be able to install a package, say: `vscode-markdown-it-katex` for math support which has a dependency on this package and it should just work.  Not an ideal solution, but maybe there is a better one?  I could open this as a feature request if you would like to defer this until another cycle.  Or possibly a pull request later on.
",2016-06-14 18:32:11
185,"@@ -0,0 +1,170 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as vscode from 'vscode';
+import * as path from 'path';
+import { ExtensionContext, TextDocumentContentProvider, EventEmitter, Event, Uri, ViewColumn } from ""vscode"";
+
+const hljs = require('highlight.js');
+const mdnh = require('markdown-it-named-headers');
+const md = require('markdown-it')({
+	html: true,
+	highlight: function (str, lang) {
+		if (lang && hljs.getLanguage(lang)) {
+			try {
+				return `<pre class=""hljs""><code><div>${hljs.highlight(lang, str, true).value}</div></code></pre>`;
+			} catch (error) { }
+		}
+		return `<pre class=""hljs""><code><div>${md.utils.escapeHtml(str)}</div></code></pre>`;
+	}
+}).use(mdnh, {});
+
+export function activate(context: ExtensionContext) {
+	let provider = new MDDocumentContentProvider(context);
+	let registration = vscode.workspace.registerTextDocumentContentProvider('markdown', provider);
+
+	let d1 = vscode.commands.registerCommand('extension.previewMarkdown', () => openPreview());
+	let d2 = vscode.commands.registerCommand('extension.previewMarkdownSide', () => openPreview(true));
+
+	context.subscriptions.push(d1, d2, registration);
+
+	vscode.workspace.onDidSaveTextDocument(document => {
+		if (isMarkdownFile(document)) {
+			const uri = getMarkdownUri(document);
+			provider.update(uri);
+		}
+	});
+
+	vscode.workspace.onDidChangeTextDocument(event => {
+		if (isMarkdownFile(event.document)) {
+			const uri = getMarkdownUri(event.document);
+			provider.update(uri);
+
+		}
+	});
+
+	vscode.workspace.onDidChangeConfiguration(() => {
+		vscode.workspace.textDocuments.forEach((document) => {
+			if (isMarkdownFile) {
+				provider.update(document.uri);
+			}
+		});
+	});
+}
+
+function isMarkdownFile(document: vscode.TextDocument) {
+	return document.languageId === 'markdown'
+		&& document.uri.scheme !== 'markdown'; // prevent processing of own documents
+}
+
+function getMarkdownUri(document: vscode.TextDocument) {
+	return document.uri.with({ scheme: 'markdown', query: document.uri.toString() });
+}
+
+function openPreview(sideBySide?: boolean): void {
+	const activeEditor = vscode.window.activeTextEditor;
+	if (!activeEditor) {
+		vscode.commands.executeCommand('workbench.action.navigateBack');
+		return;
+	}
+
+	let markdownPreviewUri = getMarkdownUri(activeEditor.document);
+	vscode.commands.executeCommand('vscode.previewHtml',
+		markdownPreviewUri,
+		getViewColumn(sideBySide),
+		`Preview '${path.basename(activeEditor.document.fileName)}'`);
+}
+
+function getViewColumn(sideBySide): ViewColumn {
+	const active = vscode.window.activeTextEditor;
+	if (!active) {
+		return ViewColumn.One;
+	}
+
+	if (!sideBySide) {
+		return active.viewColumn;
+	}
+
+	switch (active.viewColumn) {
+		case ViewColumn.One:
+			return ViewColumn.Two;
+		case ViewColumn.Two:
+			return ViewColumn.Three;
+	}
+
+	return active.viewColumn;
+}
+
+
+class MDDocumentContentProvider implements TextDocumentContentProvider {
+	private _context: ExtensionContext;
+	private _onDidChange = new EventEmitter<Uri>();
+
+	constructor(context: ExtensionContext) {
+		this._context = context;
+	}
+
+	private getMediaPath(mediaFile) {
+		return this._context.asAbsolutePath(path.join('media', mediaFile));
+	}
+
+	private fixHref(resource: Uri, href: string) {
+		if (href) {
+			// Return early if href is already a URL
+			if (Uri.parse(href).scheme) {
+				return href;
+			}
+			// Otherwise convert to a file URI by joining the href with the resource location
+			return Uri.file(path.join(path.dirname(resource.fsPath), href)).toString();
+		}
+		return href;
+	}
+
+	private computeCustomStyleSheetIncludes(uri: Uri): string[] {
+		const styles = vscode.workspace.getConfiguration('markdown')['styles'];
+		if (styles && Array.isArray(styles)) {
+			return styles.map((style) => {
+				return `<link rel=""stylesheet"" href=""${this.fixHref(uri, style)}"" type=""text/css"" media=""screen"">`;
+			});
+		}
+		return [];
+	}
+
+	public provideTextDocumentContent(uri: Uri): Thenable<string> {
+
+		return vscode.workspace.openTextDocument(Uri.parse(uri.query)).then(document => {
+			const head = [].concat(
+				'<!DOCTYPE html>',
+				'<html>',
+				'<head>',
+				'<meta http-equiv=""Content-type"" content=""text/html;charset=UTF-8"">',
+				`<link rel=""stylesheet"" type=""text/css"" href=""${this.getMediaPath('markdown.css')}"" >`,
+				`<link rel=""stylesheet"" type=""text/css"" href=""${this.getMediaPath('tomorrow.css')}"" >`,
+				this.computeCustomStyleSheetIncludes(uri),
+				'</head>',
+				'<body>'
+			).join('\n');
+
+			const body = md.render(document.getText());
+
+			const tail = [
+				'</body>',
+				'</html>'
+			].join('\n');
+
+			return head + body + tail;
+		});
+	}
+
+	get onDidChange(): Event<Uri> {
+		return this._onDidChange.event;
+	}
+
+	public update(uri: Uri) {
+		this._onDidChange.fire(uri);","Have you considered a timout here?  Spamming markdown-it may not always be a good idea.  This is more true when you add more plugins like `highlight` and when I was testing for math support `katex`.  I simply did something like:

```
            if (!this._waiting) {
                this._waiting = true;
                setTimeout(() => {
                    this._waiting = false;
                    this._onDidChange.fire(uri);
                }, 300);
            }
```

The timeout should probably be modifiable by the user, maybe even default to 0 with a note that for those who may experience problems.
",2016-06-14 18:42:38
113,"@@ -0,0 +1,18 @@
+/*---------------------------------------------------------------------------------------------","This file should live in `src/vs/workbench/parts/execution/common/electron-browser/terminal.ts` as it's not usable in a browser. Check out [this wiki page](https://github.com/Microsoft/vscode/blob/master/wiki/contributing/code-organization.md#target-environments) for more information on code organization, basically things in common/ and browser/ need to work both in vscode (under node) and in monaco (on a browser).
",2016-04-18 16:40:27
671,"@@ -0,0 +1,18 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as os from 'os';
+import platform = require('vs/base/common/platform');
+import processes = require('vs/base/node/processes');
+
+const powerShellExePath =
+		!process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432')",@daviwil so this is an env variable only available on 64 bit Windows? Would it be better to check `process.arch` instead?,2017-01-14 02:18:24
111,"@@ -0,0 +1,18 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+import fs = require('fs');
+import env = require('vs/base/common/platform');","`env` -> `platform`, I think the instances where this is `env` are older ones that weren't cleaned up
",2016-04-18 16:37:36
112,"@@ -0,0 +1,18 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+import fs = require('fs');
+import env = require('vs/base/common/platform');
+
+export let defaultLinuxTerm = 'x-terminal-emulator';
+
+// if we're not on debian and using gnome then
+// set default to gnome-terminal
+if (env.isLinux
+	&& fs.existsSync('/etc/debian_version') === false
+	&& process.env.DESKTOP_SESSION === 'gnome') {
+	defaultLinuxTerm = 'gnome-terminal';
+}
+
+export const defaultWindowsTerm = 'cmd';","Rename this and `defaultLinuxTerm` as `ALL_CAPS_NAMING`.
",2016-04-18 16:37:37
773,"@@ -0,0 +1,184 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import { Position, Selection, Range, CompletionItemProvider, CompletionItemKind, TextDocument, CancellationToken, CompletionItem, window, commands, Uri, ProviderResult, TextEditor } from 'vscode';
+
+import { ITypescriptServiceClient } from '../typescriptService';
+import { FileLocationRequestArgs, DocCommandTemplateResponse } from '../protocol';
+
+import * as nls from 'vscode-nls';
+const localize = nls.loadMessageBundle();
+
+const tryCompleteJsDocCommand = '_typeScript.tryCompleteJsDoc';
+
+
+class JsDocCompletionItem extends CompletionItem {
+	constructor(file: Uri, position: Position) {
+		super('/** @param */', CompletionItemKind.Snippet);
+		this.detail = localize('typescript.jsDocCompletionItem.detail', 'Complete JSDoc comment');
+		this.insertText = '';
+		this.command = {
+			title: 'Try Complete Js Doc',
+			command: tryCompleteJsDocCommand,
+			arguments: [file, position]
+		};","You are on very thin ice with this... It is really not recommended to modify the document using  [`CompletionItem#command`](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2510). Cursor state and undo stack might be get confused by this. 

@mjbvz Any reason why you don't use [`CompletionItem#insertText`](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2466) and [`CompletionItem#range`](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2477). You could create a range that encloses the current, partial doc comment, and replace that with the new text",2017-02-22 15:07:44
774,"@@ -0,0 +1,184 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import { Position, Selection, Range, CompletionItemProvider, CompletionItemKind, TextDocument, CancellationToken, CompletionItem, window, commands, Uri, ProviderResult, TextEditor } from 'vscode';
+
+import { ITypescriptServiceClient } from '../typescriptService';
+import { FileLocationRequestArgs, DocCommandTemplateResponse } from '../protocol';
+
+import * as nls from 'vscode-nls';
+const localize = nls.loadMessageBundle();
+
+const tryCompleteJsDocCommand = '_typeScript.tryCompleteJsDoc';
+
+
+class JsDocCompletionItem extends CompletionItem {
+	constructor(file: Uri, position: Position) {
+		super('/** @param */', CompletionItemKind.Snippet);
+		this.detail = localize('typescript.jsDocCompletionItem.detail', 'Complete JSDoc comment');
+		this.insertText = '';
+		this.command = {
+			title: 'Try Complete Js Doc',
+			command: tryCompleteJsDocCommand,
+			arguments: [file, position]
+		};
+	}
+}
+
+export default class JsDocCompletionHelper implements CompletionItemProvider {
+
+	constructor(
+		private client: ITypescriptServiceClient,
+	) {
+		window.onDidChangeTextEditorSelection(e => {
+			if (e.textEditor.document.languageId !== 'typescript'
+				&& e.textEditor.document.languageId !== 'typescriptreact'
+				&& e.textEditor.document.languageId !== 'javascript'
+				&& e.textEditor.document.languageId !== 'javascriptreact'
+			) {
+				return;
+			}
+
+			const selection = e.selections[0];
+			if (!selection.start.isEqual(selection.end)) {
+				return;
+			}
+			if (this.shouldAutoShowJsDocSuggestion(e.textEditor.document, selection.start)) {
+				return commands.executeCommand('editor.action.triggerSuggest');","We have all sorts of commands and settings to trigger suggestions, for instance 24x7 or provider-specific trigger characters. This is somewhat backwards and I wonder why that is needed? This provider could for instance use `*` as trigger character to complete `/**` sequences. It's also being continuously asked for suggestion because the default config is `editor.quickSuggestion: true`. The idea is not trigger yourself but to know when to return something ",2017-02-22 15:10:58
775,"@@ -0,0 +1,184 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import { Position, Selection, Range, CompletionItemProvider, CompletionItemKind, TextDocument, CancellationToken, CompletionItem, window, commands, Uri, ProviderResult, TextEditor } from 'vscode';
+
+import { ITypescriptServiceClient } from '../typescriptService';
+import { FileLocationRequestArgs, DocCommandTemplateResponse } from '../protocol';
+
+import * as nls from 'vscode-nls';
+const localize = nls.loadMessageBundle();
+
+const tryCompleteJsDocCommand = '_typeScript.tryCompleteJsDoc';
+
+
+class JsDocCompletionItem extends CompletionItem {
+	constructor(file: Uri, position: Position) {
+		super('/** @param */', CompletionItemKind.Snippet);
+		this.detail = localize('typescript.jsDocCompletionItem.detail', 'Complete JSDoc comment');
+		this.insertText = '';
+		this.command = {
+			title: 'Try Complete Js Doc',
+			command: tryCompleteJsDocCommand,
+			arguments: [file, position]
+		};
+	}
+}
+
+export default class JsDocCompletionHelper implements CompletionItemProvider {
+
+	constructor(
+		private client: ITypescriptServiceClient,
+	) {
+		window.onDidChangeTextEditorSelection(e => {
+			if (e.textEditor.document.languageId !== 'typescript'
+				&& e.textEditor.document.languageId !== 'typescriptreact'
+				&& e.textEditor.document.languageId !== 'javascript'
+				&& e.textEditor.document.languageId !== 'javascriptreact'
+			) {
+				return;
+			}
+
+			const selection = e.selections[0];
+			if (!selection.start.isEqual(selection.end)) {
+				return;
+			}
+			if (this.shouldAutoShowJsDocSuggestion(e.textEditor.document, selection.start)) {
+				return commands.executeCommand('editor.action.triggerSuggest');
+			}
+			return;
+		});
+
+		commands.registerCommand(
+			tryCompleteJsDocCommand,
+			(file: Uri, position: Position) => this.tryCompleteJsDoc(file, position));
+	}
+
+	public provideCompletionItems(document: TextDocument, position: Position, _token: CancellationToken): ProviderResult<CompletionItem[]> {
+		const file = this.client.normalizePath(document.uri);
+		if (file) {
+			return [new JsDocCompletionItem(document.uri, position)];","Unconditionally returning a completion is causing https://github.com/Microsoft/vscode/issues/21147. Expect this method to be called 'randomly' (see above). Because you cannot control when that happens, the function must check the document/postion for a valid jsdoc-insertion locations and return something falsy else",2017-02-22 15:11:46
776,"@@ -0,0 +1,184 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import { Position, Selection, Range, CompletionItemProvider, CompletionItemKind, TextDocument, CancellationToken, CompletionItem, window, commands, Uri, ProviderResult, TextEditor } from 'vscode';
+
+import { ITypescriptServiceClient } from '../typescriptService';
+import { FileLocationRequestArgs, DocCommandTemplateResponse } from '../protocol';
+
+import * as nls from 'vscode-nls';
+const localize = nls.loadMessageBundle();
+
+const tryCompleteJsDocCommand = '_typeScript.tryCompleteJsDoc';
+
+
+class JsDocCompletionItem extends CompletionItem {
+	constructor(file: Uri, position: Position) {
+		super('/** @param */', CompletionItemKind.Snippet);
+		this.detail = localize('typescript.jsDocCompletionItem.detail', 'Complete JSDoc comment');
+		this.insertText = '';
+		this.command = {
+			title: 'Try Complete Js Doc',
+			command: tryCompleteJsDocCommand,
+			arguments: [file, position]
+		};
+	}
+}
+
+export default class JsDocCompletionHelper implements CompletionItemProvider {
+
+	constructor(
+		private client: ITypescriptServiceClient,
+	) {
+		window.onDidChangeTextEditorSelection(e => {
+			if (e.textEditor.document.languageId !== 'typescript'
+				&& e.textEditor.document.languageId !== 'typescriptreact'
+				&& e.textEditor.document.languageId !== 'javascript'
+				&& e.textEditor.document.languageId !== 'javascriptreact'
+			) {
+				return;
+			}
+
+			const selection = e.selections[0];
+			if (!selection.start.isEqual(selection.end)) {
+				return;
+			}
+			if (this.shouldAutoShowJsDocSuggestion(e.textEditor.document, selection.start)) {
+				return commands.executeCommand('editor.action.triggerSuggest');
+			}
+			return;
+		});
+
+		commands.registerCommand(
+			tryCompleteJsDocCommand,
+			(file: Uri, position: Position) => this.tryCompleteJsDoc(file, position));
+	}
+
+	public provideCompletionItems(document: TextDocument, position: Position, _token: CancellationToken): ProviderResult<CompletionItem[]> {
+		const file = this.client.normalizePath(document.uri);
+		if (file) {
+			return [new JsDocCompletionItem(document.uri, position)];
+		}
+		return [];
+	}
+
+	public resolveCompletionItem(item: CompletionItem, _token: CancellationToken) {
+		return item;
+	}
+
+	private shouldAutoShowJsDocSuggestion(document: TextDocument, position: Position): boolean {
+		const line = document.lineAt(position.line).text;
+
+		// Ensure line starts with '/**' then cursor
+		const prefix = line.slice(0, position.character).match(/^\s*(\/\*\*+)\s*$/);
+		if (prefix === null) {
+			return false;
+		}
+
+		// Ensure there is no content after the cursor besides possibly the end of the comment
+		const suffix = line.slice(position.character).match(/^\s*\**\/?$/);
+		return suffix !== null;
+	}
+
+	/**
+	 * Try to insert a jsdoc comment, using a template provide by typescript
+	 * if possible, otherwise falling back to a default comment format.
+	 */
+	private tryCompleteJsDoc(resource: Uri, position: Position): Thenable<boolean> {
+		const file = this.client.normalizePath(resource);
+		if (!file) {
+			return Promise.resolve(false);
+		}
+
+		const editor = window.activeTextEditor;
+		if (!editor || editor.document.uri.fsPath !== resource.fsPath) {
+			return Promise.resolve(false);
+		}
+
+		return this.prepForDocCompletion(editor, position)
+			.then((start: Position) => {
+				return this.tryInsertJsDocFromTemplate(editor, file, start);
+			})
+			.then((didInsertFromTemplate: boolean) => {
+				if (didInsertFromTemplate) {
+					return true;
+				}
+				return this.tryInsertDefaultDoc(editor, position);
+			});
+	}
+
+	/**
+	 * Prepare the area around the position for insertion of the jsdoc.
+	 *
+	 * Removes any the prefix and suffix of a possible jsdoc
+	 */
+	private prepForDocCompletion(editor: TextEditor, position: Position): Thenable<Position> {
+		const line = editor.document.lineAt(position.line).text;
+		const prefix = line.slice(0, position.character).match(/\/\**\s*$/);
+		const suffix = line.slice(position.character).match(/^\s*\**\//);
+		if (!prefix && !suffix) {
+			// Nothing to remove
+			return Promise.resolve(position);
+		}
+
+		const start = position.translate(0, prefix ? -prefix[0].length : 0);
+		return editor.edit(
+			edits => {
+				edits.delete(new Range(start, position.translate(0, suffix ? suffix[0].length : 0)));
+			}, {
+				undoStopBefore: true,
+				undoStopAfter: false
+			}).then(() => start);
+	}
+
+	private tryInsertJsDocFromTemplate(editor: TextEditor, file: string, position: Position): Promise<boolean> {
+		const args: FileLocationRequestArgs = {
+			file: file,
+			line: position.line + 1,
+			offset: position.character + 1
+		};
+		return this.client.execute('docCommentTemplate', args)
+			.then((res: DocCommandTemplateResponse) => {
+				if (!res || !res.body) {
+					return false;
+				}
+				const commentText = res.body.newText;
+				return editor.edit(
+					edits => edits.insert(position, commentText),
+					{ undoStopBefore: false, undoStopAfter: true });
+			}, () => false)
+			.then((didInsertComment: boolean) => {
+				if (didInsertComment) {
+					const newCursorPosition = new Position(position.line + 1, editor.document.lineAt(position.line + 1).text.length);
+					editor.selection = new Selection(newCursorPosition, newCursorPosition);
+				}
+				return didInsertComment;
+			});
+	}
+
+	/**
+	 * Insert the default JSDoc
+	 */
+	private tryInsertDefaultDoc(editor: TextEditor, position: Position): Thenable<boolean> {
+		const line = editor.document.lineAt(position.line).text;
+		const spaceBefore = line.slice(0, position.character).match(/^\s*$/);",When you use [`SnippetString`](https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2122) you get indentation for free and you can also define placeholders for params and define the final cursor position.,2017-02-22 15:15:16
381,"@@ -0,0 +1,2 @@
+Line 1","Line 1: **Awesome**
",2016-10-23 10:14:11
382,"@@ -0,0 +1,2 @@
+Line 1
+Line 2","Line 2: **Better Even**
",2016-10-23 10:14:31
576,"@@ -0,0 +1,212 @@
+/*---------------------------------------------------------------------------------------------",Awesome that we have tests for this!,2016-12-05 14:55:38
578,"@@ -0,0 +1,212 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import * as assert from 'assert';
+import { Model as EditorModel } from 'vs/editor/common/model/model';
+import { IExpression } from 'vs/workbench/parts/debug/common/debug';
+import { IRange, IModel } from 'vs/editor/common/editorCommon';
+import { createStringDictionary, IStringDictionary } from 'vs/base/common/collections';
+import { LineTokens, StandardTokenType } from 'vs/editor/common/core/lineTokens';
+import * as inlineDecorators from 'vs/workbench/parts/debug/electron-browser/debugInlineDecorators';
+
+// Test data
+const testLine = 'function doit(everything, is, awesome, awesome, when, youre, part, of, a, team){}';
+
+const testNameValueMap = {
+	everything: '{emmet: true, batman: true, legoUniverse: true}',
+	is: '15',
+	awesome: '""aweeeeeeeeeeeeeeeeeeeeeeeeeeeeeeesome…""',
+	when: 'true',
+	youre: '""Yes I mean you""',
+	part: '""𝄞 ♪ ♫""'
+};
+
+suite('Debug - Inline Value Decorators', () => {
+	test('getNameValueMapFromScopeChildren trims long values', () => {
+		const expressions = [
+			createExpression('hello', 'world'),
+			createExpression('blah', createLongString())
+		];
+
+		const nameValueMap = inlineDecorators.getNameValueMapFromScopeChildren([expressions]);
+
+		// Ensure blah is capped and ellipses added
+		assert.deepEqual(nameValueMap, {
+			hello: 'world',
+			blah: '""blah blah blah blah blah blah blah blah blah bla…""'
+		});
+	});
+
+	test('getNameValueMapFromScopeChildren caps scopes to a MAX_NUM_INLINE_VALUES limit', () => {
+		const scopeChildren: IExpression[][] = new Array(5);
+		const expectedNameValueMap: IStringDictionary<string> = createStringDictionary<string>();
+
+		// 10 Stack Frames with a 100 scope expressions each
+		// JS Global Scope has 700+ expressions so this is close to a real world scenario
+		for (let i = 0; i < scopeChildren.length; i++) {
+			const expressions = new Array(50);
+
+			for (let j = 0; j < expressions.length; ++j) {
+				const name = `name${i}.${j}`;
+				const val = `val${i}.${j}`;
+				expressions[j] = createExpression(name, val);
+
+				if ((i * expressions.length + j) < inlineDecorators.MAX_NUM_INLINE_VALUES) {
+					expectedNameValueMap[name] = val;
+				}
+			}
+
+			scopeChildren[i] = expressions;
+		}
+
+		const nameValueMap = inlineDecorators.getNameValueMapFromScopeChildren(scopeChildren);
+
+		assert.deepEqual(nameValueMap, expectedNameValueMap);
+	});
+
+	test('getDecoratorFromNames caps long decorator afterText', () => {
+		const names = Object.keys(testNameValueMap);
+		const lineNumber = 1;
+		const decorator = inlineDecorators.getDecoratorFromNames(lineNumber, names, testNameValueMap, [testLine]);
+
+		const expectedDecoratorText = ' everything = {emmet: true, batman: true, legoUniverse: true}, is = 15, awesome = ""aweeeeeeeeeeeeeeeeeeeeeeeeeeeeeeesome…"", when = true, youre = ""Yes…';
+		assert.equal(decorator.renderOptions.dark.after.contentText, decorator.renderOptions.light.after.contentText);
+		assert.equal(decorator.renderOptions.dark.after.contentText, expectedDecoratorText);
+		assert.deepEqual(decorator.range, {
+			startLineNumber: lineNumber,
+			endLineNumber: lineNumber,
+			startColumn: testLine.length,
+			endColumn: testLine.length + 1
+		});
+	});
+
+	test('getDecorators returns correct decorator afterText', () => {
+		const lineContent = 'console.log(everything, part, part);'; // part shouldn't be duplicated
+		const lineNumber = 1;
+		const wordRangeMap = updateWordRangeMap(createStringDictionary<IRange[]>(), lineNumber, lineContent);
+		const decorators = inlineDecorators.getDecorators(testNameValueMap, wordRangeMap, [lineContent]);
+		const expectedDecoratorText = ' everything = {emmet: true, batman: true, legoUniverse: true}, part = ""𝄞 ♪ ♫"" ';
+		assert.equal(decorators[0].renderOptions.dark.after.contentText, expectedDecoratorText);
+	});
+
+	test('getEditorWordRangeMap ignores comments and long lines', () => {
+		const expectedWords = 'function, doit, everything, is, awesome, when, youre, part, of, a, team'.split(', ');
+		const editorModel = EditorModel.createFromString(`/** Copyright comment */\n  \n${testLine}\n// Test comment\n${createLongString()}\n`);
+		mockEditorModelLineTokens(editorModel);
+
+		const wordRangeMap = inlineDecorators.getEditorWordRangeMap(editorModel);
+		const words = Object.keys(wordRangeMap);
+		assert.deepEqual(words, expectedWords);
+	});
+});
+
+// Test helpers
+
+function createExpression(name: string, value: string): IExpression {
+	return {
+		name,
+		value,
+		getId: () => name,
+		hasChildren: false,
+		getChildren: null
+	};
+}
+
+function createLongString(): string {
+	let longStr = '';
+	for (let i = 0; i < 100; ++i) {
+		longStr += 'blah blah blah ';
+	}
+	return `""${longStr}""`;
+}
+
+// Simple word range creator that maches wordRegex throughout string
+function updateWordRangeMap(wordRangeMap: IStringDictionary<IRange[]>, lineNumber: number, lineContent: string): IStringDictionary<IRange[]> {
+	const wordRegexp = inlineDecorators.WORD_REGEXP;
+	wordRegexp.lastIndex = 0; // Reset matching
+
+	while (true) {
+		const wordMatch = wordRegexp.exec(lineContent);
+		if (!wordMatch) {
+			break;
+		}
+
+		const word = wordMatch[0];
+		const startOffset = wordMatch.index;
+		const endOffset = startOffset + word.length;
+
+		const range: IRange = {
+			startColumn: startOffset + 1,
+			endColumn: endOffset + 1,
+			startLineNumber: lineNumber,
+			endLineNumber: lineNumber
+		};
+
+		if (!wordRangeMap[word]) {
+			wordRangeMap[word] = [];
+		}
+
+		wordRangeMap[word].push(range);
+	}
+
+	return wordRangeMap;
+}
+
+interface MockToken {
+	tokenType: StandardTokenType;
+	startOffset: number;
+	endOffset: number;
+}
+
+// Simple tokenizer that separates comments from words
+function mockLineTokens(lineContent: string): LineTokens {","I do not think this method is needed. You could instead reuses model.createFromeString and then on that model get line tokens.
Here's an example [usage](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/test/common/model/textModelWithTokens.test.ts#L283)",2016-12-05 15:08:21
314,"@@ -0,0 +1,25 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
+import Uri from 'vs/base/common/uri';
+
+export const IBackupService = createDecorator<IBackupService>('backupService');
+
+export interface IBackupService {
+	_serviceBrand: any;
+
+	getBackupWorkspaces(): string[];","Now I am confused why this guy reaches into the territory of vs/electron-main/backup
",2016-10-13 15:03:02
48,"@@ -0,0 +1,257 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import {Promise, TPromise} from 'vs/base/common/winjs.base';
+import {IEventEmitter} from 'vs/base/common/eventEmitter';
+import {Dimension, Builder, $} from 'vs/base/browser/builder';
+import {IAction, IActionRunner, Action, ActionRunner} from 'vs/base/common/actions';
+import {IActionItem, ActionsOrientation} from 'vs/base/browser/ui/actionbar/actionbar';
+import {WorkbenchComponent} from 'vs/workbench/common/component';
+import {CompositeEvent} from 'vs/workbench/common/events';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {AsyncDescriptor} from 'vs/platform/instantiation/common/descriptors';
+import {IComposite} from 'vs/workbench/common/composite';
+import {ISelection, Selection} from 'vs/platform/selection/common/selection';
+
+/**
+ * Internal composite events to communicate with composite container.
+ */
+export const EventType = {
+	INTERNAL_COMPOSITE_TITLE_AREA_UPDATE: 'internalCompositeTitleAreaUpdate'
+};
+
+/**
+ * Composites are layed out in the sidebar part of the workbench. Only one composite can be open","@isidorn would rephrase, it is not just sidebar
",2016-01-19 10:43:33
194,"@@ -0,0 +1,26 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as Types from 'vs/base/common/types';
+import { AbstractSystemVariables } from 'vs/base/common/parsers';
+import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
+
+export class SettingsVariables extends AbstractSystemVariables {
+	private configuration: any;
+	constructor(private configurationService: IConfigurationService) {
+		super();
+		this.configuration = this.configurationService.getConfiguration();
+	}
+
+	protected resolveString(value: string): string {
+		let regexp = /\$\{settings\.(.*?)\}/g;","I would prefer if you just read the configuration every time you need to resolve the string. 
Not sure if doing it the current way you can end up with a stale configuration.
",2016-07-06 08:02:09
195,"@@ -0,0 +1,26 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as Types from 'vs/base/common/types';
+import { AbstractSystemVariables } from 'vs/base/common/parsers';
+import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
+
+export class SettingsVariables extends AbstractSystemVariables {
+	private configuration: any;
+	constructor(private configurationService: IConfigurationService) {
+		super();
+		this.configuration = this.configurationService.getConfiguration();
+	}
+
+	protected resolveString(value: string): string {
+		let regexp = /\$\{settings\.(.*?)\}/g;
+		return value.replace(regexp, (match: string, name: string) => {
+			let config = this.configuration;
+			let newValue = new Function('_', 'try {return _.' + name + ';} catch (ex) { return """";}')(config);
+			return Types.isString(newValue) ? newValue : '';","We try to avoid using the 'new Function' pattern, is it possible to re-write this using a lambda function - it would read much nicer?
",2016-07-06 08:03:47
946,"@@ -0,0 +1,280 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+import * as vscode from 'vscode';
+import * as interfaces from './interfaces';
+import ContentProvider from './contentProvider';
+import * as path from 'path';
+import { loadMessageBundle } from 'vscode-nls';
+const localize = loadMessageBundle();
+
+const messages = {
+	cursorNotInConflict: 'Editor cursor is not within a merge conflict',
+	cursorOnSplitterRange: 'Editor cursor is within the merge conflict splitter, please move it to either the ""current"" or ""incoming"" block',
+	noConflicts: 'No merge conflicts found in this file',
+	noOtherConflictsInThisFile: 'No other merge conflicts within this file'
+};
+
+interface IDocumentMergeConflictNavigationResults {
+	canNavigate: boolean;
+	conflict?: interfaces.IDocumentMergeConflict;
+}
+
+enum NavigationDirection {
+	Forwards,
+	Backwards
+}
+
+export default class CommandHandler implements vscode.Disposable {
+
+	private disposables: vscode.Disposable[] = [];
+
+	constructor(private context: vscode.ExtensionContext, private tracker: interfaces.IDocumentMergeConflictTracker) {
+	}
+
+	begin() {
+		this.disposables.push(
+			vscode.commands.registerTextEditorCommand('merge-conflict.accept.current', this.acceptCurrent, this),
+			vscode.commands.registerTextEditorCommand('merge-conflict.accept.incoming', this.acceptIncoming, this),
+			vscode.commands.registerTextEditorCommand('merge-conflict.accept.selection', this.acceptSelection, this),
+			vscode.commands.registerTextEditorCommand('merge-conflict.accept.both', this.acceptBoth, this),
+			vscode.commands.registerTextEditorCommand('merge-conflict.accept.all-current', this.acceptAllCurrent, this),
+			vscode.commands.registerTextEditorCommand('merge-conflict.accept.all-incoming', this.acceptAllIncoming, this),
+			vscode.commands.registerTextEditorCommand('merge-conflict.accept.all-both', this.acceptAllBoth, this),
+			vscode.commands.registerTextEditorCommand('merge-conflict.next', this.navigateNext, this),
+			vscode.commands.registerTextEditorCommand('merge-conflict.previous', this.navigatePrevious, this),
+			vscode.commands.registerTextEditorCommand('merge-conflict.compare', this.compare, this)
+		);
+	}
+
+	acceptCurrent(editor: vscode.TextEditor, edit: vscode.TextEditorEdit, ...args): Promise<void> {
+		return this.accept(interfaces.CommitType.Current, editor, ...args);
+	}
+
+	acceptIncoming(editor: vscode.TextEditor, edit: vscode.TextEditorEdit, ...args): Promise<void> {
+		return this.accept(interfaces.CommitType.Incoming, editor, ...args);
+	}
+
+	acceptBoth(editor: vscode.TextEditor, edit: vscode.TextEditorEdit, ...args): Promise<void> {
+		return this.accept(interfaces.CommitType.Both, editor, ...args);
+	}
+
+	acceptAllCurrent(editor: vscode.TextEditor, edit: vscode.TextEditorEdit, ...args): Promise<void> {
+		return this.acceptAll(interfaces.CommitType.Current, editor);
+	}
+
+	acceptAllIncoming(editor: vscode.TextEditor, edit: vscode.TextEditorEdit, ...args): Promise<void> {
+		return this.acceptAll(interfaces.CommitType.Incoming, editor);
+	}
+
+	acceptAllBoth(editor: vscode.TextEditor, edit: vscode.TextEditorEdit, ...args): Promise<void> {
+		return this.acceptAll(interfaces.CommitType.Both, editor);
+	}
+
+	async compare(editor: vscode.TextEditor, edit: vscode.TextEditorEdit, conflict: interfaces.IDocumentMergeConflict | null, ...args) {
+		const fileName = path.basename(editor.document.uri.fsPath);
+
+		// No conflict, command executed from command palette
+		if (!conflict) {
+			conflict = await this.findConflictContainingSelection(editor);
+
+			// Still failed to find conflict, warn the user and exit
+			if (!conflict) {
+				vscode.window.showWarningMessage(localize('cursorNotInConflict', messages.cursorNotInConflict));
+				return;
+			}
+		}
+
+		let range = conflict.current.content;
+		const leftUri = editor.document.uri.with({
+			scheme: ContentProvider.scheme,
+			query: JSON.stringify(range)
+		});
+
+		const leftTitle = `Current changes`; // (Ln ${range.start.line}${!range.isSingleLine ? `-${range.end.line}` : ''})`;
+
+		range = conflict.incoming.content;
+		const rightUri = leftUri.with({ query: JSON.stringify(range) });
+
+		const rightTitle = `Incoming changes`; // (Ln${range.start.line}${!range.isSingleLine ? `-${range.end.line}` : ''})`;
+
+		const title = `${fileName}: ${leftTitle} \u2194 ${rightTitle}`;",Maybe inline the two titles and use a placeholder `{0}` to localize like: https://github.com/Microsoft/vscode/blame/master/extensions/git/src/commands.ts#L754,2017-05-23 18:16:30
207,"@@ -0,0 +1,29 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as Types from 'vs/base/common/types';
+import { SystemVariables } from './systemVariables';
+import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
+import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
+import { IWorkspaceContextService } from 'vs/workbench/services/workspace/common/contextService';
+import URI from 'vs/base/common/uri';
+
+export class ConfigVariables extends SystemVariables {
+	constructor(private configurationService: IConfigurationService, editorService: IWorkbenchEditorService, contextService: IWorkspaceContextService, workspaceRoot: URI = null, envVariables: { [key: string]: string } = process.env) {
+		super(editorService, contextService, workspaceRoot, envVariables);
+	}
+
+	protected resolveString(value: string): string {
+		value = super.resolveString(value);
+","The regexp should have 'config' not 'settings' to allign with other places where we have replacments.
",2016-07-08 13:56:00
18,"@@ -0,0 +1,295 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+","Is this actually our copyright and was this copied from some public source?
",2015-11-27 08:45:20
19,"@@ -0,0 +1,295 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+export class HTMLTagSpecification {
+	constructor(public label: string, public attributes: string[] = []) {}
+}
+
+// HTML tag information sourced from http://www.w3.org/TR/2015/WD-html51-20151008/
+export const HTML_TAGS : { [tag:string]: HTMLTagSpecification } = {","@Tyriar I meat this. @chrisdias will know how to attribute properly...
",2015-11-27 11:59:40
187,"@@ -0,0 +1,30 @@
+## Using Markdown-it Plugins
+
+To use a `markdown-it` plugin, goto the directory containing the `markdown-it` extension.  This will
+be found in the `extensions` folder in your vscode installation.  Install the `markdown-it` plugin
+as a node module.  For example, to install the `KaTeX` markdown-it extension you would simply type:
+
+``` sh
+npm install markdown-it-katex
+```
+
+Next, add the plugin into your [settings configuration](https://code.visualstudio.com/docs/customization/userandworkspace)
+under the `""markdown.plugs""` namespace.  This setting should contain a list for each `markdown-it` extension you wish
+to install.  The list should contain an object describing the name of the module, a list of styles that your extentsion
+may require, and options that you wish to pass to your extension.  For example, while installing the `markdown-it-katex`
+extension we would include this in your settings configuration:
+
+``` json
+    ""markdown.plugins"": [
+        {
+            ""name"": ""markdown-it-katex"",
+            ""styles"": [","Just curious, is it necessary to have separate styling for plugins?
",2016-06-20 09:59:36
619,"@@ -0,0 +1,30 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>",Let's leave this as MIT for now as I don't think we use a special license for metadata.,2016-12-16 18:57:04
618,"@@ -0,0 +1,30 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>
+	<project_license>MIT</project_license>",This can be sourced from `product.licenseName` now.,2016-12-16 18:56:21
802,"@@ -0,0 +1,32 @@
+<!-- Copyright (C) Microsoft Corporation. All rights reserved. -->
+<!DOCTYPE html>
+<html>
+
+<head>
+	<meta charset=""utf-8"" />
+</head>
+
+<body class=""monaco-shell vs-dark"" aria-label="""">
+	<script>
+		(function () {
+			try {
+				window.location.search.substring(1).split('&').forEach(p => {",Theming here?,2017-03-07 06:34:21
0,"@@ -0,0 +1,34 @@
+#!/bin/bash
+# This is the install script for installing vs code onto a linux machine
+# Usage: sudo bash linux_install.sh 
+userid=`id -u`
+if [[ $userid -ne 0 ]]
+then
+   echo ""Sorry, you aren't a root user""
+fi
+
+cmd=`mkdir ""/usr/local/vscode/""`
+
+if [[ $cmd -eq 0 ]]; then
+	echo ""folder creation successful""
+else
+	echo ""something went wrong creating folder""
+fi
+
+cmd=`cp vscode.desktop /usr/share/applications`
+
+if [[ $cmd -eq 0 ]]; then
+	echo ""successfully installed app shortcut""
+else
+	echo ""something went wrong with installing app shortcut""
+fi
+
+cmd=`cp -r * /usr/local/vscode/`
+
+if [[ $cmd -eq 0 ]]; then
+	echo ""successfully installed app""
+else
+	echo ""something went wrong with installing app""
+fi
+
+echo 'export PATH=$PATH:/usr/local/vscode' >> ~/.bashrc","NO. You install things into /usr/local, without tracking.
YOU WRITE THINGS INTO BASHRC!!! And apparently root's bashrc. What about people who don't use bash?
What's wrong with you?

This code isn't safe, it doesn't have `undo` command and it's tailored for one user only.
",2015-11-19 20:16:07
703,"@@ -0,0 +1,35 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { DefaultController, WorkbenchOpenMode, IControllerOptions } from 'vs/base/parts/tree/browser/treeDefaults';
+import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
+
+interface IConfiguration {
+	workbench: {
+		openMode: string;
+	};
+}
+
+export class TreeControllerBase extends DefaultController {
+	constructor(
+		options: IControllerOptions,",Suggest to make options optional so that not everyone has to repeat the `ClickBehaviour` setting and rather benefit from the default which is `onMouseUp`.,2017-01-20 11:58:57
139,"@@ -0,0 +1,37 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import nls = require('vs/nls');
+import {Action} from 'vs/base/common/actions';
+import {IPartService} from 'vs/workbench/services/part/common/partService';
+import {IPanelService} from 'vs/workbench/services/panel/common/panelService';
+import {TERMINAL_PANEL_ID, ITerminalService} from 'vs/workbench/parts/terminal/common/terminal';
+
+export class ToggleTerminalAction extends Action {
+
+	public static ID = 'workbench.action.terminal.toggleTerminal';
+	public static LABEL = nls.localize('toggleTerminal', ""(Experimental) Toggle Terminal"");
+
+	constructor(
+		id: string, label: string,
+		@IPartService private partService: IPartService,
+		@IPanelService private panelService: IPanelService,
+		@ITerminalService private terminalService: ITerminalService
+	) {
+		super(id, label);
+	}
+
+	public run(event?: any): TPromise<any> {
+		const panel = this.panelService.getActivePanel();
+		if (panel && panel.getId() === TERMINAL_PANEL_ID) {
+			this.partService.setPanelHidden(true);
+
+			return TPromise.as(null);
+		}
+
+		return this.terminalService.show();","that's my point about the terminal service. it doesn't make you not have a dependency on the panel service to which it is just a slim wrapper nor does it make you keep the panel id private
",2016-04-29 15:13:40
401,"@@ -0,0 +1,44 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { TreeExplorerNodeProvider } from 'vscode';
+
+export class InternalTreeExplorerNode implements TreeExplorerNodeContent {","Why not just TreeExplorerNode?
",2016-10-24 15:32:14
420,"@@ -0,0 +1,44 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { TreeExplorerNodeProvider } from 'vscode';
+
+export class InternalTreeExplorerNode implements TreeExplorerNodeContent {
+	static idCounter = 1;","Should not be public
",2016-10-24 15:59:17
419,"@@ -0,0 +1,44 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { TreeExplorerNodeProvider } from 'vscode';
+
+export class InternalTreeExplorerNode implements TreeExplorerNodeContent {
+	static idCounter = 1;
+
+	id: number;
+
+	label: string = 'label';","Why does this default to `'label'`?
",2016-10-24 15:58:58
402,"@@ -0,0 +1,44 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { TreeExplorerNodeProvider } from 'vscode';
+
+export class InternalTreeExplorerNode implements TreeExplorerNodeContent {
+	static idCounter = 1;
+
+	id: number;
+
+	label: string = 'label';
+	hasChildren: boolean = true;
+	clickCommand: string = null;
+
+	constructor(node: any, provider: TreeExplorerNodeProvider<any>) {
+		this.id = InternalTreeExplorerNode.idCounter++;
+
+		if (provider.getLabel) {
+			this.label = provider.getLabel(node);
+		}
+		if (provider.getHasChildren) {
+			this.hasChildren = provider.getHasChildren(node);
+		}
+		if (provider.getClickCommand) {
+			this.clickCommand = provider.getClickCommand(node);
+		}
+	}
+}
+
+export interface InternalTreeExplorerNodeProvider {","Why not just TreeExplorerNodeProvider?
",2016-10-24 15:32:22
33,"@@ -0,0 +1,441 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import nls = require('vs/nls');
+import {Registry} from 'vs/platform/platform';
+import {IDisposable} from 'vs/base/common/lifecycle';
+import {Dimension, Builder, $} from 'vs/base/browser/builder';
+import events = require('vs/base/common/events');
+import strings = require('vs/base/common/strings');
+import types = require('vs/base/common/types');
+import errors = require('vs/base/common/errors');
+import {CONTEXT as ToolBarContext, ToolBar} from 'vs/base/browser/ui/toolbar/toolbar';
+import {IActionItem, ActionsOrientation} from 'vs/base/browser/ui/actionbar/actionbar';
+import {ProgressBar} from 'vs/base/browser/ui/progressbar/progressbar';
+import {Scope, IActionBarRegistry, Extensions, prepareActions} from 'vs/workbench/browser/actionBarRegistry';
+import {Action, IAction} from 'vs/base/common/actions';
+import {Part} from 'vs/workbench/browser/part';
+import {Composite, CompositeDescriptor, CompositeRegistry} from 'vs/workbench/browser/composite';
+import {IComposite} from 'vs/workbench/common/composite';
+import {EventType as WorkbenchEventType, CompositeEvent} from 'vs/workbench/common/events';
+import {EventType as CompositeEventType} from 'vs/workbench/browser/composite';
+import {SyncActionDescriptor} from 'vs/platform/actions/common/actions';
+import {WorkbenchProgressService} from 'vs/workbench/services/progress/browser/progressService';
+import {IPartService} from 'vs/workbench/services/part/common/partService';
+import {IStorageService, StorageScope} from 'vs/platform/storage/common/storage';
+import {IContextMenuService} from 'vs/platform/contextview/browser/contextView';
+import {IEventService} from 'vs/platform/event/common/event';
+import {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';
+import {IMessageService, Severity} from 'vs/platform/message/common/message';
+import {IProgressService} from 'vs/platform/progress/common/progress';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';
+
+export abstract class CompositePart<T extends Composite> extends Part {
+
+	private instantiationService: IInstantiationService;
+	private activeCompositeListeners: { (): void; }[];
+	private instantiatedCompositeListeners: { (): void; }[];
+	private mapCompositeToCompositeContainer: { [compositeId: string]: Builder; };
+	private mapActionsBindingToComposite: { [compositeId: string]: () => void; };
+	private mapProgressServiceToComposite: { [compositeId: string]: IProgressService; };
+	private activeComposite: Composite;
+	private lastActiveCompositeId: string;
+	private instantiatedComposits: Composite[];
+	private titleLabel: Builder;
+	private toolBar: ToolBar;
+	private compositeLoaderPromises: { [compositeId: string]: TPromise<Composite>; };
+	private progressBar: ProgressBar;
+	private contentAreaSize: Dimension;
+	private telemetryActionsListener: IDisposable;
+
+	constructor(
+		private messageService: IMessageService,
+		private storageService: IStorageService,
+		private eventService: IEventService,
+		private telemetryService: ITelemetryService,
+		private contextMenuService: IContextMenuService,
+		protected partService: IPartService,
+		private keybindingService: IKeybindingService,
+		private registry: CompositeRegistry<T>,
+		private activeCompositeSettingsKey: string,
+		id: string
+	) {
+		super(id);
+
+		this.activeCompositeListeners = [];
+		this.instantiatedCompositeListeners = [];
+		this.mapCompositeToCompositeContainer = {};
+		this.mapActionsBindingToComposite = {};
+		this.mapProgressServiceToComposite = {};
+		this.activeComposite = null;
+		this.instantiatedComposits = [];
+		this.compositeLoaderPromises = {};
+	}
+
+	public setInstantiationService(service: IInstantiationService): void {
+		this.instantiationService = service;
+	}
+
+	protected createComposite(id: string, isActive?: boolean): TPromise<Composite> {
+
+		// Check if composite is already created
+		for (let i = 0; i < this.instantiatedComposits.length; i++) {
+			if (this.instantiatedComposits[i].getId() === id) {
+				return TPromise.as(this.instantiatedComposits[i]);
+			}
+		}
+
+		// Instantiate composite from registry otherwise
+		let compositeDescriptor = this.registry.getComposite(id);
+		if (compositeDescriptor) {
+			let loaderPromise = this.compositeLoaderPromises[id];
+			if (!loaderPromise) {
+				let progressService = new WorkbenchProgressService(this.eventService, this.progressBar, compositeDescriptor.id, isActive);
+				let services = {
+					progressService: progressService
+				};
+				let compositeInstantiationService = this.instantiationService.createChild(services);
+
+				loaderPromise = compositeInstantiationService.createInstance(compositeDescriptor).then((composite: Composite) => {
+					this.mapProgressServiceToComposite[composite.getId()] = progressService;
+
+					// Remember as Instantiated
+					this.instantiatedComposits.push(composite);
+
+					// Register to title area update events from the composite
+					this.instantiatedCompositeListeners.push(composite.addListener(CompositeEventType.INTERNAL_COMPOSITE_TITLE_AREA_UPDATE, (e) => { this.onTitleAreaUpdate(e); }));
+
+					// Remove from Promises Cache since Loaded
+					delete this.compositeLoaderPromises[id];
+
+					return composite;
+				});
+
+				// Report progress for slow loading composits
+				progressService.showWhile(loaderPromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
+
+				// Add to Promise Cache until Loaded
+				this.compositeLoaderPromises[id] = loaderPromise;
+			}
+
+			return loaderPromise;
+		}
+
+		throw new Error(strings.format('Unable to find composite with id {0}', id));
+	}
+
+	protected showComposite(composite: Composite): TPromise<void> {
+
+		// Remember Composite
+		this.activeComposite = composite;
+
+		// Store in preferences
+		this.storageService.store(this.activeCompositeSettingsKey, this.activeComposite.getId(), StorageScope.WORKSPACE);
+
+		// Remember
+		this.lastActiveCompositeId = this.activeComposite.getId();
+
+		// Register as Emitter to Workbench Bus
+		this.activeCompositeListeners.push(this.eventService.addEmitter(this.activeComposite, this.activeComposite.getId()));
+
+		let createCompositePromise: TPromise<void>;
+
+		// Composits created for the first time
+		let compositeContainer = this.mapCompositeToCompositeContainer[composite.getId()];
+		if (!compositeContainer) {
+
+			// Build Container off-DOM
+			compositeContainer = $().div({
+				'class': 'viewlet',","@isidorn this should probably be passed in from the outside so that we can tweak the CSS for viewlets and panels separately.
",2016-01-15 15:05:40
34,"@@ -0,0 +1,441 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import nls = require('vs/nls');
+import {Registry} from 'vs/platform/platform';
+import {IDisposable} from 'vs/base/common/lifecycle';
+import {Dimension, Builder, $} from 'vs/base/browser/builder';
+import events = require('vs/base/common/events');
+import strings = require('vs/base/common/strings');
+import types = require('vs/base/common/types');
+import errors = require('vs/base/common/errors');
+import {CONTEXT as ToolBarContext, ToolBar} from 'vs/base/browser/ui/toolbar/toolbar';
+import {IActionItem, ActionsOrientation} from 'vs/base/browser/ui/actionbar/actionbar';
+import {ProgressBar} from 'vs/base/browser/ui/progressbar/progressbar';
+import {Scope, IActionBarRegistry, Extensions, prepareActions} from 'vs/workbench/browser/actionBarRegistry';
+import {Action, IAction} from 'vs/base/common/actions';
+import {Part} from 'vs/workbench/browser/part';
+import {Composite, CompositeDescriptor, CompositeRegistry} from 'vs/workbench/browser/composite';
+import {IComposite} from 'vs/workbench/common/composite';
+import {EventType as WorkbenchEventType, CompositeEvent} from 'vs/workbench/common/events';
+import {EventType as CompositeEventType} from 'vs/workbench/browser/composite';
+import {SyncActionDescriptor} from 'vs/platform/actions/common/actions';
+import {WorkbenchProgressService} from 'vs/workbench/services/progress/browser/progressService';
+import {IPartService} from 'vs/workbench/services/part/common/partService';
+import {IStorageService, StorageScope} from 'vs/platform/storage/common/storage';
+import {IContextMenuService} from 'vs/platform/contextview/browser/contextView';
+import {IEventService} from 'vs/platform/event/common/event';
+import {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';
+import {IMessageService, Severity} from 'vs/platform/message/common/message';
+import {IProgressService} from 'vs/platform/progress/common/progress';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';
+
+export abstract class CompositePart<T extends Composite> extends Part {
+
+	private instantiationService: IInstantiationService;
+	private activeCompositeListeners: { (): void; }[];
+	private instantiatedCompositeListeners: { (): void; }[];
+	private mapCompositeToCompositeContainer: { [compositeId: string]: Builder; };
+	private mapActionsBindingToComposite: { [compositeId: string]: () => void; };
+	private mapProgressServiceToComposite: { [compositeId: string]: IProgressService; };
+	private activeComposite: Composite;
+	private lastActiveCompositeId: string;
+	private instantiatedComposits: Composite[];
+	private titleLabel: Builder;
+	private toolBar: ToolBar;
+	private compositeLoaderPromises: { [compositeId: string]: TPromise<Composite>; };
+	private progressBar: ProgressBar;
+	private contentAreaSize: Dimension;
+	private telemetryActionsListener: IDisposable;
+
+	constructor(
+		private messageService: IMessageService,
+		private storageService: IStorageService,
+		private eventService: IEventService,
+		private telemetryService: ITelemetryService,
+		private contextMenuService: IContextMenuService,
+		protected partService: IPartService,
+		private keybindingService: IKeybindingService,
+		private registry: CompositeRegistry<T>,
+		private activeCompositeSettingsKey: string,
+		id: string
+	) {
+		super(id);
+
+		this.activeCompositeListeners = [];
+		this.instantiatedCompositeListeners = [];
+		this.mapCompositeToCompositeContainer = {};
+		this.mapActionsBindingToComposite = {};
+		this.mapProgressServiceToComposite = {};
+		this.activeComposite = null;
+		this.instantiatedComposits = [];
+		this.compositeLoaderPromises = {};
+	}
+
+	public setInstantiationService(service: IInstantiationService): void {
+		this.instantiationService = service;
+	}
+
+	protected createComposite(id: string, isActive?: boolean): TPromise<Composite> {
+
+		// Check if composite is already created
+		for (let i = 0; i < this.instantiatedComposits.length; i++) {
+			if (this.instantiatedComposits[i].getId() === id) {
+				return TPromise.as(this.instantiatedComposits[i]);
+			}
+		}
+
+		// Instantiate composite from registry otherwise
+		let compositeDescriptor = this.registry.getComposite(id);
+		if (compositeDescriptor) {
+			let loaderPromise = this.compositeLoaderPromises[id];
+			if (!loaderPromise) {
+				let progressService = new WorkbenchProgressService(this.eventService, this.progressBar, compositeDescriptor.id, isActive);
+				let services = {
+					progressService: progressService
+				};
+				let compositeInstantiationService = this.instantiationService.createChild(services);
+
+				loaderPromise = compositeInstantiationService.createInstance(compositeDescriptor).then((composite: Composite) => {
+					this.mapProgressServiceToComposite[composite.getId()] = progressService;
+
+					// Remember as Instantiated
+					this.instantiatedComposits.push(composite);
+
+					// Register to title area update events from the composite
+					this.instantiatedCompositeListeners.push(composite.addListener(CompositeEventType.INTERNAL_COMPOSITE_TITLE_AREA_UPDATE, (e) => { this.onTitleAreaUpdate(e); }));
+
+					// Remove from Promises Cache since Loaded
+					delete this.compositeLoaderPromises[id];
+
+					return composite;
+				});
+
+				// Report progress for slow loading composits
+				progressService.showWhile(loaderPromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
+
+				// Add to Promise Cache until Loaded
+				this.compositeLoaderPromises[id] = loaderPromise;
+			}
+
+			return loaderPromise;
+		}
+
+		throw new Error(strings.format('Unable to find composite with id {0}', id));
+	}
+
+	protected showComposite(composite: Composite): TPromise<void> {
+
+		// Remember Composite
+		this.activeComposite = composite;
+
+		// Store in preferences
+		this.storageService.store(this.activeCompositeSettingsKey, this.activeComposite.getId(), StorageScope.WORKSPACE);
+
+		// Remember
+		this.lastActiveCompositeId = this.activeComposite.getId();
+
+		// Register as Emitter to Workbench Bus
+		this.activeCompositeListeners.push(this.eventService.addEmitter(this.activeComposite, this.activeComposite.getId()));
+
+		let createCompositePromise: TPromise<void>;
+
+		// Composits created for the first time
+		let compositeContainer = this.mapCompositeToCompositeContainer[composite.getId()];
+		if (!compositeContainer) {
+
+			// Build Container off-DOM
+			compositeContainer = $().div({
+				'class': 'viewlet',
+				id: composite.getId()
+			}, (div: Builder) => {
+				createCompositePromise = composite.create(div);
+			});
+
+			// Remember composite container
+			this.mapCompositeToCompositeContainer[composite.getId()] = compositeContainer;
+		}
+
+		// Composite already exists but is hidden
+		else {
+			createCompositePromise = TPromise.as(null);
+		}
+
+		// Report progress for slow loading composits (but only if we did not create the composits before already)
+		let progressService = this.mapProgressServiceToComposite[composite.getId()];
+		if (progressService && !compositeContainer) {
+			this.mapProgressServiceToComposite[composite.getId()].showWhile(createCompositePromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
+		}
+
+		// Fill Content and Actions
+		return createCompositePromise.then(() => {
+
+			// Make sure that the user meanwhile did not open another composite or closed the sidebar","@isidorn sidebar reference in comment
",2016-01-15 15:06:09
35,"@@ -0,0 +1,441 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import nls = require('vs/nls');
+import {Registry} from 'vs/platform/platform';
+import {IDisposable} from 'vs/base/common/lifecycle';
+import {Dimension, Builder, $} from 'vs/base/browser/builder';
+import events = require('vs/base/common/events');
+import strings = require('vs/base/common/strings');
+import types = require('vs/base/common/types');
+import errors = require('vs/base/common/errors');
+import {CONTEXT as ToolBarContext, ToolBar} from 'vs/base/browser/ui/toolbar/toolbar';
+import {IActionItem, ActionsOrientation} from 'vs/base/browser/ui/actionbar/actionbar';
+import {ProgressBar} from 'vs/base/browser/ui/progressbar/progressbar';
+import {Scope, IActionBarRegistry, Extensions, prepareActions} from 'vs/workbench/browser/actionBarRegistry';
+import {Action, IAction} from 'vs/base/common/actions';
+import {Part} from 'vs/workbench/browser/part';
+import {Composite, CompositeDescriptor, CompositeRegistry} from 'vs/workbench/browser/composite';
+import {IComposite} from 'vs/workbench/common/composite';
+import {EventType as WorkbenchEventType, CompositeEvent} from 'vs/workbench/common/events';
+import {EventType as CompositeEventType} from 'vs/workbench/browser/composite';
+import {SyncActionDescriptor} from 'vs/platform/actions/common/actions';
+import {WorkbenchProgressService} from 'vs/workbench/services/progress/browser/progressService';
+import {IPartService} from 'vs/workbench/services/part/common/partService';
+import {IStorageService, StorageScope} from 'vs/platform/storage/common/storage';
+import {IContextMenuService} from 'vs/platform/contextview/browser/contextView';
+import {IEventService} from 'vs/platform/event/common/event';
+import {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';
+import {IMessageService, Severity} from 'vs/platform/message/common/message';
+import {IProgressService} from 'vs/platform/progress/common/progress';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';
+
+export abstract class CompositePart<T extends Composite> extends Part {
+
+	private instantiationService: IInstantiationService;
+	private activeCompositeListeners: { (): void; }[];
+	private instantiatedCompositeListeners: { (): void; }[];
+	private mapCompositeToCompositeContainer: { [compositeId: string]: Builder; };
+	private mapActionsBindingToComposite: { [compositeId: string]: () => void; };
+	private mapProgressServiceToComposite: { [compositeId: string]: IProgressService; };
+	private activeComposite: Composite;
+	private lastActiveCompositeId: string;
+	private instantiatedComposits: Composite[];
+	private titleLabel: Builder;
+	private toolBar: ToolBar;
+	private compositeLoaderPromises: { [compositeId: string]: TPromise<Composite>; };
+	private progressBar: ProgressBar;
+	private contentAreaSize: Dimension;
+	private telemetryActionsListener: IDisposable;
+
+	constructor(
+		private messageService: IMessageService,
+		private storageService: IStorageService,
+		private eventService: IEventService,
+		private telemetryService: ITelemetryService,
+		private contextMenuService: IContextMenuService,
+		protected partService: IPartService,
+		private keybindingService: IKeybindingService,
+		private registry: CompositeRegistry<T>,
+		private activeCompositeSettingsKey: string,
+		id: string
+	) {
+		super(id);
+
+		this.activeCompositeListeners = [];
+		this.instantiatedCompositeListeners = [];
+		this.mapCompositeToCompositeContainer = {};
+		this.mapActionsBindingToComposite = {};
+		this.mapProgressServiceToComposite = {};
+		this.activeComposite = null;
+		this.instantiatedComposits = [];
+		this.compositeLoaderPromises = {};
+	}
+
+	public setInstantiationService(service: IInstantiationService): void {
+		this.instantiationService = service;
+	}
+
+	protected createComposite(id: string, isActive?: boolean): TPromise<Composite> {
+
+		// Check if composite is already created
+		for (let i = 0; i < this.instantiatedComposits.length; i++) {
+			if (this.instantiatedComposits[i].getId() === id) {
+				return TPromise.as(this.instantiatedComposits[i]);
+			}
+		}
+
+		// Instantiate composite from registry otherwise
+		let compositeDescriptor = this.registry.getComposite(id);
+		if (compositeDescriptor) {
+			let loaderPromise = this.compositeLoaderPromises[id];
+			if (!loaderPromise) {
+				let progressService = new WorkbenchProgressService(this.eventService, this.progressBar, compositeDescriptor.id, isActive);
+				let services = {
+					progressService: progressService
+				};
+				let compositeInstantiationService = this.instantiationService.createChild(services);
+
+				loaderPromise = compositeInstantiationService.createInstance(compositeDescriptor).then((composite: Composite) => {
+					this.mapProgressServiceToComposite[composite.getId()] = progressService;
+
+					// Remember as Instantiated
+					this.instantiatedComposits.push(composite);
+
+					// Register to title area update events from the composite
+					this.instantiatedCompositeListeners.push(composite.addListener(CompositeEventType.INTERNAL_COMPOSITE_TITLE_AREA_UPDATE, (e) => { this.onTitleAreaUpdate(e); }));
+
+					// Remove from Promises Cache since Loaded
+					delete this.compositeLoaderPromises[id];
+
+					return composite;
+				});
+
+				// Report progress for slow loading composits
+				progressService.showWhile(loaderPromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
+
+				// Add to Promise Cache until Loaded
+				this.compositeLoaderPromises[id] = loaderPromise;
+			}
+
+			return loaderPromise;
+		}
+
+		throw new Error(strings.format('Unable to find composite with id {0}', id));
+	}
+
+	protected showComposite(composite: Composite): TPromise<void> {
+
+		// Remember Composite
+		this.activeComposite = composite;
+
+		// Store in preferences
+		this.storageService.store(this.activeCompositeSettingsKey, this.activeComposite.getId(), StorageScope.WORKSPACE);
+
+		// Remember
+		this.lastActiveCompositeId = this.activeComposite.getId();
+
+		// Register as Emitter to Workbench Bus
+		this.activeCompositeListeners.push(this.eventService.addEmitter(this.activeComposite, this.activeComposite.getId()));
+
+		let createCompositePromise: TPromise<void>;
+
+		// Composits created for the first time
+		let compositeContainer = this.mapCompositeToCompositeContainer[composite.getId()];
+		if (!compositeContainer) {
+
+			// Build Container off-DOM
+			compositeContainer = $().div({
+				'class': 'viewlet',
+				id: composite.getId()
+			}, (div: Builder) => {
+				createCompositePromise = composite.create(div);
+			});
+
+			// Remember composite container
+			this.mapCompositeToCompositeContainer[composite.getId()] = compositeContainer;
+		}
+
+		// Composite already exists but is hidden
+		else {
+			createCompositePromise = TPromise.as(null);
+		}
+
+		// Report progress for slow loading composits (but only if we did not create the composits before already)
+		let progressService = this.mapProgressServiceToComposite[composite.getId()];
+		if (progressService && !compositeContainer) {
+			this.mapProgressServiceToComposite[composite.getId()].showWhile(createCompositePromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
+		}
+
+		// Fill Content and Actions
+		return createCompositePromise.then(() => {
+
+			// Make sure that the user meanwhile did not open another composite or closed the sidebar
+			if (!this.activeComposite || composite.getId() !== this.activeComposite.getId()) {
+				return;
+			}
+
+			// Take Composite on-DOM and show
+			compositeContainer.build(this.getContentArea());
+			compositeContainer.show();
+
+			// Setup action runner
+			this.toolBar.actionRunner = composite.getActionRunner();
+
+			// Update title with composite title if it differs from descriptor
+			let descriptor = this.registry.getComposite(composite.getId());
+			if (descriptor && descriptor.name !== composite.getTitle()) {
+				this.updateTitle(composite.getId(), composite.getTitle());
+			}
+
+			// Handle Composite Actions
+			let actionsBinding = this.mapActionsBindingToComposite[composite.getId()];
+			if (!actionsBinding) {
+				actionsBinding = this.collectCompositeActions(composite);
+				this.mapActionsBindingToComposite[composite.getId()] = actionsBinding;
+			}
+			actionsBinding();
+
+			if (this.telemetryActionsListener) {
+				this.telemetryActionsListener.dispose();
+				this.telemetryActionsListener = null;
+			}
+
+			// Action Run Handling
+			this.telemetryActionsListener = this.toolBar.actionRunner.addListener2(events.EventType.RUN, (e: any) => {
+
+				// Check for Error
+				if (e.error && !errors.isPromiseCanceledError(e.error)) {
+					this.messageService.show(Severity.Error, e.error);
+				}
+
+				// Log in telemetry
+				if (this.telemetryService) {
+					this.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: 'sideBar' });","@isidorn the ""from: sideBar"" value should be passed in from the subclass of the part
",2016-01-15 15:06:48
36,"@@ -0,0 +1,441 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import nls = require('vs/nls');
+import {Registry} from 'vs/platform/platform';
+import {IDisposable} from 'vs/base/common/lifecycle';
+import {Dimension, Builder, $} from 'vs/base/browser/builder';
+import events = require('vs/base/common/events');
+import strings = require('vs/base/common/strings');
+import types = require('vs/base/common/types');
+import errors = require('vs/base/common/errors');
+import {CONTEXT as ToolBarContext, ToolBar} from 'vs/base/browser/ui/toolbar/toolbar';
+import {IActionItem, ActionsOrientation} from 'vs/base/browser/ui/actionbar/actionbar';
+import {ProgressBar} from 'vs/base/browser/ui/progressbar/progressbar';
+import {Scope, IActionBarRegistry, Extensions, prepareActions} from 'vs/workbench/browser/actionBarRegistry';
+import {Action, IAction} from 'vs/base/common/actions';
+import {Part} from 'vs/workbench/browser/part';
+import {Composite, CompositeDescriptor, CompositeRegistry} from 'vs/workbench/browser/composite';
+import {IComposite} from 'vs/workbench/common/composite';
+import {EventType as WorkbenchEventType, CompositeEvent} from 'vs/workbench/common/events';
+import {EventType as CompositeEventType} from 'vs/workbench/browser/composite';
+import {SyncActionDescriptor} from 'vs/platform/actions/common/actions';
+import {WorkbenchProgressService} from 'vs/workbench/services/progress/browser/progressService';
+import {IPartService} from 'vs/workbench/services/part/common/partService';
+import {IStorageService, StorageScope} from 'vs/platform/storage/common/storage';
+import {IContextMenuService} from 'vs/platform/contextview/browser/contextView';
+import {IEventService} from 'vs/platform/event/common/event';
+import {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';
+import {IMessageService, Severity} from 'vs/platform/message/common/message';
+import {IProgressService} from 'vs/platform/progress/common/progress';
+import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
+import {IKeybindingService} from 'vs/platform/keybinding/common/keybindingService';
+
+export abstract class CompositePart<T extends Composite> extends Part {
+
+	private instantiationService: IInstantiationService;
+	private activeCompositeListeners: { (): void; }[];
+	private instantiatedCompositeListeners: { (): void; }[];
+	private mapCompositeToCompositeContainer: { [compositeId: string]: Builder; };
+	private mapActionsBindingToComposite: { [compositeId: string]: () => void; };
+	private mapProgressServiceToComposite: { [compositeId: string]: IProgressService; };
+	private activeComposite: Composite;
+	private lastActiveCompositeId: string;
+	private instantiatedComposits: Composite[];
+	private titleLabel: Builder;
+	private toolBar: ToolBar;
+	private compositeLoaderPromises: { [compositeId: string]: TPromise<Composite>; };
+	private progressBar: ProgressBar;
+	private contentAreaSize: Dimension;
+	private telemetryActionsListener: IDisposable;
+
+	constructor(
+		private messageService: IMessageService,
+		private storageService: IStorageService,
+		private eventService: IEventService,
+		private telemetryService: ITelemetryService,
+		private contextMenuService: IContextMenuService,
+		protected partService: IPartService,
+		private keybindingService: IKeybindingService,
+		private registry: CompositeRegistry<T>,
+		private activeCompositeSettingsKey: string,
+		id: string
+	) {
+		super(id);
+
+		this.activeCompositeListeners = [];
+		this.instantiatedCompositeListeners = [];
+		this.mapCompositeToCompositeContainer = {};
+		this.mapActionsBindingToComposite = {};
+		this.mapProgressServiceToComposite = {};
+		this.activeComposite = null;
+		this.instantiatedComposits = [];
+		this.compositeLoaderPromises = {};
+	}
+
+	public setInstantiationService(service: IInstantiationService): void {
+		this.instantiationService = service;
+	}
+
+	protected createComposite(id: string, isActive?: boolean): TPromise<Composite> {
+
+		// Check if composite is already created
+		for (let i = 0; i < this.instantiatedComposits.length; i++) {
+			if (this.instantiatedComposits[i].getId() === id) {
+				return TPromise.as(this.instantiatedComposits[i]);
+			}
+		}
+
+		// Instantiate composite from registry otherwise
+		let compositeDescriptor = this.registry.getComposite(id);
+		if (compositeDescriptor) {
+			let loaderPromise = this.compositeLoaderPromises[id];
+			if (!loaderPromise) {
+				let progressService = new WorkbenchProgressService(this.eventService, this.progressBar, compositeDescriptor.id, isActive);
+				let services = {
+					progressService: progressService
+				};
+				let compositeInstantiationService = this.instantiationService.createChild(services);
+
+				loaderPromise = compositeInstantiationService.createInstance(compositeDescriptor).then((composite: Composite) => {
+					this.mapProgressServiceToComposite[composite.getId()] = progressService;
+
+					// Remember as Instantiated
+					this.instantiatedComposits.push(composite);
+
+					// Register to title area update events from the composite
+					this.instantiatedCompositeListeners.push(composite.addListener(CompositeEventType.INTERNAL_COMPOSITE_TITLE_AREA_UPDATE, (e) => { this.onTitleAreaUpdate(e); }));
+
+					// Remove from Promises Cache since Loaded
+					delete this.compositeLoaderPromises[id];
+
+					return composite;
+				});
+
+				// Report progress for slow loading composits
+				progressService.showWhile(loaderPromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
+
+				// Add to Promise Cache until Loaded
+				this.compositeLoaderPromises[id] = loaderPromise;
+			}
+
+			return loaderPromise;
+		}
+
+		throw new Error(strings.format('Unable to find composite with id {0}', id));
+	}
+
+	protected showComposite(composite: Composite): TPromise<void> {
+
+		// Remember Composite
+		this.activeComposite = composite;
+
+		// Store in preferences
+		this.storageService.store(this.activeCompositeSettingsKey, this.activeComposite.getId(), StorageScope.WORKSPACE);
+
+		// Remember
+		this.lastActiveCompositeId = this.activeComposite.getId();
+
+		// Register as Emitter to Workbench Bus
+		this.activeCompositeListeners.push(this.eventService.addEmitter(this.activeComposite, this.activeComposite.getId()));
+
+		let createCompositePromise: TPromise<void>;
+
+		// Composits created for the first time
+		let compositeContainer = this.mapCompositeToCompositeContainer[composite.getId()];
+		if (!compositeContainer) {
+
+			// Build Container off-DOM
+			compositeContainer = $().div({
+				'class': 'viewlet',
+				id: composite.getId()
+			}, (div: Builder) => {
+				createCompositePromise = composite.create(div);
+			});
+
+			// Remember composite container
+			this.mapCompositeToCompositeContainer[composite.getId()] = compositeContainer;
+		}
+
+		// Composite already exists but is hidden
+		else {
+			createCompositePromise = TPromise.as(null);
+		}
+
+		// Report progress for slow loading composits (but only if we did not create the composits before already)
+		let progressService = this.mapProgressServiceToComposite[composite.getId()];
+		if (progressService && !compositeContainer) {
+			this.mapProgressServiceToComposite[composite.getId()].showWhile(createCompositePromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
+		}
+
+		// Fill Content and Actions
+		return createCompositePromise.then(() => {
+
+			// Make sure that the user meanwhile did not open another composite or closed the sidebar
+			if (!this.activeComposite || composite.getId() !== this.activeComposite.getId()) {
+				return;
+			}
+
+			// Take Composite on-DOM and show
+			compositeContainer.build(this.getContentArea());
+			compositeContainer.show();
+
+			// Setup action runner
+			this.toolBar.actionRunner = composite.getActionRunner();
+
+			// Update title with composite title if it differs from descriptor
+			let descriptor = this.registry.getComposite(composite.getId());
+			if (descriptor && descriptor.name !== composite.getTitle()) {
+				this.updateTitle(composite.getId(), composite.getTitle());
+			}
+
+			// Handle Composite Actions
+			let actionsBinding = this.mapActionsBindingToComposite[composite.getId()];
+			if (!actionsBinding) {
+				actionsBinding = this.collectCompositeActions(composite);
+				this.mapActionsBindingToComposite[composite.getId()] = actionsBinding;
+			}
+			actionsBinding();
+
+			if (this.telemetryActionsListener) {
+				this.telemetryActionsListener.dispose();
+				this.telemetryActionsListener = null;
+			}
+
+			// Action Run Handling
+			this.telemetryActionsListener = this.toolBar.actionRunner.addListener2(events.EventType.RUN, (e: any) => {
+
+				// Check for Error
+				if (e.error && !errors.isPromiseCanceledError(e.error)) {
+					this.messageService.show(Severity.Error, e.error);
+				}
+
+				// Log in telemetry
+				if (this.telemetryService) {
+					this.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: 'sideBar' });
+				}
+			});
+
+			// Indicate to composite that it is now visible
+			return composite.setVisible(true).then(() => {
+
+				// Make sure that the user meanwhile did not open another composite or closed the sidebar","@isidorn ""sidebar"" being mentioned in comment
",2016-01-15 15:07:07
138,"@@ -0,0 +1,46 @@
+/*---------------------------------------------------------------------------------------------","all of this should sit in `electron-browser` and not in the `node` namespace cos we have a dependency to the browser world, like DOM etc, and nodejs libs
",2016-04-29 15:11:52
611,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>","Could you check that this validates against:

```
appstream-util validate code.appdata.xml
```",2016-12-13 20:04:50
605,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">",If you wanted to split the .appdata.xml change out into a separate PR we can merge this a lot faster.,2016-12-13 19:38:53
608,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>",@chrisdias do we have a preferred license for metadata files like these?,2016-12-13 19:40:49
610,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>
+	<project_license>MIT</project_license>",This will need to change to be based on product.json but I just realized we don't do it for the rpm package so this is work I'll need to follow up :smile: #17133,2016-12-13 19:45:38
609,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>
+	<project_license>MIT</project_license>
+	<name>@@NAME_LONG@@</name>
+	<url type=""homepage"">https://code.visualstudio.com</url>
+	<summary>Code editor for developers supporting integration with existing tools</summary>","As in https://github.com/Microsoft/vscode/issues/17130, let's make this ""Code editing. Redefined."" for now",2016-12-13 19:43:48
607,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>
+	<project_license>MIT</project_license>
+	<name>@@NAME_LONG@@</name>
+	<url type=""homepage"">https://code.visualstudio.com</url>
+	<summary>Code editor for developers supporting integration with existing tools</summary>
+	<description>
+		<p>
+			Visual Studio Code is a lightweight but powerful source code editor which","Let's go with the standard description now as defined in https://github.com/Microsoft/vscode/issues/17130, also could you put it all one line? `<p>Visual Studio...`",2016-12-13 19:40:20
606,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>
+	<project_license>MIT</project_license>
+	<name>@@NAME_LONG@@</name>
+	<url type=""homepage"">https://code.visualstudio.com</url>
+	<summary>Code editor for developers supporting integration with existing tools</summary>
+	<description>
+		<p>
+			Visual Studio Code is a lightweight but powerful source code editor which
+			runs on your desktop and is available for Windows, Mac and Linux. It comes
+			with built-in support for JavaScript, TypeScript and Node.js and has a rich
+			ecosystem of extensions for other languages (such as C++, C#, Python, PHP)
+			and runtimes. 
+		</p>
+		<p>
+			The editor includes built-in support for the Git distributed version control
+			system, intelligent code completion, support for highlighting and completing
+			many programming languages, and and integrated debugging interface. Additional
+			functionality is provided by optional extensions.
+		</p>
+	</description>
+	<screenshots>
+		<screenshot type=""default"">
+			<image>https://code.visualstudio.com/home/home-screenshot-linux-lg.png</image>
+			<caption>Editing a TypeScript file and searching for extensions.</caption>
+		</screenshot>
+		<screenshot>","Let's just keep the default screenshot for now, I've created https://github.com/Microsoft/vscode/issues/17131 to follow this up.",2016-12-13 19:39:29
253,"@@ -0,0 +1,51 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import {ITerminalService} from 'vs/workbench/parts/terminal/electron-browser/terminal';
+import {MainThreadTerminalServiceShape} from './extHost.protocol';
+
+export class MainThreadTerminalService extends MainThreadTerminalServiceShape {
+
+	private _terminalService: ITerminalService;
+
+	constructor(
+		@ITerminalService terminalService: ITerminalService
+	) {
+		super();
+		this._terminalService = terminalService;
+	}
+
+	public $createTerminal(name?: string): TPromise<number> {
+		return this._terminalService.createNew(name);
+	}
+
+	public $show(terminalId: number, preserveFocus: boolean): void {
+		this._terminalService.show(!preserveFocus).then((terminalPanel) => {
+			terminalPanel.setActiveTerminalById(terminalId);
+		});
+	}
+
+	public $hide(terminalId: number): void {
+		this._terminalService.hide();
+	}
+
+	public $dispose(terminalId: number): void {
+		// TODO: This could be improved by not first showing the terminal to be disposed
+		var self = this;","`self`, really? it's a fat-arrow function
",2016-08-18 19:32:18
137,"@@ -0,0 +1,53 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import {createDecorator, ServiceIdentifier} from 'vs/platform/instantiation/common/instantiation';
+import path = require('path');
+import platform = require('vs/base/common/platform');
+
+export const TERMINAL_PANEL_ID = 'workbench.panel.terminal';
+
+export const TERMINAL_SERVICE_ID = 'terminalService';
+
+export const TERMINAL_DEFAULT_SHELL_UNIX_LIKE = process.env.SHELL || 'sh';
+export const TERMINAL_DEFAULT_SHELL_WINDOWS = platform.isWindows ? path.resolve(process.env.SystemRoot, 'System32', 'WindowsPowerShell', 'v1.0', 'powershell.exe') : '';
+
+export var ITerminalService = createDecorator<ITerminalService>(TERMINAL_SERVICE_ID);
+
+export interface ITerminalConfiguration {
+	integratedTerminal: {
+		shell: {
+			unixLike: string,
+			windows: string
+		},
+		fontFamily: string,
+		ansiColors: {
+			black: string,
+			red: string,
+			green: string,
+			yellow: string,
+			blue: string,
+			magenta: string,
+			cyan: string,
+			white: string,
+			brightBlack: string,
+			brightRed: string,
+			brightGreen: string,
+			brightYellow: string,
+			brightBlue: string,
+			brightMagenta: string,
+			brightCyan: string,
+			brightWhite: string,
+		}
+	};
+}
+
+export interface ITerminalService {","it doesn't seem like this service isn't buying us anything
",2016-04-29 15:11:06
196,"@@ -0,0 +1,56 @@
+/*---------------------------------------------------------------------------------------------","Great for having tests 👍 
",2016-07-06 08:04:20
252,"@@ -0,0 +1,56 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import {TPromise} from 'vs/base/common/winjs.base';
+import {IThreadService} from 'vs/workbench/services/thread/common/threadService';
+import vscode = require('vscode');
+import {MainContext, MainThreadTerminalServiceShape} from './extHost.protocol';
+
+export class ExtHostTerminal implements vscode.Terminal {
+
+	private _id: number;
+	private _proxy: MainThreadTerminalServiceShape;
+	private _disposed: boolean;
+
+	constructor(proxy: MainThreadTerminalServiceShape, id: number) {
+		this._id = id;
+		this._proxy = proxy;
+	}
+
+	public sendText(text: string, addNewLine: boolean = true) {
+		this._proxy.$sendText(this._id, text, addNewLine);","throw if disposed?
",2016-08-18 19:30:15
440,"@@ -0,0 +1,57 @@
+/*---------------------------------------------------------------------------------------------","@octref not sure if you care about it but this file could move into the `common` layer since it does not seem to depend on anything browser related.
",2016-11-03 08:03:51
445,"@@ -0,0 +1,57 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as nls from 'vs/nls';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Registry } from 'vs/platform/platform';
+import { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actionRegistry';
+import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';
+import { Action } from 'vs/base/common/actions';
+import { IQuickOpenService, IPickOpenEntry } from 'vs/workbench/services/quickopen/common/quickOpenService';
+import { IActivityService } from 'vs/workbench/services/activity/common/activityService';
+
+const registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);
+
+export class ToggleExternalViewletAction extends Action {
+	public static ID = 'workbench.action.customTreeExplorer.toggle';
+	public static LABEL = nls.localize('toggleCustomExplorer', 'Toggle Custom Explorer');
+
+	constructor(
+		id: string,
+		label: string,
+		@IQuickOpenService private quickOpenService: IQuickOpenService,
+		@IActivityService private activityService: IActivityService
+	) {
+		super(id, name);
+	}
+
+	run(): TPromise<any> {
+		const infoForExternalViewlets = this.activityService.getInfoForExternalViewlets();
+
+		const picks: IPickOpenEntry[] = [];
+		for (let viewletId in infoForExternalViewlets) {
+			const { isEnabled, treeLabel } = infoForExternalViewlets[viewletId];
+			picks.push({
+				id: viewletId,
+				label: (isEnabled ? 'Disable ' : 'Enable ') + treeLabel","@octref you are messing with nls here!
",2016-11-03 08:28:32
446,"@@ -0,0 +1,57 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as nls from 'vs/nls';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Registry } from 'vs/platform/platform';
+import { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actionRegistry';
+import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';
+import { Action } from 'vs/base/common/actions';
+import { IQuickOpenService, IPickOpenEntry } from 'vs/workbench/services/quickopen/common/quickOpenService';
+import { IActivityService } from 'vs/workbench/services/activity/common/activityService';
+
+const registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);
+
+export class ToggleExternalViewletAction extends Action {
+	public static ID = 'workbench.action.customTreeExplorer.toggle';
+	public static LABEL = nls.localize('toggleCustomExplorer', 'Toggle Custom Explorer');
+
+	constructor(
+		id: string,
+		label: string,
+		@IQuickOpenService private quickOpenService: IQuickOpenService,
+		@IActivityService private activityService: IActivityService
+	) {
+		super(id, name);
+	}
+
+	run(): TPromise<any> {
+		const infoForExternalViewlets = this.activityService.getInfoForExternalViewlets();
+
+		const picks: IPickOpenEntry[] = [];
+		for (let viewletId in infoForExternalViewlets) {
+			const { isEnabled, treeLabel } = infoForExternalViewlets[viewletId];
+			picks.push({
+				id: viewletId,
+				label: (isEnabled ? 'Disable ' : 'Enable ') + treeLabel
+			});
+		}
+
+		return TPromise.timeout(50 /* quick open is sensitive to being opened so soon after another */).then(() => {
+			this.quickOpenService.pick(picks, { placeHolder: 'Select Viewlet to toggle', autoFocus: 2 }).then(pick => {","@octref multiple things:
- nls!
- I suggest to not call it Viewlet but rather similar to the action that it was opened from (""Custom Explorer"")
- please use the enum and not the number it represents for `autoFocus`
",2016-11-03 08:28:49
411,"@@ -0,0 +1,60 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as nls from 'vs/nls';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Registry } from 'vs/platform/platform';
+import { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actionRegistry';
+import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';
+import { Action } from 'vs/base/common/actions';
+import { IQuickOpenService, IPickOpenEntry } from 'vs/workbench/services/quickopen/common/quickOpenService';
+import { IActivityService } from 'vs/workbench/services/activity/common/activityService';
+
+const registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);
+
+export class ToggleExternalViewletAction extends Action {
+	public static ID = 'workbench.action.customTreeExplorer.toggle';
+	public static LABEL = nls.localize('toggleCustomExplorer', 'Toggle Custom Explorer');
+
+	constructor(
+		id: string,
+		label: string,
+		@IQuickOpenService private quickOpenService: IQuickOpenService,
+		@IActivityService private activityService: IActivityService
+	) {
+		super(id, name);
+	}
+
+	run(): TPromise<any> {
+		const viewletsToggleStataus = this.activityService.getIsEnabledForRegisteredViewlets();","Typo: Stataus
",2016-10-24 15:50:22
410,"@@ -0,0 +1,60 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import * as nls from 'vs/nls';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Registry } from 'vs/platform/platform';
+import { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actionRegistry';
+import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';
+import { Action } from 'vs/base/common/actions';
+import { IQuickOpenService, IPickOpenEntry } from 'vs/workbench/services/quickopen/common/quickOpenService';
+import { IActivityService } from 'vs/workbench/services/activity/common/activityService';
+
+const registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);
+
+export class ToggleExternalViewletAction extends Action {
+	public static ID = 'workbench.action.customTreeExplorer.toggle';
+	public static LABEL = nls.localize('toggleCustomExplorer', 'Toggle Custom Explorer');
+
+	constructor(
+		id: string,
+		label: string,
+		@IQuickOpenService private quickOpenService: IQuickOpenService,
+		@IActivityService private activityService: IActivityService
+	) {
+		super(id, name);
+	}
+
+	run(): TPromise<any> {
+		const viewletsToggleStataus = this.activityService.getIsEnabledForRegisteredViewlets();
+
+		const picks: IPickOpenEntry[] = [];
+		for (let viewletId in viewletsToggleStataus) {
+			picks.push({
+				id: viewletId,
+				label: (viewletsToggleStataus[viewletId] ? 'Disable ' : 'Enable ') + this.getShortViewletId(viewletId)","Is this `viewletId` the `treeExplorerNodeProviderId` in the contribution? If so why aren't you using treeLabel as the label in the quick open?
",2016-10-24 15:50:04
438,"@@ -0,0 +1,60 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { localize } from 'vs/nls';
+import { join } from 'vs/base/common/paths';
+import { createCSSRule } from 'vs/base/browser/dom';
+import { IJSONSchema } from 'vs/base/common/jsonSchema';
+import { ExtensionsRegistry } from 'vs/platform/extensions/common/extensionsRegistry';
+import { Registry } from 'vs/platform/platform';
+import { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor } from 'vs/workbench/browser/viewlet';
+import { VIEWLET_ID_ROOT } from 'vs/workbench/parts/explorers/common/treeExplorer';","@octref you are reaching into the contribution space of the workbench here which is not good (see https://github.com/Microsoft/vscode/wiki/Code-Organization#workbench-parts). Can we not just move this entire file into `vs/workbench/parts/explorers`? I see no reason why this file has to live top level in `workbench` core.
",2016-11-03 07:49:07
441,"@@ -0,0 +1,60 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { localize } from 'vs/nls';
+import { join } from 'vs/base/common/paths';
+import { createCSSRule } from 'vs/base/browser/dom';
+import { IJSONSchema } from 'vs/base/common/jsonSchema';
+import { ExtensionsRegistry } from 'vs/platform/extensions/common/extensionsRegistry';
+import { Registry } from 'vs/platform/platform';
+import { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor } from 'vs/workbench/browser/viewlet';
+import { VIEWLET_ID_ROOT } from 'vs/workbench/parts/explorers/common/treeExplorer';
+import { ITreeExplorer } from 'vs/platform/extensionManagement/common/extensionManagement';
+
+namespace schema {
+
+	export const explorerContribtion: IJSONSchema = {
+		description: localize('vscode.extension.contributes.explorer', ""Contributes custom tree explorer viewlet to the sidebar""),
+		type: 'object',
+		properties: {
+			treeExplorerNodeProviderId: {
+				description: localize('vscode.extension.contributes.explorer.treeExplorerNodeProviderId', 'Unique id used to identify provider registered through vscode.workspace.registerTreeExplorerNodeProvider'),
+				type: 'string'
+			},
+			treeLabel: {
+				description: localize('vscode.extension.contributes.explorer.treeLabel', 'Human readable string used to render the custom tree viewlet'),
+				type: 'string'
+			},
+			icon: {
+				description: localize('vscode.extension.contributes.explorer.icon', 'Path to the viewlet icon on the activity bar'),
+				type: 'string'
+			}
+		}
+	};
+}
+
+ExtensionsRegistry.registerExtensionPoint<ITreeExplorer>('explorer', [], schema.explorerContribtion).setHandler(extensions => {
+	for (let extension of extensions) {
+		const { treeExplorerNodeProviderId, treeLabel, icon } = extension.value;
+
+		const getIconRule = (iconPath) => { return `background-image: url('${iconPath}')`; };
+		if (icon) {
+			const iconClass = `.monaco-workbench > .activitybar .monaco-action-bar .action-label.${treeExplorerNodeProviderId}`;","@octref shouldn't the icon rule be created on `VIEWLET_ID_ROOT + treeExplorerNodeProviderId`? How do we otherwise prevent someone from overwriting the icon for the explorer?

Also you have to be carful when taking a user defined string as CSS class. Maybe ping @aeschli on his use of CSS escaping (see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/themes/electron-browser/themeService.ts#L603)
",2016-11-03 08:21:00
443,"@@ -0,0 +1,60 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { localize } from 'vs/nls';
+import { join } from 'vs/base/common/paths';
+import { createCSSRule } from 'vs/base/browser/dom';
+import { IJSONSchema } from 'vs/base/common/jsonSchema';
+import { ExtensionsRegistry } from 'vs/platform/extensions/common/extensionsRegistry';
+import { Registry } from 'vs/platform/platform';
+import { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor } from 'vs/workbench/browser/viewlet';
+import { VIEWLET_ID_ROOT } from 'vs/workbench/parts/explorers/common/treeExplorer';
+import { ITreeExplorer } from 'vs/platform/extensionManagement/common/extensionManagement';
+
+namespace schema {
+
+	export const explorerContribtion: IJSONSchema = {
+		description: localize('vscode.extension.contributes.explorer', ""Contributes custom tree explorer viewlet to the sidebar""),
+		type: 'object',
+		properties: {
+			treeExplorerNodeProviderId: {
+				description: localize('vscode.extension.contributes.explorer.treeExplorerNodeProviderId', 'Unique id used to identify provider registered through vscode.workspace.registerTreeExplorerNodeProvider'),
+				type: 'string'
+			},
+			treeLabel: {
+				description: localize('vscode.extension.contributes.explorer.treeLabel', 'Human readable string used to render the custom tree viewlet'),
+				type: 'string'
+			},
+			icon: {
+				description: localize('vscode.extension.contributes.explorer.icon', 'Path to the viewlet icon on the activity bar'),
+				type: 'string'
+			}
+		}
+	};
+}
+
+ExtensionsRegistry.registerExtensionPoint<ITreeExplorer>('explorer', [], schema.explorerContribtion).setHandler(extensions => {
+	for (let extension of extensions) {
+		const { treeExplorerNodeProviderId, treeLabel, icon } = extension.value;
+
+		const getIconRule = (iconPath) => { return `background-image: url('${iconPath}')`; };
+		if (icon) {
+			const iconClass = `.monaco-workbench > .activitybar .monaco-action-bar .action-label.${treeExplorerNodeProviderId}`;
+			const iconPath = join(extension.description.extensionFolderPath, icon);
+			createCSSRule(iconClass, getIconRule(iconPath));
+		}
+
+		Registry.as<ViewletRegistry>(ViewletExtensions.Viewlets).registerViewlet(new ViewletDescriptor(
+			'vs/workbench/parts/explorers/browser/treeExplorerViewlet',
+			'TreeExplorerViewlet',
+			VIEWLET_ID_ROOT + treeExplorerNodeProviderId,
+			treeLabel,
+			treeExplorerNodeProviderId,
+			-1, // External viewlets are ordered by enabling sequence, so order here doesn't matter.","@octref `Extension viewlets...`
",2016-11-03 08:24:14
444,"@@ -0,0 +1,7 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+export const VIEWLET_ID_ROOT = 'workbench.view.customTreeExplorer.';","@octref since you seem to use this always as a prefix, might be more elegant to just expose a function `toViewletId()` that does the concatenation?
",2016-11-03 08:26:12
548,"@@ -0,0 +1,71 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import { PPromise, TPromise } from 'vs/base/common/winjs.base';
+import { IChannel } from 'vs/base/parts/ipc/common/ipc';
+import { ISerializedFileMatch } from '../search';
+import { IProgress, ILineMatch, IPatternInfo, ISearchStats } from 'vs/platform/search/common/search';
+import { SearchWorker } from './searchWorker';
+
+export interface ISearchWorkerConfig {
+	pattern: IPatternInfo;
+	fileEncoding: string;
+	id: number;
+}
+
+export interface ISearchWorkerSearchArgs {
+	absolutePaths: string[];
+	maxResults: number;
+}
+
+export interface ISearchWorkerSearchResult {
+	matches: ISerializedFileMatch[];
+	numMatches: number;
+	limitReached: boolean;
+}
+
+export interface ISearchWorker {
+	initialize(config: ISearchWorkerConfig): TPromise<void>;
+	search(args: ISearchWorkerSearchArgs): TPromise<ISearchWorkerSearchResult>;
+	cancel(): TPromise<void>;
+}
+
+export interface ISearchWorkerChannel extends IChannel {
+	call(command: 'initialize', config: ISearchWorkerConfig): TPromise<void>;
+	call(command: 'search', args: ISearchWorkerSearchArgs): TPromise<ISearchWorkerSearchResult>;
+	call(command: 'cancel'): TPromise<void>;
+	call(command: string, arg?: any): TPromise<any>;
+}
+
+export class SearchWorkerChannel implements ISearchWorkerChannel {
+	constructor(private worker: SearchWorker) {
+	}
+
+	call(command: string, arg?: any): TPromise<any> {
+		switch(command) {
+			case 'initialize': return TPromise.wrap(this.worker.initialize(arg));",`TPromise.wrap` is already used in initialize().,2016-11-30 20:02:40
392,"@@ -0,0 +1,71 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { localize } from 'vs/nls';
+import { join } from 'vs/base/common/paths';
+import { createCSSRule } from 'vs/base/browser/dom';
+import { IJSONSchema } from 'vs/base/common/jsonSchema';
+import { ExtensionsRegistry } from 'vs/platform/extensions/common/extensionsRegistry';
+import { Registry } from 'vs/platform/platform';
+import { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor } from 'vs/workbench/browser/viewlet';
+import { VIEWLET_ID_ROOT } from 'vs/workbench/parts/explorers/common/treeExplorer';
+
+namespace schema {
+
+	export interface IExplorer {","Should you reuse the one in extensionManagement.ts instead of duplicating?
",2016-10-24 14:52:56
391,"@@ -0,0 +1,71 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { localize } from 'vs/nls';
+import { join } from 'vs/base/common/paths';
+import { createCSSRule } from 'vs/base/browser/dom';
+import { IJSONSchema } from 'vs/base/common/jsonSchema';
+import { ExtensionsRegistry } from 'vs/platform/extensions/common/extensionsRegistry';
+import { Registry } from 'vs/platform/platform';
+import { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor } from 'vs/workbench/browser/viewlet';
+import { VIEWLET_ID_ROOT } from 'vs/workbench/parts/explorers/common/treeExplorer';
+
+namespace schema {
+
+	export interface IExplorer {
+		treeExplorerNodeProviderId: string;
+		treeLabel: string;
+		icon: string;
+	}
+
+	export const explorerContribtion: IJSONSchema = {
+		description: localize('vscode.extension.contributes.explorer', ""Contributes custom tree explorer viewlet to the sidebar""),
+		type: 'object',
+		properties: {
+			treeExplorerNodeProviderId: {
+				description: localize('vscode.extension.contributes.explorer.treeExplorerNodeProviderId', 'Unique id used to identify provider registered through vscode.workspace.registerTreeExplorerNodeProvider'),
+				type: 'string'
+			},
+			treeLabel: {
+				description: localize('vscode.extension.contributes.explorer.treeLabel', 'Human readable string used to render the custom tree viewlet'),
+				type: 'string'
+			},
+			icon: {
+				description: localize('vscode.extension.contributes.explorer.icon', 'Path to the viewlet icon on the activity bar'),
+				type: 'string'
+			}
+		}
+	};
+}
+
+ExtensionsRegistry.registerExtensionPoint<schema.IExplorer>('explorer', schema.explorerContribtion).setHandler(extensions => {
+	let baseOrder = 200; // Stock viewlet order goes up to 100
+	let descriptors = [];
+
+	for (let extension of extensions) {
+		const { treeExplorerNodeProviderId, treeLabel, icon } = extension.value;
+
+		const getIconRule = (iconPath) => { return `background-image: url('${iconPath}')`; };
+		if (icon) {
+			const iconClass = `.monaco-workbench > .activitybar .monaco-action-bar .action-label.${treeExplorerNodeProviderId}`;","You need styles for `.vs-dark` and `.hc-black` base themes as well
",2016-10-24 14:51:54
390,"@@ -0,0 +1,71 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { localize } from 'vs/nls';
+import { join } from 'vs/base/common/paths';
+import { createCSSRule } from 'vs/base/browser/dom';
+import { IJSONSchema } from 'vs/base/common/jsonSchema';
+import { ExtensionsRegistry } from 'vs/platform/extensions/common/extensionsRegistry';
+import { Registry } from 'vs/platform/platform';
+import { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor } from 'vs/workbench/browser/viewlet';
+import { VIEWLET_ID_ROOT } from 'vs/workbench/parts/explorers/common/treeExplorer';
+
+namespace schema {
+
+	export interface IExplorer {
+		treeExplorerNodeProviderId: string;
+		treeLabel: string;
+		icon: string;
+	}
+
+	export const explorerContribtion: IJSONSchema = {
+		description: localize('vscode.extension.contributes.explorer', ""Contributes custom tree explorer viewlet to the sidebar""),
+		type: 'object',
+		properties: {
+			treeExplorerNodeProviderId: {
+				description: localize('vscode.extension.contributes.explorer.treeExplorerNodeProviderId', 'Unique id used to identify provider registered through vscode.workspace.registerTreeExplorerNodeProvider'),
+				type: 'string'
+			},
+			treeLabel: {
+				description: localize('vscode.extension.contributes.explorer.treeLabel', 'Human readable string used to render the custom tree viewlet'),
+				type: 'string'
+			},
+			icon: {
+				description: localize('vscode.extension.contributes.explorer.icon', 'Path to the viewlet icon on the activity bar'),
+				type: 'string'
+			}
+		}
+	};
+}
+
+ExtensionsRegistry.registerExtensionPoint<schema.IExplorer>('explorer', schema.explorerContribtion).setHandler(extensions => {
+	let baseOrder = 200; // Stock viewlet order goes up to 100
+	let descriptors = [];
+
+	for (let extension of extensions) {
+		const { treeExplorerNodeProviderId, treeLabel, icon } = extension.value;
+
+		const getIconRule = (iconPath) => { return `background-image: url('${iconPath}')`; };
+		if (icon) {
+			const iconClass = `.monaco-workbench > .activitybar .monaco-action-bar .action-label.${treeExplorerNodeProviderId}`;
+			const iconPath = join(extension.description.extensionFolderPath, icon);
+			createCSSRule(iconClass, getIconRule(iconPath));
+			// Coerce the icon into a style similar to stock icons
+			createCSSRule(iconClass, '-webkit-filter: grayscale(1) invert(1)');","This one could be pulled into CSS as a general rule
",2016-10-24 14:51:43
478,"@@ -0,0 +1,72 @@
+/*---------------------------------------------------------------------------------------------","@Tyriar for performance reasons I think we need to add some buffer logic when processing the events. doing a backup on every keystroke is crazy. you should really measure how many model change events you get while typing to get a feeling on it.
",2016-11-09 07:50:19
498,"@@ -0,0 +1,73 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import URI from 'vs/base/common/uri';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+import { IWorkbenchContribution } from 'vs/workbench/common/contributions';
+import { IPartService } from 'vs/workbench/services/part/common/partService';
+import errors = require('vs/base/common/errors');
+import { IBackupService, IBackupFileService } from 'vs/workbench/services/backup/common/backup';
+import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';
+import { FileEditorInput } from 'vs/workbench/parts/files/common/files';
+
+// TODO@ben TODO@tyriar this should restore any backup that exists on disk and not rely
+// on the editors to be restored already in the stacks model. For that a method is needed
+// to get all backups that exist on disk.
+export class BackupRestorer implements IWorkbenchContribution {
+
+	public _serviceBrand: any;","Not needed
",2016-11-18 16:20:26
448,"@@ -0,0 +1,76 @@
+/*---------------------------------------------------------------------------------------------","@octref I find the naming of this service weird and hard to understand what it does. can we maybe rename it to something that better tells us what the purpose is? I see the name is `ITreeExplorerViewletService` but it gets contributed as `customViewletService` which seems weird. Mayb `IExtensionTreeService`? Afaik it seems only tree related but not viewlet related.
",2016-11-03 08:42:01
413,"@@ -0,0 +1,76 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { IInstantiationService, createDecorator } from 'vs/platform/instantiation/common/instantiation';
+import { InternalTreeExplorerNode, InternalTreeExplorerNodeProvider } from 'vs/workbench/parts/explorers/common/treeExplorerViewModel';
+import { IMessageService, Severity } from 'vs/platform/message/common/message';
+import Event, { Emitter } from 'vs/base/common/event';
+
+export const ITreeExplorerViewletService = createDecorator<ITreeExplorerViewletService>('customViewletService');
+
+export interface ITreeExplorerViewletService {
+	_serviceBrand: any;
+
+	onTreeExplorerNodeProviderRegistered: Event<String>;
+
+	registerTreeExplorerNodeProvider(providerId: string, provider: InternalTreeExplorerNodeProvider): void;
+	hasProvider(providerId: string): boolean;
+
+	provideRootNode(providerId: string): TPromise<InternalTreeExplorerNode>;
+	resolveChildren(providerId: string, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]>;
+	executeCommand(providerId: string, node: InternalTreeExplorerNode): TPromise<void>;
+}
+
+export class TreeExplorerViewletService implements ITreeExplorerViewletService {","Fill in access modifiers
",2016-10-24 15:53:38
948,"@@ -0,0 +1,82 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+import * as vscode from 'vscode';
+import { MergeConflictParser } from './mergeConflictParser';
+import * as interfaces from './interfaces';
+import { Delayer } from './delayer';
+
+export default class DocumentMergeConflictTracker implements vscode.Disposable, interfaces.IDocumentMergeConflictTracker {
+
+	private cache: Map<string, Delayer<interfaces.IDocumentMergeConflict[]>> = new Map();
+	private delayExpireTime: number = 150;
+
+	getConflicts(document: vscode.TextDocument): PromiseLike<interfaces.IDocumentMergeConflict[]> {
+		// Attempt from cache
+
+		let key = this.getCacheKey(document);
+
+		if (!key) {
+			// Document doesnt have a uri, can't cache it, so return
+			return Promise.resolve(this.getConflictsOrEmpty(document));
+		}
+
+		let cacheItem = this.cache.get(key);
+		if (!cacheItem) {
+			cacheItem = new Delayer<interfaces.IDocumentMergeConflict[]>(this.delayExpireTime);
+			this.cache.set(key, cacheItem);
+		}
+
+		return cacheItem.trigger(() => {
+			let conflicts = this.getConflictsOrEmpty(document);
+
+			if (this.cache) {
+				this.cache.delete(key!);
+			}
+
+			return conflicts;
+		});
+	}
+
+	forget(document: vscode.TextDocument) {
+		let key = this.getCacheKey(document);
+
+		if (key) {
+			this.cache.delete(key);
+		}
+	}
+
+	dispose() {
+		this.cache.clear();
+	}
+
+	private getConflictsOrEmpty(document: vscode.TextDocument): interfaces.IDocumentMergeConflict[] {
+		let stepStart = process.hrtime();",Skip or remove console output.,2017-05-23 18:17:54
313,"@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------------------------","So this guy is the one that manages all backups across all workspaces and the vs/platform/backup is the one per workspace for individual files?
",2016-10-13 15:02:20
310,"@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as fs from 'original-fs';
+import * as path from 'path';
+import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+
+export const IBackupService = createDecorator<IBackupService>('backupService');
+
+export interface IBackupService {
+	getBackupWorkspaces(): string[];
+	clearBackupWorkspaces(): void;
+	pushBackupWorkspaces(workspaces: string[]): void;","Not quite clear here what `workspaces` is about? Is this an identifier or absolute path?
",2016-10-13 14:55:53
308,"@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as fs from 'original-fs';
+import * as path from 'path';
+import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+
+export const IBackupService = createDecorator<IBackupService>('backupService');
+
+export interface IBackupService {
+	getBackupWorkspaces(): string[];
+	clearBackupWorkspaces(): void;
+	pushBackupWorkspaces(workspaces: string[]): void;
+	getBackupFiles(workspace: string): string[];
+}
+
+interface IBackupFormat {
+	folderWorkspaces?: {
+		[workspacePath: string]: string[]
+	};
+}
+
+export class BackupService implements IBackupService {
+
+	private filePath: string;
+	private fileContent: IBackupFormat;
+
+	constructor(
+		@IEnvironmentService private environmentService: IEnvironmentService
+	) {
+		this.filePath = path.join(environmentService.userDataPath, 'Backups', 'workspaces.json');","This should be a key inside environment service and not being constructed, or?
",2016-10-13 14:54:01
309,"@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import * as fs from 'original-fs';
+import * as path from 'path';
+import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';
+
+export const IBackupService = createDecorator<IBackupService>('backupService');
+
+export interface IBackupService {
+	getBackupWorkspaces(): string[];
+	clearBackupWorkspaces(): void;
+	pushBackupWorkspaces(workspaces: string[]): void;
+	getBackupFiles(workspace: string): string[];
+}
+
+interface IBackupFormat {
+	folderWorkspaces?: {
+		[workspacePath: string]: string[]
+	};
+}
+
+export class BackupService implements IBackupService {
+
+	private filePath: string;
+	private fileContent: IBackupFormat;
+
+	constructor(
+		@IEnvironmentService private environmentService: IEnvironmentService
+	) {
+		this.filePath = path.join(environmentService.userDataPath, 'Backups', 'workspaces.json');
+	}
+
+	public getBackupWorkspaces(): string[] {
+		if (!this.fileContent) {
+			this.load();
+		}
+		return Object.keys(this.fileContent.folderWorkspaces || {});
+	}
+
+	public clearBackupWorkspaces(): void {
+		this.fileContent = {
+			folderWorkspaces: {}","Just a personal preference to use `Object.create(null)` over `{}`
",2016-10-13 14:54:58
468,"@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import Uri from 'vs/base/common/uri';
+import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { ITextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textfiles';
+
+export const IBackupService = createDecorator<IBackupService>('backupService');
+export const IBackupFileService = createDecorator<IBackupFileService>('backupFileService');
+export const IBackupModelService = createDecorator<IBackupModelService>('backupModelService');
+
+/**
+ * A service that handles the lifecycle of backups, eg. listening for file changes and acting
+ * appropriately on shutdown.
+ */
+export interface IBackupService {
+	_serviceBrand: any;
+
+	isHotExitEnabled: boolean;
+	backupBeforeShutdown(dirtyToBackup: Uri[], textFileEditorModelManager: ITextFileEditorModelManager, quitRequested: boolean, confirmCallback: () => boolean | TPromise<boolean>): boolean | TPromise<boolean>;
+	cleanupBackupsBeforeShutdown(): boolean | TPromise<boolean>;
+
+	doBackup(resource: Uri, content: string, immediate?: boolean): TPromise<void>;
+}
+
+/**
+ * A service that handles any I/O and state associated with the backup system.
+ */
+export interface IBackupFileService {
+	_serviceBrand: any;
+
+	/**
+	 * Gets the set of active workspace backup paths being tracked for restoration.
+	 *
+	 * @return The set of active workspace backup paths being tracked for restoration.
+	 */
+	getWorkspaceBackupPaths(): TPromise<string[]>;
+
+	/**
+	 * Gets whether a text file has a backup to restore.
+	 *
+	 * @param resource The resource to check.
+	 * @returns Whether the file has a backup.
+	 */
+	doesTextFileHaveBackup(resource: Uri): TPromise<boolean>;","@Tyriar maybe `hasTextFileBackup`?
",2016-11-09 07:31:59
414,"@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Builder, Dimension } from 'vs/base/browser/builder';
+import { Orientation } from 'vs/base/browser/ui/splitview/splitview';
+import { IAction } from 'vs/base/common/actions';
+import { IViewletView, Viewlet } from 'vs/workbench/browser/viewlet';
+import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
+import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
+import { TreeExplorerView } from 'vs/workbench/parts/explorers/browser/views/treeExplorerView';
+import { TreeExplorerViewletState } from 'vs/workbench/parts/explorers/browser/views/treeExplorerViewer';
+import { IActivityService } from 'vs/workbench/services/activity/common/activityService';
+import { VIEWLET_ID_ROOT } from 'vs/workbench/parts/explorers/common/treeExplorer';
+
+export class TreeExplorerViewlet extends Viewlet {","Fill in access modifiers
",2016-10-24 15:54:01
449,"@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Builder, Dimension } from 'vs/base/browser/builder';
+import { Orientation } from 'vs/base/browser/ui/splitview/splitview';
+import { IAction } from 'vs/base/common/actions';
+import { IViewletView, Viewlet } from 'vs/workbench/browser/viewlet';
+import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
+import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
+import { TreeExplorerView } from 'vs/workbench/parts/explorers/browser/views/treeExplorerView';
+import { TreeExplorerViewletState } from 'vs/workbench/parts/explorers/browser/views/treeExplorerViewer';
+import { IActivityService } from 'vs/workbench/services/activity/common/activityService';
+import { VIEWLET_ID_ROOT } from 'vs/workbench/parts/explorers/common/treeExplorer';
+
+export class TreeExplorerViewlet extends Viewlet {
+	private static _idCounter = 1;
+
+	private viewletContainer: Builder;
+	private view: IViewletView;
+
+	private viewletState: TreeExplorerViewletState;
+
+	private externalViewletId: string;
+	private treeNodeProviderId: string;
+
+	constructor(
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IInstantiationService private instantiationService: IInstantiationService,
+		@IActivityService private activityService: IActivityService
+	) {
+		super(VIEWLET_ID_ROOT + TreeExplorerViewlet._idCounter, telemetryService);","@octref this is very confusing and fragile. the viewlet ID is now suddenly something dynamic and not static? and then you get an external ID from somewhere and return it from `getId()`? All of this has to change :-/
",2016-11-03 08:44:11
412,"@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { Builder, Dimension } from 'vs/base/browser/builder';
+import { Orientation } from 'vs/base/browser/ui/splitview/splitview';
+import { IAction } from 'vs/base/common/actions';
+import { IViewletView, Viewlet } from 'vs/workbench/browser/viewlet';
+import { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';
+import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
+import { TreeExplorerView } from 'vs/workbench/parts/explorers/browser/views/treeExplorerView';
+import { TreeExplorerViewletState } from 'vs/workbench/parts/explorers/browser/views/treeExplorerViewer';
+import { IActivityService } from 'vs/workbench/services/activity/common/activityService';
+import { VIEWLET_ID_ROOT } from 'vs/workbench/parts/explorers/common/treeExplorer';
+
+export class TreeExplorerViewlet extends Viewlet {
+	private static _idCounter = 1;
+
+	private viewletContainer: Builder;
+	private view: IViewletView;
+
+	private viewletState: TreeExplorerViewletState;
+
+	private externalViewletId: string;
+	private treeNodeProviderId: string;
+
+	constructor(
+		@ITelemetryService telemetryService: ITelemetryService,
+		@IInstantiationService private instantiationService: IInstantiationService,
+		@IActivityService private activityService: IActivityService
+	) {
+		super(VIEWLET_ID_ROOT + TreeExplorerViewlet._idCounter, telemetryService);
+
+		this.viewletState = new TreeExplorerViewletState();
+
+		this.externalViewletId = this.activityService.getExternalViewletIdToOpen();
+		this.treeNodeProviderId = this.getTreeProviderName(this.externalViewletId);
+
+		TreeExplorerViewlet._idCounter++;
+	}
+
+	getId(): string {
+		return this.externalViewletId;
+	}
+
+	create(parent: Builder): TPromise<void> {
+		super.create(parent);
+
+		this.viewletContainer = parent.div().addClass('custom-tree-explorer-viewlet');","I don't think this class is used.
",2016-10-24 15:52:14
768,"@@ -0,0 +1,89 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';","We no longer 'use strict', this is simply ignored",2017-02-21 10:53:26
769,"@@ -0,0 +1,89 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import nls = require('vs/nls');
+import Filters = require('vs/base/common/filters');
+import { TPromise } from 'vs/base/common/winjs.base';
+import Quickopen = require('vs/workbench/browser/quickopen');
+import QuickOpen = require('vs/base/parts/quickopen/common/quickOpen');
+import Model = require('vs/base/parts/quickopen/browser/quickOpenModel');
+import { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';
+import { IDebugService } from 'vs/workbench/parts/debug/common/debug';
+import * as errors from 'vs/base/common/errors';
+
+class DebugEntry extends Model.QuickOpenEntry {
+	private debugService: IDebugService;",Get rid of this privates,2017-02-21 10:54:01
770,"@@ -0,0 +1,89 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import nls = require('vs/nls');
+import Filters = require('vs/base/common/filters');
+import { TPromise } from 'vs/base/common/winjs.base';
+import Quickopen = require('vs/workbench/browser/quickopen');
+import QuickOpen = require('vs/base/parts/quickopen/common/quickOpen');
+import Model = require('vs/base/parts/quickopen/browser/quickOpenModel');
+import { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';
+import { IDebugService } from 'vs/workbench/parts/debug/common/debug';
+import * as errors from 'vs/base/common/errors';
+
+class DebugEntry extends Model.QuickOpenEntry {
+	private debugService: IDebugService;
+	private configurationName: string;
+
+	constructor(debugService: IDebugService, config: string, highlights: Model.IHighlight[] = []) {
+		super(highlights);
+		this.debugService = debugService;
+		this.configurationName = config;
+	}
+
+	public getLabel(): string {
+		return this.configurationName;
+	}
+
+	public getAriaLabel(): string {
+		return nls.localize('entryAriaLabel', ""{0}, debug"", this.getLabel());
+	}
+
+	public run(mode: QuickOpen.Mode, context: Model.IContext): boolean {
+		if (mode === QuickOpen.Mode.PREVIEW) {
+			return false;
+		}
+		// Run selected debug configuration
+		this.debugService.createProcess(this.configurationName).done(undefined, errors.onUnexpectedError);",Do it the other way around,2017-02-21 10:54:26
771,"@@ -0,0 +1,89 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import nls = require('vs/nls');
+import Filters = require('vs/base/common/filters');
+import { TPromise } from 'vs/base/common/winjs.base';
+import Quickopen = require('vs/workbench/browser/quickopen');
+import QuickOpen = require('vs/base/parts/quickopen/common/quickOpen');
+import Model = require('vs/base/parts/quickopen/browser/quickOpenModel');
+import { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';
+import { IDebugService } from 'vs/workbench/parts/debug/common/debug';
+import * as errors from 'vs/base/common/errors';
+
+class DebugEntry extends Model.QuickOpenEntry {
+	private debugService: IDebugService;
+	private configurationName: string;
+
+	constructor(debugService: IDebugService, config: string, highlights: Model.IHighlight[] = []) {
+		super(highlights);
+		this.debugService = debugService;
+		this.configurationName = config;
+	}
+
+	public getLabel(): string {
+		return this.configurationName;
+	}
+
+	public getAriaLabel(): string {
+		return nls.localize('entryAriaLabel', ""{0}, debug"", this.getLabel());
+	}
+
+	public run(mode: QuickOpen.Mode, context: Model.IContext): boolean {
+		if (mode === QuickOpen.Mode.PREVIEW) {
+			return false;
+		}
+		// Run selected debug configuration
+		this.debugService.createProcess(this.configurationName).done(undefined, errors.onUnexpectedError);
+		this.debugService.getViewModel().setSelectedConfigurationName(this.configurationName);
+
+		return true;
+	}
+}
+
+export class QuickOpenHandler extends Quickopen.QuickOpenHandler {
+
+	private debugService: IDebugService;
+	private quickOpenService: IQuickOpenService;
+
+	constructor(
+		@IQuickOpenService quickOpenService: IQuickOpenService,
+		@IDebugService debugService: IDebugService
+	) {
+		super();
+
+		this.quickOpenService = quickOpenService;
+		this.debugService = debugService;
+	}
+
+	public getAriaLabel(): string {
+		return nls.localize('debugAriaLabel', ""Type a name of a launch configuration to run."");
+	}
+
+	public getResults(input: string): TPromise<Model.QuickOpenModel> {
+		const configurationNames = this.debugService.getConfigurationManager().getConfigurationNames()
+			.sort((a, b) => a.localeCompare(b))",Do not sort,2017-02-21 10:55:25
764,"@@ -0,0 +1,89 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import nls = require('vs/nls');
+import Filters = require('vs/base/common/filters');
+import { TPromise } from 'vs/base/common/winjs.base';
+import Quickopen = require('vs/workbench/browser/quickopen');
+import QuickOpen = require('vs/base/parts/quickopen/common/quickOpen');
+import Model = require('vs/base/parts/quickopen/browser/quickOpenModel');
+import { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';
+import { IDebugService } from 'vs/workbench/parts/debug/common/debug';
+import * as errors from 'vs/base/common/errors';
+
+class DebugEntry extends Model.QuickOpenEntry {
+	private debugService: IDebugService;
+	private configurationName: string;
+
+	constructor(debugService: IDebugService, config: string, highlights: Model.IHighlight[] = []) {
+		super(highlights);
+		this.debugService = debugService;
+		this.configurationName = config;
+	}
+
+	public getLabel(): string {
+		return this.configurationName;
+	}
+
+	public getAriaLabel(): string {
+		return nls.localize('entryAriaLabel', ""{0}, debug"", this.getLabel());
+	}
+
+	public run(mode: QuickOpen.Mode, context: Model.IContext): boolean {
+		if (mode === QuickOpen.Mode.PREVIEW) {
+			return false;
+		}
+		// Run selected debug configuration
+		this.debugService.createProcess(this.configurationName).done(undefined, errors.onUnexpectedError);
+		this.debugService.getViewModel().setSelectedConfigurationName(this.configurationName);
+
+		return true;
+	}
+}
+
+export class QuickOpenHandler extends Quickopen.QuickOpenHandler {
+
+	private debugService: IDebugService;
+	private quickOpenService: IQuickOpenService;
+
+	constructor(
+		@IQuickOpenService quickOpenService: IQuickOpenService,
+		@IDebugService debugService: IDebugService
+	) {
+		super();
+
+		this.quickOpenService = quickOpenService;
+		this.debugService = debugService;
+	}
+
+	public getAriaLabel(): string {
+		return nls.localize('debugAriaLabel', ""Type a name of a launch configuration to run."");
+	}
+
+	public getResults(input: string): TPromise<Model.QuickOpenModel> {
+		const configurationNames = this.debugService.getConfigurationManager().getConfigurationNames()
+			.sort((a, b) => a.localeCompare(b))
+			.map(config => ({ config: config, highlights: Filters.matchesContiguousSubString(input, config) }))
+			.filter(({ highlights }) => !!highlights)
+			.map(({ config, highlights }) => new DebugEntry(this.debugService, config, highlights));
+
+		return TPromise.as(new Model.QuickOpenModel(configurationNames));
+	}
+
+	public getAutoFocus(input: string): QuickOpen.IAutoFocus {
+		return {
+			autoFocusFirstEntry: !!input
+		};
+	}
+
+	public getEmptyLabel(searchString: string): string {
+		if (searchString.length > 0) {
+			return nls.localize('noConfigurationsMatching', ""No debug configurations matching"");
+		}
+
+		return nls.localize('noConfigurationsFound', ""No debug configurations found"");",Update label to also contain '. Please create a 'launch.json' file.',2017-02-21 10:47:53
950,"@@ -0,0 +1,9 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+/// <reference path='../../../../src/vs/vscode.d.ts'/>
+/// <reference path='../../../../src/vs/vscode.proposed.d.ts'/>","Not needed, I believe. Remove to clarify.",2017-05-23 18:19:44
22,"@@ -0,0 +1,9 @@
+[Desktop Entry]
+Type=Application
+Encoding=UTF-8
+Name=Visual Studio Code
+Comment=Code Editing. Redefined. Build and debug modern web and cloud applications.
+Exec=code","The `Exec` property depends on the symlink made by the installation script. I have hardcoded the script (`install.py`) in a way that the symlink will always be called `code`.
",2015-12-08 19:26:42
845,"@@ -0,0 +1,95 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import nls = require('vs/nls');
+import { Registry } from 'vs/platform/platform';
+import { Action } from 'vs/base/common/actions';
+import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';
+import { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actionRegistry';
+import { IPartService, Parts } from 'vs/workbench/services/part/common/partService';
+import { KeyMod, KeyCode } from 'vs/base/common/keyCodes';
+
+const RESIZE_INCREMENT = 50;
+
+export class ExpandViewAction extends Action {
+
+	public static ID = 'workbench.action.expandView';
+	public static LABEL = nls.localize('expandView', ""Expand Current View"");","I suggest to name this differently, e.g. ""Increase Current View Size"" and `workbench.action.increaseViewSize`",2017-03-22 13:25:37
846,"@@ -0,0 +1,95 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import nls = require('vs/nls');
+import { Registry } from 'vs/platform/platform';
+import { Action } from 'vs/base/common/actions';
+import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';
+import { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actionRegistry';
+import { IPartService, Parts } from 'vs/workbench/services/part/common/partService';
+import { KeyMod, KeyCode } from 'vs/base/common/keyCodes';
+
+const RESIZE_INCREMENT = 50;
+
+export class ExpandViewAction extends Action {
+
+	public static ID = 'workbench.action.expandView';
+	public static LABEL = nls.localize('expandView', ""Expand Current View"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IPartService private partService: IPartService,
+
+	) {
+		super(id, label);
+
+		this.enabled = !!this.partService;
+	}
+
+	public run(): TPromise<any> {
+
+		const isEditorFocus = this.partService.hasFocus(Parts.EDITOR_PART);",This logic should be extracted into a base class and shared across both actions.,2017-03-22 13:26:11
832,"@@ -0,0 +1,95 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import nls = require('vs/nls');
+import { Registry } from 'vs/platform/platform';
+import { Action } from 'vs/base/common/actions';
+import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';
+import { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actionRegistry';
+import { IPartService, Parts } from 'vs/workbench/services/part/common/partService';
+import { KeyMod, KeyCode } from 'vs/base/common/keyCodes';
+
+const RESIZE_INCREMENT = 50;
+
+export class ExpandViewAction extends Action {
+
+	public static ID = 'workbench.action.expandView';
+	public static LABEL = nls.localize('expandView', ""Expand Current View"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IPartService private partService: IPartService,
+
+	) {
+		super(id, label);
+
+		this.enabled = !!this.partService;
+	}
+
+	public run(): TPromise<any> {
+
+		const isEditorFocus = this.partService.hasFocus(Parts.EDITOR_PART);
+		const isSidebarFocus = this.partService.hasFocus(Parts.SIDEBAR_PART);
+		const isPanelFocus = this.partService.hasFocus(Parts.PANEL_PART);
+
+		if (isSidebarFocus) {
+			return this.partService.resizePart(Parts.SIDEBAR_PART, RESIZE_INCREMENT);
+		}
+		else if (isPanelFocus) {
+			return this.partService.resizePart(Parts.PANEL_PART, RESIZE_INCREMENT);
+		}
+		else if (isEditorFocus) {
+			// console.log('editor f1ocus');
+			return this.partService.resizePart(Parts.EDITOR_PART, RESIZE_INCREMENT);
+		}
+		return TPromise.as(false);
+	}
+}
+
+export class ContractViewAction extends Action {",It seems to me that a lot of the code in ```ContractViewAction``` looks the same with ```ExpandViewAction``` except for the increment value which could be abstracted to a ```BaseResizeViewAction``` and an argument ```INCREMENT_DIRECTION``` (probably 1 or -1) could be passed down.,2017-03-20 00:05:45
847,"@@ -0,0 +1,95 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import nls = require('vs/nls');
+import { Registry } from 'vs/platform/platform';
+import { Action } from 'vs/base/common/actions';
+import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';
+import { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actionRegistry';
+import { IPartService, Parts } from 'vs/workbench/services/part/common/partService';
+import { KeyMod, KeyCode } from 'vs/base/common/keyCodes';
+
+const RESIZE_INCREMENT = 50;
+
+export class ExpandViewAction extends Action {
+
+	public static ID = 'workbench.action.expandView';
+	public static LABEL = nls.localize('expandView', ""Expand Current View"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IPartService private partService: IPartService,
+
+	) {
+		super(id, label);
+
+		this.enabled = !!this.partService;
+	}
+
+	public run(): TPromise<any> {
+
+		const isEditorFocus = this.partService.hasFocus(Parts.EDITOR_PART);
+		const isSidebarFocus = this.partService.hasFocus(Parts.SIDEBAR_PART);
+		const isPanelFocus = this.partService.hasFocus(Parts.PANEL_PART);
+
+		if (isSidebarFocus) {
+			return this.partService.resizePart(Parts.SIDEBAR_PART, RESIZE_INCREMENT);
+		}
+		else if (isPanelFocus) {
+			return this.partService.resizePart(Parts.PANEL_PART, RESIZE_INCREMENT);
+		}
+		else if (isEditorFocus) {
+			// console.log('editor f1ocus');
+			return this.partService.resizePart(Parts.EDITOR_PART, RESIZE_INCREMENT);
+		}
+		return TPromise.as(false);
+	}
+}
+
+export class ContractViewAction extends Action {
+
+	public static ID = 'workbench.action.contractView';
+	public static LABEL = nls.localize('contractView', ""Contract Current View"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IPartService private partService: IPartService,
+
+	) {
+		super(id, label);
+
+		this.enabled = !!this.partService;
+	}
+
+	public run(): TPromise<any> {
+
+		const isEditorFocus = this.partService.hasFocus(Parts.EDITOR_PART);
+		const isPanelFocus = this.partService.hasFocus(Parts.PANEL_PART);
+		const isSidebarFocus = this.partService.hasFocus(Parts.SIDEBAR_PART);
+
+		// we ask but layout may not deliver, if limits silently ignore
+
+		if (isSidebarFocus) {
+			return this.partService.resizePart(Parts.SIDEBAR_PART, -RESIZE_INCREMENT);
+		}
+		else if (isPanelFocus) {
+			return this.partService.resizePart(Parts.PANEL_PART, -RESIZE_INCREMENT);
+		}
+		else if (isEditorFocus) {
+			return this.partService.resizePart(Parts.EDITOR_PART, -RESIZE_INCREMENT);
+		}
+		return TPromise.as(false);
+	}
+}
+
+// probably won't have default key bindings, set up for easy test...
+
+const registry = Registry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions);
+registry.registerWorkbenchAction(new SyncActionDescriptor(ExpandViewAction, ExpandViewAction.ID, ExpandViewAction.LABEL, { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_B }), 'View: Expand View', nls.localize('view', ""View""));",Are these keybindings just for testing?,2017-03-22 13:26:42
612,"@@ -0,0 +1,95 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+import { TPromise } from 'vs/base/common/winjs.base';
+import { IRequestOptions, IRequestContext, IRequestFunction } from 'vs/base/node/request';
+import { Readable } from 'stream';
+import { RequestService as NodeRequestService } from 'vs/platform/request/node/requestService';
+
+/**
+ * This service exposes the `request` API, while using the global
+ * or configured proxy settings.
+ */
+export class RequestService extends NodeRequestService {
+	request(options: IRequestOptions): TPromise<IRequestContext> {
+		return super.request(options, xhrRequest);
+	}
+}
+
+class ArryBufferStream extends Readable {",nit: Don't you mean ArrAyBufferStream?,2016-12-14 22:38:17
745,"@@ -0,0 +1,97 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import 'vs/css!./dnd';
+import { IDisposable, dispose } from 'vs/base/common/lifecycle';
+import { ICodeEditor, IEditorMouseEvent } from 'vs/editor/browser/editorBrowser';
+import { editorContribution } from 'vs/editor/browser/editorBrowserExtensions';
+import * as editorCommon from 'vs/editor/common/editorCommon';
+import { Position } from 'vs/editor/common/core/position';
+import { Selection } from 'vs/editor/common/core/selection';
+import { DragTargetHintWidget } from './dndHintWidget';
+import { DragAndDropCommand } from '../common/dragAndDropCommand';
+
+@editorContribution
+export class DragAndDropController implements editorCommon.IEditorContribution {
+
+	private static ID = 'editor.contrib.dragAndDrop';
+
+	private _editor: ICodeEditor;
+	private _toUnhook: IDisposable[];
+	private _targetWidget: DragTargetHintWidget;
+	private _active: boolean;
+	private _dragSelection: Selection;
+
+	static get(editor: editorCommon.ICommonCodeEditor): DragAndDropController {
+		return editor.getContribution<DragAndDropController>(DragAndDropController.ID);
+	}
+
+	constructor(editor: ICodeEditor) {
+		this._editor = editor;
+		this._toUnhook = [];
+		this._toUnhook.push(this._editor.onMouseDrag((e: IEditorMouseEvent) => this._onEditorMouseDrag(e)));
+		this._toUnhook.push(this._editor.onMouseDrop((e: IEditorMouseEvent) => this._onEditorMouseDrop(e)));
+		this._targetWidget = new DragTargetHintWidget(editor);
+		this._active = false;
+	}
+
+	private _onEditorMouseDrag(mouseEvent: IEditorMouseEvent): void {
+		let target = mouseEvent.target;
+
+		if (this._active) {
+			this._targetWidget.showAt(target.position);
+		} else {
+			let possibleSelections = this._editor.getSelections().filter(selection => selection.containsPosition(target.position));
+
+			if (possibleSelections.length === 1) {
+				this._active = true;
+				this._dragSelection = possibleSelections[0];
+				this._targetWidget.showAt(target.position);
+			}
+		}
+	}
+
+	private _onEditorMouseDrop(mouseEvent: IEditorMouseEvent): void {
+		let targetPosition = mouseEvent.target.position;","perhaps first thing to do is to check if the mouse went outside the editor. For now, we can consider that a cancel and not do anything...",2017-02-20 11:29:17
746,"@@ -0,0 +1,97 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import 'vs/css!./dnd';
+import { IDisposable, dispose } from 'vs/base/common/lifecycle';
+import { ICodeEditor, IEditorMouseEvent } from 'vs/editor/browser/editorBrowser';
+import { editorContribution } from 'vs/editor/browser/editorBrowserExtensions';
+import * as editorCommon from 'vs/editor/common/editorCommon';
+import { Position } from 'vs/editor/common/core/position';
+import { Selection } from 'vs/editor/common/core/selection';
+import { DragTargetHintWidget } from './dndHintWidget';
+import { DragAndDropCommand } from '../common/dragAndDropCommand';
+
+@editorContribution
+export class DragAndDropController implements editorCommon.IEditorContribution {
+
+	private static ID = 'editor.contrib.dragAndDrop';
+
+	private _editor: ICodeEditor;
+	private _toUnhook: IDisposable[];
+	private _targetWidget: DragTargetHintWidget;
+	private _active: boolean;
+	private _dragSelection: Selection;
+
+	static get(editor: editorCommon.ICommonCodeEditor): DragAndDropController {
+		return editor.getContribution<DragAndDropController>(DragAndDropController.ID);
+	}
+
+	constructor(editor: ICodeEditor) {
+		this._editor = editor;
+		this._toUnhook = [];
+		this._toUnhook.push(this._editor.onMouseDrag((e: IEditorMouseEvent) => this._onEditorMouseDrag(e)));
+		this._toUnhook.push(this._editor.onMouseDrop((e: IEditorMouseEvent) => this._onEditorMouseDrop(e)));
+		this._targetWidget = new DragTargetHintWidget(editor);
+		this._active = false;
+	}
+
+	private _onEditorMouseDrag(mouseEvent: IEditorMouseEvent): void {
+		let target = mouseEvent.target;
+
+		if (this._active) {
+			this._targetWidget.showAt(target.position);
+		} else {
+			let possibleSelections = this._editor.getSelections().filter(selection => selection.containsPosition(target.position));
+
+			if (possibleSelections.length === 1) {
+				this._active = true;
+				this._dragSelection = possibleSelections[0];
+				this._targetWidget.showAt(target.position);
+			}
+		}
+	}
+
+	private _onEditorMouseDrop(mouseEvent: IEditorMouseEvent): void {
+		let targetPosition = mouseEvent.target.position;
+
+		if (targetPosition) {
+			let newCursorPosition = new Position(targetPosition.lineNumber, targetPosition.column);
+
+			if (this._dragSelection.containsPosition(newCursorPosition)) {
+				let newSelections = this._editor.getSelections().map(selection => {",this code can be simplified once we guard in the mouseHandler to only begin dnd if the editor has precisely one selection,2017-02-20 11:31:14
747,"@@ -0,0 +1,97 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+'use strict';
+
+import 'vs/css!./dnd';
+import { IDisposable, dispose } from 'vs/base/common/lifecycle';
+import { ICodeEditor, IEditorMouseEvent } from 'vs/editor/browser/editorBrowser';
+import { editorContribution } from 'vs/editor/browser/editorBrowserExtensions';
+import * as editorCommon from 'vs/editor/common/editorCommon';
+import { Position } from 'vs/editor/common/core/position';
+import { Selection } from 'vs/editor/common/core/selection';
+import { DragTargetHintWidget } from './dndHintWidget';
+import { DragAndDropCommand } from '../common/dragAndDropCommand';
+
+@editorContribution
+export class DragAndDropController implements editorCommon.IEditorContribution {
+
+	private static ID = 'editor.contrib.dragAndDrop';
+
+	private _editor: ICodeEditor;
+	private _toUnhook: IDisposable[];
+	private _targetWidget: DragTargetHintWidget;
+	private _active: boolean;
+	private _dragSelection: Selection;
+
+	static get(editor: editorCommon.ICommonCodeEditor): DragAndDropController {
+		return editor.getContribution<DragAndDropController>(DragAndDropController.ID);
+	}
+
+	constructor(editor: ICodeEditor) {
+		this._editor = editor;
+		this._toUnhook = [];
+		this._toUnhook.push(this._editor.onMouseDrag((e: IEditorMouseEvent) => this._onEditorMouseDrag(e)));
+		this._toUnhook.push(this._editor.onMouseDrop((e: IEditorMouseEvent) => this._onEditorMouseDrop(e)));
+		this._targetWidget = new DragTargetHintWidget(editor);
+		this._active = false;
+	}
+
+	private _onEditorMouseDrag(mouseEvent: IEditorMouseEvent): void {
+		let target = mouseEvent.target;
+
+		if (this._active) {
+			this._targetWidget.showAt(target.position);
+		} else {
+			let possibleSelections = this._editor.getSelections().filter(selection => selection.containsPosition(target.position));
+
+			if (possibleSelections.length === 1) {
+				this._active = true;
+				this._dragSelection = possibleSelections[0];
+				this._targetWidget.showAt(target.position);
+			}
+		}
+	}
+
+	private _onEditorMouseDrop(mouseEvent: IEditorMouseEvent): void {
+		let targetPosition = mouseEvent.target.position;
+
+		if (targetPosition) {
+			let newCursorPosition = new Position(targetPosition.lineNumber, targetPosition.column);
+
+			if (this._dragSelection.containsPosition(newCursorPosition)) {
+				let newSelections = this._editor.getSelections().map(selection => {
+					if (selection.equalsSelection(this._dragSelection)) {
+						return new Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);
+					} else {
+						return selection;
+					}
+				});
+				this._editor.setSelections(newSelections);
+			} else {
+				this._editor.executeCommand(DragAndDropController.ID, new DragAndDropCommand(this._dragSelection, newCursorPosition));
+			}
+		}
+
+		this._hideWidgets();",a single widget => `_hideWidget`,2017-02-20 11:31:40
4,"@@ -1,101 +1,104 @@
 {
-	""name"": ""csharp-o"",","why is this just whitespace changes?
",2015-11-20 11:59:20
782,"@@ -1,2 +1,2 @@
-import * as Proto from '../node_modules/typescript/lib/protocol';
+import * as Proto from '../../node_modules/typescript/lib/protocol';",Use `import * as Proto from 'typescript/lib/protocol';` instead to avoid the path dependency,2017-03-01 08:26:04
972,"@@ -1,20 +1,23 @@
-# Visual Studio Code - Open Source
+# Code - Open Source
 
 [![Build Status](https://travis-ci.org/Microsoft/vscode.svg?branch=master)](https://travis-ci.org/Microsoft/vscode)
 [![Build Status](https://ci.appveyor.com/api/projects/status/vuhlhg80tj3e2a0l/branch/master?svg=true)](https://ci.appveyor.com/project/VSCode/vscode)
 [![Coverage Status](https://img.shields.io/coveralls/Microsoft/vscode/master.svg)](https://coveralls.io/github/Microsoft/vscode?branch=master)
 [![Gitter](https://img.shields.io/badge/chat-on%20gitter-blue.svg)](https://gitter.im/Microsoft/vscode)
 
-[VS Code](https://code.visualstudio.com) is a new type of tool that combines the simplicity of
+Code is a new type of tool that combines the simplicity of
 a code editor with what developers need for their core edit-build-debug cycle. Code
 provides comprehensive editing and debugging support, an extensibility model, and lightweight integration with existing tools.
 
-VS Code is updated monthly with new features and bug fixes. You can download it for Windows, Mac and Linux on [VS Code's website](https://code.visualstudio.com/Download). To get the latest releases everyday, you can install the [Insiders version of VS Code](https://code.visualstudio.com/insiders). This builds from the master branch and is updated at least daily.
-
 <p align=""center"">
   <img alt=""VS Code in action"" src=""https://cloud.githubusercontent.com/assets/11839736/16642200/6624dde0-43bd-11e6-8595-c81885ba0dc2.png"">
 </p>
 
+Code is updated monthly with new features and bug fixes.
+You can download sources of released versions from [GitHub Releases](https://github.com/Microsoft/vscode/releases).
+Building binaries for Windows, OS X and Linux [instructions](https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run-from-source)",Using Mac instead of OS X?,2017-06-14 17:58:17
257,"@@ -1,5 +1,5 @@
 {
-	""name"": ""MagicRegExp"",
+	""name"": ""Python"",","This one should say something else -- that's a syntax for Python regexps. The name isn't that important, it can be ""Regular Expressions (Python)""
",2016-08-23 01:18:20
151,"@@ -1,6 +1,6 @@
 {
 	""account"": ""monacobuild"",
 	""container"": ""debuggers"",
-	""zip"": ""624d700/node-debug.zip"",
+	""zip"": ""3c7ed19/node-debug.zip"",","Is this change related to 3077?
",2016-05-20 08:18:55
704,"@@ -1,6 +1,7 @@
 ﻿{
-	""configuration.validate.enable"": ""Whether php validation is enabled or not."",
-	""configuration.validate.executablePath"": ""Points to the php executable."",
+	""configuration.builtInCompletions.enable"": ""Enable/disable built-in PHP completions."",
+	""configuration.validate.enable"": ""Enable/disable built-in PHP validation."",
+	""configuration.validate.executablePath"": ""Points to the PHP executable."",","Do we have a strategy for aliasing settings names? e.g. php.validate.enable is somewhat ambiguous, but it's also already in use.",2017-01-23 06:37:26
787,"@@ -10,6 +10,7 @@
 	""insertSpaceAfterFunctionKeywordForAnonymousFunctions"": true,
 	""insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"": false,
 	""insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"": false,
+	""insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"": true,",I'm inclined to leave this file alone for now since it is used for the VSCode codebase itself. Any specific reasons for adding this setting here?,2017-03-02 05:24:46
327,"@@ -100,14 +100,17 @@ export class GitStatusbarItem implements IStatusbarItem {
 
 	private onGitServiceChange(): void {
 		const model = this.gitService.getModel();
+		const ps1 = model.getPS1();
+		const tags = model.getRefs().filter(iref => iref.commit.substr(0,8) === ps1);","You should use `model.getHEAD().commit` to compare with `iref.commit`.
",2016-10-14 13:23:34
328,"@@ -100,14 +100,17 @@ export class GitStatusbarItem implements IStatusbarItem {
 
 	private onGitServiceChange(): void {
 		const model = this.gitService.getModel();
+		const ps1 = model.getPS1();
+		const tags = model.getRefs().filter(iref => iref.commit.substr(0,8) === ps1);
+		const name = tags.length > 0 ? tags[0].name : model.getPS1();","This breaks the `+*!` symbols in front of branches, since whenever a branch is checked out, `model.getPS1` is never called.
",2016-10-14 13:24:05
889,"@@ -100,18 +133,35 @@ export class TerminalLinkHandler {
 
 	protected get _localLinkRegex(): RegExp {
 		if (this._platform === platform.Platform.Windows) {
-			return WINDOWS_LOCAL_LINK_REGEX;
+			return this._winLocalLinkPattern;
 		}
-		return UNIX_LIKE_LOCAL_LINK_REGEX;
+		return this._unixLocalLinkPattern;
 	}
 
 	private _handleLocalLink(link: string): TPromise<void> {
 		return this._resolvePath(link).then(resolvedLink => {
 			if (!resolvedLink) {
 				return void 0;
 			}
-			const resource = Uri.file(path.normalize(path.resolve(resolvedLink)));
-			return this._editorService.openEditor({ resource }).then(() => void 0);
+
+			let normalizedPath = path.normalize(path.resolve(resolvedLink));","Can this be pulled into a `formatLocalLinkPath` or similar named function that returns a URI in form `<path>#line,col`?",2017-04-17 17:47:23
885,"@@ -100,18 +133,35 @@ export class TerminalLinkHandler {
 
 	protected get _localLinkRegex(): RegExp {
 		if (this._platform === platform.Platform.Windows) {
-			return WINDOWS_LOCAL_LINK_REGEX;
+			return this._winLocalLinkPattern;
 		}
-		return UNIX_LIKE_LOCAL_LINK_REGEX;
+		return this._unixLocalLinkPattern;
 	}
 
 	private _handleLocalLink(link: string): TPromise<void> {
 		return this._resolvePath(link).then(resolvedLink => {
 			if (!resolvedLink) {
 				return void 0;
 			}
-			const resource = Uri.file(path.normalize(path.resolve(resolvedLink)));
-			return this._editorService.openEditor({ resource }).then(() => void 0);
+
+			let normalizedPath = path.normalize(path.resolve(resolvedLink));
+			const normalizedUrl = this.extractLinkUrl(normalizedPath);
+
+			const lineColumnInfo: LineColumnInfo = this.extractLineColumnInfo(normalizedPath);
+			if (lineColumnInfo.lineNumber) {
+				normalizedPath += `#${lineColumnInfo.lineNumber}`;
+
+				if (lineColumnInfo.columnNumber) {
+					normalizedPath += `,${lineColumnInfo.columnNumber}`;
+				}
+			}
+
+			let resource = Uri.file(normalizedUrl);
+			resource = resource.with({
+				fragment: Uri.parse(normalizedPath).fragment
+			});
+
+			return this._openerService.open(resource);",Does `this._editorService.openEditor` ignore the line/col?,2017-04-17 17:39:38
710,"@@ -100,19 +100,15 @@ class CodeLensAdapter {
 }
 
 class DefinitionAdapter {
-
-	private _documents: ExtHostDocuments;
-	private _provider: vscode.DefinitionProvider;
-
-	constructor(documents: ExtHostDocuments, provider: vscode.DefinitionProvider) {
-		this._documents = documents;
-		this._provider = provider;
-	}
+	constructor(
+		private documents: ExtHostDocuments,
+		private provider: vscode.DefinitionProvider)
+	{ }",restore previous coding style,2017-02-02 07:59:12
662,"@@ -100,3 +100,16 @@ CommandsRegistry.registerCommand('_workbench.previewHtml', function (accessor: S
 		.openEditor(input, { pinned: true }, position)
 		.then(editor => true);
 });
+
+CommandsRegistry.registerCommand('_workbench.htmlPreview.postMessage', (accessor: ServicesAccessor, resource: URI | string, message: any) => {
+	const uri = resource instanceof URI ? resource : URI.parse(resource);
+	const activePreview = accessor.get(IWorkbenchEditorService).getVisibleEditors()
+		.filter(c => c instanceof HtmlPreviewPart)
+		.map(e => e as HtmlPreviewPart)
+		.filter(e => e.model.uri.scheme == uri.scheme && e.model.uri.path === uri.path);
+	if (activePreview.length) {",You may want to highlight in the description or doc that only the first visible matched htmlPreview document can get the message.,2017-01-12 05:01:32
804,"@@ -100,6 +100,15 @@ suite('workspace-namespace', () => {
 		});
 	});
 
+	test('openTextDocument, untitled without path but language ID and contents', function () {
+		return workspace.openTextDocument({ language: 'html', contents: '<h1>Hello world!</h1>' }).then(doc => {","singular, `content`?",2017-03-07 08:20:17
160,"@@ -101,11 +98,19 @@ export class TerminalPanel extends Panel {
 	) {
 		super(TERMINAL_PANEL_ID, telemetryService);
 		this.toDispose = [];
+		configurationService.onDidUpdateConfiguration(()=>{
+			this.applyFont();","If #6456 gets done, this should reuse the the `onDidUpdateConfiguration` that's being merged into master soon https://github.com/Microsoft/vscode/pull/6985/commits/3fde03980baf7d33d14c36dce623ad1c89470d93
",2016-05-28 20:56:50
83,"@@ -101,7 +102,8 @@ class ExtHostApiCommands {
 			description: 'Execute completion item provider.',
 			args: [
 				{ name: 'uri', description: 'Uri of a text document', constraint: URI },
-				{ name: 'position', description: 'Position in a text document', constraint: types.Position }
+				{ name: 'position', description: 'Position in a text document', constraint: types.Position },
+				{ name: 'triggerCharacter', description: 'Trigger completion when the user types the character, like `,` or `(`', constraint: String }
 			],","as above
",2016-03-22 10:58:58
879,"@@ -102,11 +104,16 @@ export class MainThreadEditors extends MainThreadEditorsShape {
 
 	// --- from extension host process
 
-	$tryShowTextDocument(resource: URI, position: EditorPosition, preserveFocus: boolean): TPromise<string> {
+	$tryShowTextDocument(resource: URI, options: vscode.ShowTextDocumentOptions): TPromise<string> {
+		const position: EditorPosition = TypeConverters.fromViewColumn(options.column);","@jrieken I moved some of the data massaging into here, so that it could take the same `ShowTextDocumentOptions` (since I think you can technically call the proxy methods from inside an extension).",2017-04-13 18:55:05
155,"@@ -102,6 +102,7 @@ export class Symbol {
 export class ScopeBuilder implements nodes.IVisitor {","Thinking about this again, I think we should put all css variables always in the global scope (along with the local scope). That way intellisense will show all variables.
That simplifies the code a bit and we get rid of the _isRootSelectorNode, which is not confusing and not correct when sass and less variables are found.
",2016-05-20 10:20:17
932,"@@ -1020,6 +1063,30 @@ export class ShowWorkspaceRecommendedExtensionsAction extends Action {
 	}
 }
 
+export class InstallWorkspaceRecommendedExtensionsAction extends Action {
+
+	static ID = 'workbench.extensions.action.installWorkspaceRecommendedExtensions';
+	static LABEL = localize('installWorkspaceRecommendedExtensions', ""Install Workspace Recommended Extensions"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkspaceContextService contextService: IWorkspaceContextService,
+		@IViewletService private viewletService: IViewletService,
+		@IExtensionsWorkbenchService private extensionsWorkbenchService: IExtensionsWorkbenchService",Remove unused services,2017-05-12 09:15:41
928,"@@ -1020,6 +1063,30 @@ export class ShowWorkspaceRecommendedExtensionsAction extends Action {
 	}
 }
 
+export class InstallWorkspaceRecommendedExtensionsAction extends Action {
+
+	static ID = 'workbench.extensions.action.installWorkspaceRecommendedExtensions';
+	static LABEL = localize('installWorkspaceRecommendedExtensions', ""Install Workspace Recommended Extensions"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkspaceContextService contextService: IWorkspaceContextService,
+		@IViewletService private viewletService: IViewletService,
+		@IExtensionsWorkbenchService private extensionsWorkbenchService: IExtensionsWorkbenchService
+	) {
+		super(id, label, null, contextService.hasWorkspace());
+	}
+
+	run(): TPromise<void> {
+		return this.extensionsWorkbenchService.installAllWorkspaceRecommendations();
+	}
+
+	protected isEnabled(): boolean {
+		return true;",It should not be enabled if there are no recommendations or all recommended extensions are already installed and also if there is a workspace or not,2017-05-12 09:05:15
722,"@@ -1023,6 +1026,21 @@ export class WindowsManager implements IWindowsMainService {
 		return res && res[0];
 	}
 
+	private findBestWindow(context: OpenContext, filePaths: IPath[]): VSCodeWindow {
+		const findContainer = context === OpenContext.DESKTOP || context === OpenContext.CLI;
+		return findContainer && this.findContainingWindow(filePaths) || this.getLastActiveWindow();","I find it hard to understand the precedence logic here without paranthesis, suggest to rewrite to:

`return (findContainer && this.findContainingWindow(filePaths)) || this.getLastActiveWindow();`",2017-02-07 06:26:45
283,"@@ -103,22 +118,31 @@ export class LineNumbersOverlay extends DynamicViewOverlay {
 		let visibleStartLineNumber = ctx.visibleRange.startLineNumber;
 		let visibleEndLineNumber = ctx.visibleRange.endLineNumber;
 		let common = '<div class=""' + ClassNames.LINE_NUMBERS + lineHeightClassName + '"" style=""left:' + this._lineNumbersLeft.toString() + 'px;width:' + this._lineNumbersWidth.toString() + 'px;height:' + lineHeight + 'px;"">';
+		let commonLeft = '<div class=""' + ClassNames.LINE_NUMBERS + lineHeightClassName + '"" style=""text-align:left;left:' + this._lineNumbersLeft.toString() + 'px;width:' + this._lineNumbersWidth.toString() + 'px;height:' + lineHeight + 'px;"">';
 
 		let output: string[] = [];
 		for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {
 			let lineIndex = lineNumber - visibleStartLineNumber;
+			let position = this._context.model.convertViewPositionToModelPosition(lineNumber, 1);
+			let relativeLineNumber = position.lineNumber;
+
+			if (position.column === 1) {
+				if (this._relativeLineNumbers) {","The test `if (this._relativeLineNumbers)` should be the first thing done here before doing any position conversions. All the new rendering code should go in this `if`. All the old rendering code should be maintained in an `else` branch. As it looks right now, regular line number rendering appears to be broken.
",2016-09-21 06:15:57
222,"@@ -103,7 +115,15 @@ export class OpenAnythingHandler extends QuickOpenHandler {
 		// Check Cache first
 		let cachedResults = this.getResultsFromCache(searchValue, searchWithRange ? searchWithRange.range : null);
 		if (cachedResults) {
-			return TPromise.as(new QuickOpenModel(cachedResults));
+			timerEvent.data = <ITimerEventData>{","I find quite some similarities to the ITimerEventData further below in the file, can we extract a method and use it in both places to construct the ITimerEventData?
",2016-07-14 17:37:34
258,"@@ -104,6 +104,49 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 		return this.domNode;
 	}
 
+	private getHoveredExpression(lineContent: string, range: Range) : Range {","Please rename this to better represent what is specific about this method
",2016-08-24 14:10:19
245,"@@ -104,6 +104,49 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 		return this.domNode;
 	}
 
+	private getHoveredExpression(lineContent: string, range: Range) : Range {
+		let matchingExpression = undefined;
+		let startOffset = 0;
+
+		// Some example supported expressions: myVar.prop, a.b.c.d, myVar?.prop, myVar->prop, MyClass::StaticProp, *myVar
+		// Match any character except a set of characters which often break interesting sub-expressions
+		let expression: RegExp = /([^()\[\]{}<>\s+\-/%~#^;=|,`!]|\->)+/g;","doesn't this filter out template/generic types? For instance, in C++, an expression like this should be valid:
CSeafood<Squid>::Swim  where CSeafood is a template instance with template parameter Squid. 
",2016-08-02 00:31:44
243,"@@ -104,6 +104,49 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 		return this.domNode;
 	}
 
+	private getHoveredExpression(lineContent: string, range: Range) : Range {
+		let matchingExpression = undefined;
+		let startOffset = 0;
+
+		// Some example supported expressions: myVar.prop, a.b.c.d, myVar?.prop, myVar->prop, MyClass::StaticProp, *myVar
+		// Match any character except a set of characters which often break interesting sub-expressions
+		let expression: RegExp = /([^()\[\]{}<>\s+\-/%~#^;=|,`!]|\->)+/g;
+		let result = undefined;
+
+		// First find the full expression under the cursor
+		while (result = expression.exec(lineContent)) {
+			let start = result.index + 1;
+			let end = start + result[0].length;
+
+			if (start <= range.startColumn && end >= range.endColumn) {","does this ignore expressions that are split across lines? Do we care?
",2016-08-02 00:16:09
244,"@@ -104,6 +104,49 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 		return this.domNode;
 	}
 
+	private getHoveredExpression(lineContent: string, range: Range) : Range {
+		let matchingExpression = undefined;
+		let startOffset = 0;
+
+		// Some example supported expressions: myVar.prop, a.b.c.d, myVar?.prop, myVar->prop, MyClass::StaticProp, *myVar
+		// Match any character except a set of characters which often break interesting sub-expressions
+		let expression: RegExp = /([^()\[\]{}<>\s+\-/%~#^;=|,`!]|\->)+/g;
+		let result = undefined;
+
+		// First find the full expression under the cursor
+		while (result = expression.exec(lineContent)) {
+			let start = result.index + 1;
+			let end = start + result[0].length;
+
+			if (start <= range.startColumn && end >= range.endColumn) {
+				matchingExpression = result[0];
+				startOffset = start;
+				break;
+			}
+		}
+
+		// If there are non-word characters after the cursor, we want to truncate the expression then.
+		// For example in expression 'a.b.c.d', if the focus was under 'b', 'a.b' would be evaluated.
+		if (matchingExpression) {
+			let subExpression: RegExp = /\w+/g;","This is a good example of why the proper solution long-term is to let the extension handle tokenization. The identifier `x'` is normally invalid in languages, but is a [valid identifier in Haskell](https://www.haskell.org/onlinereport/lexemes.html#sect2.4).
",2016-08-02 00:18:03
818,"@@ -105,6 +105,11 @@ configurationRegistry.registerConfiguration({
 			'type': 'number',
 			'default': 1.2
 		},
+		'terminal.integrated.fontWeight': {
+			'type': 'string',
+			'description': nls.localize('terminal.integrated.fontWeight', ""Customizes font weight in terminal.""),","This needs to be something like `enableBold` like how gnome-terminal does it, otherwise this setting will override the terminal's regular bold/normal formatting with what's in this setting.

The logic should then be added as an event listener on the `IConfigurationService` so it's picked up when the setting is changed, something like this:

```
set class name 'disable-bold' if `enableBold` setting is not set
```

I use `disable-bold` as the class name here because enableBold will be the standard.",2017-03-12 01:54:49
315,"@@ -105,6 +105,27 @@ export interface IFileService {
 	del(resource: URI, useTrash?: boolean): TPromise<void>;
 
 	/**
+	 * Backs up the provided file to a temporary directory to be used by the hot
+	 * exit feature and crash recovery.
+	 */
+	backupFile(resource: URI, content: string): TPromise<IFileStat>;","I think all of this should move into textfile.ts (ITextFileService) because in here we talk about all files but for hot exit we only care about text files.
",2016-10-13 15:04:10
102,"@@ -105,6 +105,8 @@ export interface IWorkingFilesModel {
 	removeEntry(entry: IWorkingFileEntry): IWorkingFileEntry;
 	removeEntry(arg1: IWorkingFileEntry | URI): IWorkingFileEntry;
 
+	restoreRecentlyRemovedEntry(): IWorkingFileEntry;","Rather something like ""getLastClosedEntry()""
",2016-04-09 14:42:22
817,"@@ -106,6 +106,67 @@ export class SplitEditorAction extends Action {
 	}
 }
 
+export class JoinTwoGroupsAction extends Action {
+
+	public static ID = 'workbench.action.joinTwoGroups';
+	public static LABEL = nls.localize('joinTwoGroups', ""Join Editors of Two Groups"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IEditorGroupService private editorGroupService: IEditorGroupService
+	) {
+		super(id, label);
+	}
+
+	public run(context?: IEditorContext): TPromise<any> {
+
+		const editorStacksModel = this.editorGroupService.getStacksModel();
+
+		// Return if has no other group to join to
+		if (editorStacksModel.groups.length <= 1) {
+			return TPromise.as(true);
+		}
+
+		let fromPosition: number;
+		let toPosition: number;
+
+		// Joining group is from context, or the active group
+		if (context) {
+			fromPosition = editorStacksModel.positionOfGroup(context.group);
+		} else {
+			fromPosition = editorStacksModel.positionOfGroup(editorStacksModel.activeGroup);
+		}
+
+		// Target group is next group if joining from position one, otherwise it is the previous group
+		if (fromPosition === Position.ONE) {
+			toPosition = fromPosition + 1;
+		} else {
+			toPosition = fromPosition - 1;
+		}
+
+		const fromGroup = editorStacksModel.groupAt(fromPosition);
+		const toGroup = editorStacksModel.groupAt(toPosition);
+
+		const activeEditor = fromGroup.activeEditor;
+		const fromGroupEditors = fromGroup.getEditors();
+		const fromGroupTotalCount = fromGroupEditors.length;
+
+		// If an editor exists in both groups, only the editor in the joining group is kept
+		if (toPosition < fromPosition) {","We still need to improve this: Now we start to move editors from the group to another group starting with the first editor of that group, going to the last. This is bad when the first editor of the group is also the active editor because after each editor is moved, the group will show the next editor as active.

As such, please first move all the inactive editors of the group and only at last the active editor. This will again prevent many unwanted editor change events being fired. ",2017-03-11 13:56:12
812,"@@ -106,6 +106,71 @@ export class SplitEditorAction extends Action {
 	}
 }
 
+export class JoinEditorsAction extends Action {
+
+	public static ID = 'workbench.action.joinEditors';
+	public static LABEL = nls.localize('joinEditors', ""Join Editors"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IEditorGroupService private editorGroupService: IEditorGroupService
+	) {
+		super(id, label, 'join-editors-action');","You do not need the CSS class here unless it would show up as icon, so I suggest to remove it.",2017-03-10 14:23:57
813,"@@ -106,6 +106,71 @@ export class SplitEditorAction extends Action {
 	}
 }
 
+export class JoinEditorsAction extends Action {
+
+	public static ID = 'workbench.action.joinEditors';
+	public static LABEL = nls.localize('joinEditors', ""Join Editors"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IEditorGroupService private editorGroupService: IEditorGroupService
+	) {
+		super(id, label, 'join-editors-action');
+	}
+
+	public run(context?: IEditorContext): TPromise<any> {
+		let editorToJoin: IEditor;","It looks like you only need `position` and `input` from the `IEditor`. If so, I suggest to completley bypass the `editorService` API and do all of this from the `stacks model` that provides all you need (`inputs`, `groups`, a way to convert from a `group` to a `position`) from `editor group service` (there is a bit of overlap for historic reasons).

The `stacks model` is really the truth of what is going up in the 1-3 `editor groups` and you should be able to do everything with it. The more heavy `IEditor` is the actual instance of control that hosts inputs.",2017-03-10 14:26:16
814,"@@ -106,6 +106,71 @@ export class SplitEditorAction extends Action {
 	}
 }
 
+export class JoinEditorsAction extends Action {
+
+	public static ID = 'workbench.action.joinEditors';
+	public static LABEL = nls.localize('joinEditors', ""Join Editors"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IEditorGroupService private editorGroupService: IEditorGroupService
+	) {
+		super(id, label, 'join-editors-action');
+	}
+
+	public run(context?: IEditorContext): TPromise<any> {
+		let editorToJoin: IEditor;
+		if (context) {
+			editorToJoin = this.editorService.getVisibleEditors()[this.editorGroupService.getStacksModel().positionOfGroup(context.group)];
+		} else {
+			editorToJoin = this.editorService.getActiveEditor();
+		}
+
+		// Return if no editor to join
+		if (!editorToJoin) {
+			return TPromise.as(true);
+		}
+
+		const visibleEditors = this.editorService.getVisibleEditors();
+
+		// Return if has no other group to join to
+		if (visibleEditors.length <= 1) {
+			return TPromise.as(true);
+		}
+
+		const toJoinPosition = editorToJoin.position;
+		let targetPosition: number;
+
+		// Join to next group if is position one, otherwise join to previous group
+		if (toJoinPosition === Position.ONE) {
+			targetPosition = toJoinPosition + 1;
+		} else {
+			targetPosition = toJoinPosition - 1;
+		}
+
+		const toJoinEditorInput = editorToJoin.input;
+		const toJoinGroup = this.editorGroupService.getStacksModel().groupAt(toJoinPosition);
+		const targetGroup = this.editorGroupService.getStacksModel().groupAt(targetPosition);
+
+		const toJoinEditors = toJoinGroup.getEditors();
+		const toJoinEditorsTotalCount = toJoinEditors.length;
+
+		// If an editor exists in joining group and target group, only the editor in the joining group is kept.
+		if (targetPosition < toJoinPosition) {
+			toJoinEditors.forEach(e => this.editorGroupService.moveEditor(e, toJoinPosition, targetPosition, targetGroup.count));",This is a bit crazy to do because for each editor that gets moved it will be opened in the target group causing an editor switch. It would be much smoother if the move would happen with the editors opening `inactive` on the target group and only the last one would actually be `active`. There is an option that can be set when opening an editor called `inactive` that I think we should wire into the moveEditor call so that we can optimize for this (for the `openEditor` call [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/parts/editor/editorPart.ts#L866)).,2017-03-10 14:35:04
816,"@@ -106,9 +106,10 @@ export interface IEditorGroupService {
 
 	/**
 	 * Moves an editor from one group to another. The index in the group is optional.
+	 * The inactive option is applied when moving across groups.
 	 */
-	moveEditor(input: IEditorInput, from: IEditorGroup, to: IEditorGroup, index?: number): void;
-	moveEditor(input: IEditorInput, from: Position, to: Position, index?: number): void;
+	moveEditor(input: IEditorInput, from: IEditorGroup, to: IEditorGroup, index?: number, inactive?: boolean): void;",`IMoveOptions`,2017-03-11 07:14:32
132,"@@ -107,11 +128,19 @@ try {
 	console.error(err);
 }
 
-// Set path according to being built or not
+// If root user, use a root-owned directory for user data
+var configDir = path.join(process.env.HOME, product.dataFolderName);","Are you really sure this is a solid cross platform way of finding out the users home directory? What if it is not defined? Please see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/env.ts#L98 how we get it.
",2016-04-21 08:54:56
123,"@@ -107,11 +128,19 @@ try {
 	console.error(err);
 }
 
-// Set path according to being built or not
+// If root user, use a root-owned directory for user data
+var configDir = path.join(process.env.HOME, product.dataFolderName);
 if (process.env.VSCODE_DEV) {
-	var appData = app.getPath('appData');
-	app.setPath('userData', path.join(appData, 'Code-Development'));
+	configDir += '-dev';","Do we need this actually? We already have this: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/env.ts#L79
",2016-04-21 08:43:02
124,"@@ -107,11 +128,19 @@ try {
 	console.error(err);
 }
 
-// Set path according to being built or not
+// If root user, use a root-owned directory for user data
+var configDir = path.join(process.env.HOME, product.dataFolderName);
 if (process.env.VSCODE_DEV) {
-	var appData = app.getPath('appData');
-	app.setPath('userData', path.join(appData, 'Code-Development'));
+	configDir += '-dev';
 }
+var userDataDir = path.join(configDir, 'user-data');","Suggest to make this use really no special characters and reflect what it stores. maybe just ""userdata""? it contains all kind of Chromium stuff...
",2016-04-21 08:43:55
131,"@@ -107,11 +128,19 @@ try {
 	console.error(err);
 }
 
-// Set path according to being built or not
+// If root user, use a root-owned directory for user data
+var configDir = path.join(process.env.HOME, product.dataFolderName);
 if (process.env.VSCODE_DEV) {
-	var appData = app.getPath('appData');
-	app.setPath('userData', path.join(appData, 'Code-Development'));
+	configDir += '-dev';
 }
+var userDataDir = path.join(configDir, 'user-data');
+
+// Attempt migrations if userDataDir does not exist
+if (!fs.existsSync(userDataDir)) {","What if the userdata dir exists but is a file and not a folder?
",2016-04-21 08:51:39
125,"@@ -107,11 +128,19 @@ try {
 	console.error(err);
 }
 
-// Set path according to being built or not
+// If root user, use a root-owned directory for user data
+var configDir = path.join(process.env.HOME, product.dataFolderName);
 if (process.env.VSCODE_DEV) {
-	var appData = app.getPath('appData');
-	app.setPath('userData', path.join(appData, 'Code-Development'));
+	configDir += '-dev';
 }
+var userDataDir = path.join(configDir, 'user-data');
+
+// Attempt migrations if userDataDir does not exist
+if (!fs.existsSync(userDataDir)) {
+	migrateUserDataDir(userDataDir);","Would this not mean we could potentially migrate the user folder from normal user to root? I would think we should not migrate for root...
",2016-04-21 08:44:39
169,"@@ -107,4 +166,18 @@ export class TerminalConfigHelper {
 		}
 		return config.terminal.integrated.shell.linux;
 	}
+
+	private toInteger(source:any, minimum?:number, maximum?:number): number {","Spaces after `:` for consistency
",2016-06-02 06:59:53
793,"@@ -107,6 +107,11 @@ configurationRegistry.registerConfiguration({
 			'default': 'right',
 			'description': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorOpenPositioning' }, ""Controls where editors open. Select 'left' or 'right' to open editors to the left or right of the current active one. Select 'first' or 'last' to open editors independently from the currently active one."")
 		},
+		'workbench.editor.reuseIfOpen': {","The name and description reads a bit weird, maybe this should be called `revealIfOpen`? Because the editor is not reused if opened, it is being revealed. That also aligns with the `revealIfVisible` option.

Description idea: 

> Controls if an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group. ",2017-03-03 10:52:26
480,"@@ -108,27 +110,29 @@ export abstract class TextFileService implements ITextFileService {
 		this.toUnbind.push(this.editorGroupService.onEditorsChanged(() => this.onEditorFocusChanged()));
 	}
 
-	private beforeShutdown(): boolean | TPromise<boolean> {
+	private beforeShutdown(quitRequested: boolean): boolean | TPromise<boolean> {","@Tyriar can you explain again why the backup service cannot participate in the shutdown and do its work there?
",2016-11-09 07:57:58
681,"@@ -108,6 +108,17 @@ declare module 'vscode' {
 		getClickCommand?(node: T): string;
 	}
 
+	export interface TextEditor {
+		/**
+		 * Enters snippet mode in the editor with the specified snippet.
+		 *
+		 * @param snippet The snippet to insert in this edit.
+		 * @param options The undo/redo behaviour around this edit. By default, undo stops will be created before and after this edit.
+		 */
+		edit(snippet: SnippetString, options?: { undoStopBefore: boolean; undoStopAfter: boolean; }): void;
+
+	}",It is enough to have it `vscode.d.ts` only. Duplication not needed,2017-01-18 10:33:55
288,"@@ -108,7 +108,7 @@ class Extension implements IExtension {
 			return this.local.changelogUrl;
 		}
 
-		return ''; // Hopefully we will change this once the gallery will support that.
+		return this.gallery && this.gallery.assets.changelog;","This was the wrong place. You should do it in the `hasChangelog` and `getChangelog`. While you're at it, just delete the `readmeUrl` and `changelogUrl`; the former was an old implementation which I forgot to delete.
",2016-09-22 15:31:50
233,"@@ -1092,7 +1093,8 @@ export class Cursor extends EventEmitter {
 				postOperationRunnable: null,
 				shouldPushStackElementBefore: false,
 				shouldPushStackElementAfter: false,
-				requestScrollDeltaLines: 0
+				requestScrollDeltaLines: 0,
+				eventData: ctx.eventData","Why? Please decode the arguments before invoking for each cursor. If there are 1000 cursors it makes no sense to pass the data to each cursor to have it parsed and decoded 1000 times.
",2016-07-15 11:23:12
333,"@@ -11,6 +11,10 @@
 	display: flex;
 }
 
+.monaco-workbench.mac.use-inline-toolbar > .part > .composite.title {","This is bad, it is causing me to drag the window when I drag the title of the output panel for example.
",2016-10-15 06:20:38
263,"@@ -11,6 +11,8 @@ if (env.isLinux) {
 		defaultTerminalLinux = 'x-terminal-emulator';
 	} else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {
 		defaultTerminalLinux = 'gnome-terminal';
+	} else if (process.env.DESKTOP_SESSION === 'kde-plasma') {","Is plasma a version or something? If so can this be made more generic?
",2016-09-02 19:45:58
264,"@@ -11,6 +11,8 @@ if (env.isLinux) {
 		defaultTerminalLinux = 'x-terminal-emulator';
 	} else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {
 		defaultTerminalLinux = 'gnome-terminal';
+	} else if (process.env.DESKTOP_SESSION === 'kde-plasma') {
+		defaultTerminalLinux = 'konsole';","Is there some environment variable that houses this? `konsole` is the default terminal for this distribution, correct?
",2016-09-02 19:46:19
147,"@@ -11,7 +11,7 @@ import ConfigurationRegistry = require('vs/platform/configuration/common/configu
 
 ModesRegistry.registerCompatMode({
 	id: 'html',
-	extensions: ['.html', '.htm', '.shtml', '.mdoc', '.jsp', '.asp', '.aspx', '.jshtm'],","Is it a problem that .xhtml isn't here?
",2016-05-12 16:06:35
912,"@@ -11,9 +11,11 @@ import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
 import { IContextViewService } from 'vs/platform/contextview/browser/contextView';",looks good,2017-05-05 09:46:55
346,"@@ -1103,20 +1111,7 @@ export class EditorHistoryEntry extends EditorQuickOpenEntry {
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
-			const sideBySide = !context.quickNavigateConfiguration && context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
-			const pinned = !this.configurationService.getConfiguration<IWorkbenchEditorConfiguration>().workbench.editor.enablePreviewFromQuickOpen;
-
-			if (this.input instanceof EditorInput) {
-				this.editorService.openEditor(this.input, { pinned }, sideBySide).done(null, errors.onUnexpectedError);
-			} else {
-				this.editorService.openEditor({ resource: (this.input as IResourceInput).resource, options: { pinned: true } }, sideBySide);","can you tell me why `pinned` was forced to `true` for a `IResourceInput` here?
",2016-10-19 22:19:47
345,"@@ -1103,20 +1111,7 @@ export class EditorHistoryEntry extends EditorQuickOpenEntry {
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
-			const sideBySide = !context.quickNavigateConfiguration && context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
-			const pinned = !this.configurationService.getConfiguration<IWorkbenchEditorConfiguration>().workbench.editor.enablePreviewFromQuickOpen;
-
-			if (this.input instanceof EditorInput) {
-				this.editorService.openEditor(this.input, { pinned }, sideBySide).done(null, errors.onUnexpectedError);
-			} else {
-				this.editorService.openEditor({ resource: (this.input as IResourceInput).resource, options: { pinned: true } }, sideBySide);
-			}
-
-			return true;
-		}
-
-		return false;
+		return super.run(mode, context);","I moved all this out per https://github.com/Microsoft/vscode/pull/13909/commits/06187520ed3a0f3afc41cc04e5b66133b1954773 
",2016-10-19 22:19:10
875,"@@ -1109,7 +1110,10 @@ export class Workbench implements IPartService {
 			this.setPanelHidden(true, true).done(undefined, errors.onUnexpectedError);
 			this.setSideBarHidden(true, true).done(undefined, errors.onUnexpectedError);
 
-			this.setActivityBarHidden(true, true);
+			this.setActivityBarHidden(false, false);","This line is not needed. `this.setActivityBarHidden(false, false);`
If the setting is not `true` we simply should not do anything
",2017-04-11 13:45:20
694,"@@ -111,6 +111,11 @@ export interface IOutputChannel {
 	output: string;
 
 	/**
+	 * Returns the value indicating whether the channel has scroll locked.
+	 */
+	hasScrollLock: boolean;","I would rename this to `scrollLock`, as `outputChannel.hasScrollLock = false` sounds strange to me",2017-01-19 10:00:52
855,"@@ -1114,6 +1115,26 @@ export class ReopenClosedEditorAction extends Action {
 	}
 }
 
+export class ClearRecentItemsAction extends Action {
+
+	public static ID = 'workbench.action.clearRecentItems';
+	public static LABEL = nls.localize('clearRecentItems', ""Clear Recent"");",`Clear Recent Files` maybe?,2017-03-23 14:06:14
351,"@@ -1115,6 +1115,9 @@ export class EditorHistoryEntry extends EditorQuickOpenEntry {
 
 			return true;
 		}
+		else if (mode === Mode.OPEN_IN_BACKGROUND) {","I think we could always just `return super.run(mode, context)` here because the parent class does not handle `PREVIEW` anyway. 
",2016-10-20 14:13:33
89,"@@ -112,17 +117,8 @@ export class Sash extends EventEmitter {
 		this.$e.addClass('active');
 		this.emit('start', startEvent);
 
-		let overlayDiv = $('div').style({
-			position: 'absolute',
-			top: 0,
-			left: 0,
-			width: '100%',
-			height: '100%',
-			zIndex: 1000000,
-			cursor: this.orientation === Orientation.VERTICAL ? 'ew-resize' : 'ns-resize'
-		});
-
 		let $window = $(window);","Can you explain why the changes in sash are needed?
",2016-03-30 05:24:20
240,"@@ -112,26 +112,67 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 			return;
 		}
 
-		// string magic to get the parents of the variable (a and b for a.b.foo)
 		const lineContent = model.getLineContent(pos.lineNumber);
-		const namesToFind = lineContent.substring(0, lineContent.indexOf('.' + hoveringOver))
-			.split('.').map(word => word.trim()).filter(word => !!word);
-		namesToFind.push(hoveringOver);
-		namesToFind[0] = namesToFind[0].substring(namesToFind[0].lastIndexOf(' ') + 1);
+		const session = this.debugService.getActiveSession();
+		let evaluatedExpression : TPromise<Expression> = undefined;
+		let matchingExpression: string = undefined;
+		let startOffset: number = 0;
+		if (session.configuration.capabilities.supportsEvaluateForHovers) {
+			let expression: RegExp = /([^()\[\]{}<>\s+\-/%~#^;=|,`!]|\->)+/g;","I would suggest adding some comments indicating what this code is doing. Something like:

Line 121:
// If the debug adapter supports evaluation-based-hover, we need to try and guess what the expression under the mouse cursor is. Someday it might be nice if the language service could somehow provide this. But this code attempts to approximate the answer for a variety of languages. Some example supported expressions: myVar.prop, a.b.c.d, myVar?.prop, myVar->prop, MyClass::StaticProp, *myVar

Reg ex explanation
// Match any character _except_ a set of characters which often break interesting sub-expressions

Line 124 comment:
// First find the full expression under the cursor

Line 135 comment:
// If there are non-word characters after the cursor, we want to truncate the expression then.
",2016-07-26 23:45:44
241,"@@ -112,26 +112,67 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 			return;
 		}
 
-		// string magic to get the parents of the variable (a and b for a.b.foo)
 		const lineContent = model.getLineContent(pos.lineNumber);
-		const namesToFind = lineContent.substring(0, lineContent.indexOf('.' + hoveringOver))
-			.split('.').map(word => word.trim()).filter(word => !!word);
-		namesToFind.push(hoveringOver);
-		namesToFind[0] = namesToFind[0].substring(namesToFind[0].lastIndexOf(' ') + 1);
+		const session = this.debugService.getActiveSession();
+		let evaluatedExpression : TPromise<Expression> = undefined;
+		let matchingExpression: string = undefined;
+		let startOffset: number = 0;
+		if (session.configuration.capabilities.supportsEvaluateForHovers) {
+			let expression: RegExp = /([^()\[\]{}<>\s+\-/%~#^;=|,`!]|\->)+/g;
+			let result: RegExpExecArray = undefined;
+
+			while (result = expression.exec(lineContent)) {
+				let start = result.index + 1;
+				let end = start + result[0].length;
+
+				if (start <= range.startColumn && end >= range.endColumn) {
+					matchingExpression = result[0];
+					startOffset = start;
+					break;
+				}
+			}
 
-		return this.getExpression(namesToFind).then(expression => {
+			if (matchingExpression) {
+				let subExpression: RegExp = /\w+/g;
+				let subExpressionResult: RegExpExecArray = undefined;
+				while (subExpressionResult = subExpression.exec(matchingExpression)) {
+					let subStart = subExpressionResult.index + 1 + startOffset;
+					let subEnd = subStart + subExpressionResult[0].length;
+					if (subStart <= range.startColumn && subEnd >= range.endColumn) {","Does the `subStart <= range.startColumn` part of the expression make sense since we are only going to trim the end?
",2016-07-26 23:52:39
242,"@@ -112,27 +112,75 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 			return;
 		}
 
-		// string magic to get the parents of the variable (a and b for a.b.foo)
+		const session = this.debugService.getActiveSession();
+		const canEvaluateForHovers: boolean = session.configuration.capabilities.supportsEvaluateForHovers;
+
 		const lineContent = model.getLineContent(pos.lineNumber);
-		const namesToFind = lineContent.substring(0, lineContent.indexOf('.' + hoveringOver))
-			.split('.').map(word => word.trim()).filter(word => !!word);
-		namesToFind.push(hoveringOver);
-		namesToFind[0] = namesToFind[0].substring(namesToFind[0].lastIndexOf(' ') + 1);
+		let evaluatedExpression : TPromise<Expression> = undefined;
+		let matchingExpression: string = undefined;
+		let startOffset: number = 0;
+		if (canEvaluateForHovers) {
+			// If the debug adapter supports evaluation-based-hover, we need to try and guess what the expression under the mouse cursor is.
+			// Someday it might be nice if the language service could somehow provide this.
+			// But this code attempts to approximate the answer for a variety of languages.
+			// Some example supported expressions: myVar.prop, a.b.c.d, myVar?.prop, myVar->prop, MyClass::StaticProp, *myVar
+
+			// Match any character except a set of characters which often break interesting sub-expressions
+			let expression: RegExp = /([^()\[\]{}<>\s+\-/%~#^;=|,`!]|\->)+/g;","does it make sense to use a tokenizer? There should be language specific techniques
",2016-07-27 15:19:05
259,"@@ -112,27 +155,41 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 			return;
 		}
 
-		// string magic to get the parents of the variable (a and b for a.b.foo)
+		const session = this.debugService.getActiveSession();
+		const canEvaluateForHovers: boolean = session.configuration.capabilities.supportsEvaluateForHovers;","Remove type
",2016-08-24 14:11:20
260,"@@ -112,27 +155,41 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 			return;
 		}
 
-		// string magic to get the parents of the variable (a and b for a.b.foo)
+		const session = this.debugService.getActiveSession();
+		const canEvaluateForHovers: boolean = session.configuration.capabilities.supportsEvaluateForHovers;
+
 		const lineContent = model.getLineContent(pos.lineNumber);
-		const namesToFind = lineContent.substring(0, lineContent.indexOf('.' + hoveringOver))
-			.split('.').map(word => word.trim()).filter(word => !!word);
-		namesToFind.push(hoveringOver);
-		namesToFind[0] = namesToFind[0].substring(namesToFind[0].lastIndexOf(' ') + 1);
+		let evaluatedExpression = undefined;
+		let matchingExpression = undefined;
+		let startOffset = 0;
+
+		if (canEvaluateForHovers) {
+			let expressionRange = this.getHoveredExpression(lineContent, range);
+			startOffset = expressionRange.startColumn;
+			let matchingExpression = lineContent.substring(expressionRange.startColumn - 1, expressionRange.endColumn);
+			evaluatedExpression = this.getExpressionSupportingEvaluate(session, matchingExpression);
+		}
+		else {","move to previous line, this is not our else formating style
",2016-08-24 14:11:38
262,"@@ -112,27 +155,41 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 			return;
 		}
 
-		// string magic to get the parents of the variable (a and b for a.b.foo)
+		const session = this.debugService.getActiveSession();
+		const canEvaluateForHovers: boolean = session.configuration.capabilities.supportsEvaluateForHovers;
+
 		const lineContent = model.getLineContent(pos.lineNumber);
-		const namesToFind = lineContent.substring(0, lineContent.indexOf('.' + hoveringOver))
-			.split('.').map(word => word.trim()).filter(word => !!word);
-		namesToFind.push(hoveringOver);
-		namesToFind[0] = namesToFind[0].substring(namesToFind[0].lastIndexOf(' ') + 1);
+		let evaluatedExpression = undefined;
+		let matchingExpression = undefined;
+		let startOffset = 0;
+
+		if (canEvaluateForHovers) {
+			let expressionRange = this.getHoveredExpression(lineContent, range);
+			startOffset = expressionRange.startColumn;
+			let matchingExpression = lineContent.substring(expressionRange.startColumn - 1, expressionRange.endColumn);
+			evaluatedExpression = this.getExpressionSupportingEvaluate(session, matchingExpression);
+		}
+		else {
+			// string magic to get the parents of the variable (a and b for a.b.foo)
+			const namesToFind = lineContent.substring(0, lineContent.indexOf('.' + hoveringOver))
+				.split('.').map(word => word.trim()).filter(word => !!word);
+			namesToFind.push(hoveringOver);
+			namesToFind[0] = namesToFind[0].substring(namesToFind[0].lastIndexOf(' ') + 1);
+			evaluatedExpression = this.getExpression(namesToFind);
+		}
 
-		return this.getExpression(namesToFind).then(expression => {
+		return evaluatedExpression.then(expression => {
 			if (!expression || !expression.available) {
 				this.hide();
 				return;
 			}
 
-			// show it","No need for the type here
",2016-08-24 14:12:33
43,"@@ -112,6 +117,7 @@ export class Workbench implements IPartService {
 	private creationPromiseComplete: ValueCallback;
 	private sideBarHidden: boolean;
 	private sideBarPosition: Position;
+	private panelPartHidden: boolean;","@isidorn => panelHidden
",2016-01-15 15:17:43
613,"@@ -1123,15 +1123,16 @@ declare module 'vscode' {
 		/**
 		 * Derive a new Uri from this Uri.
 		 *
+		 * ```ts",I moved this out of a @sample tag as it looked really bad on the website https://code.visualstudio.com/docs/extensionAPI/vscode-api#Uri.with,2016-12-15 23:50:10
223,"@@ -1126,6 +1128,10 @@ export class Cursor extends EventEmitter {
 		return this._invokeForAll(ctx, (cursorIndex: number, oneCursor: OneCursor, oneCtx: IOneCursorOperationContext) => OneCursorOp.moveTo(oneCursor, inSelectionMode, ctx.eventData.position, ctx.eventData.viewPosition, ctx.eventSource, oneCtx));
 	}
 
+	private _move(inSelectionMode:boolean, ctx: IMultipleCursorOperationContext): boolean {","`inSelectionMode` should be added as a boolean argument accepted by the command. Not sure what name would be best.
",2016-07-15 11:11:17
234,"@@ -1126,6 +1128,10 @@ export class Cursor extends EventEmitter {
 		return this._invokeForAll(ctx, (cursorIndex: number, oneCursor: OneCursor, oneCtx: IOneCursorOperationContext) => OneCursorOp.moveTo(oneCursor, inSelectionMode, ctx.eventData.position, ctx.eventData.viewPosition, ctx.eventSource, oneCtx));
 	}
 
+	private _move(inSelectionMode:boolean, ctx: IMultipleCursorOperationContext): boolean {
+		return this._invokeForAll(ctx, (cursorIndex: number, oneCursor: OneCursor, oneCtx: IOneCursorOperationContext) => OneCursorOp.move(oneCursor, inSelectionMode, ctx.eventData.to, ctx.eventSource, oneCtx));","Why? Please decode the arguments before invoking for each cursor. If there are 1000 cursors it makes no sense to pass the data to each cursor to have it parsed and decoded 1000 times.
",2016-07-15 11:23:18
97,"@@ -1127,4 +1134,12 @@ registry.add('eslint-stylish', {
 	applyTo: ApplyToKind.allDocuments,
 	fileLocation: FileLocationKind.Absolute,
 	pattern: defaultPattern('eslint-stylish')
-});
\ No newline at end of file
+});
+
+registry.add('go', {
+	owner: 'typescript',
+	applyTo: ApplyToKind.allDocuments,
+	fileLocation: FileLocationKind.Relative,
+	filePrefix: '${cwd}',","I chose `cwd` here over `workspaceRoot` so that the task can override the working directory if desired (with the default being the workspace root). Make sense?
",2016-04-09 04:41:49
117,"@@ -113,8 +113,20 @@
 			process.env['VSCODE_SHARED_IPC_HOOK'] = configuration.sharedIPCHandle;
 
 			// Get the nls configuration into the process.env as early as possible.
+			var nlsConfig = { availableLanguages: {} };
 			if (configuration.userEnv && configuration.userEnv['VSCODE_NLS_CONFIG']) {
-				process.env['VSCODE_NLS_CONFIG'] = configuration.userEnv['VSCODE_NLS_CONFIG'];
+				var config = configuration.userEnv['VSCODE_NLS_CONFIG'];
+				process.env['VSCODE_NLS_CONFIG'] = config;
+				try {
+					if (config) {
+						nlsConfig = JSON.parse(config);
+					}
+				} catch (e) {
+				}
+			}
+			var uiLanguage = nlsConfig.availableLanguages['*'];
+			if (uiLanguage) {
+				window.document.getElementsByTagName('html')[0].setAttribute('lang', uiLanguage)","I am not sure if our language codes map directly to the expected language codes for the HTML attribute. The list of expected codes seem to be listed here: http://www.w3schools.com/tags/ref_language_codes.asp
",2016-04-18 20:46:29
510,"@@ -1136,15 +1160,15 @@ class DiffEditorWidgetStyle {
 		};
 	}
 
-	_getViewZones(lineChanges: editorCommon.ILineChange[], originalForeignVZ: editorCommon.IEditorWhitespace[], modifiedForeignVZ: editorCommon.IEditorWhitespace[], originalEditor: editorBrowser.ICodeEditor, modifiedEditor: editorBrowser.ICodeEditor): IEditorsZones {
+	_getViewZones(lineChanges: editorCommon.ILineChange[], originalForeignVZ: editorCommon.IEditorWhitespace[], modifiedForeignVZ: editorCommon.IEditorWhitespace[], originalEditor: editorBrowser.ICodeEditor, modifiedEditor: editorBrowser.ICodeEditor, renderIndicators?: boolean): IEditorsZones {",@rebornix why is renderIndicators optional here?,2016-11-23 19:01:07
566,"@@ -114,6 +114,9 @@ export class EnvironmentService implements IEnvironmentService {
 	@memoize
 	get sharedIPCHandle(): string { return `${getIPCHandlePrefix()}-${pkg.version}-shared${getIPCHandleSuffix()}`; }
 
+	@memoize
+	get nodeCachedDataDir(): string { return path.join(this.userDataPath, 'CachedData', pkg.version); }","@jrieken should we not use the commit ID of the built as a way to identify the backup? if we use the version, wouldn't we use old cached data each time we update insiders build?",2016-12-05 08:51:33
540,"@@ -114,7 +118,7 @@ suite('TextSearch performance', () => {
 		const finishedEvents = [];
 		return runSearch() // Warm-up first
 			.then(() => {
-				if (testWorkspaceArg) { // Don't measure by default
+				if (testWorkspacePath) { // Don't measure by default",This is always set. I'd revert this change so unit tests run without additional output.,2016-11-30 19:05:52
861,"@@ -1142,6 +1142,24 @@ export class Workbench implements IPartService {
 		}
 	}
 
+	// Resize requested part along the main axis
+	// layout will do all the math for us and adjusts the other Parts
+	public resizePart(part: Parts, sizeChange: number): void {
+
+		switch (part) {
+			case Parts.SIDEBAR_PART:
+			case Parts.PANEL_PART:
+			case Parts.EDITOR_PART:
+				this.workbenchLayout.setPartSizeChange(part, sizeChange);",`setPartSizeChange` => `resizePart` ?,2017-03-24 20:26:50
851,"@@ -1142,6 +1142,24 @@ export class Workbench implements IPartService {
 		}
 	}
 
+	// Resize requested part along the main axis
+	// layout will do all the math for us and adjusts the other Parts
+	public resizePart(part: Parts, sizeChangePx: number, skipLayout?: boolean): TPromise<void> {",This method does not need to return a promise and also does not seem to be using `skipLayout`. I would suggest to do the `layout()` call from within `layout.ts` and not outside.,2017-03-22 13:29:36
628,"@@ -1144,13 +1144,20 @@ export class WindowsManager implements IWindowsMainService {
 		// Update in settings
 		const menuBarHidden = this.storageService.getItem(VSCodeWindow.menuBarHiddenKey, false);
 		const newMenuBarHidden = !menuBarHidden;
+
+		const windowConfig = this.configurationService.getConfiguration<IWindowSettings>('window');","It is true that on the main side we do not have access to the default values because they get defined on the browser side. Maybe we should turn this setting around and make it so that the default of a false value is OK for us. That avoids having to fill in a default on our end (instead of having `true` as default, change the setting so that `false` as default is good).",2016-12-20 06:21:36
893,"@@ -115,6 +116,12 @@ export class EditorAccessor implements emmet.Editor {
 		}
 
 		let range = new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);
+		let textToReplace = this._editor.getModel().getValueInRange(range);
+		if (this._emmetActionName === 'expand_abbreviation' && (value === textToReplace || value === textToReplace + '${0}')) {","Maybe divide into two variables?

```ts
const isExpandAbbreviation = this._emmetActionName === 'expand_abbreviation';
const isWrongExpansion = value === textToReplace || value === textToReplace + '${0}';
```

",2017-04-18 07:11:35
920,"@@ -1155,6 +1161,7 @@ export class EditorStacksModel implements IEditorStacksModel {
 		unbind.push(group.onEditorStateChanged(editor => this._onModelChanged.fire({ group, editor })));
 		unbind.push(group.onEditorOpened(editor => this._onEditorOpened.fire({ editor, group })));
 		unbind.push(group.onEditorClosed(event => {
+			this._onWillCloseEditor.fire({ editor: event.editor, group });
 			this.handleOnEditorClosed(event);",I checked and you are emiting and handling the `onWillCloseEditor` similar to `onEditorClosed` -> looks good.,2017-05-10 08:20:43
216,"@@ -116,11 +116,7 @@ export class LinesDecorationsOverlay extends DedupOverlay {
 			if (classNames.length === 0) {
 				output[lineIndex] = '';
 			} else {
-				output[lineIndex] = (
-					'<div class=""cldr'
-					+ classNames
-					+ common
-				);
+				output[lineIndex] = classNames.map(className => '<div class=""cldr ' + className + common).join('');","please spell out for loops
",2016-07-14 09:38:53
376,"@@ -117,29 +114,8 @@ export abstract class TextFileService implements ITextFileService {
 	}
 
 	private beforeShutdown(): boolean | TPromise<boolean> {
-		// If hot exit is enabled then save the dirty files in the workspace and then exit
-		// Hot exit is currently disabled for both empty workspaces (#13733) and on Mac (#13305)
-		if (this.configuredHotExit && this.contextService.getWorkspace() && !platform.isMacintosh) {
-			// If there are no dirty files, clean up and exit
-			if (this.getDirty().length === 0) {
-				return this.cleanupBackupsBeforeShutdown();
-			}
-
-			return this.backupService.getWorkspaceBackupPaths().then(workspaceBackupPaths => {
-				// Only remove the workspace from the backup service if it's not the last one or it's not dirty
-				if (workspaceBackupPaths.length > 1) {
-					return this.confirmBeforeShutdown();
-				}
-
-				// Backup and hot exit
-				return this.backupAll().then(result => {
-					if (result.results.some(r => !r.success)) {
-						return true; // veto if some backups failed
-					}
-
-					return false; // the backup went smoothly, no veto
-				});
-			});
+		if (this.backupService.isHotExitEnabled) {","Let the backup service listen to the lifecycle method and do it in there. Here I would only check if hot exit is enabled to see if confirmation is needed.
",2016-10-21 14:04:44
644,"@@ -118,25 +118,26 @@ export class OpenFileHandler extends QuickOpenHandler {
 		return promise.then(result => [new QuickOpenModel(result[0]), result[1]]);
 	}
 
-	private doFindResults(searchValue: string): TPromise<[QuickOpenEntry[], ISearchStats]> {
+	private doFindResults(searchValue: string): PPromise<[QuickOpenEntry[], ISearchStats], QuickOpenEntry> {
 		const query: IQueryOptions = {
 			folderResources: this.contextService.getWorkspace() ? [this.contextService.getWorkspace().resource] : [],
 			extraFileResources: getOutOfWorkspaceEditorResources(this.editorGroupService, this.contextService),
 			filePattern: searchValue
 		};
 
+		let results: QuickOpenEntry[] = [];
 		return this.searchService.search(this.queryBuilder.file(query)).then((complete) => {
-			let results: QuickOpenEntry[] = [];","According to coding standards, `.then(complete => [results, complete.stats], null, progress => { ...});` would be better",2016-12-23 06:59:39
677,"@@ -118,6 +118,12 @@ configurationRegistry.registerConfiguration({
 			'description': nls.localize('showEditorTabCloseButton', ""Controls if editor tabs should have a visible close button or not.""),
 			'default': true
 		},
+		'workbench.editor.tabCloseButton': {
+			'type': 'string',
+			'enum': ['left', 'right', 'off'],
+			'default': 'right',
+			'description': nls.localize('editorTabCloseButton', ""Controls the position of the editor's tabs close buttons."")","This should mention what ""off"" does.",2017-01-16 08:00:10
943,"@@ -118,6 +118,12 @@ export const STATUS_BAR_FOREGROUND = registerColor('statusBar.foreground', {
 	hc: '#FFFFFF'
 }, nls.localize('statusBarForeground', ""Status bar foreground color. The status bar is shown in the bottom of the window.""));
 
+export const STATUS_BAR_NO_FOLDER_FOREGROUND = registerColor('statusBar.noFolderForeground', {
+	dark: '#FFFFFF',",I suggest to use `STATUS_BAR_FOREGROUND` here as default color for all themes instead of specifying the color again as `FFFFFF`. This makes sure that all existing themes are not broken that specify `STATUS_BAR_FOREGROUND` any different from `FFFFFF`.,2017-05-22 04:47:10
96,"@@ -119,6 +119,7 @@
 .monaco-editor .view-lines {
 	cursor: text;
 	white-space: nowrap;
+	z-index: 1;","This makes text rendered over cursor.
",2016-04-05 02:01:21
358,"@@ -119,7 +119,6 @@ export abstract class BaseHistoryService {
 		const activeEditor = this.editorService.getActiveEditor();
 		const activeInput = activeEditor ? activeEditor.input : void 0;
 
-		// Propagate to history","@wprater you removed the comment here?
",2016-10-21 09:52:13
275,"@@ -12,16 +12,17 @@ export class ExtHostTerminal implements vscode.Terminal {
 
 	public _name: string;
 	public _shellPath: string;","`_shellPath` and `_shellArgs` can safely be removed as they're not exposed like name
",2016-09-13 21:17:23
276,"@@ -12,16 +12,17 @@ export class ExtHostTerminal implements vscode.Terminal {
 
 	public _name: string;
 	public _shellPath: string;
+	public _shellArgs: string[];
 
 	private _id: number;
 	private _proxy: MainThreadTerminalServiceShape;
 	private _disposed: boolean;
 
-	constructor(proxy: MainThreadTerminalServiceShape, id: number, name?: string, shellPath?: string) {
+	constructor(proxy: MainThreadTerminalServiceShape, id: number, name?: string, shellPath?: string, shellArgs?: string[]) {
 		this._name = name;
 		this._shellPath = shellPath;"," You can remove this line
",2016-09-13 21:17:35
641,"@@ -12,16 +12,4 @@ MimeType=text/plain;inode/directory;
 Actions=new-window;
 Keywords=vscode;
 
-[Desktop Action new-window]
-Name=New Window
-Name[de]=Neues Fenster
-Name[es]=Nueva ventana
-Name[fr]=Nouvelle fenêtre
-Name[it]=Nuova finestra
-Name[ja]=新規ウインドウ
-Name[ko]=새 창
-Name[ru]=Новое окно
-Name[zh_CN]=新建窗口
-Name[zh_TW]=開新視窗
-Exec=/usr/share/@@NAME@@/@@NAME@@ --new-window %U
 Icon=@@NAME@@",You can remove this one too then good to go :smile: ,2016-12-21 23:05:33
751,"@@ -12,16 +13,28 @@
 	white-space: nowrap;
 }
 
+.monaco-editor .zone-widget .zone-widget-container.marker-error-widget {
+	border-top-color: #ff5a5a;
+	border-bottom-color: #ff5a5a;
+}
+
+.monaco-editor .zone-widget .zone-widget-container.marker-warning-widget {
+	border-top-color: #5aac5a;
+	border-bottom-color: #5aac5a;
+}
+
 .monaco-editor.vs-dark .marker-widget {
 	background-color: #2D2D30;
 }
 
+
 /* High Contrast Theming */
+
 .monaco-editor.hc-black .marker-widget {
 	background-color: #0C141F;
 }
 
-.monaco-editor .marker-widget > .stale {",Do not change unnecessary lines,2017-02-20 14:00:02
649,"@@ -12,7 +12,8 @@ import Event from 'vs/base/common/event';
 
 export enum GroupArrangement {
 	MINIMIZE_OTHERS,
-	EVEN
+	EVEN,
+	KEEP_RATIO",Suggest to not expose.,2017-01-04 10:26:43
984,"@@ -120,10 +127,14 @@ export class FileService implements IFileService {
 		}
 
 		if (this.basePath && !this.options.disableWatcher) {
-			if (isWindows) {
-				this.setupWin32WorkspaceWatching();
+			if (this.options.useNsfwFileWatcher) {",@bpasero merging this now as the tests are passing and the new code should all be blocked off by this setting. Please send comments my way though :smiley: ,2017-06-18 00:57:36
836,"@@ -120,6 +120,15 @@ export class MockSession implements debug.ISession {
 		});",Looks good,2017-03-21 17:01:31
462,"@@ -121,6 +124,7 @@ export class LifecycleService implements ILifecycleService {
 		vscodeWindow.win.on('close', (e) => {
 			const windowId = vscodeWindow.id;
 			this.logService.log('Lifecycle#window-before-close', windowId);
+			this.logService.log('this.quitRequested: ' + this.quitRequested);","@Tyriar leftover debug statement?
",2016-11-09 07:07:31
90,"@@ -1212,6 +1214,14 @@ export class SideBySideEditorControl extends EventEmitter implements IVerticalSa
 		this.editorActionsToolbar[position].setActions([], [])();
 	}
 
+	private centerStash(a: Position, b: Position): void {","Please rename all stash => sash
",2016-03-30 05:24:41
711,"@@ -123,19 +119,15 @@ class DefinitionAdapter {
 }
 
 class ImplementationAdapter {
-
-	private _documents: ExtHostDocuments;
-	private _provider: vscode.ImplementationProvider;
-
-	constructor(documents: ExtHostDocuments, provider: vscode.ImplementationProvider) {
-		this._documents = documents;
-		this._provider = provider;
-	}
+	constructor(",same,2017-02-02 07:59:27
778,"@@ -1234,11 +1234,17 @@ export class Cursor extends EventEmitter {
 	}
 
 	private _moveToBeginningOfLine(inSelectionMode: boolean, ctx: IMultipleCursorOperationContext): boolean {
-		return this._invokeForAll(ctx, (cursorIndex: number, oneCursor: OneCursor, oneCtx: IOneCursorOperationContext) => OneCursorOp.moveToBeginningOfLine(oneCursor, inSelectionMode, oneCtx));","`_invokeForAll` is for multi cursor, you may want to keep it.",2017-02-27 16:10:32
767,"@@ -127,6 +128,17 @@ registry.registerWorkbenchAction(new SyncActionDescriptor(EnableAllBreakpointsAc
 registry.registerWorkbenchAction(new SyncActionDescriptor(DisableAllBreakpointsAction, DisableAllBreakpointsAction.ID, DisableAllBreakpointsAction.LABEL), 'Debug: Disable All Breakpoints', debugCategory);
 registry.registerWorkbenchAction(new SyncActionDescriptor(ClearReplAction, ClearReplAction.ID, ClearReplAction.LABEL), 'Debug: Clear Debug Console', debugCategory);
 registry.registerWorkbenchAction(new SyncActionDescriptor(FocusReplAction, FocusReplAction.ID, FocusReplAction.LABEL), 'Debug: Focus Debug Console', debugCategory);
+registry.registerWorkbenchAction(new SyncActionDescriptor(LaunchAction, LaunchAction.ID, LaunchAction.LABEL, null, CONTEXT_NOT_IN_DEBUG_MODE), 'Debug: Launch Configuration', debugCategory);",Remove null and context for now,2017-02-21 10:51:02
514,"@@ -127,6 +128,7 @@ export class TerminalService implements ITerminalService {
 			terminalInstance.setVisible(i === terminalIndex);
 		});
 		this._onActiveInstanceChanged.fire();
+		this.getActiveInstance().focus(true);","I believe the reason focus is not run in `setActiveInstanceByIndex` is because on launch we do not want the terminal to be focused when the workbench is restored, instead the editor needs to be focused.

Could we isolate this particular case? When a terminal exits AND it is not the last terminal AND the terminal was focused previously. The last case prevents the terminal hijacking focus from the editor if the shell process dies for example.",2016-11-24 21:50:49
792,"@@ -1272,6 +1272,21 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 			return Position.ONE; // can only be ONE
 		}
 
+		const config = this.configurationService.getConfiguration<IWorkbenchEditorConfiguration>();
+		const reuseIfOpen = config.workbench.editor.reuseIfOpen;
+		// Respect option to reveal an editor if it is open (not necessarily already visible)
+		const skipReuse = (options && options.index) || arg1;",There are imho more cases where you need to `skipReuse`: when `revealIfVisible` is true and there is a visible editor matching the input you should prefer it,2017-03-03 10:47:00
791,"@@ -1272,6 +1272,21 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 			return Position.ONE; // can only be ONE
 		}
 
+		const config = this.configurationService.getConfiguration<IWorkbenchEditorConfiguration>();
+		const reuseIfOpen = config.workbench.editor.reuseIfOpen;
+		// Respect option to reveal an editor if it is open (not necessarily already visible)
+		const skipReuse = (options && options.index) || arg1;
+		if(!skipReuse && reuseIfOpen) {
+			const groups = this.stacks.groups;",I suggest to extract this into a method `findGroup(editor)` in the `EditorStacksModel` and add tests for it. I would add an option to this method to only respect the active editor and then also use it for the `revealIfVisible` option further below 👍 ,2017-03-03 10:44:49
800,"@@ -1274,14 +1274,20 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 
 		// Respect option to reveal an editor if it is already visible
 		if (options && options.revealIfVisible) {
-			const editorsToCheck: BaseEditor[] = [];
-			if (activeEditor) { editorsToCheck.push(activeEditor); }
-			visibleEditors.forEach(e => { if (e !== activeEditor) { editorsToCheck.push(e); } });
-			for (let i = 0; i < editorsToCheck.length; i++) {
-				const editorToCheck = editorsToCheck[i];
-				if (input.matches(editorToCheck.input)) {
-					return editorToCheck.position;
-				}
+			const group = this.stacks.findGroup(input, true);
+			if (null !== group) {",=> `if (group)`,2017-03-07 06:22:13
801,"@@ -1274,14 +1274,20 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 
 		// Respect option to reveal an editor if it is already visible
 		if (options && options.revealIfVisible) {
-			const editorsToCheck: BaseEditor[] = [];
-			if (activeEditor) { editorsToCheck.push(activeEditor); }
-			visibleEditors.forEach(e => { if (e !== activeEditor) { editorsToCheck.push(e); } });
-			for (let i = 0; i < editorsToCheck.length; i++) {
-				const editorToCheck = editorsToCheck[i];
-				if (input.matches(editorToCheck.input)) {
-					return editorToCheck.position;
-				}
+			const group = this.stacks.findGroup(input, true);
+			if (null !== group) {
+				return this.stacks.positionOfGroup(group);
+			}
+		}
+
+		const config = this.configurationService.getConfiguration<IWorkbenchEditorConfiguration>();",Instead of getting the config each time we open an editor I suggest to store the value in a field of `EditorPart`. You can see in the [constructor](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/parts/editor/editorPart.ts#L145) that we resolve configuration and we also react to [updates](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/parts/editor/editorPart.ts#L173).,2017-03-07 06:23:52
799,"@@ -1274,14 +1274,20 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 
 		// Respect option to reveal an editor if it is already visible
 		if (options && options.revealIfVisible) {
-			const editorsToCheck: BaseEditor[] = [];
-			if (activeEditor) { editorsToCheck.push(activeEditor); }
-			visibleEditors.forEach(e => { if (e !== activeEditor) { editorsToCheck.push(e); } });
-			for (let i = 0; i < editorsToCheck.length; i++) {
-				const editorToCheck = editorsToCheck[i];
-				if (input.matches(editorToCheck.input)) {
-					return editorToCheck.position;
-				}
+			const group = this.stacks.findGroup(input, true);
+			if (null !== group) {
+				return this.stacks.positionOfGroup(group);
+			}
+		}
+
+		const config = this.configurationService.getConfiguration<IWorkbenchEditorConfiguration>();
+		const revealIfOpen = config.workbench.editor.revealIfOpen;
+		// Respect option to reveal an editor if it is open (not necessarily visible)
+		const skipReuse = (options && options.index) || arg1;
+		if (!skipReuse && revealIfOpen) {
+			const group = this.stacks.findGroup(input, false);
+			if (null !== group) {",=> `if (group)`,2017-03-07 06:21:45
507,"@@ -128,6 +129,17 @@ export class ViewCursor {
 			this._positionTop = visibleRange.top;
 			this._positionLeft = visibleRange.left;
 			this._isInViewport = true;
+
+			let visibleRangeForCharacter = ctx.linesVisibleRangesForRange({",@rebornix This extra call should be done only if the cursor style is a block cursor,2016-11-23 18:56:38
828,"@@ -129,33 +128,42 @@ export class TerminalLinkHandler {
 		});
 	}
 
-	private _resolvePath(link: string): TPromise<string> {
+	protected _preprocessPath(link: string): string {
 		if (this._platform === platform.Platform.Windows) {
 			// Resolve ~ -> %HOMEDRIVE%\%HOMEPATH%
 			if (link.charAt(0) === '~') {
 				if (!process.env.HOMEDRIVE || !process.env.HOMEPATH) {
-					return TPromise.as(void 0);
+					return null;
 				}
 				link = `${process.env.HOMEDRIVE}\\${process.env.HOMEPATH + link.substring(1)}`;
 			}
-		} else {
-			// Resolve workspace path . / .. -> <path>/. / <path/..
-			if (link.charAt(0) === '.') {
+
+			//resolve relative paths
+			if (!link.match('^' + winDrivePrefix)) {
 				if (!this._contextService.hasWorkspace) {
 					// Abort if no workspace is open
-					return TPromise.as(void 0);
+					return null;
 				}
 				link = path.join(this._contextService.getWorkspace().resource.fsPath, link);
 			}
 		}
-		// Resolve workspace path . / .. -> <path>/. / <path/..
-		if (link.charAt(0) === '.') {
+		// Resolve workspace path . | .. | <relative_path> -> <path>/. | <path>/.. | <path>/<relative_path>
+		else if (link.charAt(0) !== '/' && link.charAt(0) !== '~') {
 			if (!this._contextService.hasWorkspace) {
 				// Abort if no workspace is open
-				return TPromise.as(void 0);
+				return null;
 			}
 			link = path.join(this._contextService.getWorkspace().resource.fsPath, link);
 		}
+		return link;
+	}
+
+	private _resolvePath(link: string): TPromise<string> {
+		link = this._preprocessPath(link);",Was this factoring out purely for code cleanliness?,2017-03-14 18:42:25
830,"@@ -129,33 +128,42 @@ export class TerminalLinkHandler {
 		});
 	}
 
-	private _resolvePath(link: string): TPromise<string> {
+	protected _preprocessPath(link: string): string {
 		if (this._platform === platform.Platform.Windows) {
 			// Resolve ~ -> %HOMEDRIVE%\%HOMEPATH%
 			if (link.charAt(0) === '~') {
 				if (!process.env.HOMEDRIVE || !process.env.HOMEPATH) {
-					return TPromise.as(void 0);
+					return null;
 				}
 				link = `${process.env.HOMEDRIVE}\\${process.env.HOMEPATH + link.substring(1)}`;
 			}
-		} else {
-			// Resolve workspace path . / .. -> <path>/. / <path/..
-			if (link.charAt(0) === '.') {
-				if (!this._contextService.hasWorkspace) {",Good catch :+1: ,2017-03-17 02:31:07
877,"@@ -129,7 +129,10 @@ export abstract class MainThreadDocumentsShape {
 }
 
 export abstract class MainThreadEditorsShape {
-	$tryShowTextDocument(resource: URI, position: EditorPosition, preserveFocus: boolean): TPromise<string> { throw ni(); }
+	$tryShowTextDocument(resource: URI, position: EditorPosition, preserveFocus: boolean): TPromise<string>;
+	$tryShowTextDocument(resource: URI, position: EditorPosition, options: { preserveFocus: boolean, pinned: boolean }): TPromise<string>;
+	$tryShowTextDocument(resource: URI, position: EditorPosition, preserveFocusOrOptions: boolean | { preserveFocus: boolean, pinned: boolean }): TPromise<string>;
+	$tryShowTextDocument(resource: URI, position: EditorPosition, preserveFocusOrOptions: boolean | { preserveFocus: boolean, pinned: boolean }): TPromise<string> { throw ni(); }",In the protocol/shape there should only be one signature and the calling side should do the argument construction,2017-04-13 15:14:32
331,"@@ -13,10 +13,22 @@
 	padding-left: 20px;
 }
 
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content .title {
+	-webkit-app-region: drag;
+}
+
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content > .one-editor-silo > .container > .title .title-label {","Why are we adding 1px (from 35px) here?
",2016-10-15 06:19:59
332,"@@ -13,10 +13,22 @@
 	padding-left: 20px;
 }
 
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content .title {
+	-webkit-app-region: drag;
+}
+
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content > .one-editor-silo > .container > .title .title-label {
+	line-height: 36px;
+}
+
 .monaco-workbench > .part.editor > .content > .one-editor-silo > .container > .title .monaco-icon-label::before {
 	height: 35px; /* tweak the icon size of the editor labels when icons are enabled */
 }
 
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content > .one-editor-silo > .container > .title .monaco-icon-label::before {","Why are we adding 1px (from 35px) here?
",2016-10-15 06:20:06
389,"@@ -13,10 +13,25 @@
 	padding-left: 20px;
 }
 
+/* Allow the unused gutter to be dragabble */
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content .title {
+	-webkit-app-region: drag;
+}
+
+/* Align the title text with the traffic lights */
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content > .one-editor-silo > .container > .title .title-label {
+	line-height: 36px;
+}
+","Still needed?
",2016-10-24 14:24:02
388,"@@ -13,10 +13,25 @@
 	padding-left: 20px;
 }
 
+/* Allow the unused gutter to be dragabble */
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content .title {
+	-webkit-app-region: drag;
+}
+
+/* Align the title text with the traffic lights */
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content > .one-editor-silo > .container > .title .title-label {
+	line-height: 36px;
+}
+
 .monaco-workbench > .part.editor > .content > .one-editor-silo > .container > .title .monaco-icon-label::before {
 	height: 35px; /* tweak the icon size of the editor labels when icons are enabled */
 }
 
+/* Align the icon with the traffic lights */
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content > .one-editor-silo > .container > .title .monaco-icon-label::before {
+	height: 36px;
+}
+","Still needed?
",2016-10-24 14:23:57
2,"@@ -13,15 +13,15 @@ The [`vscode`](https://github.com/microsoft/vscode) repository is where we do de
 ## Contributing
 If you are interested in fixing issues and contributing directly to the code base, please see the document [How to Contribute](https://github.com/Microsoft/vscode/wiki/How-to-Contribute), which covers the following:
 
-* How to build and run from source
-* The development workflow, including debugging and running tests
-* [Coding guidelines](https://github.com/Microsoft/vscode/wiki/Coding-Guidelines)
-* Submitting pull requests
+* [How to build and run from source](https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run-from-source)
+* [The development workflow, including debugging and running tests](https://github.com/Microsoft/vscode/wiki/How-to-Contribute#development-workflow)
+* [Coding Guidelines](https://github.com/Microsoft/vscode/wiki/Coding-Guidelines)","""Guidelines"" is capitalized differently to the rest of the list, lower case fits better.
",2015-11-19 22:05:53
79,"@@ -13,6 +13,7 @@ import severity from 'vs/base/common/severity';
 import types = require('vs/base/common/types');","Looks good overall - some comments below.
",2016-03-16 10:45:25
482,"@@ -130,7 +154,7 @@ export class UntitledEditorService implements IUntitledEditorService {
 			.map((i) => i.getResource());
 	}
 
-	public createOrGet(resource?: URI, modeId?: string): UntitledEditorInput {
+	public createOrGet(resource?: URI, modeId?: string, restoreResource?: URI): UntitledEditorInput {","@Tyriar can you explain again why we cannot do something similar as with files (`this.backupFileService.doesTextFileHaveBackup`)
",2016-11-09 08:00:54
95,"@@ -132,6 +132,8 @@ export interface IInstantiationService {
 	createInstance<A1, A2, A3, A4, A5, A6, A7, T>(descriptor: descriptors.SyncDescriptor7<A1, A2, A3, A4, A5, A6, A7, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7): T;
 	createInstance<A1, A2, A3, A4, A5, A6, A7, A8, T>(descriptor: descriptors.SyncDescriptor8<A1, A2, A3, A4, A5, A6, A7, A8, T>, a1: A1, a2: A2, a3: A3, a4: A4, a5: A5, a6: A6, a7: A7, a8: A8): T;
 
+	createInstance<T>(descriptor: descriptors.SyncDescriptor0<T>, ...args: any[]): T;",":-1: I think the evil lies in the fact that the actual logic is hidden in actions and not in a command-function. I would not restructure towards more actions but towards one command that does more or less this

```
// Handle in browser process
        if (this.ipcArg) {
            ipc.send(this.ipcMsg, this.ipcArg);
        } else {
            ipc.send(this.ipcMsg);
        }
```

and make the action use that command as well as the API using it. The relations should be `command_id -> function` and `action -> command_id` and `api_command -> command_id`. We have done with language features similar things (see suggest for instance)

Maybe we should talk about this ;-)
",2016-04-04 14:47:03
565,"@@ -132,9 +134,26 @@ export class BackupMainService implements IBackupMainService {
 
 		backups.folderWorkspaces.forEach(workspacePath => {
 			const backupPath = path.join(this.backupHome, this.getWorkspaceHash(workspacePath));
-			if (!this.hasBackupsSync(backupPath)) {
+			const hasBackups = this.hasBackupsSync(backupPath);
+			const missingWorkspace = hasBackups && !fs.existsSync(workspacePath);
+
+			// If the folder has no backups, make sure to delete it
+			// If the folder has backups, but the target workspace is missing, convert backups to empty ones
+			if (!hasBackups || missingWorkspace) {
 				const backupWorkspace = this.sanitizePath(workspacePath);
 				staleBackupWorkspaces.push({ workspaceIdentifier: Uri.file(backupWorkspace).fsPath, backupPath, isEmptyWorkspace: false });
+
+				if (missingWorkspace) {",Can we add test coverage for this?,2016-12-03 18:43:51
564,"@@ -132,9 +134,26 @@ export class BackupMainService implements IBackupMainService {
 
 		backups.folderWorkspaces.forEach(workspacePath => {
 			const backupPath = path.join(this.backupHome, this.getWorkspaceHash(workspacePath));
-			if (!this.hasBackupsSync(backupPath)) {
+			const hasBackups = this.hasBackupsSync(backupPath);
+			const missingWorkspace = hasBackups && !fs.existsSync(workspacePath);
+
+			// If the folder has no backups, make sure to delete it
+			// If the folder has backups, but the target workspace is missing, convert backups to empty ones
+			if (!hasBackups || missingWorkspace) {
 				const backupWorkspace = this.sanitizePath(workspacePath);
 				staleBackupWorkspaces.push({ workspaceIdentifier: Uri.file(backupWorkspace).fsPath, backupPath, isEmptyWorkspace: false });
+
+				if (missingWorkspace) {
+					const identifier = this.pushBackupPathsSync((Date.now() + Math.round(Math.random() * 1000)).toString(), true /* is empty workspace */);",Should we add this random part to the regular folder generation in `registerWindowForBackups` if you're concerned about conflicts?,2016-12-03 18:39:34
334,"@@ -134,12 +134,14 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				this.partService.layout();","This should only be called if the setting for inline title is enabled, no?
",2016-10-15 06:21:14
335,"@@ -134,12 +134,14 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				this.partService.layout();
 			});
 		});
 
 		ipc.on('vscode:leaveFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.removeClass('fullscreen');
+				this.partService.layout();","This should only be called if the setting for inline title is enabled, no?
",2016-10-15 06:21:18
296,"@@ -134,12 +134,24 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				// We need to re-layout the sidebar as the activitybar's width can change between
+				// fullscreen and window'd modes on macOS.
+				this.partService.setSideBarHidden(this.partService.isSideBarHidden());","this is ugly, we should rather call `this.partService.layout()` and make it work there if it does not
",2016-10-05 06:45:35
297,"@@ -134,12 +134,24 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				// We need to re-layout the sidebar as the activitybar's width can change between
+				// fullscreen and window'd modes on macOS.
+				this.partService.setSideBarHidden(this.partService.isSideBarHidden());
+
 			});
 		});
 
 		ipc.on('vscode:leaveFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.removeClass('fullscreen');
+				this.partService.setSideBarHidden(this.partService.isSideBarHidden());","this is ugly, we should rather call `this.partService.layout()` and make it work there if it does not
",2016-10-05 06:45:40
295,"@@ -134,12 +134,24 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				// We need to re-layout the sidebar as the activitybar's width can change between
+				// fullscreen and window'd modes on macOS.
+				this.partService.setSideBarHidden(this.partService.isSideBarHidden());
+
 			});
 		});
 
 		ipc.on('vscode:leaveFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.removeClass('fullscreen');
+				this.partService.setSideBarHidden(this.partService.isSideBarHidden());
+			});
+		});
+
+		ipc.on('vscode:macOSUseInlineToolbar', (event) => {","this looks like dead code to me
",2016-10-05 06:44:38
69,"@@ -134,18 +134,18 @@ export class DebugEditorModelManager implements IWorkbenchContribution {
 		const result: editorcommon.IModelDeltaDecoration[] = [];","I like that there are not a lot of changes in this file now. Due to this we will not have to intensively test the UI changes in the editor (e.g. breakpoints).
",2016-03-16 10:20:32
957,"@@ -134,7 +134,7 @@ export function shorten(paths: string[]): string[] {
 		let path = paths[pathIndex];
 
 		if (path === '') {
-			shortenedPaths[pathIndex] = '.';
+			shortenedPaths[pathIndex] = '.' + nativeSep;","@hun1ahpu 💄 

`.${nativeSep}`",2017-06-03 11:46:37
806,"@@ -134,7 +134,9 @@ export function shorten(paths: string[]): string[] {
 					// suffix subpath treated specially as we consider no match 'x' and 'x/...'
 					if (otherPathIndex !== pathIndex && paths[otherPathIndex] && paths[otherPathIndex].indexOf(subpath) > -1) {
 						const isSubpathEnding: boolean = (start + subpathLength === segments.length);
-						const isOtherPathEnding: boolean = endsWith(paths[otherPathIndex], subpath);
+
+						const subpathWithSep: string = (start > 0 && paths[otherPathIndex].indexOf(nativeSep) > -1) ? nativeSep + subpath : subpath;",A comment here that explains why this is needed would be good,2017-03-09 16:15:11
942,"@@ -1349,6 +1349,13 @@ export class SearchViewlet extends Viewlet {
 		];
 	}
 
+	public shutdown(): void {
+		this.viewletSettings['query.contentPattern'] = this.searchWidget.searchInput.getValue();
+		this.saveMemento();","I think saveMemento is done by super.shutdown, right?",2017-05-18 21:03:39
393,"@@ -1349,6 +1349,72 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A node provider for the tree explorer contributed by extension.","Drop ""by extension"" as it's implied being in this file. How about this:

> A node provider for a tree explorer contribution.
",2016-10-24 14:56:31
353,"@@ -1349,6 +1349,72 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A node provider for the tree explorer contributed by extension.
+	 *
+	 * Providers are registered through (#workspace.registerTreeExplorerNodeProvider) with a
+	 * `providerId` that corresponds to the `treeExplorerNodeProviderId` in the extension's
+	 * `contributes.explorer` section.
+	 *
+	 * The contributed tree explorer will ask the corresponding provider to provide the root
+	 * node and resolve children for each node. In addition, the provider could **optionally**
+	 * provide the following information for each node:
+	 * - label: A human-readable label used for rendering the node.
+	 * - hasChildren: Whether the node has children and is expandable.
+	 * - clickCommand: A command to execute when the node is clicked.
+	 */
+	export interface TreeExplorerNodeProvider<T> {","Some high level feedback on the API
- Not a big friend of the lonely `<T>` since that provides little guidance what to actually provide. I'd recommend to look at quick pick for inspiration and have a `TreeItem` being like `interface TreeItem { label: string; command: Command; }`
- The node provider should have a way to signal to the main side that a node/substree has changes (similar to `TextDocumentContentProvider#onDidChange`) so that UI updates
- Tree elements should support icons - in one or the other way... maybe even reuse our existing icon story?
- We should consider adding something like paging to the `resolveChildren`-call. I see this API being used for large sets or sets that are slow to resolve. 
- The API lacks a way to reveal, select, focus a node in a tree. Unsure if the `TreeItem` should be able to do that or if another API is needed (think of something like`window.activeTreeWidget`)
",2016-10-20 16:18:40
394,"@@ -1349,6 +1349,72 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A node provider for the tree explorer contributed by extension.
+	 *
+	 * Providers are registered through (#workspace.registerTreeExplorerNodeProvider) with a
+	 * `providerId` that corresponds to the `treeExplorerNodeProviderId` in the extension's
+	 * `contributes.explorer` section.
+	 *
+	 * The contributed tree explorer will ask the corresponding provider to provide the root
+	 * node and resolve children for each node. In addition, the provider could **optionally**
+	 * provide the following information for each node:
+	 * - label: A human-readable label used for rendering the node.
+	 * - hasChildren: Whether the node has children and is expandable.
+	 * - clickCommand: A command to execute when the node is clicked.
+	 */
+	export interface TreeExplorerNodeProvider<T> {
+
+		/**
+		 * Provide the root node. This function will be called when the tree explorer is activated
+		 * for the first time.
+		 * The root node is hidden and its direct children will be displayed on the first level of","Attach this to the previous line.
",2016-10-24 14:57:38
395,"@@ -1349,6 +1349,72 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A node provider for the tree explorer contributed by extension.
+	 *
+	 * Providers are registered through (#workspace.registerTreeExplorerNodeProvider) with a
+	 * `providerId` that corresponds to the `treeExplorerNodeProviderId` in the extension's
+	 * `contributes.explorer` section.
+	 *
+	 * The contributed tree explorer will ask the corresponding provider to provide the root
+	 * node and resolve children for each node. In addition, the provider could **optionally**
+	 * provide the following information for each node:
+	 * - label: A human-readable label used for rendering the node.
+	 * - hasChildren: Whether the node has children and is expandable.
+	 * - clickCommand: A command to execute when the node is clicked.
+	 */
+	export interface TreeExplorerNodeProvider<T> {
+
+		/**
+		 * Provide the root node. This function will be called when the tree explorer is activated
+		 * for the first time.
+		 * The root node is hidden and its direct children will be displayed on the first level of
+		 * the tree explorer.
+		 *
+		 * @return The root node.
+		 */
+		provideRootNode(): T | Thenable<T>;","@jrieken currently this returns the _invisible_ root node, what do you think about that versus a `provideRootNodes(): T[] | Thenable<T[]>` (or `provideTopLevelNodes`) to hide the invisible root node?
",2016-10-24 14:59:20
398,"@@ -1349,6 +1349,72 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A node provider for the tree explorer contributed by extension.
+	 *
+	 * Providers are registered through (#workspace.registerTreeExplorerNodeProvider) with a
+	 * `providerId` that corresponds to the `treeExplorerNodeProviderId` in the extension's
+	 * `contributes.explorer` section.
+	 *
+	 * The contributed tree explorer will ask the corresponding provider to provide the root
+	 * node and resolve children for each node. In addition, the provider could **optionally**
+	 * provide the following information for each node:
+	 * - label: A human-readable label used for rendering the node.
+	 * - hasChildren: Whether the node has children and is expandable.
+	 * - clickCommand: A command to execute when the node is clicked.
+	 */
+	export interface TreeExplorerNodeProvider<T> {
+
+		/**
+		 * Provide the root node. This function will be called when the tree explorer is activated
+		 * for the first time.
+		 * The root node is hidden and its direct children will be displayed on the first level of
+		 * the tree explorer.
+		 *
+		 * @return The root node.
+		 */
+		provideRootNode(): T | Thenable<T>;
+
+		/**
+		 * Resolve the children of `node`.
+		 *
+		 * @param node The node from which the provider resolves children.
+		 * @return Children of `node`.
+		 */
+		resolveChildren(node: T): T[] | Thenable<T[]>;
+
+		/**
+		 * Provide a human-readable string that will be used for rendering the node.
+		 *
+		 * Default to use `node.toString()` if not provided.","> Defaults to `node.toString()`.

I'd attach this sentence to the first line.
",2016-10-24 15:22:05
397,"@@ -1349,6 +1349,72 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A node provider for the tree explorer contributed by extension.
+	 *
+	 * Providers are registered through (#workspace.registerTreeExplorerNodeProvider) with a
+	 * `providerId` that corresponds to the `treeExplorerNodeProviderId` in the extension's
+	 * `contributes.explorer` section.
+	 *
+	 * The contributed tree explorer will ask the corresponding provider to provide the root
+	 * node and resolve children for each node. In addition, the provider could **optionally**
+	 * provide the following information for each node:
+	 * - label: A human-readable label used for rendering the node.
+	 * - hasChildren: Whether the node has children and is expandable.
+	 * - clickCommand: A command to execute when the node is clicked.
+	 */
+	export interface TreeExplorerNodeProvider<T> {
+
+		/**
+		 * Provide the root node. This function will be called when the tree explorer is activated
+		 * for the first time.
+		 * The root node is hidden and its direct children will be displayed on the first level of
+		 * the tree explorer.
+		 *
+		 * @return The root node.
+		 */
+		provideRootNode(): T | Thenable<T>;
+
+		/**
+		 * Resolve the children of `node`.
+		 *
+		 * @param node The node from which the provider resolves children.
+		 * @return Children of `node`.
+		 */
+		resolveChildren(node: T): T[] | Thenable<T[]>;
+
+		/**
+		 * Provide a human-readable string that will be used for rendering the node.
+		 *
+		 * Default to use `node.toString()` if not provided.
+		 *
+		 * @param node The node from which the provider computes label.
+		 * @return A human-readable label.
+		 */
+		getLabel?(node: T): string;
+
+		/**
+		 * Determine if `node` has children and is expandable.
+		 *
+		 * Default to return `true` if not provided.","> Defaults to `true`.

I'd attach this sentence to the first line.
",2016-10-24 15:21:56
396,"@@ -1349,6 +1349,72 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A node provider for the tree explorer contributed by extension.
+	 *
+	 * Providers are registered through (#workspace.registerTreeExplorerNodeProvider) with a
+	 * `providerId` that corresponds to the `treeExplorerNodeProviderId` in the extension's
+	 * `contributes.explorer` section.
+	 *
+	 * The contributed tree explorer will ask the corresponding provider to provide the root
+	 * node and resolve children for each node. In addition, the provider could **optionally**
+	 * provide the following information for each node:
+	 * - label: A human-readable label used for rendering the node.
+	 * - hasChildren: Whether the node has children and is expandable.
+	 * - clickCommand: A command to execute when the node is clicked.
+	 */
+	export interface TreeExplorerNodeProvider<T> {
+
+		/**
+		 * Provide the root node. This function will be called when the tree explorer is activated
+		 * for the first time.
+		 * The root node is hidden and its direct children will be displayed on the first level of
+		 * the tree explorer.
+		 *
+		 * @return The root node.
+		 */
+		provideRootNode(): T | Thenable<T>;
+
+		/**
+		 * Resolve the children of `node`.
+		 *
+		 * @param node The node from which the provider resolves children.
+		 * @return Children of `node`.
+		 */
+		resolveChildren(node: T): T[] | Thenable<T[]>;
+
+		/**
+		 * Provide a human-readable string that will be used for rendering the node.
+		 *
+		 * Default to use `node.toString()` if not provided.
+		 *
+		 * @param node The node from which the provider computes label.
+		 * @return A human-readable label.
+		 */
+		getLabel?(node: T): string;
+
+		/**
+		 * Determine if `node` has children and is expandable.
+		 *
+		 * Default to return `true` if not provided.
+		 *
+		 * @param node The node to determine if it has children and is expandable.
+		 * @return A boolean that determines if `node` has children and is expandable.
+		 */
+		getHasChildren?(node: T): boolean;
+
+		/**
+		 * Get the command to execute when `node` is clicked.
+		 *
+		 * Commands can be registered through (#commands.registerCommand). `node` will be provided","`[registerCommand](#commands.registerCommand)`
",2016-10-24 15:20:34
384,"@@ -136,17 +136,26 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				const windowConfig = this.configurationService.getConfiguration<IWindowConfiguration>();
+				if (windowConfig && windowConfig.window.macOSUseInlineToolbar) {
+					this.partService.layout();","This deserves a comment why we call layout under this condition.
",2016-10-24 14:17:06
385,"@@ -136,17 +136,26 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				const windowConfig = this.configurationService.getConfiguration<IWindowConfiguration>();
+				if (windowConfig && windowConfig.window.macOSUseInlineToolbar) {
+					this.partService.layout();
+				}
 			});
 		});
 
 		ipc.on('vscode:leaveFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.removeClass('fullscreen');
+				const windowConfig = this.configurationService.getConfiguration<IWindowConfiguration>();
+				if (windowConfig && windowConfig.window.macOSUseInlineToolbar) {
+					this.partService.layout();","This deserves a comment why we call layout under this condition.
",2016-10-24 14:17:10
733,"@@ -136,3 +144,36 @@ class ExecCommandPasteAction extends ExecCommandAction {
 		});
 	}
 }
+
+@conditionalCopyWithSyntaxHighlighting()
+class ExecCommandCopyWithSyntaxHighlightingAction extends ExecCommandAction {
+
+	constructor() {
+		super('copy', {
+			id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',
+			label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', ""Copy With Syntax Highlighting""),
+			alias: 'Copy With Syntax Highlighting',
+			precondition: null,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: null
+			},
+			menuOpts: {
+				group: CLIPBOARD_CONTEXT_MENU_GROUP,
+				order: 2
+			}
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: editorCommon.ICommonCodeEditor): void {
+		var enableEmptySelectionClipboard = editor.getConfiguration().contribInfo.emptySelectionClipboard && browser.enableEmptySelectionClipboard;
+
+		if (!enableEmptySelectionClipboard && editor.getSelection().isEmpty()) {
+			return;
+		}
+
+		window.localStorage.setItem('forceCopyWithSyntaxHighlighting', 'true');","very very nasty, especially for standalone editor embedders (other HTML pages outside vscode).

In such cases you can use a static, you can put it somewhere in editor/config or something...",2017-02-16 15:57:16
274,"@@ -136,6 +136,25 @@ export class NavigateBetweenGroupsAction extends Action {
 	}
 }
 
+export class FocusActiveGroupAction extends Action {
+
+	public static ID = 'workbench.action.focusActiveEditorGroup';
+	public static LABEL = nls.localize('focusActiveEditorGroup', ""Focus Active Editor Group"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		this.editorService.getActiveEditor().focus();","@Tyriar You will get a NPE when no editor is opened!
",2016-09-13 04:46:23
84,"@@ -136,9 +136,9 @@ export class HTMLWorker {
 			return callback(false, model);
 		}
 
-		let modeAtPosition = modelAtPosition.getMode();
+		let modeAtPositionMode = modelAtPosition.getMode();
 
-		return callback(modeAtPosition.getId() !== this._modeId, modelAtPosition);
+		return callback(modeAtPositionMode.getId() !== this._modeId, modelAtPosition);
 	}","This is just a variable rename. Is there more to come?
",2016-03-22 11:12:31
424,"@@ -139,6 +141,11 @@ export abstract class MainThreadEditorsShape {
 	$tryApplyEdits(id: string, modelVersionId: number, edits: editorCommon.ISingleEditOperation[], opts: IApplyEditsOptions): TPromise<boolean> { throw ni(); }
 }
 
+export abstract class MainThreadTreeExplorersShape {
+	$registerTreeExplorerNodeProvider(providerId: string): void { throw ni(); }
+	$showMessage(severity: Severity, message: string): void { throw ni(); }","[needs change] Why is this here? It duplicates functionality we already have in other places (ExtHostMessageService). Also, failure to resolve a tree item shouldn't automatically result in an error message. I propose to let the error bubble (as rejected promise) and handle the error in the tree, like showing an error node. 
",2016-11-01 09:44:02
852,"@@ -14,6 +14,7 @@ import { Builder, $ } from 'vs/base/browser/builder';
 import DOM = require('vs/base/browser/dom');
 import { DomScrollableElement } from 'vs/base/browser/ui/scrollbar/scrollableElement';
 import { BoundedLinkedMap } from 'vs/base/common/map';
+import { IWindowsService } from 'vs/platform/windows/common/windows';",@mjbvz we try to have base not depending on platform if possible (see https://github.com/Microsoft/vscode/wiki/Code-Organization#layers),2017-03-23 14:00:15
503,"@@ -14,84 +14,173 @@ import { IEnvironmentService } from 'vs/platform/environment/common/environment'
 import { IFileService } from 'vs/platform/files/common/files';
 import { TPromise } from 'vs/base/common/winjs.base';
 
+export interface IBackupsFileModel {
+	resolve(backupRoot: string): TPromise<IBackupsFileModel>;
+
+	add(resource: Uri, versionId?: number): void;
+	has(resource: Uri, versionId?: number): boolean;
+	remove(resource: Uri): void;
+	clear(): void;
+}
+
+// TODO@daniel this should resolve the backups with their file names once we have the metadata in place
+export class BackupsFileModel implements IBackupsFileModel {",Maybe `BackupFilesModel` would be clearer to indicate this deals with multiple files?,2016-11-22 19:12:52
502,"@@ -14,84 +14,173 @@ import { IEnvironmentService } from 'vs/platform/environment/common/environment'
 import { IFileService } from 'vs/platform/files/common/files';
 import { TPromise } from 'vs/base/common/winjs.base';
 
+export interface IBackupsFileModel {
+	resolve(backupRoot: string): TPromise<IBackupsFileModel>;
+
+	add(resource: Uri, versionId?: number): void;
+	has(resource: Uri, versionId?: number): boolean;
+	remove(resource: Uri): void;
+	clear(): void;
+}
+
+// TODO@daniel this should resolve the backups with their file names once we have the metadata in place
+export class BackupsFileModel implements IBackupsFileModel {
+	private cache: { [resource: string]: number /* version ID */ } = Object.create(null);
+
+	resolve(backupRoot: string): TPromise<IBackupsFileModel> {",Explicit access modifiers?,2016-11-22 19:12:06
501,"@@ -14,84 +14,173 @@ import { IEnvironmentService } from 'vs/platform/environment/common/environment'
 import { IFileService } from 'vs/platform/files/common/files';
 import { TPromise } from 'vs/base/common/winjs.base';
 
+export interface IBackupsFileModel {
+	resolve(backupRoot: string): TPromise<IBackupsFileModel>;
+
+	add(resource: Uri, versionId?: number): void;
+	has(resource: Uri, versionId?: number): boolean;
+	remove(resource: Uri): void;
+	clear(): void;
+}
+
+// TODO@daniel this should resolve the backups with their file names once we have the metadata in place
+export class BackupsFileModel implements IBackupsFileModel {
+	private cache: { [resource: string]: number /* version ID */ } = Object.create(null);
+
+	resolve(backupRoot: string): TPromise<IBackupsFileModel> {
+		return pfs.readDirsInDir(backupRoot).then(backupSchemas => {
+
+			// For all supported schemas
+			return TPromise.join(backupSchemas.map(backupSchema => {
+
+				// Read backup directory for backups
+				const backupSchemaPath = path.join(backupRoot, backupSchema);
+				return pfs.readdir(backupSchemaPath).then(backupHashes => {
+
+					// Remember known backups in our caches
+					backupHashes.forEach(backupHash => {
+						const backupResource = Uri.file(path.join(backupSchemaPath, backupHash));
+						this.add(backupResource);
+					});
+				});
+			}));
+		}).then(() => this, error => this);
+	}
+
+	add(resource: Uri, versionId = 0): void {",Type `versionId`?,2016-11-22 19:11:57
504,"@@ -14,84 +14,173 @@ import { IEnvironmentService } from 'vs/platform/environment/common/environment'
 import { IFileService } from 'vs/platform/files/common/files';
 import { TPromise } from 'vs/base/common/winjs.base';
 
+export interface IBackupsFileModel {
+	resolve(backupRoot: string): TPromise<IBackupsFileModel>;
+
+	add(resource: Uri, versionId?: number): void;
+	has(resource: Uri, versionId?: number): boolean;
+	remove(resource: Uri): void;
+	clear(): void;
+}
+
+// TODO@daniel this should resolve the backups with their file names once we have the metadata in place
+export class BackupsFileModel implements IBackupsFileModel {
+	private cache: { [resource: string]: number /* version ID */ } = Object.create(null);
+
+	resolve(backupRoot: string): TPromise<IBackupsFileModel> {
+		return pfs.readDirsInDir(backupRoot).then(backupSchemas => {
+
+			// For all supported schemas
+			return TPromise.join(backupSchemas.map(backupSchema => {
+
+				// Read backup directory for backups
+				const backupSchemaPath = path.join(backupRoot, backupSchema);
+				return pfs.readdir(backupSchemaPath).then(backupHashes => {
+
+					// Remember known backups in our caches
+					backupHashes.forEach(backupHash => {
+						const backupResource = Uri.file(path.join(backupSchemaPath, backupHash));
+						this.add(backupResource);
+					});
+				});
+			}));
+		}).then(() => this, error => this);
+	}
+
+	add(resource: Uri, versionId = 0): void {
+		this.cache[resource.toString()] = versionId;
+	}
+
+	has(resource: Uri, versionId?: number): boolean {
+		const cachedVersionId = this.cache[resource.toString()];
+		if (typeof cachedVersionId !== 'number') {
+			return false; // unknown resource
+		}
+
+		if (typeof versionId === 'number') {
+			return versionId === cachedVersionId; // if we are asked with a specific version ID, make sure to test for it
+		}
+
+		return true;
+	}
+
+	remove(resource: Uri): void {
+		delete this.cache[resource.toString()];
+	}
+
+	clear(): void {
+		this.cache = Object.create(null);
+	}
+}
+
 export class BackupFileService implements IBackupFileService {
 
 	public _serviceBrand: any;
 
 	protected backupHome: string;
 	protected workspacesJsonPath: string;
 
+	private backupWorkspacePath: string;
+	private ready: TPromise<IBackupsFileModel>;
+
 	constructor(
 		private currentWorkspace: Uri,
 		@IEnvironmentService private environmentService: IEnvironmentService,
 		@IFileService private fileService: IFileService
 	) {
 		this.backupHome = environmentService.backupHome;
 		this.workspacesJsonPath = environmentService.backupWorkspacesPath;
+
+		if (this.currentWorkspace) {
+			const workspaceHash = crypto.createHash('md5').update(this.currentWorkspace.fsPath).digest('hex');
+			this.backupWorkspacePath = path.join(this.backupHome, workspaceHash);
+		}
+
+		this.ready = this.init();
 	}
 
 	private get backupEnabled(): boolean {
 		return this.currentWorkspace && !this.environmentService.isExtensionDevelopment; // Hot exit is disabled for empty workspaces and when doing extension development
 	}
 
-	public hasBackup(resource: Uri): TPromise<boolean> {
-		const backupResource = this.getBackupResource(resource);
-		if (!backupResource) {
-			return TPromise.as(false);
-		}
-
-		return pfs.exists(backupResource.fsPath);
-	}
+	private init(): TPromise<IBackupsFileModel> {
+		const model = new BackupsFileModel();
 
-	private getBackupHash(resource: Uri): string {
 		if (!this.backupEnabled) {
-			return null;
+			return TPromise.as(model);
 		}
 
-		// Only hash the file path if the file is not untitled
-		return resource.scheme === 'untitled' ? resource.fsPath : crypto.createHash('md5').update(resource.fsPath).digest('hex');
+		return model.resolve(this.backupWorkspacePath);
 	}
 
-	public getBackupResource(resource: Uri): Uri {
-		const backupHash = this.getBackupHash(resource);
-		if (!backupHash) {
-			return null;
-		}
-
-		const backupPath = path.join(this.getWorkspaceBackupDirectory(), resource.scheme, backupHash);
-
-		return Uri.file(backupPath);
+	public hasBackup(resource: Uri): TPromise<boolean> {
+		return this.ready.then(model => {
+			const backupResource = this.getBackupResource(resource);
+			if (!backupResource) {
+				return TPromise.as(false);
+			}
+
+			return model.has(backupResource);
+		});
 	}
 
-	private getWorkspaceBackupDirectory(): string {
-		const workspaceHash = crypto.createHash('md5').update(this.currentWorkspace.fsPath).digest('hex');
+	public loadBackupResource(resource: Uri): TPromise<Uri> {
+		return this.ready.then(() => {
+			return this.hasBackup(resource).then(hasBackup => {
+				if (hasBackup) {
+					return this.getBackupResource(resource);
+				}
 
-		return path.join(this.backupHome, workspaceHash);
+				return void 0;
+			});
+		});
 	}
 
-	public backupResource(resource: Uri, content: string): TPromise<void> {
-		const backupResource = this.getBackupResource(resource);
-		if (!backupResource) {
-			return TPromise.as(void 0);
-		}
+	public backupResource(resource: Uri, content: string, versionId?: number): TPromise<void> {
+		return this.ready.then(model => {
+			const backupResource = this.getBackupResource(resource);
+			if (!backupResource) {
+				return TPromise.as(void 0);",Make these `return void 0;` now since it's inside a promise?,2016-11-22 19:15:59
505,"@@ -14,84 +14,173 @@ import { IEnvironmentService } from 'vs/platform/environment/common/environment'
 import { IFileService } from 'vs/platform/files/common/files';
 import { TPromise } from 'vs/base/common/winjs.base';
 
+export interface IBackupsFileModel {
+	resolve(backupRoot: string): TPromise<IBackupsFileModel>;
+
+	add(resource: Uri, versionId?: number): void;
+	has(resource: Uri, versionId?: number): boolean;
+	remove(resource: Uri): void;
+	clear(): void;
+}
+
+// TODO@daniel this should resolve the backups with their file names once we have the metadata in place
+export class BackupsFileModel implements IBackupsFileModel {
+	private cache: { [resource: string]: number /* version ID */ } = Object.create(null);
+
+	resolve(backupRoot: string): TPromise<IBackupsFileModel> {
+		return pfs.readDirsInDir(backupRoot).then(backupSchemas => {
+
+			// For all supported schemas
+			return TPromise.join(backupSchemas.map(backupSchema => {
+
+				// Read backup directory for backups
+				const backupSchemaPath = path.join(backupRoot, backupSchema);
+				return pfs.readdir(backupSchemaPath).then(backupHashes => {
+
+					// Remember known backups in our caches
+					backupHashes.forEach(backupHash => {
+						const backupResource = Uri.file(path.join(backupSchemaPath, backupHash));
+						this.add(backupResource);
+					});
+				});
+			}));
+		}).then(() => this, error => this);
+	}
+
+	add(resource: Uri, versionId = 0): void {
+		this.cache[resource.toString()] = versionId;
+	}
+
+	has(resource: Uri, versionId?: number): boolean {
+		const cachedVersionId = this.cache[resource.toString()];
+		if (typeof cachedVersionId !== 'number') {
+			return false; // unknown resource
+		}
+
+		if (typeof versionId === 'number') {
+			return versionId === cachedVersionId; // if we are asked with a specific version ID, make sure to test for it
+		}
+
+		return true;
+	}
+
+	remove(resource: Uri): void {
+		delete this.cache[resource.toString()];
+	}
+
+	clear(): void {
+		this.cache = Object.create(null);
+	}
+}
+
 export class BackupFileService implements IBackupFileService {
 
 	public _serviceBrand: any;
 
 	protected backupHome: string;
 	protected workspacesJsonPath: string;
 
+	private backupWorkspacePath: string;
+	private ready: TPromise<IBackupsFileModel>;
+
 	constructor(
 		private currentWorkspace: Uri,
 		@IEnvironmentService private environmentService: IEnvironmentService,
 		@IFileService private fileService: IFileService
 	) {
 		this.backupHome = environmentService.backupHome;
 		this.workspacesJsonPath = environmentService.backupWorkspacesPath;
+
+		if (this.currentWorkspace) {
+			const workspaceHash = crypto.createHash('md5').update(this.currentWorkspace.fsPath).digest('hex');
+			this.backupWorkspacePath = path.join(this.backupHome, workspaceHash);
+		}
+
+		this.ready = this.init();
 	}
 
 	private get backupEnabled(): boolean {
 		return this.currentWorkspace && !this.environmentService.isExtensionDevelopment; // Hot exit is disabled for empty workspaces and when doing extension development
 	}
 
-	public hasBackup(resource: Uri): TPromise<boolean> {
-		const backupResource = this.getBackupResource(resource);
-		if (!backupResource) {
-			return TPromise.as(false);
-		}
-
-		return pfs.exists(backupResource.fsPath);
-	}
+	private init(): TPromise<IBackupsFileModel> {
+		const model = new BackupsFileModel();
 
-	private getBackupHash(resource: Uri): string {
 		if (!this.backupEnabled) {
-			return null;
+			return TPromise.as(model);
 		}
 
-		// Only hash the file path if the file is not untitled
-		return resource.scheme === 'untitled' ? resource.fsPath : crypto.createHash('md5').update(resource.fsPath).digest('hex');
+		return model.resolve(this.backupWorkspacePath);
 	}
 
-	public getBackupResource(resource: Uri): Uri {
-		const backupHash = this.getBackupHash(resource);
-		if (!backupHash) {
-			return null;
-		}
-
-		const backupPath = path.join(this.getWorkspaceBackupDirectory(), resource.scheme, backupHash);
-
-		return Uri.file(backupPath);
+	public hasBackup(resource: Uri): TPromise<boolean> {
+		return this.ready.then(model => {
+			const backupResource = this.getBackupResource(resource);
+			if (!backupResource) {
+				return TPromise.as(false);
+			}
+
+			return model.has(backupResource);
+		});
 	}
 
-	private getWorkspaceBackupDirectory(): string {
-		const workspaceHash = crypto.createHash('md5').update(this.currentWorkspace.fsPath).digest('hex');
+	public loadBackupResource(resource: Uri): TPromise<Uri> {
+		return this.ready.then(() => {
+			return this.hasBackup(resource).then(hasBackup => {
+				if (hasBackup) {
+					return this.getBackupResource(resource);
+				}
 
-		return path.join(this.backupHome, workspaceHash);
+				return void 0;
+			});
+		});
 	}
 
-	public backupResource(resource: Uri, content: string): TPromise<void> {
-		const backupResource = this.getBackupResource(resource);
-		if (!backupResource) {
-			return TPromise.as(void 0);
-		}
+	public backupResource(resource: Uri, content: string, versionId?: number): TPromise<void> {
+		return this.ready.then(model => {
+			const backupResource = this.getBackupResource(resource);
+			if (!backupResource) {
+				return TPromise.as(void 0);
+			}
+
+			if (model.has(backupResource, versionId)) {
+				return TPromise.as(void 0); // return early if backup version id matches requested one
+			}
 
-		return this.fileService.updateContent(backupResource, content, BACKUP_FILE_UPDATE_OPTIONS).then(() => void 0);
+			return this.fileService.updateContent(backupResource, content, BACKUP_FILE_UPDATE_OPTIONS).then(() => model.add(backupResource, versionId));
+		});
 	}
 
 	public discardResourceBackup(resource: Uri): TPromise<void> {
-		const backupResource = this.getBackupResource(resource);
-		if (!backupResource) {
-			return TPromise.as(void 0);
-		}
-
-		return this.fileService.del(backupResource);
+		return this.ready.then(model => {
+			const backupResource = this.getBackupResource(resource);
+			if (!backupResource) {
+				return TPromise.as(void 0);
+			}
+
+			return this.fileService.del(backupResource).then(() => model.remove(backupResource));
+		});
 	}
 
 	public discardAllWorkspaceBackups(): TPromise<void> {
+		return this.ready.then(model => {
+			if (!this.backupEnabled) {
+				return TPromise.as(void 0);
+			}
+
+			return this.fileService.del(Uri.file(this.backupWorkspacePath)).then(() => model.clear());
+		});
+	}
+
+	public getBackupResource(resource: Uri): Uri {",Should this be `private`/`protected` now?,2016-11-22 19:16:58
772,"@@ -141,6 +141,34 @@ export class FocusNextTerminalAction extends Action {
 	}
 }
 
+export class FocusTerminalByNumberAction extends Action {
+	private static ID_PREFIX = 'workbench.action.terminal.focus';
+
+	constructor(
+		id: string, label: string,
+		@ITerminalService private terminalService: ITerminalService
+	) {
+		super(id, label);
+	}
+
+	public run(event?: any): TPromise<any> {
+		this.terminalService.setActiveInstanceByIndex(this.getTerminalNumber() - 1);
+		return this.terminalService.showPanel(true);
+	}
+
+	public static getId(n: number): string {
+		return FocusTerminalByNumberAction.ID_PREFIX + n;
+	}
+
+	public static getLabel(n: number): string {
+		return nls.localize(`workbench.action.terminal.focusByNumber${n}`, `Focus Terminal ${n}`, n);","Almost there 😃 I think this should be:

```ts
return nls.localize('workbench.action.terminal.focusByNumber', 'Focus Terminal {0}', n);
```

That way our localization system will understand it.",2017-02-21 16:17:15
719,"@@ -1412,6 +1412,21 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * Options to configure the behavior of the message.
+	 *
+	 * @see [showInformationMessage](#window.showInformationMessage)
+	 * @see [showWarningMessage](#window.showWarningMessage)
+	 * @see [showErrorMessage](#window.showErrorMessage)
+	 */
+	export interface MessageOptions {
+
+		/**
+		 * Indicates that this message should be modal.
+		 */
+		modal?: boolean;
+	}",Can we already imagine having other options here? If not we should think about a naked boolean instead,2017-02-02 16:47:44
261,"@@ -142,12 +199,13 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 		});
 	}
 
+	private getExpressionSupportingEvaluate(session: debug.IRawDebugSession, expression: string) : TPromise<Expression> {","No need for this method, just brings conffusion among method names. I recommend to just move these two lines out to the one place where you call this method from
",2016-08-24 14:12:15
601,"@@ -142,6 +175,76 @@ function buildRpmPackage(arch) {
 	]);
 }
 
+function getFlatpakArch(arch) {
+	return { x64: 'x86_64', ia32: 'i386', arm: 'arm' }[arch];
+}
+
+function prepareFlatpak(arch) {
+	// This is not imported in the global scope to avoid requiring ImageMagick
+	// (or GraphicsMagick) when building not building Flatpak bundles.
+	const imgResize = require('gulp-image-resize');
+
+	const binaryDir = '../VSCode-linux-' + arch;
+	const flatpakArch = getFlatpakArch(arch);
+	const destination = '.build/linux/flatpak/' + flatpakArch;
+
+	return function () {
+		const all = [16, 24, 32, 48, 64, 128, 192, 256, 512].map(function (size) {",Are all these sizes necessary? The smaller ones in particular would probably look pretty crappy being scaled like this?,2016-12-13 19:31:01
602,"@@ -142,6 +175,76 @@ function buildRpmPackage(arch) {
 	]);
 }
 
+function getFlatpakArch(arch) {
+	return { x64: 'x86_64', ia32: 'i386', arm: 'arm' }[arch];
+}
+
+function prepareFlatpak(arch) {
+	// This is not imported in the global scope to avoid requiring ImageMagick
+	// (or GraphicsMagick) when building not building Flatpak bundles.
+	const imgResize = require('gulp-image-resize');
+
+	const binaryDir = '../VSCode-linux-' + arch;
+	const flatpakArch = getFlatpakArch(arch);
+	const destination = '.build/linux/flatpak/' + flatpakArch;
+
+	return function () {
+		const all = [16, 24, 32, 48, 64, 128, 192, 256, 512].map(function (size) {
+			return gulp.src('resources/linux/code.png', { base: '.' })
+				.pipe(imgResize({ width: size, height: size, format: ""png"", noProfile: true }))
+				.pipe(rename('share/icons/hicolor/' + size + 'x' + size + '/apps/' + flatpakManifest.appId + '.png'));
+		});
+
+		all.push(gulp.src('resources/linux/code.desktop', { base: '.' })
+			.pipe(replace('Exec=/usr/share/@@NAME@@/@@NAME@@', 'Exec=code-oss'))
+			.pipe(replace('@@NAME_LONG@@', product.nameLong))
+			.pipe(replace('@@NAME_SHORT@@', product.nameShort))
+			.pipe(replace('@@NAME@@', product.applicationName))
+			.pipe(rename('share/applications/' + flatpakManifest.appId + '.desktop')));
+
+		all.push(gulp.src('resources/linux/code.appdata.xml', { base: '.' })
+			.pipe(replace('@@NAME_LONG@@', product.nameLong))
+			.pipe(replace('@@NAME@@', flatpakManifest.appId))
+			.pipe(rename('share/appdata/' + flatpakManifest.appId + '.appdata.xml')));
+
+		all.push(gulp.src(binaryDir + '/**/*', { base:binaryDir })",What's this part doing?,2016-12-13 19:33:43
603,"@@ -142,6 +175,76 @@ function buildRpmPackage(arch) {
 	]);
 }
 
+function getFlatpakArch(arch) {
+	return { x64: 'x86_64', ia32: 'i386', arm: 'arm' }[arch];
+}
+
+function prepareFlatpak(arch) {
+	// This is not imported in the global scope to avoid requiring ImageMagick
+	// (or GraphicsMagick) when building not building Flatpak bundles.
+	const imgResize = require('gulp-image-resize');
+
+	const binaryDir = '../VSCode-linux-' + arch;
+	const flatpakArch = getFlatpakArch(arch);
+	const destination = '.build/linux/flatpak/' + flatpakArch;
+
+	return function () {
+		const all = [16, 24, 32, 48, 64, 128, 192, 256, 512].map(function (size) {
+			return gulp.src('resources/linux/code.png', { base: '.' })
+				.pipe(imgResize({ width: size, height: size, format: ""png"", noProfile: true }))
+				.pipe(rename('share/icons/hicolor/' + size + 'x' + size + '/apps/' + flatpakManifest.appId + '.png'));
+		});
+
+		all.push(gulp.src('resources/linux/code.desktop', { base: '.' })
+			.pipe(replace('Exec=/usr/share/@@NAME@@/@@NAME@@', 'Exec=code-oss'))
+			.pipe(replace('@@NAME_LONG@@', product.nameLong))
+			.pipe(replace('@@NAME_SHORT@@', product.nameShort))
+			.pipe(replace('@@NAME@@', product.applicationName))
+			.pipe(rename('share/applications/' + flatpakManifest.appId + '.desktop')));
+
+		all.push(gulp.src('resources/linux/code.appdata.xml', { base: '.' })
+			.pipe(replace('@@NAME_LONG@@', product.nameLong))
+			.pipe(replace('@@NAME@@', flatpakManifest.appId))
+			.pipe(rename('share/appdata/' + flatpakManifest.appId + '.appdata.xml')));
+
+		all.push(gulp.src(binaryDir + '/**/*', { base:binaryDir })
+			.pipe(rename(function (p) {
+				p.dirname = 'share/' + product.applicationName + '/' + p.dirname;
+			})));
+
+		return es.merge(all).pipe(vfs.dest(destination));
+	}
+}
+
+function buildFlatpak(arch) {
+	const flatpakArch = getFlatpakArch(arch);
+	const manifest = {};
+	for (var k in flatpakManifest) manifest[k] = flatpakManifest[k];",Use braces and put `manifest[k]..` on new line as this would fail ts style rules,2016-12-13 19:34:40
604,"@@ -142,6 +175,76 @@ function buildRpmPackage(arch) {
 	]);
 }
 
+function getFlatpakArch(arch) {
+	return { x64: 'x86_64', ia32: 'i386', arm: 'arm' }[arch];
+}
+
+function prepareFlatpak(arch) {
+	// This is not imported in the global scope to avoid requiring ImageMagick
+	// (or GraphicsMagick) when building not building Flatpak bundles.
+	const imgResize = require('gulp-image-resize');
+
+	const binaryDir = '../VSCode-linux-' + arch;
+	const flatpakArch = getFlatpakArch(arch);
+	const destination = '.build/linux/flatpak/' + flatpakArch;
+
+	return function () {
+		const all = [16, 24, 32, 48, 64, 128, 192, 256, 512].map(function (size) {
+			return gulp.src('resources/linux/code.png', { base: '.' })
+				.pipe(imgResize({ width: size, height: size, format: ""png"", noProfile: true }))
+				.pipe(rename('share/icons/hicolor/' + size + 'x' + size + '/apps/' + flatpakManifest.appId + '.png'));
+		});
+
+		all.push(gulp.src('resources/linux/code.desktop', { base: '.' })
+			.pipe(replace('Exec=/usr/share/@@NAME@@/@@NAME@@', 'Exec=code-oss'))
+			.pipe(replace('@@NAME_LONG@@', product.nameLong))
+			.pipe(replace('@@NAME_SHORT@@', product.nameShort))
+			.pipe(replace('@@NAME@@', product.applicationName))
+			.pipe(rename('share/applications/' + flatpakManifest.appId + '.desktop')));
+
+		all.push(gulp.src('resources/linux/code.appdata.xml', { base: '.' })
+			.pipe(replace('@@NAME_LONG@@', product.nameLong))
+			.pipe(replace('@@NAME@@', flatpakManifest.appId))
+			.pipe(rename('share/appdata/' + flatpakManifest.appId + '.appdata.xml')));
+
+		all.push(gulp.src(binaryDir + '/**/*', { base:binaryDir })
+			.pipe(rename(function (p) {
+				p.dirname = 'share/' + product.applicationName + '/' + p.dirname;
+			})));
+
+		return es.merge(all).pipe(vfs.dest(destination));
+	}
+}
+
+function buildFlatpak(arch) {
+	const flatpakArch = getFlatpakArch(arch);
+	const manifest = {};
+	for (var k in flatpakManifest) manifest[k] = flatpakManifest[k];
+	manifest.files = [
+		['.build/linux/flatpak/' + flatpakArch, '/'],
+	];
+	const buildOptions = {
+		arch: flatpakArch,
+		subject: product.nameLong + ' ' + packageJson.version + '.' + linuxPackageRevision,
+	};
+	// If requested, use the configured path for the OSTree repository.
+	if (process.env.FLATPAK_REPO) {
+		buildOptions.repoDir = process.env.FLATPAK_REPO;
+	} else {
+		buildOptions.bundlePath = manifest.appId + '-' + flatpakArch + '.flatpak';
+	}
+	// Setup PGP signing if requested.
+	if (process.env.GPG_KEY_ID !== undefined) {","I'd prefer to keep this and the `FLATPAK_REPO` if out until we decided to use them. Was this going to be for personal use, or?",2016-12-13 19:38:30
409,"@@ -144,8 +234,12 @@ class ViewletActivityAction extends ActivityAction {
 	private static preventDoubleClickDelay = 300;
 	private lastRun: number = 0;
 
+	private _onOpenExternalViewlet = new Emitter<string>();
+	get onOpenExternalViewlet(): Event<string> { return this._onOpenExternalViewlet.event; };","Access modifier
",2016-10-24 15:44:10
182,"@@ -145,29 +153,55 @@ export default class Webview {
 		::-webkit-scrollbar {
 			width: 14px;
 			height: 10px;
-		}
-		::-webkit-scrollbar-thumb:hover {
-			background-color: rgba(100, 100, 100, 0.7);
 		}`;
 
+		let bodyClasses = {
+			remove: ['monaco-editor', 'vs', 'vs-dark', 'hc-black']","do we need `monaco-editor`? 
and for the sake of being aligned and explicit should we call the theme classes: `vscode-light`, `vscode-dark`, and `vscode-high-contrast`?
",2016-06-14 13:36:50
712,"@@ -145,6 +137,26 @@ class ImplementationAdapter {
 	}
 }
 
+class TypeDefinitionAdapter {
+	constructor(",same,2017-02-02 07:59:39
674,"@@ -145,7 +145,8 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 				previewEditors: editorConfig.enablePreview,
 				showIcons: editorConfig.showIcons,
 				showTabs: editorConfig.showTabs,
-				showTabCloseButton: editorConfig.showTabCloseButton
+				showTabCloseButton: editorConfig.showTabCloseButton,",Just delete support for `showTabCloseButton` option since it is now supported via your `tabCloseButton` setting.,2017-01-16 07:57:57
940,"@@ -147,6 +150,11 @@ export default class PHPValidationProvider {
 			let shellSettings = section.get<any>('validate.runInShell');
 			if (typeof(shellSettings) === 'boolean') {
 				this.runInShell = shellSettings;
+				if (this.platform.toLowerCase() === 'win32') {
+					this.shellExecutable = 'C:\\Windows\\sysnative\\bash.exe';","I think we can't assume that a user wants the bash if runInShell is set to true. I would expect that the user wants to use what is defined in ComSpec under Windows.

And then we need to set the shellArgs accordingly as well since -c will not work with cmd.exe nor with powershell.exe. For cmd.exe this is /C and for PowerShell it is /Command
",2017-05-18 08:25:03
379,"@@ -147,6 +152,10 @@ export class TextFileEditorModelManager implements ITextFileEditorModelManager {
 		return true;
 	}
 
+	public get onModelContentChanged(): Event<TextFileModelChangeEvent> {","I see the need for an event when untitled or text files are changing so that the backup service can do its business, however I fear that this comes at the cost of spam: you will see many model content change events while the user is typing, so basically each key press will trigger this event. Performance should always be something to be concerned of, especially when it is typing performance we are talking about. 

Some ideas:
- buffer the model content change event and only start to emit the change after a certain delay
- do not always create an event object to send around

I think buffering would be a good idea anyway because backups should also not be created without some delay.
",2016-10-21 14:09:35
533,"@@ -147,6 +158,10 @@ export class BackupFileService implements IBackupFileService {
 				return void 0; // return early if backup version id matches requested one
 			}
 
+			if (resource.scheme === 'file') {","@Tyriar so you say that you do this only for files because untitled do not have this issue? not sure about that, what about someone that starts ""`code <file name>`"" where the file path does not exist and we show an untitled file with associated file path? I think we will have to store the path for untitled too in that case. Maybe untitled files should be stored differently on disk compared to today: instead of using their name (`Untitled-1`, `Untitled-2`), hash the associated file path and if there is none, hash the name. This would also be the fix for https://github.com/Microsoft/vscode/issues/15941",2016-11-29 05:22:11
532,"@@ -147,6 +158,10 @@ export class BackupFileService implements IBackupFileService {
 				return void 0; // return early if backup version id matches requested one
 			}
 
+			if (resource.scheme === 'file') {
+				content = `${resource.fsPath}\n${content}`;",@Tyriar I suggest to use `Uri.toString()` here and `Uri.parse()` on the other side to reconstruct.,2016-11-29 05:20:03
736,"@@ -147,7 +147,7 @@ configurationRegistry.registerConfiguration({
 				CreateNewTerminalAction.ID,
 				CopyTerminalSelectionAction.ID,
 				KillTerminalAction.ID,
-				FocusTerminalAction.ID,
+				FocusActiveTerminalAction.ID,",I wonder if all the new commands should be added here as well?,2017-02-18 19:01:46
720,"@@ -148,31 +148,32 @@ export class TerminalPanel extends Panel {
 				// Drop selection and focus terminal on Linux to enable middle button paste when click
 				// occurs on the selection itself.
 				this._terminalService.getActiveInstance().focus();
-			} else if (event.which === 3) {
-				if (this._terminalService.configHelper.getRightClickCopyPaste()) {
-					let terminal = this._terminalService.getActiveInstance();
-					if (terminal.hasSelection()) {
-						terminal.copySelection();
-						terminal.clearSelection();
-					} else {
-						terminal.paste();
-					}
+			}
+		}));
+		this._register(DOM.addDisposableListener(this._parentDomElement, 'contextmenu', (event: MouseEvent) => {
+			if (this._terminalService.configHelper.getRightClickCopyPaste()) {",Should the right click copy/paste stuff still be in the mousedown handler and cancel the event if it goes off? I think cmd copies/pastes on mousedown rather than mouseup.,2017-02-03 20:01:34
280,"@@ -148,7 +148,10 @@ export class ExtensionManagementService implements IExtensionManagementService {
 					const readme = children.filter(child => /^readme(\.txt|\.md|)$/i.test(child))[0];
 					const readmeUrl = readme ? URI.file(path.join(extensionPath, readme)).toString() : null;
 
-					const local: ILocalExtension = { id, manifest, metadata, path: extensionPath, readmeUrl };
+					const changelog = children.filter(child => /^changelog(\.txt|\.md|)$/i.test(child))[0];
+					const changelogUrl = changelog ? URI.file(path.join(extensionPath, changelog)).toString() : null;","This code is a simple copy paste from the `readme` counterpart.
Do you think would it be worth to rewrite in a more coincise way like `['changelog', 'readme'].reduce(() => {...}`?
",2016-09-14 17:07:40
636,"@@ -149,25 +149,30 @@ export class TerminalPanel extends Panel {
 				// occurs on the selection itself.
 				this._terminalService.getActiveInstance().focus();
 			} else if (event.which === 3) {
-				// Trigger the context menu on right click
-				let anchor: HTMLElement | { x: number, y: number } = this._parentDomElement;
-				if (event instanceof MouseEvent) {","I just realized that this is actually my code haha, as long as the context menu appears in the correct spot after this change (when `rightClickCopyPaste` is false) then this was fine to remove :+1: ",2016-12-21 03:02:52
621,"@@ -149,25 +149,35 @@ export class TerminalPanel extends Panel {
 				// occurs on the selection itself.
 				this._terminalService.getActiveInstance().focus();
 			} else if (event.which === 3) {
-				// Trigger the context menu on right click
-				let anchor: HTMLElement | { x: number, y: number } = this._parentDomElement;
-				if (event instanceof MouseEvent) {
-					const standardEvent = new StandardMouseEvent(event);
-					anchor = { x: standardEvent.posx, y: standardEvent.posy };
-				}
+				let rightClickAction: string = this._terminalService.configHelper.getRightClickAction();
+				if (rightClickAction === 'copyPaste') {",I was thinking of adding enum for rightClickAction but not sure it's worth it.,2016-12-18 22:51:17
625,"@@ -149,25 +149,35 @@ export class TerminalPanel extends Panel {
 				// occurs on the selection itself.
 				this._terminalService.getActiveInstance().focus();
 			} else if (event.which === 3) {
-				// Trigger the context menu on right click
-				let anchor: HTMLElement | { x: number, y: number } = this._parentDomElement;
-				if (event instanceof MouseEvent) {
-					const standardEvent = new StandardMouseEvent(event);
-					anchor = { x: standardEvent.posx, y: standardEvent.posy };
-				}
+				let rightClickAction: string = this._terminalService.configHelper.getRightClickAction();
+				if (rightClickAction === 'copyPaste') {
+					let terminal = this._terminalService.getActiveInstance();
+					if (terminal.hasSelection()) {
+						terminal.copySelection();
+						terminal.clearSelection();
+					} else {
+						terminal.paste();
+					}
+				} else if (rightClickAction === 'contextMenu') {
+					let anchor: HTMLElement | { x: number, y: number } = this._parentDomElement;",Would prefer if these were 2 different variables (if you need to store `this._parentDomElement` at all),2016-12-19 05:38:26
624,"@@ -149,25 +149,35 @@ export class TerminalPanel extends Panel {
 				// occurs on the selection itself.
 				this._terminalService.getActiveInstance().focus();
 			} else if (event.which === 3) {
-				// Trigger the context menu on right click
-				let anchor: HTMLElement | { x: number, y: number } = this._parentDomElement;
-				if (event instanceof MouseEvent) {
-					const standardEvent = new StandardMouseEvent(event);
-					anchor = { x: standardEvent.posx, y: standardEvent.posy };
-				}
+				let rightClickAction: string = this._terminalService.configHelper.getRightClickAction();
+				if (rightClickAction === 'copyPaste') {
+					let terminal = this._terminalService.getActiveInstance();
+					if (terminal.hasSelection()) {
+						terminal.copySelection();
+						terminal.clearSelection();
+					} else {
+						terminal.paste();
+					}
+				} else if (rightClickAction === 'contextMenu') {
+					let anchor: HTMLElement | { x: number, y: number } = this._parentDomElement;
+					if (event instanceof MouseEvent) {",Isn't `event` guaranteed to be a `MouseEvent`?,2016-12-19 05:37:47
906,"@@ -149,6 +149,16 @@ export async function mkdirp(path: string, mode?: number): Promise<boolean> {
 	return true;
 }
 
+export async function createOrAppendFile(path: string, data: string, options?: any): Promise<boolean> {","I'd rather we go through the `applyEdit` vscode API, instead of raw node file editing.",2017-05-05 08:38:15
965,"@@ -149,6 +149,31 @@ export class ShowAllCommandsAction extends Action {
 	}
 }
 
+export class ShowTasksAction extends Action {
+
+	public static ID = 'workbench.action.showTasks';
+	public static LABEL = nls.localize('showTasks', ""Show Task Menu"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IQuickOpenService private quickOpenService: IQuickOpenService,
+		@IConfigurationService private configurationService: IConfigurationService
+	) {
+		super(id, label);
+	}
+
+	public run(context?: any): TPromise<any> {
+		let value = ALL_COMMANDS_PREFIX;
+		let taskStr = 'tasks';","Style nitpick, use `const` when possible. ",2017-06-12 21:24:07
528,"@@ -15,12 +15,31 @@ const util = require('./lib/util');
 const packageJson = require('../package.json');
 const product = require('../product.json');
 
+const linuxPackageRevision = Math.floor(new Date().getTime() / 1000);
+
+const flatpakManifest = {
+	appId: 'com.microsoft.CodeOSS',
+	sdk: 'org.freedesktop.Sdk',
+	runtime: 'org.freedesktop.Sdk',
+	runtimeVersion: '1.4',
+	base: 'io.atom.electron.BaseApp',
+	baseFlatpakref: 'https://s3-us-west-2.amazonaws.com/electron-flatpak.endlessm.com/electron-base-app-master.flatpakref',
+	command: ""code-oss"",
+	symlinks: [
+		['/share/code-oss/code-oss', '/bin/code-oss'],
+	],
+	finishArgs: [
+		'--share=ipc', '--socket=x11',  // Allow showing X11 windows.
+		'--filesystem=home',            // Allow access to home directory.","I think for a text editor, exposing as much of the filesystem as possible would be a good idea. So use `--filesystem=host` instead. That's what gnome-builder does, for example.",2016-11-28 20:17:01
529,"@@ -15,12 +15,31 @@ const util = require('./lib/util');
 const packageJson = require('../package.json');
 const product = require('../product.json');
 
+const linuxPackageRevision = Math.floor(new Date().getTime() / 1000);
+
+const flatpakManifest = {
+	appId: 'com.microsoft.CodeOSS',
+	sdk: 'org.freedesktop.Sdk',
+	runtime: 'org.freedesktop.Sdk',
+	runtimeVersion: '1.4',
+	base: 'io.atom.electron.BaseApp',
+	baseFlatpakref: 'https://s3-us-west-2.amazonaws.com/electron-flatpak.endlessm.com/electron-base-app-master.flatpakref',
+	command: ""code-oss"",
+	symlinks: [
+		['/share/code-oss/code-oss', '/bin/code-oss'],
+	],
+	finishArgs: [
+		'--share=ipc', '--socket=x11',  // Allow showing X11 windows.
+		'--filesystem=home',            // Allow access to home directory.
+		'--device=dri',                 // Allow OpenGL rendering.","Other finish args to consider
 - `--socket=pulseaudio` if the app or any app extensions need audio output
 - `--share=network` to install extensions using the network connection
 - `--talk-name=org.freedesktop.Notifications` if this even uses libnotify for desktop notifications

Lastly a bit weird, but adding `--filesystem=/tmp` will make sure you get the system tmp directory, which chromium/electron is using for its single check. https://github.com/electron/electron/blob/master/chromium_src/chrome/browser/process_singleton_posix.cc#L12",2016-11-28 20:22:37
597,"@@ -15,12 +15,35 @@ const util = require('./lib/util');
 const packageJson = require('../package.json');
 const product = require('../product.json');
 
+const linuxPackageRevision = Math.floor(new Date().getTime() / 1000);
+
+const flatpakManifest = {
+	appId: 'com.microsoft.CodeOSS',","Our application id in the other packages is `code[-insiders].desktop`, should this be the same or is this a new ID we would be introducing? This should be sourced from https://github.com/Microsoft/vscode/blob/master/product.json",2016-12-13 19:26:20
598,"@@ -15,12 +15,35 @@ const util = require('./lib/util');
 const packageJson = require('../package.json');
 const product = require('../product.json');
 
+const linuxPackageRevision = Math.floor(new Date().getTime() / 1000);
+
+const flatpakManifest = {
+	appId: 'com.microsoft.CodeOSS',
+	sdk: 'org.freedesktop.Sdk',
+	runtime: 'org.freedesktop.Sdk',
+	runtimeVersion: '1.4',",What version is this for?,2016-12-13 19:27:47
599,"@@ -15,12 +15,35 @@ const util = require('./lib/util');
 const packageJson = require('../package.json');
 const product = require('../product.json');
 
+const linuxPackageRevision = Math.floor(new Date().getTime() / 1000);
+
+const flatpakManifest = {
+	appId: 'com.microsoft.CodeOSS',
+	sdk: 'org.freedesktop.Sdk',
+	runtime: 'org.freedesktop.Sdk',
+	runtimeVersion: '1.4',
+	base: 'io.atom.electron.BaseApp',
+	baseFlatpakref: 'https://s3-us-west-2.amazonaws.com/electron-flatpak.endlessm.com/electron-base-app-master.flatpakref',
+	command: ""code-oss"",","```
command: product.applicationName
```",2016-12-13 19:28:22
600,"@@ -15,12 +15,35 @@ const util = require('./lib/util');
 const packageJson = require('../package.json');
 const product = require('../product.json');
 
+const linuxPackageRevision = Math.floor(new Date().getTime() / 1000);
+
+const flatpakManifest = {
+	appId: 'com.microsoft.CodeOSS',
+	sdk: 'org.freedesktop.Sdk',
+	runtime: 'org.freedesktop.Sdk',
+	runtimeVersion: '1.4',
+	base: 'io.atom.electron.BaseApp',
+	baseFlatpakref: 'https://s3-us-west-2.amazonaws.com/electron-flatpak.endlessm.com/electron-base-app-master.flatpakref',
+	command: ""code-oss"",
+	symlinks: [
+		['/share/code-oss/bin/code-oss', '/bin/code-oss'],",This should use `product.applicationName` instead of `code-oss`,2016-12-13 19:28:39
512,"@@ -15,6 +15,14 @@
 			""aliases"": [ ""PHP"", ""php"" ],
 			""mimetypes"": [""application/x-php""],
 			""configuration"": ""./language-configuration.json""
+		},
+		{
+			// For reference by services requiring PHP syntax highlighting for partial
+			// code missing script start/end tags.
+			""id"": ""phplanguage"",
+			""aliases"": [ null ], // unsupported: prevents language from appearing in Language Mode list","Couldn't this just be `""aliases"": null` instead of the one-element array?",2016-11-24 11:40:19
387,"@@ -15,6 +15,8 @@
 .monaco-workbench > .part.editor > .content > .one-editor-silo > .container > .title .tabs-container > .tab .tab-label a {
 	text-decoration: none;
 	font-size: 13px;
+	height:35px;
+	line-height: 35px;","Are these two still needed?
",2016-10-24 14:22:04
698,"@@ -150,6 +151,87 @@ class FormatOnType implements editorCommon.IEditorContribution {
 	}
 }
 
+@commonEditorContribution
+class FormatOnPaste implements editorCommon.IEditorContribution {
+
+	private static ID = 'editor.contrib.formatOnPaste';
+
+	private editor: editorCommon.ICommonCodeEditor;
+	private workerService: IEditorWorkerService;
+	private callOnDispose: IDisposable[];
+	private callOnModel: IDisposable[];
+
+	constructor(editor: editorCommon.ICommonCodeEditor, @IEditorWorkerService workerService: IEditorWorkerService) {
+		this.editor = editor;
+		this.workerService = workerService;
+		this.callOnDispose = [];
+		this.callOnModel = [];
+
+		this.callOnDispose.push(editor.onDidChangeConfiguration(() => this.update()));
+		this.callOnDispose.push(editor.onDidChangeModel(() => this.update()));
+		this.callOnDispose.push(editor.onDidChangeModelLanguage(() => this.update()));
+		this.callOnDispose.push(DocumentRangeFormattingEditProviderRegistry.onDidChange(this.update, this));
+	}
+
+	private update(): void {
+
+		// clean up
+		this.callOnModel = dispose(this.callOnModel);
+
+		// we are disabled
+		if (!this.editor.getConfiguration().contribInfo.formatOnPaste) {
+			return;
+		}
+
+		// no model
+		if (!this.editor.getModel()) {
+			return;
+		}
+
+		var model = this.editor.getModel();",nitpick: prefer let over var (same two lines below),2017-01-19 15:40:14
699,"@@ -150,6 +151,87 @@ class FormatOnType implements editorCommon.IEditorContribution {
 	}
 }
 
+@commonEditorContribution
+class FormatOnPaste implements editorCommon.IEditorContribution {
+
+	private static ID = 'editor.contrib.formatOnPaste';
+
+	private editor: editorCommon.ICommonCodeEditor;
+	private workerService: IEditorWorkerService;
+	private callOnDispose: IDisposable[];
+	private callOnModel: IDisposable[];
+
+	constructor(editor: editorCommon.ICommonCodeEditor, @IEditorWorkerService workerService: IEditorWorkerService) {
+		this.editor = editor;
+		this.workerService = workerService;
+		this.callOnDispose = [];
+		this.callOnModel = [];
+
+		this.callOnDispose.push(editor.onDidChangeConfiguration(() => this.update()));
+		this.callOnDispose.push(editor.onDidChangeModel(() => this.update()));
+		this.callOnDispose.push(editor.onDidChangeModelLanguage(() => this.update()));
+		this.callOnDispose.push(DocumentRangeFormattingEditProviderRegistry.onDidChange(this.update, this));
+	}
+
+	private update(): void {
+
+		// clean up
+		this.callOnModel = dispose(this.callOnModel);
+
+		// we are disabled
+		if (!this.editor.getConfiguration().contribInfo.formatOnPaste) {
+			return;
+		}
+
+		// no model
+		if (!this.editor.getModel()) {
+			return;
+		}
+
+		var model = this.editor.getModel();
+
+		// no support
+		var [support] = OnTypeFormattingEditProviderRegistry.ordered(model);
+		if (!support || !support.autoFormatTriggerCharacters) {",No need for the support to have autoFormatTriggerCharacters. Perhaps a copy-paste error?,2017-01-19 15:40:44
700,"@@ -150,6 +151,87 @@ class FormatOnType implements editorCommon.IEditorContribution {
 	}
 }
 
+@commonEditorContribution
+class FormatOnPaste implements editorCommon.IEditorContribution {
+
+	private static ID = 'editor.contrib.formatOnPaste';
+
+	private editor: editorCommon.ICommonCodeEditor;
+	private workerService: IEditorWorkerService;
+	private callOnDispose: IDisposable[];
+	private callOnModel: IDisposable[];
+
+	constructor(editor: editorCommon.ICommonCodeEditor, @IEditorWorkerService workerService: IEditorWorkerService) {
+		this.editor = editor;
+		this.workerService = workerService;
+		this.callOnDispose = [];
+		this.callOnModel = [];
+
+		this.callOnDispose.push(editor.onDidChangeConfiguration(() => this.update()));
+		this.callOnDispose.push(editor.onDidChangeModel(() => this.update()));
+		this.callOnDispose.push(editor.onDidChangeModelLanguage(() => this.update()));
+		this.callOnDispose.push(DocumentRangeFormattingEditProviderRegistry.onDidChange(this.update, this));
+	}
+
+	private update(): void {
+
+		// clean up
+		this.callOnModel = dispose(this.callOnModel);
+
+		// we are disabled
+		if (!this.editor.getConfiguration().contribInfo.formatOnPaste) {
+			return;
+		}
+
+		// no model
+		if (!this.editor.getModel()) {
+			return;
+		}
+
+		var model = this.editor.getModel();
+
+		// no support
+		var [support] = OnTypeFormattingEditProviderRegistry.ordered(model);
+		if (!support || !support.autoFormatTriggerCharacters) {
+			return;
+		}
+
+		this.callOnModel.push(this.editor.onDidPaste((range: Range) => {
+			this.trigger(range);
+		}));
+	}
+
+	private trigger(range: Range): void {
+		if (this.editor.getSelections().length > 1) {
+			return;
+		}
+
+		const model = this.editor.getModel();
+		const { tabSize, insertSpaces } = model.getOptions();
+		const state = this.editor.captureState(editorCommon.CodeEditorStateFlag.Value, editorCommon.CodeEditorStateFlag.Position);
+
+		getDocumentRangeFormattingEdits(model, range, { tabSize, insertSpaces }).then(edits => {
+			return this.workerService.computeMoreMinimalEdits(model.uri, edits, []);
+		}).then(edits => {
+			if (!state.validate(this.editor) || isFalsyOrEmpty(edits)) {
+				return;
+			}
+			const command = new EditOperationsCommand(edits, this.editor.getSelection());
+			this.editor.executeCommand(this.getId(), command);
+			this.editor.focus();","No need to focus here, since we are not moving the focus anywhere. ",2017-01-19 15:41:59
377,"@@ -151,15 +127,15 @@ export abstract class TextFileService implements ITextFileService {
 						return this.confirmBeforeShutdown(); // we still have dirty files around, so confirm normally
 					}
 
-					return this.cleanupBackupsBeforeShutdown();
+					return this.backupService.cleanupBackupsBeforeShutdown(); // all good, no veto","All of the cleanupBackupsBeforeShutdown should move out into the backup service that itself should listen to lifecycle events.
",2016-10-21 14:05:22
197,"@@ -152,7 +153,7 @@ const jsonRegistry = <jsonContributionRegistry.IJSONContributionRegistry>platfor
 jsonRegistry.registerSchema(schemaId, schema);
 
 export class ConfigurationManager implements debug.IConfigurationManager {
-
+	private settingsVariables: SettingsVariables;","Just move it one line down, so we have nice seperation between public / private members
",2016-07-06 08:05:04
442,"@@ -153,7 +153,7 @@ export abstract class ViewerViewlet extends Viewlet {
  */
 export class ViewletDescriptor extends CompositeDescriptor<Viewlet> {
 
-	constructor(moduleId: string, ctorName: string, id: string, name: string, cssClass?: string, order?: number) {
+	constructor(moduleId: string, ctorName: string, id: string, name: string, cssClass?: string, order?: number, public isExternal: boolean = false) {","@octref `isExternal` is a bit confusing, can we maybe call this `isExtension`?
",2016-11-03 08:23:28
61,"@@ -155,44 +145,36 @@ export class OutputService implements IOutputService {
 		return Object.keys(this.receivedOutput);
 	}
 
-	public clearOutput(channel = DEFAULT_OUTPUT_CHANNEL): void {
-		this.receivedOutput[channel] = '';
+	public getActiveChannel(): string {
+		if (!this.outputPanel || !this.outputPanel.getInput()) {
+			return null;
+		}
 
-		this._onOutput.fire({ channel: channel, output: null /* indicator to clear output */ });
+		return (<OutputEditorInput>this.outputPanel.getInput()).getChannel();
 	}
 
-	public showOutput(channel: string = DEFAULT_OUTPUT_CHANNEL, sideBySide?: boolean | Position, preserveFocus?: boolean): TPromise<IEditor> {
-
-		// If already opened, focus it unless we want to preserve focus
-		let existingOutputEditor = this.findOutputEditor(channel);
-		if (existingOutputEditor) {
-			if (!preserveFocus) {
-				return this.editorService.focusEditor(existingOutputEditor);
-			}
-
-			// Still reveal last line
-			(<OutputEditorInput>existingOutputEditor.input).revealLastLine();
+	public clearOutput(channel: string): void {
+		this.receivedOutput[channel] = '';
 
-			return Promise.as(existingOutputEditor);
-		}
+		this._onOutput.fire({ channel: channel, output: null /* indicator to clear output */ });
+	}
 
-		// Otherwise open new
-		return this.editorService.openEditor(OutputEditorInput.getInstance(this.instantiationService, channel), preserveFocus ? EditorOptions.create({ preserveFocus: true }) : null, <any>sideBySide);
+	public showOutput(channel: string, preserveFocus?: boolean): TPromise<IEditor> {
+		return this.panelService.openPanel(OUTPUT_PANEL_ID, !preserveFocus).then((panel: OutputPanel) => {
+			this.outputPanel = panel;","@isidorn this seems weird to me, imagine I bring up the panel by just toggling it and output happens to be the last panel I had in there. all your assumptions about having the outputPanel inside the service would fail because the output panel was not revealed through this service. idealy I would try to reduce the use of outputPanel inside the service to a minimum. do we need it in all cases? could the active channel also be a property on the service? could ""revealLastLine"" move out and someone that wants to reveal just has to open the output panel and call reveal on it? think towards that and maybe we can get rid of the ""this.outputPanel"" in the service completly!
",2016-01-21 16:13:17
60,"@@ -155,44 +145,36 @@ export class OutputService implements IOutputService {
 		return Object.keys(this.receivedOutput);
 	}
 
-	public clearOutput(channel = DEFAULT_OUTPUT_CHANNEL): void {
-		this.receivedOutput[channel] = '';
+	public getActiveChannel(): string {
+		if (!this.outputPanel || !this.outputPanel.getInput()) {
+			return null;
+		}
 
-		this._onOutput.fire({ channel: channel, output: null /* indicator to clear output */ });
+		return (<OutputEditorInput>this.outputPanel.getInput()).getChannel();
 	}
 
-	public showOutput(channel: string = DEFAULT_OUTPUT_CHANNEL, sideBySide?: boolean | Position, preserveFocus?: boolean): TPromise<IEditor> {
-
-		// If already opened, focus it unless we want to preserve focus
-		let existingOutputEditor = this.findOutputEditor(channel);
-		if (existingOutputEditor) {
-			if (!preserveFocus) {
-				return this.editorService.focusEditor(existingOutputEditor);
-			}
-
-			// Still reveal last line
-			(<OutputEditorInput>existingOutputEditor.input).revealLastLine();
+	public clearOutput(channel: string): void {
+		this.receivedOutput[channel] = '';
 
-			return Promise.as(existingOutputEditor);
-		}
+		this._onOutput.fire({ channel: channel, output: null /* indicator to clear output */ });
+	}
 
-		// Otherwise open new
-		return this.editorService.openEditor(OutputEditorInput.getInstance(this.instantiationService, channel), preserveFocus ? EditorOptions.create({ preserveFocus: true }) : null, <any>sideBySide);
+	public showOutput(channel: string, preserveFocus?: boolean): TPromise<IEditor> {
+		return this.panelService.openPanel(OUTPUT_PANEL_ID, !preserveFocus).then((panel: OutputPanel) => {
+			this.outputPanel = panel;
+			return this.outputPanel.setInput(OutputEditorInput.getInstance(this.instantiationService, channel), EditorOptions.create({ preserveFocus: true })).
+				then(() => this.outputPanel);
+		});
 	}
 
-	private findOutputEditor(channel: string): IEditor {
-		let editors = this.editorService.getVisibleEditors();
-		for (let i = 0; i < editors.length; i++) {
-			let editor = editors[i];
-			if (editor.input instanceof OutputEditorInput && (<OutputEditorInput>editor.input).getChannel() === channel && (<OutputEditorInput>editor.input).getMime() === OUTPUT_MIME) {
-				return editor;
-			}
+	public revealLastLine(): void {
+		if (this.outputPanel) {
+			this.outputPanel.revealLastLine();
 		}
-
-		return null;
 	}
 
 	public dispose(): void {
+		this.outputPanel.dispose();","@isidorn suggest to not dispose outputPanel here, it will be handled when the compositePart is disposed
",2016-01-21 16:11:13
59,"@@ -156,18 +149,12 @@ export class StringEditor extends BaseTextEditor {
 		let options = super.getCodeEditorOptions();
 
 		let input = this.getInput();
-		let isLog = input instanceof LogEditorInput;
 		let isUntitled = input instanceof UntitledEditorInput;
 
 		options.readOnly = !isUntitled; 				// all string editors are readonly except for the untitled one
 
-		if (isLog) {
-			options.wrappingColumn = 0;					// all log editors wrap
-			options.lineNumbers = false;				// all log editors hide line numbers
-		} else {
-			options.wrappingColumn = this.defaultWrappingColumn; 	// otherwise make sure to restore the defaults
-			options.lineNumbers = this.defaultLineNumbers; 			// otherwise make sure to restore the defaults
-		}
+		options.wrappingColumn = this.defaultWrappingColumn; 	// otherwise make sure to restore the defaults","@isidorn suggest to remove the concept of defaultWrappingColumn and defaultLineNumbers because it was only needed for the outputEditorInput and this now moved nicely into the outputPanel
",2016-01-21 16:00:49
508,"@@ -156,6 +168,15 @@ export class ViewCursor {
 			this._domNode.setLineHeight(this._lineHeight);
 			this._domNode.setHeight(this._lineHeight);
 
+			let desiredWidth = '1ch';",@rebornix Computing the desiredWidth and setting it needs to happen only if the cursor style is set to block.,2016-11-23 18:57:12
171,"@@ -157,13 +155,14 @@ export class TerminalPanel extends Panel {
 				this.setTerminalTheme();
 			}));
 			this.toDispose.push(this.configurationService.onDidUpdateConfiguration((e) => {
-				this.setTerminalFont();
+				this.updateFont(true);
+				this.layout(new Dimension(this.parentDomElement.offsetWidth, this.parentDomElement.offsetHeight));
 			}));
 
 			this.terminal.open(this.terminalDomElement);
 			this.parentDomElement.appendChild(terminalScrollbar.getDomNode());
 
-			this.setTerminalFont();
+			this.updateFont();","Why not measure the characters at this point?
",2016-06-02 07:01:21
853,"@@ -157,9 +158,21 @@ export class ResourceViewer {
 		else {
 			$(container)
 				.empty()
-				.span({
+				.append($('p', {
 					text: nls.localize('nativeBinaryError', ""The file will not be displayed in the editor because it is either binary, very large or uses an unsupported text encoding."")
-				});
+				}))
+				.append($('a', {
+					role: 'button',
+					class: 'open-external',
+					text: nls.localize('resourceOpenExternal', ""Try opening file in external program?"")
+				}).on(DOM.EventType.CLICK, (e) => {
+					windowsService.openExternal(descriptor.resource.toString()).then(didOpen => {","Do we have an understanding what this native call does when the file is an executable? Also, how does this behave when you are seeing a binary file which is associated with VS Code, you click it only to see the same issue again because it opens in VS Code?",2017-03-23 14:01:21
256,"@@ -16,14 +16,15 @@
 		""grammars"": [{
 			""language"": ""python"",
 			""scopeName"": ""source.python"",
-			""path"": ""./syntaxes/Python.tmLanguage""
+			""path"": ""./syntaxes/Python.tmLanguage.json""
 		},{
 			""scopeName"": ""source.regexp.python"",
-			""path"": ""./syntaxes/Regular Expressions (Python).tmLanguage""
+			""path"": ""./syntaxes/Regular Expressions (Python).tmLanguage.json""
 		}]
 	},
 	""scripts"": {
 		""compile"": ""gulp compile-extension:python"",
-		""watch"": ""gulp watch-extension:python""
+		""watch"": ""gulp watch-extension:python"",
+		""update-grammar"": ""node ../../build/npm/update-grammar.js MagicStack/MagicPython grammars/MagicPython.tmLanguage ./syntaxes/Python.tmLanguage.json && node ../../build/npm/update-grammar.js MagicStack/MagicPython grammars/MagicRegExp.tmLanguage './syntaxes/Regular Expressions (Python).tmLanguage.json'""","I'd suggest to name the second output file MagicRegExp.tmLanguage.json as to not confuse where it came from.
Also if both grammars are from the same repo, you can use a single call to update-grammar (with 5 parameters: repo, grammarRepoPath1, extPath1, grammarRepoPath2, extPath2)
",2016-08-19 06:41:54
753,"@@ -16,15 +16,15 @@
 }",Looks good,2017-02-20 14:02:54
41,"@@ -16,6 +16,7 @@ export const Identifiers = {
 	WORKBENCH_CONTAINER: 'workbench.main.container',
 	ACTIVITYBAR_PART: 'workbench.parts.activitybar',
 	SIDEBAR_PART: 'workbench.parts.sidebar',
+	PANEL_PART: 'workbench.parts.panelpart',","@isidorn suggest to call it just ""workbench.parts.panel""
",2016-01-15 15:16:42
991,"@@ -16,7 +13,7 @@
 		""grammars"": [{
 			""language"": ""r"",
 			""scopeName"": ""source.r"",
-			""path"": ""./syntaxes/r.tmLanguage.json""",Please keep using the .tmLanguage.json file extension. It makes it easier for us to distinguish the various JSON files.,2017-06-19 13:56:56
842,"@@ -160,6 +160,41 @@ suite('workspace-namespace', () => {
 		});
 	});
 
+	test('eol, read', () => {",Is there any reason to call-out the scenario in which there is an equal number of LF vs. CRLF line endings?,2017-03-21 17:50:27
843,"@@ -160,6 +160,41 @@ suite('workspace-namespace', () => {
 		});
 	});
 
+	test('eol, read', () => {
+		const a = createRandomFile('foo\nbar\nbar').then(file => {
+			return workspace.openTextDocument(file).then(doc => {
+				assert.equal(doc.eol, EndOfLine.LF);
+			});
+		});
+		const b = createRandomFile('foo\nbar\nbar\r\nbaz').then(file => {
+			return workspace.openTextDocument(file).then(doc => {
+				assert.equal(doc.eol, EndOfLine.LF);
+			});
+		});
+		const c = createRandomFile('foo\r\nbar\r\nbar').then(file => {
+			return workspace.openTextDocument(file).then(doc => {
+				assert.equal(doc.eol, EndOfLine.CRLF);
+			});
+		});
+		return Promise.all([a, b, c]);
+	});
+
+	test('eol, change via editor', () => {
+		return createRandomFile('foo\nbar\nbar').then(file => {
+			return workspace.openTextDocument(file).then(doc => {
+				assert.equal(doc.eol, EndOfLine.LF);
+				return window.showTextDocument(doc).then(editor => {
+					return editor.edit(builder => builder.setEndOfLine(EndOfLine.CRLF));","I'm assuming this is now ""the way"" to do it for extension authors as well, correct?",2017-03-21 17:51:33
463,"@@ -160,6 +164,14 @@ export class LifecycleService implements ILifecycleService {
 			const oneTimeCancelEvent = 'vscode:cancel' + oneTimeEventToken;
 
 			ipc.once(oneTimeOkEvent, () => {
+				// Clear out any workspace backups from workspaces.json that don't have any backups
+				if (vscodeWindow.openedWorkspacePath) {","@Tyriar this is ugly, instead I suggest to introduce an event that the lifecycle service (on the main side) emits with the veto result of the unload call. The backup main service should listen to this event and do its business when it happens.
",2016-11-09 07:12:16
873,"@@ -1617,7 +1617,7 @@ declare module 'vscode' {
 		/**
 		 * The command this code lens represents.
 		 */
-		command?: Command;
+		command?: Command | string;",@jrieken I'm not a huge fan of this API design. Let me know if you have any suggestions on a better way to express this  ,2017-04-10 22:02:49
63,"@@ -163,7 +163,7 @@ export abstract class TextAreaState {
 		if (currentSelectionStart === currentSelectionEnd) {
 			// composition accept case
 			// [blahblah] => blahblah|
-			if (previousValue === currentValue && previousSelectionStart === 0 && previousSelectionEnd === previousValue.length && currentSelectionStart === currentValue.length) {
+			if (previousValue === currentValue && previousSelectionStart === 0 && previousSelectionEnd === previousValue.length && currentSelectionStart === currentValue.length && currentValue !== '\n') {","@alexandrudima 

When replacing the end-of-line with a newline, this check results in no typing being recognized (well, on the first typing, on the second it is recorded).  I added this specific check for enter but I'm not convinced it's correct.
",2016-01-31 19:17:53
661,"@@ -1633,6 +1633,24 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * The implementation provider interface defines the contract between extensions and
+	 * the go to implementation feature.
+	 */
+	export interface ImplementationProvider {",Maybe `TypeDefinitionProvider` would be a better name?,2017-01-10 08:38:30
634,"@@ -165,6 +165,9 @@ suite('Workbench - TerminalConfigHelper', () => {
 					},
 					shellArgs: {
 						linux: []
+					},
+					rightClickAction: {",These can be removed now that the setting changed.,2016-12-21 03:00:00
713,"@@ -1668,6 +1668,24 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * The type definition provider defines the contract between extensions and
+	 * the go to type definition feature.",Like the other language features this needs a section the doc (editing evolved) such that people has a clear understanding of what this is,2017-02-02 08:00:55
199,"@@ -167,7 +168,14 @@ export class TerminalPanel extends Panel {
 		if (!themeId) {
 			themeId = this.themeService.getTheme();
 		}
-		let theme = this.configurationHelper.getTheme(themeId);
+
+		let terminalThemeId = this.configurationHelper.getTerminalThemeId(themeId);","Can you pull `getBaseThemeId` into this file and check it here instead of calling into `configurationHelper` twice?
",2016-07-06 22:59:10
511,"@@ -1671,12 +1695,12 @@ class DiffEdtorWidgetInline extends DiffEditorWidgetStyle implements IDiffEditor
 		// Nothing to do..
 	}
 
-	_getViewZones(lineChanges: editorCommon.ILineChange[], originalForeignVZ: editorCommon.IEditorWhitespace[], modifiedForeignVZ: editorCommon.IEditorWhitespace[], originalEditor: editorBrowser.ICodeEditor, modifiedEditor: editorBrowser.ICodeEditor): IEditorsZones {
-		let computer = new InlineViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor);
+	_getViewZones(lineChanges: editorCommon.ILineChange[], originalForeignVZ: editorCommon.IEditorWhitespace[], modifiedForeignVZ: editorCommon.IEditorWhitespace[], originalEditor: editorBrowser.ICodeEditor, modifiedEditor: editorBrowser.ICodeEditor, renderIndicators?: boolean): IEditorsZones {",same question,2016-11-23 19:01:27
204,"@@ -168,10 +168,27 @@ export class ToggleRenderWhitespaceAction extends EditorAction {
 	}
 }
 
+export class ToggleRenderControlCharacterAction extends EditorAction {
+	static ID = 'editor.action.toggleRenderControlCharacter';","Here is `static ID = 'editor.action.toggleRenderControlCharacters';`

Fixes https://github.com/Microsoft/vscode/issues/8823
",2016-07-07 09:26:15
294,"@@ -168,13 +170,17 @@ export class VSCodeWindow {
 			title: this.envService.product.nameLong,
 			webPreferences: {
 				'backgroundThrottling': false // by default if Code is in the background, intervals and timeouts get throttled
-			}
+			},","extra comma
",2016-10-05 06:41:24
98,"@@ -169,6 +169,7 @@ registry.registerWorkbenchAction(new SyncActionDescriptor(RevertFileAction, Reve
 registry.registerWorkbenchAction(new SyncActionDescriptor(GlobalNewFolderAction, GlobalNewFolderAction.ID, GlobalNewFolderAction.LABEL), category);
 registry.registerWorkbenchAction(new SyncActionDescriptor(GlobalCompareResourcesAction, GlobalCompareResourcesAction.ID, GlobalCompareResourcesAction.LABEL), category);
 registry.registerWorkbenchAction(new SyncActionDescriptor(CloseFileAction, CloseFileAction.ID, CloseFileAction.LABEL, { primary: KeyMod.chord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_W) }), category);
+registry.registerWorkbenchAction(new SyncActionDescriptor(OpenRecentlyClosedResourcesAction, OpenRecentlyClosedResourcesAction.ID, OpenRecentlyClosedResourcesAction.LABEL), category);","Some thoughts:
- [x] name this ""Reopen Closed File"" (as ST)
- [x] add it as first entry under the File > Open Recent menu
- [x] steal the proper keybinding for this from the run test task thingy
",2016-04-09 14:39:34
206,"@@ -169,8 +168,8 @@ export class ConfigurationManager implements debug.IConfigurationManager {
 		@IQuickOpenService private quickOpenService: IQuickOpenService,
 		@IKeybindingService private keybindingService: IKeybindingService
 	) {","This will probably throw an exception if you open the no-folder workspace.
That is the reason why I originally check for this.contextService.getWorkspace(), I think you need to re-introduce that check.
",2016-07-08 13:54:53
913,"@@ -17,15 +17,21 @@ import * as nls from 'vscode-nls';
 
 const localize = nls.loadMessageBundle();
 
-class CheckoutItem implements QuickPickItem {
+class CheckoutBasicItem implements QuickPickItem {",Why not instead of this simply create a new `class MergeItem implements QuickPick`?,2017-05-05 10:15:18
595,"@@ -17,31 +17,66 @@ interface IPackageInfo {
 
 var telemetryReporter: TelemetryReporter | null;
 
+interface IToken {
+	type: string;
+	map: [number, number];
+}
+
+interface MarkdownIt {
+	render(text: string): string;
+	parse(text: string): IToken[];
+}
+
+function createMarkdownIt(): MarkdownIt {
+	const hljs = require('highlight.js');
+	const mdnh = require('markdown-it-named-headers');
+	const md = require('markdown-it')({
+		html: true,
+		highlight: (str: string, lang: string) => {
+			if (lang && hljs.getLanguage(lang)) {
+				try {
+					return `<pre class=""hljs""><code><div>${hljs.highlight(lang, str, true).value}</div></code></pre>`;
+				} catch (error) { }
+			}
+			return `<pre class=""hljs""><code><div>${md.utils.escapeHtml(str)}</div></code></pre>`;
+		}
+	}).use(mdnh, {});
+
+	return md;
+}
+
+const FrontMatterRegex = /^---\s*(.|\s)*?---\s*/;
+
 export function activate(context: vscode.ExtensionContext) {
 
 	let packageInfo = getPackageInfo(context);
 	telemetryReporter = packageInfo && new TelemetryReporter(packageInfo.name, packageInfo.version, packageInfo.aiKey);
 
-	let provider = new MDDocumentContentProvider(context);
-	let registration = vscode.workspace.registerTextDocumentContentProvider('markdown', provider);
+	const markdownIt = createMarkdownIt();","Previously the creation of the  markdown it object was deferred until it was actually needed. Now it will be created on extension activation.

How about giving the consumers of markdown it a `MarkdownItProvider` object that can create the markdown-it instance when first invoked and cache it for subsequent calls?",2016-12-09 20:08:35
93,"@@ -17,6 +17,10 @@
 	overflow: hidden;
 }
 
+.explorer-viewlet .explorer-item-label a, .explorer-viewlet .working-files-item-label {
+	margin-right: 12px;
+}
+","Why?
",2016-03-30 05:25:43
475,"@@ -17,6 +17,11 @@ export interface IUntitledEditorService {
 	_serviceBrand: any;
 
 	/**
+	 * Events for when untitled editors content changes (e.g. any keystroke).
+	 */
+	onDidChangeContent: Event<URI>;","@Tyriar can we have test coverage for `onDidChangeContent` and `onDidDisposeModel`
",2016-11-09 07:44:34
788,"@@ -17,6 +17,7 @@
 	""format.insertSpaceBeforeAndAfterBinaryOperators"": ""Defines space handling after a binary operator."",
 	""format.insertSpaceAfterKeywordsInControlFlowStatements"": ""Defines space handling after keywords in a control flow statement."",
 	""format.insertSpaceAfterFunctionKeywordForAnonymousFunctions"": ""Defines space handling after function keyword for anonymous functions."",
+	""format.insertSpaceBeforeFunctionParenthesis"": ""Defines space handling before function argument parentheses."",",Please add a ` Requires TypeScript >= 2.1.5.` blurb at the end ,2017-03-02 08:17:36
667,"@@ -17,7 +17,7 @@ export const TERMINAL_SERVICE_ID = 'terminalService';
 
 export const TERMINAL_DEFAULT_SHELL_LINUX = !platform.isWindows ? (process.env.SHELL || 'sh') : 'sh';
 export const TERMINAL_DEFAULT_SHELL_OSX = !platform.isWindows ? (process.env.SHELL || 'sh') : 'sh';
-export const TERMINAL_DEFAULT_SHELL_WINDOWS = processes.getWindowsShell();
+/**    const TERMINAL_DEFAULT_SHELL_WINDOWS moved to ../electron-browser/terminal.ts */",You can remove this line :+1: ,2017-01-13 06:55:25
352,"@@ -170,6 +170,7 @@ export class ExtensionsViewlet extends Viewlet implements IExtensionsViewlet {
 				new Separator(),
 				this.instantiationService.createInstance(ChangeSortAction, 'extensions.sort.install', localize('sort by installs', ""Sort By: Install Count""), this.onSearchChange, 'installs', undefined),
 				this.instantiationService.createInstance(ChangeSortAction, 'extensions.sort.rating', localize('sort by rating', ""Sort By: Rating""), this.onSearchChange, 'rating', undefined),
+				this.instantiationService.createInstance(ChangeSortAction, 'extensions.sort.name', localize('sort by name', ""Sort By: Name""), this.onSearchChange, 'name', undefined),","Are you sure this alone fixes it? Did you give it a try?
",2016-10-20 14:29:21
30,"@@ -171,7 +171,7 @@ export function distinct<T>(array: T[], keyFn?: (t: T) => string): T[] {
 }
 
 export function first<T>(array: T[], fn: (item: T) => boolean, notFoundValue: T = null): T {
-	for (let i = 0; i < array.length; i++) {
+	for (let i = 0, I = array.length; i < I; i++) {
 		const element = array[i];","we don't do upper-case locals
",2015-12-23 12:39:54
31,"@@ -171,7 +171,7 @@ export function distinct<T>(array: T[], keyFn?: (t: T) => string): T[] {
 }
 
 export function first<T>(array: T[], fn: (item: T) => boolean, notFoundValue: T = null): T {
-	for (let i = 0; i < array.length; i++) {
+	for (let i = 0, iMax = array.length; i < iMax; i++) {","sorry, actually we should use a ES6 for-of loop and let the compiler/engine decide
",2015-12-23 13:12:20
535,"@@ -172,6 +187,29 @@ export class BackupFileService implements IBackupFileService {
 		});
 	}
 
+	public getWorkspaceTextFileBackups(): TPromise<string[]> {","@Tyriar at first I thought this should move into the cache but then we would stop each and every file open waiting for this to be done. Since backups can be restored later, I think it is OK to leave this outside of the cache even though the result could probably be cached.",2016-11-29 05:27:02
429,"@@ -173,6 +177,16 @@ export class ViewletRegistry extends CompositeRegistry<Viewlet> {
 	}
 
 	/**
+	 * Registers multiple external viewlets.
+	 */
+	public registerExternalViewlets(descriptors: ViewletDescriptor[]): void {","This feels wrong - since we always register `ViewletDescriptor`-instances we shouldn't use two separate functions. Why not treat viewlet and external viewlet equal, have only one function, one event which we send for each viewlet registration, let listeners filter on `ViewletDescriptor#isExternal`
",2016-11-01 09:55:33
794,"@@ -174,6 +175,12 @@ function main(accessor: ServicesAccessor, mainIpcServer: Server, userEnv: platfo
 		// TODO@Joao: unfold this
 		windowsMainService = accessor.get(IWindowsMainService);
 
+		windowsMainService.onWindowClose(() => {
+			if (windowsMainService.getWindowCount() === 0) {","@joaomoreno as I said before, this should have a check for Windows/Linux, because only there we close the app when closing the last window!",2017-03-03 18:03:54
936,"@@ -175,6 +175,7 @@ export class SearchViewlet extends Viewlet {
 		const exclusionsUsePattern = this.viewletSettings['query.exclusionsUsePattern'];
 		const includesUsePattern = this.viewletSettings['query.includesUsePattern'];
 		const patternIncludes = this.viewletSettings['query.folderIncludes'] || '';
+		const userExtended = this.viewletSettings['query.userExtended'] || '';","Looks great, only comment is that the name `userExtended` isn't totally obvious at first. Maybe `queryDetailsExpanded` or something like that?",2017-05-16 00:34:06
170,"@@ -177,14 +176,14 @@ export class TerminalPanel extends Panel {
 		this.terminal.refresh(0, this.terminal.rows);
 	}
 
-	/**
-	 * Set the terminal font to `terminal.integrated.fontFamily` if it is set, otherwise fallback to
-	 * `editor.fontFamily`.
-	 */
-	private setTerminalFont(): void {
-		this.terminalDomElement.style.fontFamily = this.configurationHelper.getFontFamily();
+	private updateFont(updateCharSize?: boolean): void {
+		this.font = this.configurationHelper.getFont(this.parentDomElement, updateCharSize);
+		this.terminalDomElement.style.fontFamily = this.font.fontFamily;
+		this.terminalDomElement.style.lineHeight = this.font.lineHeight + 'px';
+		this.terminalDomElement.style.fontSize = this.font.fontSize + 'px';","This triggers `this.layout`, right?
",2016-06-02 07:00:52
174,"@@ -177,14 +177,15 @@ export class TerminalPanel extends Panel {
 		this.terminal.refresh(0, this.terminal.rows);
 	}
 
-	/**
-	 * Set the terminal font to `terminal.integrated.fontFamily` if it is set, otherwise fallback to
-	 * `editor.fontFamily`.
-	 */
-	private setTerminalFont(): void {
-		this.terminalDomElement.style.fontFamily = this.configurationHelper.getFontFamily();
+	private updateFont(): void {
+		this.font = this.configurationHelper.getFont();","Fix indentation
",2016-06-02 20:21:55
215,"@@ -177,6 +177,33 @@ suite('Event',function(){
 			Errors.setUnexpectedErrorHandler(origErrorHandler);
 		}
 	});
+
+	test('Debounce Event', function () {","since this test is async (setTimeout) you must add the `done` parameter and call it. Alternatively make this test return a promise.
",2016-07-13 10:43:57
201,"@@ -177,7 +178,7 @@ suite('Workbench - TerminalConfigHelper', () => {
 		let configHelper: TerminalConfigHelper;
 
 		configHelper = new TerminalConfigHelper(Platform.Linux, configurationService, fixture);
-		assert.deepEqual(configHelper.getTheme('hc-black foo'), [","Just pass in the base theme IDs for the tests and this is good to go.

``` js
assert.deepEqual(configHelper.getTheme('hc-black'), [
```
",2016-07-07 00:21:25
100,"@@ -1783,6 +1783,43 @@ export class OpenResourcesAction extends Action {
 	}
 }
 
+export class OpenRecentlyClosedResourcesAction extends Action {
+
+	public static ID = 'workbench.files.action.openRecentlyClosedFile';
+	public static LABEL = nls.localize('openRecentlyClosedFile', ""Open Recently Closed File"");","Same naming concerns, also for ID
",2016-04-09 14:41:10
99,"@@ -1783,6 +1783,43 @@ export class OpenResourcesAction extends Action {
 	}
 }
 
+export class OpenRecentlyClosedResourcesAction extends Action {
+
+	public static ID = 'workbench.files.action.openRecentlyClosedFile';
+	public static LABEL = nls.localize('openRecentlyClosedFile', ""Open Recently Closed File"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IPartService private partService: IPartService,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IViewletService private viewletService: IViewletService,
+		@ITextFileService private textFileService: ITextFileService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		return this.partService.joinCreation().then(() => {","You do not need this in most cases, safe to remove the joining.
",2016-04-09 14:40:51
101,"@@ -1783,6 +1783,43 @@ export class OpenResourcesAction extends Action {
 	}
 }
 
+export class OpenRecentlyClosedResourcesAction extends Action {
+
+	public static ID = 'workbench.files.action.openRecentlyClosedFile';
+	public static LABEL = nls.localize('openRecentlyClosedFile', ""Open Recently Closed File"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IPartService private partService: IPartService,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IViewletService private viewletService: IViewletService,
+		@ITextFileService private textFileService: ITextFileService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		return this.partService.joinCreation().then(() => {
+			let viewletPromise = TPromise.as(null);
+			if (!this.partService.isSideBarHidden()) {
+				viewletPromise = this.viewletService.openViewlet(Files.VIEWLET_ID, false);
+			}
+
+			return viewletPromise.then(() => {
+				let resource = this.textFileService.getWorkingFilesModel().restoreRecentlyRemovedEntry();
+","I suggest to change this method to something like ""give me the last closed working file"" and then handle everything in this action (add the file back to working files and open it).
",2016-04-09 14:42:02
106,"@@ -1783,6 +1783,79 @@ export class OpenResourcesAction extends Action {
 	}
 }
 
+export class ReopenClosedFileAction extends Action {
+
+	public static ID = 'workbench.files.action.reopenClosedFile';
+	public static LABEL = nls.localize('reopenClosedFile', ""Reopen Closed File"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IPartService private partService: IPartService,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IViewletService private viewletService: IViewletService,
+		@ITextFileService private textFileService: ITextFileService,
+		@IFileService private fileService: IFileService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		let viewletPromise = TPromise.as(null);
+		if (!this.partService.isSideBarHidden()) {
+			viewletPromise = this.viewletService.openViewlet(Files.VIEWLET_ID, false);
+		}
+
+		return viewletPromise.then(() => {
+			let workingFilesModel: Files.IWorkingFilesModel = this.textFileService.getWorkingFilesModel();
+			let resources: Files.IWorkingFileEntry[] = workingFilesModel.popLastClosedEntry();","@Tyriar why would this return an array? I would not expect this action to open any more than one file?
",2016-04-15 06:16:20
107,"@@ -1783,6 +1783,79 @@ export class OpenResourcesAction extends Action {
 	}
 }
 
+export class ReopenClosedFileAction extends Action {
+
+	public static ID = 'workbench.files.action.reopenClosedFile';
+	public static LABEL = nls.localize('reopenClosedFile', ""Reopen Closed File"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IPartService private partService: IPartService,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IViewletService private viewletService: IViewletService,
+		@ITextFileService private textFileService: ITextFileService,
+		@IFileService private fileService: IFileService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		let viewletPromise = TPromise.as(null);
+		if (!this.partService.isSideBarHidden()) {
+			viewletPromise = this.viewletService.openViewlet(Files.VIEWLET_ID, false);
+		}
+
+		return viewletPromise.then(() => {
+			let workingFilesModel: Files.IWorkingFilesModel = this.textFileService.getWorkingFilesModel();
+			let resources: Files.IWorkingFileEntry[] = workingFilesModel.popLastClosedEntry();
+
+			if (resources === null) {
+				return TPromise.as(true);
+			}
+
+			let resolveFilePromises: TPromise<any>[] = resources.map((r) => { return this.fileService.resolveFile(r.resource); });
+
+			return TPromise.join(resolveFilePromises).then(() => {
+				return this.openEntries(resources, workingFilesModel);
+			}, (e: any[]) => {
+
+				// Don't attempt to reopen files that fail because they no longer exist
+				let exceptions = [];
+				e.forEach(err => {
+					if (err.code === 'ENOENT') {","@Tyriar suggest to use our error constants instead for file operations: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/actions/openSettings.ts#L48
",2016-04-15 06:17:45
509,"@@ -1787,12 +1811,14 @@ class InlineViewZonesComputer extends ViewZonesComputer {
 	private originalModel: editorCommon.IModel;
 	private modifiedEditorConfiguration: editorCommon.InternalEditorOptions;
 	private modifiedEditorTabSize: number;
+	private renderIndicator: boolean;
 
-	constructor(lineChanges: editorCommon.ILineChange[], originalForeignVZ: editorCommon.IEditorWhitespace[], modifiedForeignVZ: editorCommon.IEditorWhitespace[], originalEditor: editorBrowser.ICodeEditor, modifiedEditor: editorBrowser.ICodeEditor) {
+	constructor(lineChanges: editorCommon.ILineChange[], originalForeignVZ: editorCommon.IEditorWhitespace[], modifiedForeignVZ: editorCommon.IEditorWhitespace[], originalEditor: editorBrowser.ICodeEditor, modifiedEditor: editorBrowser.ICodeEditor, renderIndicator?: boolean) {",same question,2016-11-23 19:00:15
880,"@@ -179,296 +211,296 @@ interface IParsedLine {
 	placeHolders: IParsedLinePlaceHolderInfo[];
 }
 
-const InternalFormatSnippetParser = new class implements ISnippetParser {
-
-	private _lastGeneratedId: number;
-	private _snippet: CodeSnippet;
-
-	parse(template: string): CodeSnippet {
-		this._lastGeneratedId = 0;
-		this._snippet = new CodeSnippet();
-		this.parseTemplate(template);
-		return this._snippet;
-	}
-
-	private parseTemplate(template: string): void {
-
-		var placeHoldersMap: collections.IStringDictionary<IPlaceHolder> = Object.create(null);
-		var i: number, len: number, j: number, lenJ: number, templateLines = template.split('\n');
-
-		for (i = 0, len = templateLines.length; i < len; i++) {
-			var parsedLine = this.parseLine(templateLines[i], (id: string) => {
-				if (placeHoldersMap[id]) {
-					return placeHoldersMap[id].value;
-				}
-				return '';
-			});
-			for (j = 0, lenJ = parsedLine.placeHolders.length; j < lenJ; j++) {
-				var linePlaceHolder = parsedLine.placeHolders[j];
-				var occurence = new Range(i + 1, linePlaceHolder.startColumn, i + 1, linePlaceHolder.endColumn);
-				var placeHolder: IPlaceHolder;
-
-				if (placeHoldersMap[linePlaceHolder.id]) {
-					placeHolder = placeHoldersMap[linePlaceHolder.id];
-				} else {
-					placeHolder = {
-						id: linePlaceHolder.id,
-						value: linePlaceHolder.value,
-						occurences: []
-					};
-					this._snippet.placeHolders.push(placeHolder);
-					placeHoldersMap[linePlaceHolder.id] = placeHolder;
-				}
-
-				placeHolder.occurences.push(occurence);
-			}
-
-			this._snippet.lines.push(parsedLine.line);
-		}
-
-		// Named variables (e.g. {greeting} and {greeting:Hello}) are sorted first, followed by
-		// tab-stops and numeric variables (e.g. $1, $2, ${3:foo}) which are sorted in ascending order
-		this._snippet.placeHolders.sort((a, b) => {
-			let nonIntegerId = (v: IPlaceHolder) => !(/^\d+$/).test(v.id);
-			let isFinishPlaceHolder = (v: IPlaceHolder) => v.id === '' && v.value === '';
-
-			// Sort finish placeholder last
-			if (isFinishPlaceHolder(a)) {
-				return 1;
-			} else if (isFinishPlaceHolder(b)) {
-				return -1;
-			}
-
-			// Sort named placeholders first
-			if (nonIntegerId(a) && nonIntegerId(b)) {
-				return 0;
-			} else if (nonIntegerId(a)) {
-				return -1;
-			} else if (nonIntegerId(b)) {
-				return 1;
-			}
-
-			if (a.id === b.id) {
-				return 0;
-			}
-
-			return Number(a.id) < Number(b.id) ? -1 : 1;
-		});
-
-		if (this._snippet.placeHolders.length > 0 && this._snippet.placeHolders[this._snippet.placeHolders.length - 1].value === '') {
-			this._snippet.finishPlaceHolderIndex = this._snippet.placeHolders.length - 1;
-		}
-	}
-
-	private parseLine(line: string, findDefaultValueForIdFromPrevLines: (id: string) => string): IParsedLine {
-
-		// Placeholder 0 is the entire line
-		var placeHolderStack: { placeHolderId: string; placeHolderText: string; }[] = [{ placeHolderId: '', placeHolderText: '' }];
-		var placeHolders: IParsedLinePlaceHolderInfo[] = [];
-
-		const findDefaultValueForId = (id) => {
-			const result = findDefaultValueForIdFromPrevLines(id);
-			if (result) {
-				return result;
-			}
-			for (const placeHolder of placeHolders) {
-				if (placeHolder.id === id && placeHolder.value) {
-					return placeHolder.value;
-				}
-			}
-			return '';
-		};
-
-		var i = 0;
-		var len = line.length;
-		var resultIndex = 0;
-		while (i < len) {
-
-			var restOfLine = line.substr(i);
-
-			// Look for the start of a placeholder {{
-			if (/^{{/.test(restOfLine)) {
-				i += 2;
-				placeHolderStack.push({ placeHolderId: '', placeHolderText: '' });
-
-				// Look for id
-				var matches = restOfLine.match(/^{{(\w+):/);
-				if (Array.isArray(matches) && matches.length === 2) {
-					placeHolderStack[placeHolderStack.length - 1].placeHolderId = matches[1];
-					i += matches[1].length + 1; // +1 to account for the : at the end of the id
-				}
-
-				continue;
-			}
-
-			// Look for the end of a placeholder. placeHolderStack[0] is the top-level line.
-			if (placeHolderStack.length > 1 && /^}}/.test(restOfLine)) {
-				i += 2;
-
-				if (placeHolderStack[placeHolderStack.length - 1].placeHolderId.length === 0) {
-					// This placeholder did not have an explicit id
-					placeHolderStack[placeHolderStack.length - 1].placeHolderId = placeHolderStack[placeHolderStack.length - 1].placeHolderText;
-
-					if (placeHolderStack[placeHolderStack.length - 1].placeHolderId === '_') {
-						// This is just an empty tab stop
-						placeHolderStack[placeHolderStack.length - 1].placeHolderId = 'TAB_STOP_' + String(++this._lastGeneratedId);
-						placeHolderStack[placeHolderStack.length - 1].placeHolderText = '';
-						--resultIndex; // Roll back one iteration of the result index as we made the text empty
-					}
-				}
-
-				if (placeHolderStack[placeHolderStack.length - 1].placeHolderText.length === 0) {
-					// This placeholder is empty or was a mirror
-					var defaultValue = findDefaultValueForId(placeHolderStack[placeHolderStack.length - 1].placeHolderId);
-					placeHolderStack[placeHolderStack.length - 1].placeHolderText = defaultValue;
-					resultIndex += defaultValue.length;
-				}
-
-				placeHolders.push({
-					id: placeHolderStack[placeHolderStack.length - 1].placeHolderId,
-					value: placeHolderStack[placeHolderStack.length - 1].placeHolderText,
-					startColumn: resultIndex + 1 - placeHolderStack[placeHolderStack.length - 1].placeHolderText.length,
-					endColumn: resultIndex + 1
-				});
-
-				// Insert our text into the previous placeholder
-				placeHolderStack[placeHolderStack.length - 2].placeHolderText += placeHolderStack[placeHolderStack.length - 1].placeHolderText;
-				placeHolderStack.pop();
-				continue;
-			}
-
-			// Look for escapes
-			if (/^\\./.test(restOfLine)) {
-				if (restOfLine.charAt(1) === '{' || restOfLine.charAt(1) === '}' || restOfLine.charAt(1) === '\\') {
-					++i; // Skip the escape slash and take the character literally
-				} else {
-					// invalid escapes
-					placeHolderStack[placeHolderStack.length - 1].placeHolderText += line.charAt(i);
-					++resultIndex;
-					++i;
-				}
-			}
-
-			//This is an escape sequence or not a special character, just insert it
-			placeHolderStack[placeHolderStack.length - 1].placeHolderText += line.charAt(i);
-			++resultIndex;
-			++i;
-		}
-
-		// Sort the placeholder in order of apperance:
-		placeHolders.sort((a, b) => {
-			if (a.startColumn < b.startColumn) {
-				return -1;
-			}
-			if (a.startColumn > b.startColumn) {
-				return 1;
-			}
-			if (a.endColumn < b.endColumn) {
-				return -1;
-			}
-			if (a.endColumn > b.endColumn) {
-				return 1;
-			}
-			return 0;
-		});
-
-		return {
-			line: placeHolderStack[0].placeHolderText,
-			placeHolders: placeHolders
-		};
-	}
-};
-
-const EmmetSnippetParser = new class implements ISnippetParser {
-
-	parse(template: string): CodeSnippet {
-		template = _convertExternalSnippet(template, ExternalSnippetType.EmmetSnippet);
-		return InternalFormatSnippetParser.parse(template);
-	}
-};
-
-export enum ExternalSnippetType {
-	TextMateSnippet,
-	EmmetSnippet
-}
-
-// This is used for both TextMate and Emmet
-function _convertExternalSnippet(snippet: string, snippetType: ExternalSnippetType): string {
-	var openBraces = 0;
-	var convertedSnippet = '';
-	var i = 0;
-	var len = snippet.length;
-
-	while (i < len) {
-		var restOfLine = snippet.substr(i);
-
-		// Cursor tab stop
-		if (/^\$0/.test(restOfLine)) {
-			i += 2;
-			convertedSnippet += snippetType === ExternalSnippetType.EmmetSnippet ? '{{_}}' : '{{}}';
-			continue;
-		}
-		if (/^\$\{0\}/.test(restOfLine)) {
-			i += 4;
-			convertedSnippet += snippetType === ExternalSnippetType.EmmetSnippet ? '{{_}}' : '{{}}';
-			continue;
-		}
-
-		// Tab stops
-		var matches = restOfLine.match(/^\$(\d+)/);
-		if (Array.isArray(matches) && matches.length === 2) {
-			i += 1 + matches[1].length;
-			convertedSnippet += '{{' + matches[1] + ':}}';
-			continue;
-		}
-		matches = restOfLine.match(/^\$\{(\d+)\}/);
-		if (Array.isArray(matches) && matches.length === 2) {
-			i += 3 + matches[1].length;
-			convertedSnippet += '{{' + matches[1] + ':}}';
-			continue;
-		}
-
-		// Open brace patterns placeholder
-		if (/^\${/.test(restOfLine)) {
-			i += 2;
-			++openBraces;
-			convertedSnippet += '{{';
-			continue;
-		}
-
-		// Close brace patterns placeholder
-		if (openBraces > 0 && /^}/.test(restOfLine)) {
-			i += 1;
-			--openBraces;
-			convertedSnippet += '}}';
-			continue;
-		}
-
-		// Escapes
-		if (/^\\./.test(restOfLine)) {
-			i += 2;
-			if (/^\\\$/.test(restOfLine)) {
-				convertedSnippet += '$';
-			} else {
-				convertedSnippet += restOfLine.substr(0, 2);
-			}
-			continue;
-		}
-
-		// Escape braces that don't belong to a placeholder
-		matches = restOfLine.match(/^({|})/);
-		if (Array.isArray(matches) && matches.length === 2) {
-			i += 1;
-			convertedSnippet += '\\' + matches[1];
-			continue;
-		}
-
-		i += 1;
-		convertedSnippet += restOfLine.charAt(0);
-	}
-
-	return convertedSnippet;
-};
+// const InternalFormatSnippetParser = new class implements ISnippetParser {","we use source control, no reason to push commented code ;-)",2017-04-14 07:36:36
593,"@@ -18,15 +18,25 @@ class MyCompletionItem extends CompletionItem {
 	document: TextDocument;
 	position: Position;
 
-	constructor(entry: CompletionEntry) {
+	constructor(position: Position, document: TextDocument, entry: CompletionEntry) {
 		super(entry.name);
 		this.sortText = entry.sortText;
 		this.kind = MyCompletionItem.convertKind(entry.kind);
+		this.position = position;
+		this.document = document;
 		if (entry.replacementSpan) {
 			let span: protocol.TextSpan = entry.replacementSpan;
 			// The indexing for the range returned by the server uses 1-based indexing.
 			// We convert to 0-based indexing.
 			this.textEdit = TextEdit.replace(new Range(span.start.line - 1, span.start.offset - 1, span.end.line - 1, span.end.offset - 1), entry.name);
+		} else {
+			const text = document.getText(new Range(position.line, Math.max(0, position.character - entry.name.length), position.line, position.character));","This assume that the replacement text will always start with the replaced text. @dbaeumer is this a safe assumption to make. It worked in all cases in my testing, but we may want to scope the fix by only applying it to certain kinds of completion entries",2016-12-09 01:10:03
49,"@@ -18,7 +18,10 @@ import {IContextViewService} from 'vs/platform/contextview/browser/contextView';
 import {IEventService} from 'vs/platform/event/common/event';
 
 const DEFAULT_MIN_PART_WIDTH = 170;
+const DEFAULT_MIN_PANEL_PART_HEIGHT = 170;
 const HIDE_SIDEBAR_WIDTH_THRESHOLD = 50;
+const HIDE_PANEL_HEIGHT_THRESHOLD = 50;","@isidorn is this (HIDE_PANEL_HEIGHT_THRESHOLD) used at all? I think we can let it hide when you make it small and treat the fact that you cannot size it back as a bug for the future :)
",2016-01-19 10:46:09
754,"@@ -18,7 +18,6 @@ import { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition, IViewZone, IViewZo
 export interface IOptions {
 	showFrame?: boolean;","Make sure that references widget, peek view widget, error list widget and breakpoint widget are rendered the same as before.",2017-02-20 14:08:36
92,"@@ -180,6 +180,10 @@ export class ExplorerViewlet extends Viewlet {
 		return this.actionRunner;
 	}
 
+	public getOptimalWidth(): number {
+		return this.getExplorerView().getOptimalWidth();
+	}
+","You need to take the working files view into account too. Note that explorer view can be different when you open no workspace (no folder).
",2016-03-30 05:25:37
356,"@@ -180,6 +180,13 @@ export interface IEditorOptions {
 	pinned?: boolean;
 
 	/**
+	 * Editor that is being shown with an `forcePreview` will override the `enablePreview` setting
+	 * of the workspace configuration to allow the editor to be shown as a preview editor while
+	 * selecting in the quick open widgets.
+	 */
+	forcePreview?: boolean;","@wprater this is good but the comment should not mention quick open scenario, I think its a valid override in any case, there may be more.
",2016-10-21 09:46:22
39,"@@ -182,363 +139,28 @@ export class SidebarPart extends Part implements IViewletService {
 		});
 	}
 
-	private createViewlet(id: string, isActive?: boolean): TPromise<Viewlet> {
-
-		// Check if viewlet is already created
-		for (let i = 0; i < this.instantiatedViewlets.length; i++) {
-			if (this.instantiatedViewlets[i].getId() === id) {
-				return TPromise.as(this.instantiatedViewlets[i]);
-			}
-		}
-
-		// Instantiate viewlet from registry otherwise
-		let viewletDescriptor = this.registry.getViewlet(id);
-		if (viewletDescriptor) {
-			let loaderPromise = this.viewletLoaderPromises[id];
-			if (!loaderPromise) {
-				let progressService = new WorkbenchProgressService(this.eventService, this.progressBar, viewletDescriptor.id, isActive);
-				let services = {
-					progressService: progressService
-				};
-				let viewletInstantiationService = this.instantiationService.createChild(services);
-
-				loaderPromise = viewletInstantiationService.createInstance(viewletDescriptor).then((viewlet: Viewlet) => {
-					this.mapProgressServiceToViewlet[viewlet.getId()] = progressService;
-
-					// Remember as Instantiated
-					this.instantiatedViewlets.push(viewlet);
-
-					// Register to title area update events from the viewlet
-					this.instantiatedViewletListeners.push(viewlet.addListener(ViewletEventType.INTERNAL_VIEWLET_TITLE_AREA_UPDATE, (e) => { this.onTitleAreaUpdate(e); }));
-
-					// Remove from Promises Cache since Loaded
-					delete this.viewletLoaderPromises[id];
-
-					return viewlet;
-				});
-
-				// Report progress for slow loading viewlets
-				progressService.showWhile(loaderPromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
-
-				// Add to Promise Cache until Loaded
-				this.viewletLoaderPromises[id] = loaderPromise;
-			}
-
-			return loaderPromise;
-		}
-
-		throw new Error(strings.format('Unable to find viewlet with id {0}', id));
-	}
-
-	private showViewlet(viewlet: Viewlet): TPromise<void> {
-
-		// Remember Viewlet
-		this.activeViewlet = viewlet;
-
-		// Store in preferences
-		this.storageService.store(SidebarPart.activeViewletSettingsKey, this.activeViewlet.getId(), StorageScope.WORKSPACE);
-
-		// Remember
-		this.lastActiveViewletId = this.activeViewlet.getId();
-
-		// Register as Emitter to Workbench Bus
-		this.activeViewletListeners.push(this.eventService.addEmitter(this.activeViewlet, this.activeViewlet.getId()));
-
-		let createViewletPromise: TPromise<void>;
-
-		// Viewlet created for the first time
-		let viewletContainer = this.mapViewletToViewletContainer[viewlet.getId()];
-		if (!viewletContainer) {
-
-			// Build Container off-DOM
-			viewletContainer = $().div({
-				'class': 'viewlet',
-				id: viewlet.getId()
-			}, (div: Builder) => {
-				createViewletPromise = viewlet.create(div);
-			});
-
-			// Remember viewlet container
-			this.mapViewletToViewletContainer[viewlet.getId()] = viewletContainer;
-		}
-
-		// Viewlet already exists but is hidden
-		else {
-			createViewletPromise = TPromise.as(null);
-		}
-
-		// Report progress for slow loading viewlets (but only if we did not create the viewlet before already)
-		let progressService = this.mapProgressServiceToViewlet[viewlet.getId()];
-		if (progressService && !viewletContainer) {
-			this.mapProgressServiceToViewlet[viewlet.getId()].showWhile(createViewletPromise, this.partService.isCreated() ? 800 : 3200 /* less ugly initial startup */);
-		}
-
-		// Fill Content and Actions
-		return createViewletPromise.then(() => {
-
-			// Make sure that the user meanwhile did not open another viewlet or closed the sidebar
-			if (!this.activeViewlet || viewlet.getId() !== this.activeViewlet.getId()) {
-				return;
-			}
-
-			// Take Viewlet on-DOM and show
-			viewletContainer.build(this.getContentArea());
-			viewletContainer.show();
-
-			// Setup action runner
-			this.toolBar.actionRunner = viewlet.getActionRunner();
-
-			// Update title with viewlet title if it differs from descriptor
-			let descriptor = this.registry.getViewlet(viewlet.getId());
-			if (descriptor && descriptor.name !== viewlet.getTitle()) {
-				this.updateTitle(viewlet.getId(), viewlet.getTitle());
-			}
-
-			// Handle Viewlet Actions
-			let actionsBinding = this.mapActionsBindingToViewlet[viewlet.getId()];
-			if (!actionsBinding) {
-				actionsBinding = this.collectViewletActions(viewlet);
-				this.mapActionsBindingToViewlet[viewlet.getId()] = actionsBinding;
-			}
-			actionsBinding();
-
-			if (this.telemetryActionsListener) {
-				this.telemetryActionsListener.dispose();
-				this.telemetryActionsListener = null;
-			}
-
-			// Action Run Handling
-			this.telemetryActionsListener = this.toolBar.actionRunner.addListener2(events.EventType.RUN, (e: any) => {
-
-				// Check for Error
-				if (e.error && !errors.isPromiseCanceledError(e.error)) {
-					this.messageService.show(Severity.Error, e.error);
-				}
-
-				// Log in telemetry
-				if (this.telemetryService) {
-					this.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: 'sideBar' });
-				}
-			});
-
-			// Indicate to viewlet that it is now visible
-			return viewlet.setVisible(true).then(() => {
-
-				// Make sure that the user meanwhile did not open another viewlet or closed the sidebar
-				if (!this.activeViewlet || viewlet.getId() !== this.activeViewlet.getId()) {
-					return;
-				}
-
-				// Make sure the viewlet is layed out
-				if (this.contentAreaSize) {
-					viewlet.layout(this.contentAreaSize);
-				}
-
-				// Emit Viewlet Opened Event
-				this.emit(WorkbenchEventType.VIEWLET_OPENED, new ViewletEvent(this.activeViewlet.getId()));
-			});
-		}, (error: any) => this.onError(error));
+	private get activeViewlet(): IViewlet {
+		return this.getActiveViewlet();
 	}
 
-	private onTitleAreaUpdate(e: ViewletEvent): void {
-
-		// Active Viewlet
-		if (this.activeViewlet && this.activeViewlet.getId() === e.viewletId) {
-
-			// Title
-			this.updateTitle(this.activeViewlet.getId(), this.activeViewlet.getTitle());
-
-			// Actions
-			let actionsBinding = this.collectViewletActions(this.activeViewlet);
-			this.mapActionsBindingToViewlet[this.activeViewlet.getId()] = actionsBinding;
-			actionsBinding();
-		}
-
-		// Otherwise invalidate actions binding for next time when the viewlet becomes visible
-		else {
-			delete this.mapActionsBindingToViewlet[e.viewletId];
-		}
-	}
-
-	private updateTitle(viewletId: string, viewletTitle?: string): void {
-		let viewletDescriptor = this.registry.getViewlet(viewletId);
-		if (!viewletDescriptor) {
-			return;
-		}
-
-		if (!viewletTitle) {
-			viewletTitle = viewletDescriptor.name;
-		}
-
-		let keybinding: string = null;
-		let keys = this.keybindingService.lookupKeybindings(viewletId).map(k => this.keybindingService.getLabelFor(k));
-		if (keys && keys.length) {
-			keybinding = keys[0];
-		}
-
-		this.titleLabel.safeInnerHtml(viewletTitle);
-		this.titleLabel.title(keybinding ? nls.localize('viewletTitleTooltip', ""{0} ({1})"", viewletTitle, keybinding) : viewletTitle);
+	private createViewlet(id: string, isActive?: boolean): TPromise<Viewlet> {","Similar to panelPart, I think more can be pushed down to compositePart.
",2016-01-15 15:12:50
538,"@@ -182,7 +183,7 @@ export abstract class KeybindingService implements IKeybindingService {
 				e.preventDefault();
 			}
 			let commandId = resolveResult.commandId.replace(/^\^/, '');
-			this._commandService.executeCommand(commandId, resolveResult.commandArgs || {}).done(undefined, err => {
+			this._commandService.executeCommand(commandId, objects.assign({ from: 'keybinding' }, resolveResult.commandArgs || {})).done(undefined, err => {",Not sure if copying the arguments object is save here. What are the cases that come into play?,2016-11-30 05:47:39
518,"@@ -183,19 +193,104 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 	}
 
 	private onFocusStackFrame(stackFrame: IStackFrame): void {
-		if (!stackFrame || stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
+		// TODO: onFocusStackFrame isn't called for the first time when editor url changes due to source mapping
+		//console.log(""onFocusStackFrame"", this.editor.getModel().uri.toString(), this.editor.getModel().uri.toString(), stackFrame);
+
+		if (!stackFrame || stackFrame && stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {",If the stackFrame is false the other part of this expression will not be evaluted so the other stackFrame truthfulness check is not needed,2016-11-28 10:28:48
519,"@@ -183,19 +193,104 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 	}
 
 	private onFocusStackFrame(stackFrame: IStackFrame): void {
-		if (!stackFrame || stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
+		// TODO: onFocusStackFrame isn't called for the first time when editor url changes due to source mapping
+		//console.log(""onFocusStackFrame"", this.editor.getModel().uri.toString(), this.editor.getModel().uri.toString(), stackFrame);
+
+		if (!stackFrame || stackFrame && stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
 			// clear all inline value decorations in this editor
+			this.editor.removeDecorations(INLINE_DECORATOR_KEY);
 			return;
 		}
 
-		// Compute all inline value decorations for this editor
-		// 1. Find all the words in this document (in the future improve to only look inside ranges for top scope). Editor has nice api for this
-		// 2. All words found should be compared against a children of all non expenisve scopes (good pointer for this is debugHover.ts)
-		// 2b. If there seems to be a lot of duplication between here and debugHover we should consider to move this variable searching method inside a stack frame
-		// 3. Words found in the variables map should be added as decorations on correct locations
-		// 4. Nicely style decorations
+		stackFrame.getScopes()
+			// Get all top level children in the scope chain
+			.then(scopes => TPromise.join(scopes.map(scope => scope.getChildren())))
+			.then(children => {
+				// Compute name-value map for all variables in scope chain
+				const nameValueMap = this.computeNameValueMapFromScopeChildren(children);
+				// Compute inline contentText for decorators from nameValueMap
+				const linesContent = this.editor.getModel().getLinesContent();
+				const linesDecoratorText = this.computeLinesDecoratorTextFromNameValueMap(nameValueMap, linesContent);
+				// Apply decorators for each line
+				this.setInlineDecoratorsFromLinesDecoratorText(linesDecoratorText, linesContent);
+			});
+	}
+",Two dimensional expression array is ugly - maybe we first merge children across scopes so we get an 1 dimensional array,2016-11-28 10:29:37
520,"@@ -183,19 +193,104 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 	}
 
 	private onFocusStackFrame(stackFrame: IStackFrame): void {
-		if (!stackFrame || stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
+		// TODO: onFocusStackFrame isn't called for the first time when editor url changes due to source mapping
+		//console.log(""onFocusStackFrame"", this.editor.getModel().uri.toString(), this.editor.getModel().uri.toString(), stackFrame);
+
+		if (!stackFrame || stackFrame && stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
 			// clear all inline value decorations in this editor
+			this.editor.removeDecorations(INLINE_DECORATOR_KEY);
 			return;
 		}
 
-		// Compute all inline value decorations for this editor
-		// 1. Find all the words in this document (in the future improve to only look inside ranges for top scope). Editor has nice api for this
-		// 2. All words found should be compared against a children of all non expenisve scopes (good pointer for this is debugHover.ts)
-		// 2b. If there seems to be a lot of duplication between here and debugHover we should consider to move this variable searching method inside a stack frame
-		// 3. Words found in the variables map should be added as decorations on correct locations
-		// 4. Nicely style decorations
+		stackFrame.getScopes()
+			// Get all top level children in the scope chain
+			.then(scopes => TPromise.join(scopes.map(scope => scope.getChildren())))
+			.then(children => {
+				// Compute name-value map for all variables in scope chain
+				const nameValueMap = this.computeNameValueMapFromScopeChildren(children);
+				// Compute inline contentText for decorators from nameValueMap
+				const linesContent = this.editor.getModel().getLinesContent();
+				const linesDecoratorText = this.computeLinesDecoratorTextFromNameValueMap(nameValueMap, linesContent);
+				// Apply decorators for each line
+				this.setInlineDecoratorsFromLinesDecoratorText(linesDecoratorText, linesContent);
+			});
+	}
+
+	private computeNameValueMapFromScopeChildren(scopeExpressions: IExpression[][]): { [name: string]: string } {
+		const nameValueMap: { [name: string]: string } = {};
+		let valueCount = 0;
+
+		for (let expressions of scopeExpressions) {
+			for (let expr of expressions) {
+				// Put ellipses in value if its too long. Preserve last char e.g ""longstr…"" or {a:true, b:true, …}
+				let value = expr.value;
+				if (value && value.length > MAX_INLINE_VALUE_LENGTH) {
+					value = value.substr(0, MAX_INLINE_VALUE_LENGTH - ELLIPSES.length) + ELLIPSES + value[value.length - 1];","I woudl just inline the ELLIPSES it is only used here.
Also consider using the unicode elipses character, might look nicer",2016-11-28 10:31:10
521,"@@ -183,19 +193,104 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 	}
 
 	private onFocusStackFrame(stackFrame: IStackFrame): void {
-		if (!stackFrame || stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
+		// TODO: onFocusStackFrame isn't called for the first time when editor url changes due to source mapping
+		//console.log(""onFocusStackFrame"", this.editor.getModel().uri.toString(), this.editor.getModel().uri.toString(), stackFrame);
+
+		if (!stackFrame || stackFrame && stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
 			// clear all inline value decorations in this editor
+			this.editor.removeDecorations(INLINE_DECORATOR_KEY);
 			return;
 		}
 
-		// Compute all inline value decorations for this editor
-		// 1. Find all the words in this document (in the future improve to only look inside ranges for top scope). Editor has nice api for this
-		// 2. All words found should be compared against a children of all non expenisve scopes (good pointer for this is debugHover.ts)
-		// 2b. If there seems to be a lot of duplication between here and debugHover we should consider to move this variable searching method inside a stack frame
-		// 3. Words found in the variables map should be added as decorations on correct locations
-		// 4. Nicely style decorations
+		stackFrame.getScopes()
+			// Get all top level children in the scope chain
+			.then(scopes => TPromise.join(scopes.map(scope => scope.getChildren())))
+			.then(children => {
+				// Compute name-value map for all variables in scope chain
+				const nameValueMap = this.computeNameValueMapFromScopeChildren(children);
+				// Compute inline contentText for decorators from nameValueMap
+				const linesContent = this.editor.getModel().getLinesContent();
+				const linesDecoratorText = this.computeLinesDecoratorTextFromNameValueMap(nameValueMap, linesContent);
+				// Apply decorators for each line
+				this.setInlineDecoratorsFromLinesDecoratorText(linesDecoratorText, linesContent);
+			});
+	}
+
+	private computeNameValueMapFromScopeChildren(scopeExpressions: IExpression[][]): { [name: string]: string } {
+		const nameValueMap: { [name: string]: string } = {};
+		let valueCount = 0;
+
+		for (let expressions of scopeExpressions) {
+			for (let expr of expressions) {
+				// Put ellipses in value if its too long. Preserve last char e.g ""longstr…"" or {a:true, b:true, …}
+				let value = expr.value;
+				if (value && value.length > MAX_INLINE_VALUE_LENGTH) {
+					value = value.substr(0, MAX_INLINE_VALUE_LENGTH - ELLIPSES.length) + ELLIPSES + value[value.length - 1];
+				}
+
+				nameValueMap[expr.name] = value;
+
+				// Limit the size of map. Too large can have a perf impact",I would not bother with limiting the size of the map for now. We can easily add perf limits later,2016-11-28 10:36:04
516,"@@ -183,19 +193,104 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 	}
 
 	private onFocusStackFrame(stackFrame: IStackFrame): void {
-		if (!stackFrame || stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
+		// TODO: onFocusStackFrame isn't called for the first time when editor url changes due to source mapping
+		//console.log(""onFocusStackFrame"", this.editor.getModel().uri.toString(), this.editor.getModel().uri.toString(), stackFrame);
+
+		if (!stackFrame || stackFrame && stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
 			// clear all inline value decorations in this editor
+			this.editor.removeDecorations(INLINE_DECORATOR_KEY);
 			return;
 		}
 
-		// Compute all inline value decorations for this editor
-		// 1. Find all the words in this document (in the future improve to only look inside ranges for top scope). Editor has nice api for this
-		// 2. All words found should be compared against a children of all non expenisve scopes (good pointer for this is debugHover.ts)
-		// 2b. If there seems to be a lot of duplication between here and debugHover we should consider to move this variable searching method inside a stack frame
-		// 3. Words found in the variables map should be added as decorations on correct locations
-		// 4. Nicely style decorations
+		stackFrame.getScopes()
+			// Get all top level children in the scope chain
+			.then(scopes => TPromise.join(scopes.map(scope => scope.getChildren())))
+			.then(children => {
+				// Compute name-value map for all variables in scope chain
+				const nameValueMap = this.computeNameValueMapFromScopeChildren(children);
+				// Compute inline contentText for decorators from nameValueMap
+				const linesContent = this.editor.getModel().getLinesContent();
+				const linesDecoratorText = this.computeLinesDecoratorTextFromNameValueMap(nameValueMap, linesContent);
+				// Apply decorators for each line
+				this.setInlineDecoratorsFromLinesDecoratorText(linesDecoratorText, linesContent);
+			});
+	}
+
+	private computeNameValueMapFromScopeChildren(scopeExpressions: IExpression[][]): { [name: string]: string } {
+		const nameValueMap: { [name: string]: string } = {};
+		let valueCount = 0;
+
+		for (let expressions of scopeExpressions) {
+			for (let expr of expressions) {
+				// Put ellipses in value if its too long. Preserve last char e.g ""longstr…"" or {a:true, b:true, …}
+				let value = expr.value;
+				if (value && value.length > MAX_INLINE_VALUE_LENGTH) {
+					value = value.substr(0, MAX_INLINE_VALUE_LENGTH - ELLIPSES.length) + ELLIPSES + value[value.length - 1];
+				}
+
+				nameValueMap[expr.name] = value;
+
+				// Limit the size of map. Too large can have a perf impact
+				if (valueCount++ >= MAX_NUM_INLINE_VALUES) {
+					break;
+				}
+			}
+		}
+
+		return nameValueMap;
+	}
+
+	private computeLinesDecoratorTextFromNameValueMap(nameValueMap: { [name: string]: string }, linesContent: string[]): string[] {
+		// Compose a single regex that matches any of the names as a whole word
+		// Single regex is much faster than multiple string matches
+		// TODO: This step could be optimized if we already have a pre-computed variableName to ranges map for editor",Agree that this could be optimized as we do not need to compute all the words on each step. We just need to recompute them on editor model changed event.,2016-11-28 10:25:34
522,"@@ -183,19 +193,104 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 	}
 
 	private onFocusStackFrame(stackFrame: IStackFrame): void {
-		if (!stackFrame || stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
+		// TODO: onFocusStackFrame isn't called for the first time when editor url changes due to source mapping
+		//console.log(""onFocusStackFrame"", this.editor.getModel().uri.toString(), this.editor.getModel().uri.toString(), stackFrame);
+
+		if (!stackFrame || stackFrame && stackFrame.source.uri.toString() !== this.editor.getModel().uri.toString()) {
 			// clear all inline value decorations in this editor
+			this.editor.removeDecorations(INLINE_DECORATOR_KEY);
 			return;
 		}
 
-		// Compute all inline value decorations for this editor
-		// 1. Find all the words in this document (in the future improve to only look inside ranges for top scope). Editor has nice api for this
-		// 2. All words found should be compared against a children of all non expenisve scopes (good pointer for this is debugHover.ts)
-		// 2b. If there seems to be a lot of duplication between here and debugHover we should consider to move this variable searching method inside a stack frame
-		// 3. Words found in the variables map should be added as decorations on correct locations
-		// 4. Nicely style decorations
+		stackFrame.getScopes()
+			// Get all top level children in the scope chain
+			.then(scopes => TPromise.join(scopes.map(scope => scope.getChildren())))
+			.then(children => {
+				// Compute name-value map for all variables in scope chain
+				const nameValueMap = this.computeNameValueMapFromScopeChildren(children);
+				// Compute inline contentText for decorators from nameValueMap
+				const linesContent = this.editor.getModel().getLinesContent();
+				const linesDecoratorText = this.computeLinesDecoratorTextFromNameValueMap(nameValueMap, linesContent);
+				// Apply decorators for each line
+				this.setInlineDecoratorsFromLinesDecoratorText(linesDecoratorText, linesContent);
+			});
+	}
+
+	private computeNameValueMapFromScopeChildren(scopeExpressions: IExpression[][]): { [name: string]: string } {
+		const nameValueMap: { [name: string]: string } = {};
+		let valueCount = 0;
+
+		for (let expressions of scopeExpressions) {
+			for (let expr of expressions) {
+				// Put ellipses in value if its too long. Preserve last char e.g ""longstr…"" or {a:true, b:true, …}
+				let value = expr.value;
+				if (value && value.length > MAX_INLINE_VALUE_LENGTH) {
+					value = value.substr(0, MAX_INLINE_VALUE_LENGTH - ELLIPSES.length) + ELLIPSES + value[value.length - 1];
+				}
+
+				nameValueMap[expr.name] = value;
+
+				// Limit the size of map. Too large can have a perf impact
+				if (valueCount++ >= MAX_NUM_INLINE_VALUES) {
+					break;
+				}
+			}
+		}
+
+		return nameValueMap;
+	}
+
+	private computeLinesDecoratorTextFromNameValueMap(nameValueMap: { [name: string]: string }, linesContent: string[]): string[] {
+		// Compose a single regex that matches any of the names as a whole word
+		// Single regex is much faster than multiple string matches
+		// TODO: This step could be optimized if we already have a pre-computed variableName to ranges map for editor
+		const namesRegex = new RegExp(`\\b(${Object.keys(nameValueMap).join('|')})\\b`, 'g');
+
+		// For every line, get list of names that exist in that line.
+		const linesNames = linesContent.map(content => content.match(namesRegex));
+
+		// Compute text that will be shown after each line as decorators
+		return linesNames.map((names) => {",First filter then map so we do not have falsy elements in the array. Thus you would not need the falsy check on line 272 in setInlineDecoratorfFromLinesDecoratorText,2016-11-28 10:38:34
457,"@@ -184,7 +192,11 @@ export class GotoLineHandler extends QuickOpenHandler {
 			this.lastKnownEditorViewState = (<IEditor>editor.getControl()).saveViewState();
 		}
 
-		return TPromise.as(new QuickOpenModel([new GotoLineEntry(searchValue, this.editorService, this)]));
+		const entry = this.instantiationService.createInstance(","@wprater you do not need to pass in the services, just do: `this.instantiationService.createInstance(GotoLineEntry, searchValue)`

All services will be passed in automatically.
",2016-11-05 07:41:05
959,"@@ -184,8 +185,35 @@ export class ReferencesController implements editorCommon.IEditorContribution {
 				return undefined;
 			});
 
+		};
+
+		let firstUpdate = true;
+		const aggregatedLocations: Location[] = [];
+		const promise = modelPromise.then(result => {
+			if (result instanceof ReferencesModel) {
+				return handleModel(result);
+			}
+			// All results should have been received via progress.
+			alert(this._model.getAriaMessage());",do this in a `.then` instead,2017-06-05 22:48:24
374,"@@ -187,33 +190,14 @@ export class UntitledEditorModel extends StringEditorModel implements IEncodingS
 			this.configurationChangeListener = null;
 		}
 
+		this._onDidChangeContent.dispose();
 		this._onDidChangeDirty.dispose();
 		this._onDidChangeEncoding.dispose();
 
 		this.cancelBackupPromises();
-		this.fileService.discardBackup(this.resource);
-	}
-
-	public backup(): TPromise<void> {
-		return this.doBackup(true);
-	}
-
-	private doBackup(immediate?: boolean): TPromise<void> {
-		// Cancel any currently running backups to make this the one that succeeds
-		this.cancelBackupPromises();
-
-		if (immediate) {
-			return this.fileService.backupFile(this.resource, this.getValue()).then(f => void 0);
-		}
-
-		// Create new backup promise and keep it
-		const promise = TPromise.timeout(1000).then(() => {
-			this.fileService.backupFile(this.resource, this.getValue()); // Very important here to not return the promise because if the timeout promise is canceled it will bubble up the error otherwise - do not change
-		});
-
-		this.backupPromises.push(promise);
 
-		return promise;
+		// TODO: Introduce an event on IUntitledEditorService so this can be moved to BackupModelService?","Yes, please!
",2016-10-21 14:03:04
886,"@@ -188,12 +238,65 @@ export class TerminalLinkHandler {
 			return TPromise.as(void 0);
 		}
 
+		const linkUrl = this.extractLinkUrl(link);
 		// Open an editor if the path exists
-		return pfs.fileExists(link).then(isFile => {
+		return pfs.fileExists(linkUrl).then(isFile => {
 			if (!isFile) {
 				return null;
 			}
 			return link;
 		});
 	}
+
+	/**
+	 * Returns line and column number of URl if that is present.
+	 *
+	 * @param link Url link which may contain line and column number.
+	 */
+	public extractLineColumnInfo(link: string): LineColumnInfo {
+		const matches: string[] = this._localLinkRegex.exec(link);
+
+		let lineColumnClauseLength = this._lineAndColumnClauses.length;
+		let lineColumnInfo: LineColumnInfo = {};
+
+		let lineAndColumnMatchIndex = this._winLineAndColumnMatchIndex;
+
+		if (platform.Platform.Windows !== this._platform) {",Can you swap the if? Normally we put the constant expression on the right: `this._platform !== platform.Platform.Windows`,2017-04-17 17:41:45
887,"@@ -188,12 +238,65 @@ export class TerminalLinkHandler {
 			return TPromise.as(void 0);
 		}
 
+		const linkUrl = this.extractLinkUrl(link);
 		// Open an editor if the path exists
-		return pfs.fileExists(link).then(isFile => {
+		return pfs.fileExists(linkUrl).then(isFile => {
 			if (!isFile) {
 				return null;
 			}
 			return link;
 		});
 	}
+
+	/**
+	 * Returns line and column number of URl if that is present.
+	 *
+	 * @param link Url link which may contain line and column number.
+	 */
+	public extractLineColumnInfo(link: string): LineColumnInfo {
+		const matches: string[] = this._localLinkRegex.exec(link);
+
+		let lineColumnClauseLength = this._lineAndColumnClauses.length;
+		let lineColumnInfo: LineColumnInfo = {};
+
+		let lineAndColumnMatchIndex = this._winLineAndColumnMatchIndex;
+
+		if (platform.Platform.Windows !== this._platform) {
+			lineAndColumnMatchIndex = this._unixLineAndColumnMatchIndex;
+		}
+
+		for (let i = 0; i < lineColumnClauseLength; i++) {
+			let lineMatchIndex = lineAndColumnMatchIndex + 6 * i;",What's 6?,2017-04-17 17:41:53
70,"@@ -189,6 +189,10 @@ export class BaseDebugController extends treedefaults.DefaultController {
 ","Looks good.
",2016-03-16 10:21:00
114,"@@ -19,6 +19,40 @@ import {ITerminalService} from 'vs/workbench/parts/execution/common/execution';
 import {SyncActionDescriptor} from 'vs/platform/actions/common/actions';
 import {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';
 import {KeyMod, KeyCode} from 'vs/base/common/keyCodes';
+import {Extensions, IConfigurationRegistry} from 'vs/platform/configuration/common/configurationRegistry';
+import {defaultWindowsTerm, defaultLinuxTerm} from 'vs/workbench/parts/execution/common/terminal';
+
+let configurationRegistry = <IConfigurationRegistry>Registry.as(Extensions.Configuration);
+configurationRegistry.registerConfiguration({
+	'id': 'terminal',
+	'order': 100,
+	'title': nls.localize('terminalConfigurationTitle', ""Terminal configuration""),
+	'type': 'object',
+	'properties': {
+		'terminal.windows': {
+			'description': nls.localize('terminal.windows', ""Windows specific settings.""),
+			'type': 'object',
+			'properties': {
+				'exec': {
+					'type': 'string',
+					'description': nls.localize('terminal.windows.exec', ""Customizes which terminal to run.""),
+					'default': defaultWindowsTerm
+				}
+			}
+		},
+		'terminal.linux': {
+			'description': nls.localize('terminal.linux', ""Linux specific settings.""),
+			'type': 'object',
+			'properties': {
+				'exec': {","Have you thought about how the settings should be named given that the eventual integrated terminal https://github.com/Microsoft/vscode/issues/143 will likely have a set of settings as well? Maybe something like `terminal.external...` and `terminal.integrated...` or something?
",2016-04-18 17:17:41
786,"@@ -19,6 +19,7 @@
 	""format.insertSpaceAfterFunctionKeywordForAnonymousFunctions"": ""Defines space handling after function keyword for anonymous functions."",
 	""format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"": ""Defines space handling after opening and before closing non empty parenthesis."",
 	""format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"": ""Defines space handling after opening and before closing non empty brackets."",
+	""format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"": ""Defines space handling after opening and before closing non empty braces."",",Please add a blurb at the end about requiring TS 2.3 or higher,2017-03-02 05:23:28
431,"@@ -19,6 +19,9 @@ import 'vs/editor/browser/editor.all';
 // Menus/Actions
 import 'vs/platform/actions/browser/menusExtensionPoint';
 
+// External Explorers
+import ""vs/platform/explorers/browser/explorerExtensionPoint"";","[needs change] Please move this file into the `workbench` folder, only shared services (between editor/workbench) and things around it should be in `platform`
",2016-11-01 10:06:06
439,"@@ -19,6 +19,9 @@ import 'vs/editor/browser/editor.all';
 // Menus/Actions
 import 'vs/platform/actions/browser/menusExtensionPoint';
 
+// External Explorers
+import ""vs/workbench/browser/explorerExtensionPoint"";","@octref as mentioned, suggest to move this into `vs/workbench/parts/explorers` and move this down to the other contributions or actually just add the code to one of the contribution files you already have.
",2016-11-03 07:50:15
326,"@@ -190,7 +190,10 @@ class CheckoutCommand implements ICommand {
 		if (currentHeadMatches.length > 0) {
 			entries.unshift(new CurrentHeadEntry(this.gitService, this.messageService, currentHeadMatches[0].head, currentHeadMatches[0].highlights));
 
-		} else if (exactMatches.length === 0 && isValidBranchName(input)) {
+		} else if (exactMatches.length === 0) {
+			if (!isValidBranchName(input)) {
+			input = correctBranchName(input);","Could we do the same for the `git branch` command?
",2016-10-14 12:51:39
119,"@@ -190,9 +191,10 @@ export class OpenWorkspaceSettingsAction extends BaseOpenSettingsAction {
 class DefaultSettingsInput extends StringEditorInput {
 	private static INSTANCE: DefaultSettingsInput;
 
-	public static getInstance(instantiationService: IInstantiationService): DefaultSettingsInput {
+	public static getInstance(instantiationService: IInstantiationService, configurationService: IConfigurationService): DefaultSettingsInput {
 		if (!DefaultSettingsInput.INSTANCE) {
-			let defaults = getDefaultValuesContent();
+			let editorConfig = configurationService.getConfiguration<any>();
+			let defaults = getDefaultValuesContent(editorConfig.insertSpaces ? strings.repeat(' ', editorConfig.tabSize) : '\t');","editorConfig.insertSpaces => editorConfig.editor.insertSpaces
",2016-04-21 07:16:10
270,"@@ -190,9 +191,12 @@ export class TerminalService implements ITerminalService {
 
 		if (processCount === 0 && !name) {
 			name = this.nextTerminalName;
+			shellPath = this.nextTerminalShellPath;","Create the config here so that the config isn't tracked in 2 vars:

``` ts
private _nextTerminalConfiguration: ITerminalProcessConfiguration;

...

if (processCount === 0 && !name) {
  this._nextTerminalConfiguration = {
    name: ...
    shellPath: ...
  };
} else {
  ...
}
```
",2016-09-08 19:04:36
866,"@@ -192,6 +197,18 @@ export class SettingsDocument {
 		return Promise.resolve([]);
 	}
 
+	private provideDefaultLanguageCompletionItems(location: Location, range: vscode.Range): vscode.ProviderResult<vscode.CompletionItem[]> {","Can we make this method reused between the two clients calling `vscode.languages.getLanguages` here, it seems there is quite a bit of overlap",2017-03-26 19:20:44
574,"@@ -192,6 +200,42 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		});
 	}
 
+	private onFocusStackFrame(stackFrame: IStackFrame): void {
+		// Since step over, step out is a fast continue + break. Continue clears stack.
+		// This means we'll get a null stackFrame followed quickly by a valid stackFrame.
+		// Removing all decorators and adding them again causes a noticeable UI flash due to relayout and paint.
+		// We want to only remove inline decorations if a null stackFrame isn't followed by a valid stackFrame in a short interval.
+		clearTimeout(this.removeDecorationsTimeoutId);",Same as I already commented couple of days ago. Instead of using a timeout I would prefer that we have the decorations on our end and than only update the delta using deltaDecorations. Only if this approach does not work I would consider using timeouts which feels ugly to me.,2016-12-05 14:51:36
647,"@@ -194,40 +219,53 @@ export class TypeOperations {
 		}
 	}
 
+
 	private static _enter(config: CursorConfiguration, model: ITokenizedModel, keepPosition: boolean, range: Range): EditOperationResult {
+		let enterAction = LanguageConfigurationRegistry.getEnterActionAtPosition(model, range.startLineNumber, range.startColumn);
+		let lineText = model.getLineContent(range.startLineNumber);
+		let indentation = strings.getLeadingWhitespace(lineText);
+		if (indentation.length > range.startColumn - 1) {
+			indentation = indentation.substring(0, range.startColumn - 1);
+		}
 
-		let r = LanguageConfigurationRegistry.getEnterActionAtPosition(model, range.startLineNumber, range.startColumn);
-		let enterAction = r.enterAction;
-		let indentation = r.indentation;
+		// adjust indentation of current line.
+		let beforeText = '';
+		if (enterAction.outdentCurrentLine) {","When running scripts\test.bat --coverage this block is not covered, can you please write some tests that cover this new functionality?",2016-12-27 09:59:14
629,"@@ -196,6 +200,15 @@ export class VSCodeMenu {
 			updateMenu = true;
 		}
 
+		let newAutoHideMenuBar = config && config.window && config.window.autoHideMenuBar;",I think this should move out of `menu.ts` into `window.ts` because it rather belongs there. You can have the same listener installed in `window.ts` and do the updating. Also note that I think it should only update if the menu is actually hidden.,2016-12-20 06:24:17
23,"@@ -1962,6 +1962,63 @@ declare namespace vscode {
 	}
 
 	/**
+	 * Reasons for which completion can be triggered.
+	 */
+	export enum CompletionTriggerReason {
+
+		/**
+		 * Invoked by the user, e.g. by hitting `Ctrl+Space`
+		 */
+		OnManualInvocation = 1,
+
+		/**
+		 * When a trigger character was types or when the configuration","`s/types/typed/`
",2015-12-10 16:17:52
24,"@@ -1962,6 +1962,63 @@ declare namespace vscode {
 	}
 
 	/**
+	 * Reasons for which completion can be triggered.
+	 */
+	export enum CompletionTriggerReason {
+
+		/**
+		 * Invoked by the user, e.g. by hitting `Ctrl+Space`
+		 */
+		OnManualInvocation = 1,
+
+		/**
+		 * When a trigger character was types or when the configuration
+		 * is set to trigger on any character.
+		 */
+		OnType = 2
+	}
+
+	/**
+	 * Value-object that contains additional information when
+	 * requesting completions.
+	 */
+	export interface CompletionContext {
+		triggerReason: CompletionTriggerReason;
+		triggerCharacter: string;
+	}
+
+	/**
+	 * Represents a list of completions.
+	 */
+	export class CompletionList extends Array<CompletionItem> {
+
+		/**
+		 * The context from which this completion list was computed.
+		 */
+		context: CompletionContext;","Why does the completion implementer need to return back the context?
",2015-12-10 16:19:22
896,"@@ -197,17 +198,25 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 		this._checkGlobalTSCVersion = true;
 		this.trace = this.readTrace();
 		this.tsServerLogLevel = this.readTsServerLogLevel();
+		this.checkJs = this.readCheckJs();
+
 		disposables.push(workspace.onDidChangeConfiguration(() => {
 			let oldLoggingLevel = this.tsServerLogLevel;",Managing config like this is becoming pretty old. I'll look into refactoring this logic to be clearer in another change,2017-04-21 03:06:10
523,"@@ -197,4 +206,24 @@ export class TerminalService implements ITerminalService {
 		}
 		return terminalIndex;
 	}
+
+	public updateConfig(): void {
+		this.terminalInstances.forEach((instance) => {
+			this._updateCursorBlink(instance);
+			this._updateCommandsToSkipShell(instance);
+			this._updateScrollback(instance);
+		});
+	}
+
+	private _updateCursorBlink(terminalInstance): void {
+		terminalInstance.setCursorBlink(this.configHelper.getCursorBlink());",I think it would make sense to just roll these 3 single line functions into `updateConfig` now.,2016-11-28 18:57:22
726,"@@ -1973,10 +1973,15 @@ declare module 'vscode' {
 		 * @param position The position at which the command was invoked.
 		 * @param context
 		 * @param token A cancellation token.
+		 * @param progress A callback that the implementation MAY call to send intermediate results.
+		 * This allows the UI to start showing these results to the user.
+		 * Calls to `progress` should only include results that have not been passed to previous calls to `progress`.
+		 * Calls to `progress` after the call to `provideReferences` has resolved will be ignored.
+		 * The order of data sent via `progress` does not matter. The results will be sorted before being displayed to the user.
 		 * @return An array of locations or a thenable that resolves to such. The lack of a result can be
 		 * signaled by returning `undefined`, `null`, or an empty array.
 		 */
-		provideReferences(document: TextDocument, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]>;
+		provideReferences(document: TextDocument, position: Position, context: ReferenceContext, token: CancellationToken, progress: (locations: Location[]) => void): ProviderResult<Location[]>;","Two comments here:

1. AFAIK this change is backwards compatible because we are adding the callback as a last parameter. VS Code controls all callers (so we can require it to be passed), but implementors of this function can ignore the progress parameter if they want.
2. Unsure if `progress` is the right name for this parameter. It is for intermediate results, not for reporting a percent completion. Wasn't sure if I should use the proposed `Progress<T>` type for this. Thoughts?",2017-02-09 19:39:01
755,"@@ -2,6 +2,7 @@
  *  Copyright (c) Microsoft Corporation. All rights reserved.",Looks good,2017-02-20 14:09:47
3,"@@ -2,7 +2,9 @@
 
 [VS Code](http://code.visualstudio.com) is a new type of tool that combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. Code provides comprehensive editing and debugging support, an extensibility model, and lightweight integration with existing tools.
 
-<img width=""550"" alt=""vscodereadme"" align=""middle""  src=""https://cloud.githubusercontent.com/assets/1487073/11243985/98562110-8e0b-11e5-9922-29a0b4884eab.png"">","`alt` text should probably be `""""` as the image doesn't really convey information. @chrisdias any reason for adding it initially?
",2015-11-19 22:11:07
944,"@@ -20,6 +20,12 @@ export const STATUS_BAR_DEBUGGING_BACKGROUND = registerColor('statusBar.debuggin
 	hc: '#CC6633'
 }, localize('statusBarDebuggingBackground', ""Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window""));
 
+export const STATUS_BAR_DEBUGGING_FOREGROUND = registerColor('statusBar.debuggingForeground', {
+	dark: '#FFFFFF',","Same here, use `STATUS_BAR_FOREGROUND` as default",2017-05-22 04:47:46
917,"@@ -20,6 +20,7 @@ export const HIGH_CONTRAST = 'hc';
 export type ThemeType = 'light' | 'dark' | 'hc';
 
 export interface ITheme {
+	readonly name: string;","The reason for adding a new field here is give us a human readable identifier to workwith in css rules. The `selector` is something like `vs.vscode-theme-solarized-light-themes-solarized-light-color-theme-json` for example. 

I wasn't exactly sure what this new field should be called though. `name` seemed like the best fit but `label` and `id`are also used in the codebase",2017-05-05 22:22:17
536,"@@ -20,7 +20,22 @@ export const ILifecycleService = createDecorator<ILifecycleService>('lifecycleSe
  */
 export interface ShutdownEvent {
 	veto(value: boolean | TPromise<boolean>): void;
-	quitRequested: boolean;
+	reason: ShutdownReason;
+}
+
+export enum ShutdownReason {
+
+	/** Window is closed */
+	CLOSE,
+
+	/** Application is quit */
+	QUIT,
+
+	/** Window is reloaded */
+	RELOAD,
+
+	/** Other configuration loaded into window */",I'm a little unsure what LOAD is.,2016-11-29 07:52:55
570,"@@ -20,9 +25,33 @@ export interface RenderOptions {
 	codeBlockRenderer?: (modeId: string, value: string) => string | TPromise<string>;
 }
 
-export function renderMarkedString(markedString: MarkedString, options: RenderOptions = {}): Node {
+export function renderMarkedString(modeService: IModeService, openerService: IOpenerService, markedString: MarkedString): Node {
 	const htmlContentElement = typeof markedString === 'string' ? { markdown: markedString } : { code: markedString };
-	return renderHtml(htmlContentElement, options);
+
+	return renderHtml(htmlContentElement, {
+		actionCallback: (content) => {
+			openerService.open(URI.parse(content)).then(void 0, onUnexpectedError);
+		},
+		codeBlockRenderer: (languageAlias, value): string | TPromise<string> => {
+			// According to the language server spec (https://github.com/Microsoft/language-server-protocol)
+			// A MarkedString is rendered as:
+			// - CASE 1: markdown if it is represented as a string
+			// - CASE 2: markdown code block of the given langauge if it is represented as a pair of a language and a value
+			//
+			// Because this function is only responsible for rendering code blocks, we only need to worry about handling
+			// CASE 2 here. We follow the spec exactly because in some cases (e.g. PHP), we want the content to be
+			// rendered using less strict rules than the official grammar (as we sometimes do in markdown.)
+			//
+			// Also note that we render the codeblock using TextMate grammar rather than using highlight.js as we do in the
+			// markdown preview. This is because we want renderings to be as consistent with the editor as possible.
+			value = '```' + languageAlias + '\n' + value + '\n ```';
+			const modeId = 'markdown';",That's the wrong `modeId` - it should be `languageAlias`,2016-12-05 13:59:12
627,"@@ -200,6 +200,11 @@ let properties: { [path: string]: IJSONSchema; } = {
 		'type': 'boolean',
 		'default': false,
 		'description': nls.localize('showFullPath', ""If enabled, will show the full path of opened files in the window title."")
+	},","Two things:
* this setting should be wrapped around a isLinux/isWindows check so that it does not show up on macOS where it is not supported
* I find the setting name a bit confusing because `autoHideMenuBar` is not really clear other than that it matches the Electron method we are using it for. I would try to change it to the intent it actually does (if this option is set to true, you can press Alt key to show the menu even if the menu is hidden)",2016-12-20 06:19:29
735,"@@ -200,9 +200,12 @@ actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(CreateNewTermina
 	primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.US_BACKTICK,
 	mac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.US_BACKTICK }
 }), 'Terminal: Create New Integrated Terminal', category);
-actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(FocusTerminalAction, FocusTerminalAction.ID, FocusTerminalAction.LABEL), 'Terminal: Focus Terminal', category);
+actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(FocusActiveTerminalAction, FocusActiveTerminalAction.ID, FocusActiveTerminalAction.LABEL), 'Terminal: Focus Active Terminal', category);
 actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(FocusNextTerminalAction, FocusNextTerminalAction.ID, FocusNextTerminalAction.LABEL), 'Terminal: Focus Next Terminal', category);
 actionRegistry.registerWorkbenchAction(new SyncActionDescriptor(FocusPreviousTerminalAction, FocusPreviousTerminalAction.ID, FocusPreviousTerminalAction.LABEL), 'Terminal: Focus Previous Terminal', category);
+for (let i = 0; i < 10; i++) {","This should be 1 to 9, not 0 to 9",2017-02-18 17:49:56
615,"@@ -203,6 +203,14 @@ let properties: { [path: string]: IJSONSchema; } = {
 	}
 };
 
+if (platform.isWindows) {
+	properties['window.autoDetectHighContrast'] = {
+		'type': 'boolean',
+		'default': true,
+		'description': nls.localize('autoDetectHighContrast', ""If enabled, will automatically change to high contrast theme if Windows is using a high contrast theme."")
+	}",Missing trailing comma.,2016-12-16 14:13:31
897,"@@ -204,6 +204,28 @@ export class TerminalPanel extends Panel {
 				event.stopPropagation();
 			}
 		}));
+		this._register(DOM.addDisposableListener(this._parentDomElement, DOM.EventType.DROP, (e: DragEvent) => {
+			if (e.target === this._parentDomElement || DOM.isAncestor(e.target as HTMLElement, this._parentDomElement)) {
+				if (!e.dataTransfer) {
+					return;
+				}
+				const url = e.dataTransfer.getData('URL');
+				const filePath = this._getPathFromUrl(url);","Instead of doing this you should use `Uri.file(path)`, you should then be able to extract the path in the correct format from that class. https://github.com/Microsoft/vscode/blob/d02567a2e43203f20d4a1daf1ca7c489be033a4b/src/vs/base/common/uri.ts#L215",2017-04-21 18:44:13
53,"@@ -208,6 +214,11 @@ export class Workbench implements IPartService {
 				viewletAndEditorPromises.push(this.sidebarPart.openViewlet(viewletId, false).then(() => viewletTimerEvent.stop()));
 			}
 
+			if (!this.panelHidden) {
+				const panelId = this.storageService.get(PanelPart.activePanelSettingsKey, StorageScope.WORKSPACE);
+				viewletAndEditorPromises.push(this.panelPart.openPanel(panelId, false));","@isidorn viewletAndEditorPromises => createCompositesPromises or so :)
",2016-01-19 11:12:08
487,"@@ -21,13 +23,29 @@ export class BackupMainService implements IBackupMainService {
 	private workspacesJsonContent: IBackupWorkspacesFormat;
 
 	constructor(
-		@IEnvironmentService environmentService: IEnvironmentService
+		@IEnvironmentService environmentService: IEnvironmentService,
+		@ILifecycleService lifecycleService: ILifecycleService
 	) {
 		this.backupHome = environmentService.backupHome;
 		this.workspacesJsonPath = environmentService.backupWorkspacesPath;
+
+		if (lifecycleService) {","@Tyriar I am not a big fan of this pattern where we check for services to be present. if you have a test, make sure it includes a sufficient test lifecycle service.
",2016-11-15 05:36:33
765,"@@ -210,6 +211,28 @@ export class RunAction extends StartAction {
 	}
 }
 
+export class LaunchAction extends RunAction {",Extend from abstractdebugAction,2017-02-21 10:48:22
763,"@@ -210,6 +211,28 @@ export class RunAction extends StartAction {
 	}
 }
 
+export class LaunchAction extends RunAction {
+	private quickOpenService: IQuickOpenService;
+	static ID = 'workbench.action.debug.launch';
+	static LABEL = nls.localize('launchDebugConfiguration', ""Select and Start Debugging"");
+
+	constructor(id: string, label: string,
+		@IDebugService debugService: IDebugService,
+		@IKeybindingService keybindingService: IKeybindingService,
+		@ICommandService commandService: ICommandService,
+		@IWorkspaceContextService contextService: IWorkspaceContextService,
+		@IFileService fileService: IFileService,
+		@IQuickOpenService quickOpenService: IQuickOpenService",Put private for quickOpenService,2017-02-21 10:41:31
766,"@@ -210,6 +211,28 @@ export class RunAction extends StartAction {
 	}
 }
 
+export class LaunchAction extends RunAction {
+	private quickOpenService: IQuickOpenService;
+	static ID = 'workbench.action.debug.launch';
+	static LABEL = nls.localize('launchDebugConfiguration', ""Select and Start Debugging"");
+
+	constructor(id: string, label: string,
+		@IDebugService debugService: IDebugService,
+		@IKeybindingService keybindingService: IKeybindingService,
+		@ICommandService commandService: ICommandService,
+		@IWorkspaceContextService contextService: IWorkspaceContextService,
+		@IFileService fileService: IFileService,
+		@IQuickOpenService quickOpenService: IQuickOpenService
+	) {
+		super(id, label, debugService, keybindingService, commandService, contextService, fileService);
+		this.quickOpenService = quickOpenService;
+	}
+
+	public run(): TPromise<any> {
+		return TPromise.as(this.quickOpenService.show('debug '));",Do not wrap as promise,2017-02-21 10:49:06
672,"@@ -211,7 +211,8 @@ export class EditorGroupsControl implements IEditorGroupsControl, IVerticalSashL
 	}
 
 	private updateTabOptions(tabOptions: ITabOptions, refresh?: boolean): void {
-		const showTabCloseButton = this.tabOptions ? this.tabOptions.showTabCloseButton : false;
+		const tabCloseButton = this.tabOptions ? this.tabOptions.tabCloseButton : 'right';
+		const showTabCloseButton =  this.tabOptions ? this.tabOptions.showTabCloseButton : false;",Just delete support for `showTabCloseButton` option since it is now supported via your `tabCloseButton` setting.,2017-01-16 07:57:33
974,"@@ -212,7 +212,8 @@ function packageTask(platform, arch, opts) {
 			'vs/workbench/electron-browser/workbench.main.js',
 			'vs/workbench/electron-browser/workbench.main.css',
 			'vs/workbench/electron-browser/bootstrap/index.html',
-			'vs/workbench/electron-browser/bootstrap/index.js'
+			'vs/workbench/electron-browser/bootstrap/index.js',
+			'vs/workbench/electron-browser/bootstrap/preload.js'",@mjbvz make sure to run a test build and verify that this file is included in the produced drop,2017-06-15 05:13:41
725,"@@ -212,8 +212,19 @@ class DataSource implements tree.IDataSource {
 	}
 }
 
+/**
+ * RevealedReference wraps an optional OneReference.
+ * This allows RevealedReference to be passed around (i.e. to Controller)
+ * and updates to the reference can be seen.
+ */
+type RevealedReference = { ref: OneReference | undefined };","I am unsure if the Controller should own the state of what is expanded & revealed or if the ReferenceWidget should own the state. Currently the ReferenceWidget does not retain a reference to the Controller and I am unfamiliar with the lifecycle, so this implementation has the ReferenceWidget owning this state and passing it through to the controller.",2017-02-09 19:35:03
663,"@@ -2146,64 +2156,6 @@ suite('Editor Controller - Regression tests', () => {
 		});
 	});
 
-	test('issue Microsoft/monaco-editor#108 part 1/2: Auto indentation on Enter with selection is half broken', () => {",Move it to indentation related test suite and uses indent rules instead of mocking `enterAction`.,2017-01-12 05:52:09
179,"@@ -216,6 +216,21 @@ export class Controller extends treedefaults.DefaultController {
 		super({ clickBehavior: treedefaults.ClickBehavior.ON_MOUSE_DOWN });
 	}
 
+	public onClick(tree: ITree, element: any, event: IMouseEvent): boolean {
+
+		// Close opened editor on middle mouse click
+		if (element instanceof OpenEditor && event.browserEvent && event.browserEvent.button === 1 /* Middle Button */) {
+			const closeAction = this.instantiationService.createInstance(CloseEditorAction, CloseEditorAction.ID, CloseEditorAction.LABEL);
+			closeAction.run({ event, group: (<OpenEditor>element).editorGroup, editor: (<OpenEditor>element).editorInput }).done(() => {
+				closeAction.dispose();
+			}, errors.onUnexpectedError);
+
+			return true;
+		}
+
+		return super.onClick(tree, element, event);
+	}
+
 	protected onLeftClick(tree: ITree, element: any, event: IMouseEvent, origin: string = 'mouse'): boolean {","Looks good - tried it out and it works!
Though why do you instantiate the action when you can simply go to the editorService and say closeEditor - you have the position and the input.
",2016-06-03 15:02:30
660,"@@ -217,6 +222,35 @@ export class PeekDefinitionAction extends DefinitionAction {
 	}
 }
 
+
+@editorAction
+export class GoToImplementationAction extends DefinitionAction {
+
+	public static ID = 'editor.action.goToImplementation';
+
+	constructor() {
+		super(new DefinitionActionConfig(), {
+			id: GoToImplementationAction.ID,
+			label: nls.localize('actions.goToImplementation.label', ""Go to Implementation""),
+			alias: 'Go to Implementation',
+			precondition: ModeContextKeys.hasImplementationProvider,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: KeyMod.CtrlCmd | KeyCode.F12",conflicts with Find References,2017-01-10 08:37:17
485,"@@ -217,6 +233,12 @@ export class TextFileEditorModelManager implements ITextFileEditorModelManager {
 						break;
 				}
 			});
+
+			// Install model content change listener
+			this.mapResourceToModelContentChangeListener[resource.toString()] = model.onDidContentChange(() => {
+				const newEvent = new TextFileModelChangeEvent(model, StateChange.CONTENT_CHANGE);","@Tyriar I do not see a reason to create an object here each time a character is typed. the untitled event just sends around its resource URI and I would do the same thing here for files.

Cannot say it often enough, this model content change event WILL FIRE like CRAZY. And perf is a hot topic after hot exit :)
",2016-11-09 08:05:40
552,"@@ -22,10 +23,16 @@ export interface IBackupMainService {
 	 */
 	getWorkspaceBackupPaths(): string[];
 
+	// TODO: Doc
+	getEmptyWorkspaceBackupWindowIds(): string[];
+
 	/**
 	 * Pushes workspace backup paths to be tracked for restoration.
 	 *
 	 * @param workspaces The workspaces to add.
 	 */
 	pushWorkspaceBackupPathsSync(workspaces: Uri[]): void;
+
+	// TODO: Doc
+	pushEmptyWorkspaceBackupWindowIdSync(vscodeWindowId: string): void;",@Tyriar maybe merge both methods into one and the return type can either be a path to a workspace or a window id? might make the naming easier.,2016-12-01 16:28:11
988,"@@ -22,15 +22,15 @@ export class GlobalQuickOpenAction extends Action {
 	public static ID = 'workbench.action.quickOpen';
 	public static LABEL = nls.localize('quickOpen', ""Go to File..."");
 
-	constructor(id: string, label: string, @IQuickOpenService private quickOpenService: IQuickOpenService) {
+	constructor(id: string, label: string, @IQuickOpenService private quickOpenService: IQuickOpenService, @ICommandService private commandService: ICommandService) {
 		super(id, label);
 
 		this.order = 100; // Allow other actions to position before or after
 		this.class = 'quickopen';
 	}
 
-	public run(): TPromise<any> {
-		this.quickOpenService.show(null);
+	public run(prefix?: string, showOptions?: IShowOptions): TPromise<any> {",I think we can remove `prefix` and `showOptions` from this action right? We are not using these arguments anywhere. The extension is using the command.,2017-06-19 10:40:02
656,"@@ -22,15 +22,22 @@ File a single issue per problem and feature request.
 * Do not enumerate multiple bugs or feature requests in the same issue.
 * Do not add your issue as a comment to an existing issue unless it's for the identical input. Many issues look similar, but have different causes.
 
-The more information you can provide, the more likely someone will be successful reproducing the issue and finding a fix. Therefore:
+The more information you can provide, the more likely someone will be successful reproducing the issue and finding a fix. 
+
+Please include the following with each issue. 
 
-* Provide reproducible steps, what the result of the steps was, and what you would have expected.
-* A description of what you expect to happen
-* Animated GIFs
-* Code that demonstrates the issue, when providing a code snippet also include it in source and not only as an image
 * Version of VS Code
+* List of extensions that you have installed. ",Suggest to add: You can easily include the list of extensions by creating the issue using the `Help>Report Issues` menu item.,2017-01-09 09:59:06
657,"@@ -22,15 +22,22 @@ File a single issue per problem and feature request.
 * Do not enumerate multiple bugs or feature requests in the same issue.
 * Do not add your issue as a comment to an existing issue unless it's for the identical input. Many issues look similar, but have different causes.
 
-The more information you can provide, the more likely someone will be successful reproducing the issue and finding a fix. Therefore:
+The more information you can provide, the more likely someone will be successful reproducing the issue and finding a fix. 
+
+Please include the following with each issue. 
 
-* Provide reproducible steps, what the result of the steps was, and what you would have expected.
-* A description of what you expect to happen
-* Animated GIFs
-* Code that demonstrates the issue, when providing a code snippet also include it in source and not only as an image
 * Version of VS Code
+* List of extensions that you have installed. 
+* Reproducible steps (1... 2... 3...) and what you expected versus what you actually saw. 
+* Images, animations, or a link to a video. 
+* A code snippet that demonstrates the issue or a link to a code repository we can easily pull down onto our machine to recreate the issue. ","Suggest to emphasize, `including a code snippet as a GIF only, is not sufficient, since this requires us to type in the snippet to reproduce the problem.",2017-01-09 10:00:42
435,"@@ -22,25 +23,48 @@ import { IActivityService, IBadge } from 'vs/workbench/services/activity/common/
 import { IPartService } from 'vs/workbench/services/part/common/partService';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
+import { IStorageService } from 'vs/platform/storage/common/storage';
+import { IExtensionService } from 'vs/platform/extensions/common/extensions';
 
 export class ActivitybarPart extends Part implements IActivityService {
 	public _serviceBrand: any;
+
 	private viewletSwitcherBar: ActionBar;
 	private activityActionItems: { [actionId: string]: IActionItem; };
 	private compositeIdToActions: { [compositeId: string]: ActivityAction; };
 
+	private enabledExternalViewlets: string[];
+	private externalViewlets: { [viewletId: string]: ViewletDescriptor; };
+
+	// Serves two purposes:
+	// 1. Expose the viewletId that will be assigned to an external Viewlet,
+	//    which wouldn't know its viewletId until construction time.
+	// 2. When workbench restores sidebar, if the last-opened Viewlet is external,
+	//    it'll set this value and defer restoration until all extensions are loaded.
+	private _externalViewletIdToOpen: string;","This feels a bit unclean, but I can't find a better way to do it.

I don't think 1) can be worked around, but as for 2), I could have put `IExtensionService` as a dep for `Workbench` and register a callback for `extensionService.onReady`. What's your opinion @bpasero ?
",2016-11-02 05:41:38
678,"@@ -22,6 +22,7 @@ export const IEditorGroupService = createDecorator<IEditorGroupService>('editorG
 export interface ITabOptions {
 	showTabs?: boolean;
 	showTabCloseButton?: boolean;
+	tabCloseButton?: string;",Use string enum here (`'left' | 'right' | 'off'`),2017-01-16 08:00:32
180,"@@ -220,6 +220,15 @@ export class CommonFindController extends Disposable implements editorCommon.IEd
 		}
 		return false;
 	}
+
+	public selectAllMatches(): boolean {
+		if (this._model) {
+			this._model.selectAllMatches();
+			this.closeFindWidget();","``` ts
this.closeFindWidget();
```

Why is it removed in the latest code(in master branch)?
",2016-06-11 08:43:59
11,"@@ -221,7 +221,14 @@ export class FileService implements files.IFileService {
 			if (exists) {
 				createParentsPromise = Promise.as(null);
 			} else {
-				createParentsPromise = pfs.mkdirp(paths.dirname(absolutePath));
+				//Do not try to make parent directory if saving to drive root
+				var dirName = paths.dirname(absolutePath);
+				if(dirName.slice(-2) != ':\\') {","So the problem is that a recursive `mkdir` is always attempted if the file does not yet exist, which breaks when it's in a drive root? How about doing a `pfs.stat` on `paths.dirname(absolutePath)` and see if it exists? Root directories should return true to that and it should be fine cross-platform too.
",2015-11-22 07:20:13
212,"@@ -222,14 +222,7 @@ export class TerminalService implements ITerminalService {
 	}
 
 	private createTerminalProcess(): ITerminalProcess {
-		let env = this.cloneEnv();
-		let shell = this.configHelper.getShell();
-		env['PTYPID'] = process.pid.toString();
-		env['PTYSHELL'] = shell.executable;
-		shell.args.forEach((arg, i) => {
-			env[`PTYSHELLARG${i}`] = arg;
-		});
-		env['PTYCWD'] = this.contextService.getWorkspace() ? this.contextService.getWorkspace().resource.fsPath : os.homedir();
+		let env = this.createTerminalEnv();","May as well do the call inside `cp.fork` now. Other than that good to go though I'd like to see some tests for it since it see,s fairly testable.
",2016-07-09 02:23:17
450,"@@ -228,9 +228,14 @@ export class Workbench implements IPartService {
 				viewletId = this.storageService.get(SidebarPart.activeViewletSettingsKey, StorageScope.WORKSPACE, viewletId); // help developers and restore last view
 			}
 
-			if (!this.sideBarHidden && !!viewletId) {
-				const viewletTimerEvent = timer.start(timer.Topic.STARTUP, strings.format('Opening Viewlet: {0}', viewletId));
-				compositeAndEditorPromises.push(this.sidebarPart.openViewlet(viewletId, false).then(() => viewletTimerEvent.stop()));
+			// If external viewlet is the last active viewlet, defer its construction until all extensions are loaded
+			if (!viewletRegistry.getViewlet(viewletId)) {","@octref this is ugly and should be removed. instead the viewlet service should be fit enough to handle both extension viewlets and normal viewlets. if you clean that up you will not need this if-else condition at all 👍 
",2016-11-03 08:46:28
40,"@@ -229,15 +234,15 @@ export class CommandEvent extends Event {
 }
 
 /**
- * Viewlet events are emitted when a viewlet opens or closes in the sidebar.
+ * Composite events are emitted when a composite opens or closes in the sidebar or panel.
  */
-export class ViewletEvent extends Event {
-	public viewletId: string;
+export class CompositeEvent extends Event {
+	public compositeId: string;
 
-	constructor(viewletId: string, originalEvent?: any) {
+	constructor(compositeId: string, originalEvent?: any) {","@isidorn I think here we should also send around the actual instance of Composite that was opened or closed because then one can simply do an instance of check to find out if the composite was a viewlet or panel.
",2016-01-15 15:13:58
88,"@@ -23,4 +23,12 @@
 
 .monaco-sash.disabled {
 	cursor: default;
+}
+
+.vertical-cursor-container * {
+	cursor: ew-resize !important;
+}
+
+.horizontal-cursor-container * {
+	cursor: ns-resize !important;","Why is this needed?
",2016-03-30 05:23:56
904,"@@ -23,7 +23,13 @@
 
 .monaco-editor .suggest-widget > .tree {
 	height: 100%;
-	width: 100%;
+	width: 40%;
+	float: left;","Careful with floats. If all you have is two divs, you should use the usual `inline-block` display to lay them out side by side.",2017-05-04 12:37:58
210,"@@ -230,6 +230,9 @@ export class TerminalService implements ITerminalService {
 			env[`PTYSHELLARG${i}`] = arg;
 		});
 		env['PTYCWD'] = this.contextService.getWorkspace() ? this.contextService.getWorkspace().resource.fsPath : os.homedir();
+		if (!env['LANG'] && platform.locale) {","This function's a bit busy at this point, can you factor out the `env` stuff into a `createTerminalEnv` function?
",2016-07-08 23:00:58
209,"@@ -230,6 +230,9 @@ export class TerminalService implements ITerminalService {
 			env[`PTYSHELLARG${i}`] = arg;
 		});
 		env['PTYCWD'] = this.contextService.getWorkspace() ? this.contextService.getWorkspace().resource.fsPath : os.homedir();
+		if (!env['LANG'] && platform.locale) {
+			env['LANG'] = this.getLang(platform.locale);","Do the `LC_` variables get fixed with this? Do you need to set `LC_ALL` too?
",2016-07-08 22:59:30
963,"@@ -230,6 +232,19 @@ export class Repl extends Panel implements IPrivateReplService {
 		this.layout(this.dimension);
 	}
 ","I do not like code duplication, can you please look into removing the `CopyAllAction` from `electronDebugActions.ts`. I believe that we can now always use this action instead, can you please try that?",2017-06-08 09:59:44
669,"@@ -235,6 +236,33 @@ export class FormatSelectionAction extends AbstractFormatAction {
 	}
 }
 
+@editorAction
+export class FormatOnPasteAction extends AbstractFormatAction {
+	constructor() {
+		super({
+			id: 'editor.action.formatOnPaste',
+			label: nls.localize('formatOnPaste.label', ""Format on paste""),
+			alias: 'Format on paste',",Maybe 'Paste and Format'?,2017-01-13 11:26:03
670,"@@ -235,6 +236,33 @@ export class FormatSelectionAction extends AbstractFormatAction {
 	}
 }
 
+@editorAction
+export class FormatOnPasteAction extends AbstractFormatAction {
+	constructor() {
+		super({
+			id: 'editor.action.formatOnPaste',
+			label: nls.localize('formatOnPaste.label', ""Format on paste""),
+			alias: 'Format on paste',
+			precondition: EditorContextKeys.Writable",We have context key which knows if for the current document there is someone that can format selections: `ModeContextKeys.hasDocumentSelectionFormattingProvider` (see [`FormatSelection`](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/format/common/formatActions.ts#L219) as a sample). With that the menus will automatically update.,2017-01-13 11:28:03
136,"@@ -2362,7 +2362,7 @@ export function keybindingForAction(id: string): Keybinding {
 			return new Keybinding(KeyMod.CtrlCmd | KeyCode.KEY_S);
 		case DeleteFileAction.ID:
 		case MoveFileToTrashAction.ID:
-			return new Keybinding(KeyCode.Delete);
+			return new Keybinding(isMacintosh ? KeyMod.CtrlCmd | KeyCode.Backspace : KeyMod.Shift | KeyCode.Delete);","@SamVerschueren it should actually be just KeyCode.Delete on Windows and Linux. The shift+delete was added to have a way to bypass the trash when doing the delete.
",2016-04-21 21:39:39
135,"@@ -239,6 +240,10 @@ class ConfigureTaskRunnerAction extends Action {
 					contentPromise = TPromise.as(selection.content);
 				}
 				return contentPromise.then(content => {
+					let editorConfig = this.configurationService.getConfiguration<any>();
+					if (editorConfig.editor.insertSpaces) {
+						content = content.replace(/(\n)(\t+)/g, (_, s1, s2) => s1 + strings.repeat(' ', s2.length * editorConfig.editor.tabSize));","I am a bit confused by the ""\n"" in the regex because later you are replacing it without having a ""\n"". Is that even needed?
",2016-04-21 14:28:20
121,"@@ -239,6 +240,10 @@ class ConfigureTaskRunnerAction extends Action {
 					contentPromise = TPromise.as(selection.content);
 				}
 				return contentPromise.then(content => {
+					let editorConfig = this.configurationService.getConfiguration<any>();
+					if (editorConfig.insertSpaces) {","same here
",2016-04-21 07:16:50
122,"@@ -239,6 +240,10 @@ class ConfigureTaskRunnerAction extends Action {
 					contentPromise = TPromise.as(selection.content);
 				}
 				return contentPromise.then(content => {
+					let editorConfig = this.configurationService.getConfiguration<any>();
+					if (editorConfig.insertSpaces) {
+						content = content.replace(/(\n)(\t+)/g, (_, s1, s2) => s1 + strings.repeat(' ', s2.length * editorConfig.tabSize));","why does the regex include a newline?
",2016-04-21 07:17:07
987,"@@ -239,6 +240,16 @@ export class ExtHostApiCommands {
 					{ name: 'column', description: '(optional) Column in which to open', constraint: v => v === void 0 || typeof v === 'number' }
 				]
 			});
+
+		this._register('vscode.quickOpen', (prefix: string, showOptions: IShowOptions) => {","I am not sure about exposing `IShowOptions` to extensions, I would not do this until we hear otherwise. ",2017-06-19 10:39:19
455,"@@ -239,7 +239,7 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 		// while the UI is not yet ready. Clients have to deal with this fact and we have to make sure that the
 		// stacks model gets updated if any of the UI updating fails with an error.
 		const group = this.ensureGroup(position, !options || !options.preserveFocus);
-		const pinned = !this.previewEditors || (options && (options.pinned || typeof options.index === 'number')) || input.isDirty();
+		const pinned = (!this.previewEditors && !(options && options.forcePreview)) || (options && (options.pinned || typeof options.index === 'number')) || input.isDirty();","This is actually interesting: conceptually we cannot have a dirty file open as preview. So if you have many dirty files and you navigate over them in quick open they will open as pinned editors :-/
",2016-11-05 07:36:05
484,"@@ -24,6 +24,8 @@ export class TextFileEditorModelManager implements ITextFileEditorModelManager {
 
 	private toUnbind: IDisposable[];
 
+	private _onModelDisposed: Emitter<URI>;","@Tyriar can we have test coverage for `onModelDisposed` and `onModelContentChanged`
",2016-11-09 08:03:29
76,"@@ -240,11 +240,16 @@ export class DebugService extends ee.EventEmitter implements debug.IDebugService
 			const threadId = event.body.threadId;
 
 			this.getThreadData(threadId).then(() => {
-				this.session.stackTrace({ threadId: threadId, levels: 20 }).done((result) => {
+				let thread = this.model.getThreads()[threadId];
 
-					this.model.rawUpdate({ threadId: threadId, callStack: result.body.stackFrames, stoppedDetails: event.body });
+				this.model.rawUpdate({
+					threadId: threadId,
+					stoppedDetails: event.body,
+					allThreadsStopped: event.body.allThreadsStopped
+				});
+","Looks good - I like that the changes here are minimal now.

Though I think you can handle this promises a bit better - you can nicely have only one place where you handle errors. I propose:
- Line 242: needs a `done`
- Line 251: needs a `return` and a `then`
- Line 256: needs a `return` and no `done` - this will be boobled up
- Move error handling from line 260 to 261

This way I believe the error handling and `promise` flow is nicer.
",2016-03-16 10:37:24
246,"@@ -240,12 +240,12 @@ export class ScrollableElement extends Widget {
 			let deltaX = e.deltaX * this._options.mouseWheelScrollSensitivity;
 
 			if (this._options.flipAxes) {
-				deltaY = e.deltaX;
-				deltaX = e.deltaY;
+				deltaY = deltaX;","Sorry if I'm missing something, but how does this work?

```
deltaY = deltaX;
deltaX = deltaY;
```

will not actually swap the two variables, it will just assign them both to have the value of deltaX. Is that the desired behavior?

My guess is you'd want to use `[deltaY, deltaX] = [deltaX, deltaY]`
",2016-08-09 00:10:43
357,"@@ -240,7 +240,16 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 		// while the UI is not yet ready. Clients have to deal with this fact and we have to make sure that the
 		// stacks model gets updated if any of the UI updating fails with an error.
 		const group = this.ensureGroup(position, !options || !options.preserveFocus);
-		const pinned = !this.previewEditors || (options && (options.pinned || typeof options.index === 'number')) || input.isDirty();
+		let pinned = !this.previewEditors || (options && (options.pinned || typeof options.index === 'number')) || input.isDirty();","@wprater I do not really like that we change other options (`revealIfVisible` and `preserveFocus`), here is how i would code it up:

`const pinned = (!this.previewEditors && !(options && options.forcePreview)) || (options && (options.pinned || typeof options.index === 'number')) || input.isDirty();`

The other options should be untouched and set from the outside as before.
",2016-10-21 09:49:56
347,"@@ -240,7 +241,18 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 		// while the UI is not yet ready. Clients have to deal with this fact and we have to make sure that the
 		// stacks model gets updated if any of the UI updating fails with an error.
 		const group = this.ensureGroup(position, !options || !options.preserveFocus);
-		const pinned = !this.previewEditors || (options && (options.pinned || typeof options.index === 'number')) || input.isDirty();
+		let pinned = !this.previewEditors || (options && (options.pinned || typeof options.index === 'number')) || input.isDirty();
+		if (this.previewEditors) {
+			pinned = !this.configurationService.getConfiguration<IWorkbenchEditorConfiguration>().workbench.editor.enablePreviewFromQuickOpen;","using the config service here vs. `EditorHistoryEntry`.  I may have preferred to put the config service call in the `getOptions` of `EditorQuickOpenEntry`, but there is no configurationService directly available there.
",2016-10-19 22:23:02
691,"@@ -2404,6 +2431,38 @@
 						</dict>
 					</array>
 				</dict>
+				<key>fenced_code_block_rust</key>",Please update these to use the fenced code block logic that the other languages now use. It's rather horrific but it fixes a few important edge cases,2017-01-19 01:54:56
903,"@@ -241,6 +239,8 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 			this.trace = this.readTrace();
 			this.tsServerLogLevel = this.readTsServerLogLevel();
 			this.servicePromise = this.startService();
+			this.lastError = null;",I don't think this bit is needed,2017-05-03 05:11:31
626,"@@ -242,6 +255,10 @@ export class VSCodeMenu {
 
 	private install(): void {
 
+		// Auto hide menu bar
+		const windows = this.windowsService.getWindows();
+		windows.forEach(w => w.win.setAutoHideMenuBar(this.currentAutoHideMenuBar));","Is this the right place to put this? 

Feels a bit wasteful to create the whole menu from scratch when I just want to update a property of the window?",2016-12-19 15:35:28
27,"@@ -244,6 +245,14 @@ registerWordCommand(H.CursorWordRight, false, KeyCode.RightArrow);
 registerWordCommand(H.CursorWordRightSelect, true, KeyCode.RightArrow);
 registerWordCommand(H.DeleteWordLeft, false, KeyCode.Backspace);
 registerWordCommand(H.DeleteWordRight, false, KeyCode.Delete);
+registerWordCommand(H.DeleteSubWordLeft,false, KeyCode.F7);
+registerWordCommand(H.DeleteSubWordRight,false, KeyCode.F6);","space between `,` and `false`
",2015-12-11 13:10:41
220,"@@ -244,7 +274,7 @@ export class OpenAnythingHandler extends QuickOpenHandler {
 		return null;
 	}
 
-	public getResultsFromCache(searchValue: string, range: IRange = null): QuickOpenEntry[] {
+	public getResultsFromCache(searchValue: string, range: IRange = null) {","One of our coding principles is to always type the return value of a function, even if TS can infer it. So please add an interface for this method too.

Also it looks like we can make this method private.
",2016-07-14 17:35:20
679,"@@ -244,9 +244,10 @@ configurationRegistry.registerConfiguration({
 			'description': nls.localize('watcherExclude', ""Configure glob patterns of file paths to exclude from file watching. Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load."")
 		},
 		'files.hotExit': {
-			'type': 'boolean',
-			'default': true,
-			'description': nls.localize('hotExit', ""Controls whether unsaved files are restored after relaunching. If this is enabled there will be no prompt to save when exiting the editor."")
+			'type': 'string',
+			'enum': [HotExitConfiguration.OFF, HotExitConfiguration.ON_EXIT, HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE],
+			'default': HotExitConfiguration.ON_EXIT,
+			'description': nls.localize('hotExit', ""Whether hot exit is enabled which allows changes to unsaved files to be remembered between sessions, hiding the prompt t save when exiting the editor. Selecting \""{0}\"" means that hot exit will only be triggered when the application is closed (workbench.action.quit command via command pallete, keybinding of menu) and ALL windows with backups will be restored upon next launch. Selecting \""{1}\"" will trigger hot exit when any FOLDER window is closed, only NON-FOLDER windows will be restored when the application is restarted (not FOLDER workspaces)."", HotExitConfiguration.ON_EXIT, HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE)","Typo?

`hiding the prompt t save`",2017-01-17 05:41:33
571,"@@ -245,24 +242,7 @@ export class ModesContentHoverWidget extends ContentHoverWidget {
 			msg.contents
 				.filter(contents => !!contents)
 				.forEach(contents => {
-					const renderedContents = renderMarkedString(contents, {
-						actionCallback: (content) => {
-							this._openerService.open(URI.parse(content)).then(void 0, onUnexpectedError);
-						},
-						codeBlockRenderer: (languageAlias, value): string | TPromise<string> => {
-							// In markdown,
-							// it is possible that we stumble upon language aliases (e.g.js instead of javascript)
-							// it is possible no alias is given in which case we fall back to the current editor lang
-							const modeId = languageAlias
-								? this._modeService.getModeIdForLanguageName(languageAlias)
-								: this._editor.getModel().getModeId();
-
-							return this._modeService.getOrCreateMode(modeId).then(_ => {
-								return `<div class=""code"">${tokenizeToString(value, modeId)}</div>`;
-							});
-						}
-					});
-
+					const renderedContents = renderMarkedString(this._modeService, this._openerService, contents);",We have a feature that we use the documents language when a code block doesn't specify one (just triple tick pairs). We are loosing that feature here,2016-12-05 14:01:52
239,"@@ -2459,6 +2459,12 @@ declare namespace vscode {
 			 * @deprecated
 			 */
 			brackets?: any;
+			/**
+			 * This property is deprecated and not fully supported anymore by
+			 * the editor (scope and lineStart are ignored).
+			 * Use the the autoClosingPairs property in the language configuration file instead.
+			 * @deprecated","Do we have a doc page on the homepage we can refer them to?
",2016-07-22 07:39:49
17,"@@ -246,7 +246,7 @@ export class ChangesView extends EventEmitter.EventEmitter implements GitView.IV
 	public getSecondaryActions(): Actions.IAction[] {
 		if (!this.secondaryActions) {
 			this.secondaryActions = [
-				this.instantiationService.createInstance(GitActions.SyncAction),
+				this.instantiationService.createInstance(GitActions.SyncAction, GitActions.SyncAction.ID, GitActions.SyncAction.LABEL),","... here
",2015-11-25 15:13:05
303,"@@ -247,20 +247,26 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
-			let sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
-
-			let input = this.getInput();
-			if (input instanceof EditorInput) {
-				this.editorService.openEditor(input, this.getOptions(), sideBySide).done(null, errors.onUnexpectedError);
-			} else {
-				this.editorService.openEditor(<IResourceInput>input, sideBySide).done(null, errors.onUnexpectedError);
-			}
+		let sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
+
+		let input = this.getInput();
+		let options = this.getOptions();
 
-			return true;
+		const isPreview = mode === Mode.PREVIEW;
+
+		if (input instanceof EditorInput) {
+			if (isPreview) {
+				options.preserveFocus = false;","flip this
",2016-10-05 08:24:33
341,"@@ -247,20 +248,30 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
+		const hideWidget = mode === Mode.OPEN;
+
+		let opts = this.getOptions();
+		if (mode === Mode.OPEN_BEHIND) {
+			opts = objects.assign(opts || {}, {
+				pinned: true,
+				revealIfVisible: true,","@wprater I think this option is a bit dangerous here because what it basically means is that the file will not be opened if it is visible in any other group. but I think the intent when sending files to open to the background is to open them in that group independent from other groups. I suggest to not set this flag.
",2016-10-18 09:43:18
342,"@@ -247,20 +248,30 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
+		const hideWidget = mode === Mode.OPEN;
+
+		let opts = this.getOptions();
+		if (mode === Mode.OPEN_BEHIND) {
+			opts = objects.assign(opts || {}, {
+				pinned: true,
+				revealIfVisible: true,
+				preserveFocus: true
+			});
+		}
+
+		if (mode === Mode.OPEN || mode === Mode.OPEN_BEHIND) {
 			let sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
 
 			let input = this.getInput();
 			if (input instanceof EditorInput) {
-				this.editorService.openEditor(input, this.getOptions(), sideBySide).done(null, errors.onUnexpectedError);
+				this.editorService.openEditor(input, opts, sideBySide).done(null, errors.onUnexpectedError);
 			} else {
+				objects.assign((<IResourceInput>input).options, opts);","@wprater carefull, options could be null within the resource input and I think this would break `assign` method.
",2016-10-18 09:44:40
349,"@@ -247,20 +248,38 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
+		const hideWidget = mode === Mode.OPEN;
+
+		let backgroundOpts;","I suggest to move this into the other if check where we actually care about backgroundOpts. It is not being used in the scope otherwise.
",2016-10-20 14:08:02
348,"@@ -247,20 +248,38 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
+		const hideWidget = mode === Mode.OPEN;
+
+		let backgroundOpts;
+		if (mode === Mode.OPEN_IN_BACKGROUND) {
+			backgroundOpts = objects.assign({}, {","Why not just `{ pinned: true, preserveFocus: true }` ??
",2016-10-20 14:06:40
350,"@@ -247,20 +248,38 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
+		const hideWidget = mode === Mode.OPEN;
+
+		let backgroundOpts;
+		if (mode === Mode.OPEN_IN_BACKGROUND) {
+			backgroundOpts = objects.assign({}, {
+				pinned: true,
+				preserveFocus: true
+			});
+		}
+
+		if (mode === Mode.OPEN || mode === Mode.OPEN_IN_BACKGROUND) {
 			let sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
+			let opts = this.getOptions();
+			if (backgroundOpts) {
+				opts = objects.assign(opts || {}, backgroundOpts);","You cannot use `objects.assign` with the `opts` here because opts can be a real instance of `EditorOptions`, it might not just be an options bag. Maybe the better fix is to see if `this.getOptions()` could always return `IEditorOptions`.
",2016-10-20 14:10:24
673,"@@ -249,7 +250,7 @@ export class EditorGroupsControl implements IEditorGroupsControl, IVerticalSashL
 				}
 
 				// Refresh title when icons change
-				else if (showingIcons !== this.tabOptions.showIcons || showTabCloseButton !== this.tabOptions.showTabCloseButton) {
+				else if (showingIcons !== this.tabOptions.showIcons || showTabCloseButton !== this.tabOptions.showTabCloseButton || tabCloseButton !== this.tabOptions.tabCloseButton) {",...same here,2017-01-16 07:57:46
265,"@@ -25,14 +25,16 @@ export class ConfigVariables extends SystemVariables {
 	}
 
 	protected resolveString(value: string): string {
+		const originalValue = value;
 		value = super.resolveString(value);
 
 		let regexp = /\$\{config\.(.*?)\}/g;
 		return value.replace(regexp, (match: string, name: string) => {
 			let config = this.configurationService.getConfiguration();
 			let newValue = new Function('_', 'try {return _.' + name + ';} catch (ex) { return """";}')(config);","Can we simplify this line such that it is more readable? Also new Function syntax is not our style - it is not used anywhere else in our code base so I would suggest to change this
",2016-09-05 16:30:12
266,"@@ -25,14 +25,16 @@ export class ConfigVariables extends SystemVariables {
 	}
 
 	protected resolveString(value: string): string {
+		const originalValue = value;
 		value = super.resolveString(value);
 
 		let regexp = /\$\{config\.(.*?)\}/g;
 		return value.replace(regexp, (match: string, name: string) => {
 			let config = this.configurationService.getConfiguration();
 			let newValue = new Function('_', 'try {return _.' + name + ';} catch (ex) { return """";}')(config);
 			if (Types.isString(newValue)) {
-				return newValue;
+				// Prevent infinite recursion and also support nested references (or tokens)
+				return newValue === originalValue ? '' : this.resolveString(newValue);
 			}","Else formating is not our style, please keep the else on the same line
",2016-09-05 16:30:25
75,"@@ -25,6 +25,7 @@ export interface IRawModelUpdate {
 	thread?: DebugProtocol.Thread;","Looks good.
",2016-03-16 10:29:50
850,"@@ -25,6 +25,7 @@ import 'vs/workbench/browser/actions/toggleSidebarVisibility';
 import 'vs/workbench/browser/actions/toggleSidebarPosition';
 import 'vs/workbench/browser/actions/toggleEditorLayout';
 import 'vs/workbench/browser/actions/toggleZenMode';
+import 'vs/workbench/browser/actions/reSizePart';",Lowercase 's' to be `resizePart` ?,2017-03-22 13:28:53
362,"@@ -250,33 +250,38 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	public run(mode: Mode, context: IEntryRunContext): boolean {
 		const hideWidget = (mode === Mode.OPEN);
 
+		let sideBySide;
 		if (mode === Mode.OPEN || mode === Mode.OPEN_IN_BACKGROUND) {
-			let sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
-
-			let openInBackgroundOptions: IEditorOptions;
-			if (mode === Mode.OPEN_IN_BACKGROUND) {
-				openInBackgroundOptions = { pinned: true, preserveFocus: true };
-			}
+			sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
+		}
 
-			let input = this.getInput();
-			if (input instanceof EditorInput) {
-				let opts = this.getOptions();
-				if (opts) {
-					opts.mixin(openInBackgroundOptions);
-				} else if (openInBackgroundOptions) {
-					opts = EditorOptions.create(openInBackgroundOptions);
-				}
+		let modeOverrideOptions: IEditorOptions;
+		if (mode === Mode.PREVIEW) {
+			modeOverrideOptions = { forcePreview: true };
+		}","@wprater style `} else {`
",2016-10-21 09:56:35
363,"@@ -250,33 +250,38 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	public run(mode: Mode, context: IEntryRunContext): boolean {
 		const hideWidget = (mode === Mode.OPEN);
 
+		let sideBySide;
 		if (mode === Mode.OPEN || mode === Mode.OPEN_IN_BACKGROUND) {
-			let sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
-
-			let openInBackgroundOptions: IEditorOptions;
-			if (mode === Mode.OPEN_IN_BACKGROUND) {
-				openInBackgroundOptions = { pinned: true, preserveFocus: true };
-			}
+			sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
+		}
 
-			let input = this.getInput();
-			if (input instanceof EditorInput) {
-				let opts = this.getOptions();
-				if (opts) {
-					opts.mixin(openInBackgroundOptions);
-				} else if (openInBackgroundOptions) {
-					opts = EditorOptions.create(openInBackgroundOptions);
-				}
+		let modeOverrideOptions: IEditorOptions;
+		if (mode === Mode.PREVIEW) {
+			modeOverrideOptions = { forcePreview: true };
+		}
+		else if (mode === Mode.OPEN_IN_BACKGROUND) {
+			modeOverrideOptions = { forcePreview: false, pinned: true, preserveFocus: true };","@wprater you do not need `forcePreview: false` here imho
",2016-10-21 09:57:18
364,"@@ -250,33 +250,38 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	public run(mode: Mode, context: IEntryRunContext): boolean {
 		const hideWidget = (mode === Mode.OPEN);
 
+		let sideBySide;
 		if (mode === Mode.OPEN || mode === Mode.OPEN_IN_BACKGROUND) {
-			let sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
-
-			let openInBackgroundOptions: IEditorOptions;
-			if (mode === Mode.OPEN_IN_BACKGROUND) {
-				openInBackgroundOptions = { pinned: true, preserveFocus: true };
-			}
+			sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
+		}
 
-			let input = this.getInput();
-			if (input instanceof EditorInput) {
-				let opts = this.getOptions();
-				if (opts) {
-					opts.mixin(openInBackgroundOptions);
-				} else if (openInBackgroundOptions) {
-					opts = EditorOptions.create(openInBackgroundOptions);
-				}
+		let modeOverrideOptions: IEditorOptions;
+		if (mode === Mode.PREVIEW) {
+			modeOverrideOptions = { forcePreview: true };
+		}
+		else if (mode === Mode.OPEN_IN_BACKGROUND) {
+			modeOverrideOptions = { forcePreview: false, pinned: true, preserveFocus: true };
+		}
 
-				this.editorService.openEditor(input, opts, sideBySide).done(null, errors.onUnexpectedError);
-			} else {
-				const resourceInput = <IResourceInput>input;
+		let input = this.getInput();
+		if (input instanceof EditorInput) {
+			let opts = this.getOptions();
+			if (opts) {
+				opts.mixin(modeOverrideOptions);
+			} else if (modeOverrideOptions) {
+				opts = EditorOptions.create(modeOverrideOptions);
+			}
 
-				if (openInBackgroundOptions) {
-					resourceInput.options = objects.assign(resourceInput.options || Object.create(null), openInBackgroundOptions);
-				}
+			this.editorService.openEditor(input, opts, sideBySide).done(null, errors.onUnexpectedError);
+		}","@wprater style `} else {`
",2016-10-21 09:57:57
453,"@@ -250,35 +256,53 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	public run(mode: Mode, context: IEntryRunContext): boolean {
 		const hideWidget = (mode === Mode.OPEN);
 
+		let sideBySide;
 		if (mode === Mode.OPEN || mode === Mode.OPEN_IN_BACKGROUND) {
-			let sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
-
-			let openInBackgroundOptions: IEditorOptions;
-			if (mode === Mode.OPEN_IN_BACKGROUND) {
-				openInBackgroundOptions = { pinned: true, preserveFocus: true };
-			}
+			sideBySide = !context.quickNavigateConfiguration && context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;","@wprater any particular reason you added the extra `!context.quickNavigateConfiguration` check here?
",2016-11-05 07:33:24
454,"@@ -250,35 +256,53 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	public run(mode: Mode, context: IEntryRunContext): boolean {
 		const hideWidget = (mode === Mode.OPEN);
 
+		let sideBySide;
 		if (mode === Mode.OPEN || mode === Mode.OPEN_IN_BACKGROUND) {
-			let sideBySide = context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
-
-			let openInBackgroundOptions: IEditorOptions;
-			if (mode === Mode.OPEN_IN_BACKGROUND) {
-				openInBackgroundOptions = { pinned: true, preserveFocus: true };
-			}
+			sideBySide = !context.quickNavigateConfiguration && context.keymods.indexOf(KeyMod.CtrlCmd) >= 0;
+		}
 
-			let input = this.getInput();
-			if (input instanceof EditorInput) {
-				let opts = this.getOptions();
-				if (opts) {
-					opts = objects.mixin(opts, openInBackgroundOptions, true);
-				} else if (openInBackgroundOptions) {
-					opts = EditorOptions.create(openInBackgroundOptions);
-				}
+		let pinned;","@wprater why do we need pinned here? first of all it does not seem to be used when the mode is `Mode.OPEN`. And then I think the editor part itself is already dealing with the setting `workbench.editor.enablePreviewFromQuickOpen`?
",2016-11-05 07:34:37
281,"@@ -250,6 +254,7 @@ export class ExtensionEditor extends BaseEditor {
 		this.navbar.onChange(this.onNavbarChange.bind(this, extension), this, this.transientDisposables);
 		this.navbar.push(NavbarSection.Readme, localize('details', ""Details""));
 		this.navbar.push(NavbarSection.Contributions, localize('contributions', ""Contributions""));
+		this.navbar.push(NavbarSection.Changelog, localize('changelog', ""Changelog""));","I'd like to show the Changelog section only if there is actually a Changelog to show.

You can add a `hasChangelog(): boolean` method to `IExtension` that will let you know this synchronously.
",2016-09-15 07:08:02
94,"@@ -253,7 +255,11 @@ function setupIPC(): TPromise<Server> {
 // and assign them to the process environment (e.g. when doubleclick app on Mac)
 getUserEnvironment()
 	.then(userEnv => {
-		assign(process.env, userEnv);
+		if (!tty.isatty(1)) {
+			// Only assign global environment variables when
+			// STDOUT is not attached to terminal.
+			assign(process.env, userEnv);","Instead of testing if vscode is run from terminal, different `assign` method could be used. Maybe:

``` js
assign(userEnv, process.env); // session's envvar trumps login shell's envvar
process.env = userEnv;
```
",2016-03-30 12:46:12
716,"@@ -255,6 +255,18 @@ export function createApiFactory(initData: IInitData, threadService: IThreadServ
 			}
 		};
 
+		const emptyMessageOptions: vscode.MessageOptions = Object.create(null);
+
+		function parseMessageArguments(args: any[]): { options: vscode.MessageOptions; items: any[]; } {
+			const [first, ...rest] = args;
+
+			if (first && (typeof first === 'string' || first.title)) {",What if `first === ''`? The first check would fail even though it is a `string`,2017-02-02 15:57:04
718,"@@ -255,6 +255,18 @@ export function createApiFactory(initData: IInitData, threadService: IThreadServ
 			}
 		};
 
+		const emptyMessageOptions: vscode.MessageOptions = Object.create(null);
+
+		function parseMessageArguments(args: any[]): { options: vscode.MessageOptions; items: any[]; } {
+			const [first, ...rest] = args;
+
+			if (typeof first === 'string' || (first && first.title)) {
+				return { options: emptyMessageOptions, items: args };
+			} else {
+				return { options: first || emptyMessageOptions, items: rest };
+			}
+		}","I like the code but I don't like that it is placed here. Instead I'd propose to move it into the `extHostMessageService` and make its `showMessage`-function like: `showMessage(sev, message, optionOrFirstItem, ...restItem)`. That would encapsulate things better IMO",2017-02-02 16:45:53
483,"@@ -257,20 +266,33 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 			else {
 				diag('load() - created text editor model', this.resource, new Date());
 
-				this.createTextEditorModelPromise = this.createTextEditorModel(content.value, content.resource).then(() => {
-					this.createTextEditorModelPromise = null;
+				return this.backupFileService.doesTextFileHaveBackup(this.resource).then(backupExists => {
+					let getContentPromise: TPromise<IRawText>;
+					if (backupExists) {
+						const restoreResource = this.backupFileService.getBackupResource(this.resource);
+						const restoreOptions = { acceptTextOnly: true, encoding: 'utf-8' };
+						getContentPromise = this.textFileService.resolveTextContent(restoreResource, restoreOptions).then(content => content.value);","@Tyriar if something goes wrong loading that backup, a user will never be able again to open the file. I think a safe guard should be added to fall back to the content from disk. 
",2016-11-09 08:02:23
211,"@@ -257,4 +260,13 @@ export class TerminalService implements ITerminalService {
 		});
 		return newEnv;
 	}
+
+	private getLang(locale: string) {","Can you rename to `getLangEnvVariable` for clarity as to its purpose?
",2016-07-08 23:01:59
354,"@@ -257,6 +264,12 @@ export abstract class ExtHostEditorsShape {
 	$acceptTextEditorRemove(id: string): void { throw ni(); }
 }
 
+export abstract class ExtHostTreeExplorersShape {","Since `InternalTreeExplorerNode` is a class I won't send it over the wire. JSON serialisation will drop the prototype, functions etc
",2016-10-21 07:43:31
616,"@@ -258,15 +258,21 @@ export class ElectronWindow {
 
 		// High Contrast Events
 		ipc.on('vscode:enterHighContrast', (event) => {
-			this.partService.joinCreation().then(() => {
-				this.themeService.setColorTheme(VS_HC_THEME, false);
-			});
+			const windowConfig = this.configurationService.getConfiguration<IWindowSettings>('window');
+			if (windowConfig.autoDetectHighContrast) {",`windowConfig` can be null,2016-12-16 14:14:29
617,"@@ -258,15 +258,21 @@ export class ElectronWindow {
 
 		// High Contrast Events
 		ipc.on('vscode:enterHighContrast', (event) => {
-			this.partService.joinCreation().then(() => {
-				this.themeService.setColorTheme(VS_HC_THEME, false);
-			});
+			const windowConfig = this.configurationService.getConfiguration<IWindowSettings>('window');
+			if (windowConfig.autoDetectHighContrast) {
+				this.partService.joinCreation().then(() => {
+					this.themeService.setColorTheme(VS_HC_THEME, false);
+				});
+			}
 		});
 
 		ipc.on('vscode:leaveHighContrast', (event) => {
-			this.partService.joinCreation().then(() => {
-				this.themeService.setColorTheme(VS_DARK_THEME, false);
-			});
+			const windowConfig = this.configurationService.getConfiguration<IWindowSettings>('window');","I think we can ignore the setting in this case because leaving HC on Windows you want to switch back to dark theme. Or otherwise the setting should be clearer that it prevents switching in both ways, not just from normal to HC theme.",2016-12-16 14:15:05
575,"@@ -26,12 +26,16 @@ import { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/c
 import { IContextMenuService } from 'vs/platform/contextview/browser/contextView';
 import { DebugHoverWidget } from 'vs/workbench/parts/debug/electron-browser/debugHover';
 import { RemoveBreakpointAction, EditConditionalBreakpointAction, ToggleEnablementAction, AddConditionalBreakpointAction } from 'vs/workbench/parts/debug/browser/debugActions';
-import { IDebugEditorContribution, IDebugService, State, IBreakpoint, EDITOR_CONTRIBUTION_ID, CONTEXT_BREAKPOINT_WIDGET_VISIBLE } from 'vs/workbench/parts/debug/common/debug';
+import { IDebugEditorContribution, IDebugService, State, IBreakpoint, EDITOR_CONTRIBUTION_ID, CONTEXT_BREAKPOINT_WIDGET_VISIBLE, IStackFrame } from 'vs/workbench/parts/debug/common/debug';
 import { BreakpointWidget } from 'vs/workbench/parts/debug/browser/breakpointWidget';
 import { FloatingClickWidget } from 'vs/workbench/parts/preferences/browser/preferencesWidgets';
+import { getNameValueMapFromScopeChildren, getDecorators, getEditorWordRangeMap } from 'vs/workbench/parts/debug/electron-browser/debugInlineDecorators';
+import { IStringDictionary } from 'vs/base/common/collections';","We try to sort imports by first base, editor and at the end workbench.",2016-12-05 14:52:18
324,"@@ -26,6 +26,7 @@ import { IEnvironmentService } from 'vs/platform/environment/common/environment'
 import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';","Can these methods live in ITextFileService and implementation?
",2016-10-13 15:16:24
277,"@@ -260,11 +265,12 @@ export class ExtensionEditor extends BaseEditor {
 		switch (id) {
 			case NavbarSection.Readme: return this.openReadme(extension);
 			case NavbarSection.Contributions: return this.openContributions(extension);
+			case NavbarSection.Changelog: return this.openChangelog(extension);
 		}
 	}
 
-	private openReadme(extension: IExtension) {
-		return this.loadContents(() => this.extensionReadme.get()
+	private openMarkdown(extension: IExtension, content: TPromise<string>, noContentCopy: string) {","Given that readme and changelog are basically the same file, I've generalised the function so it can be used from both sides.
",2016-09-14 17:04:22
894,"@@ -261,17 +273,15 @@ export abstract class EmmetEditorAction extends EditorAction {
 
 export class BasicEmmetEditorAction extends EmmetEditorAction {
 
-	private emmetActionName: string;
-
 	constructor(id: string, label: string, alias: string, actionName: string, kbOpts?: ICommandKeybindingsOptions) {
 		super({
 			id: id,
 			label: label,
 			alias: alias,
 			precondition: EditorContextKeys.Writable,
-			kbOpts: kbOpts
+			kbOpts: kbOpts,
+			actionName: actionName","We can use here ES2015 object destructuring for `id`, `label`, `alias`, `kbOpts`, `actionName`? ",2017-04-18 07:13:36
118,"@@ -264,6 +268,16 @@ export function match(arg1: string | IExpression, path: string, siblings?: strin
 
 	// Glob with String
 	if (typeof arg1 === 'string') {
+
+		if (trivia1.test(arg1)) {
+			// common pattern: **/*.txt just need endsWith check
+			return strings.endsWith(path, arg1.substr(4)); // '**/*'.length === 4","you are assuming that most of these patterns have 3 letters in file type, but we know that it is not always the case, like `.js`, `.ts`. Better will be to actually get the match

```
const trivia1 = /^\*\*\/\*(\.\w+)$/;

if ((let t1match = trivia1.match(arg1)) != null) {
    return strings.endsWith(path, t2match[1]);
}
```
",2016-04-20 13:31:35
306,"@@ -265,4 +266,33 @@ class MDDocumentContentProvider implements TextDocumentContentProvider {
 			}, 300);
 		}
 	}
+}
+
+class DocumentHeadingsProvider implements vscode.DocumentSymbolProvider {
+
+	// http://daringfireball.net/projects/markdown/syntax#header
+	private static _atxPattern = /^(#){1,6}\s+.+(\s+\1)?/;","On the regex:
- Strip out any number of trailing `#`s at the end of the line. This does not have to match the number at the start: http://spec.commonmark.org/0.26/#example-42
- Match end of line too, to handle weird cases like `# a # a #`
- Strip out whitespace around the header text itself for the displayed symbol.

Something like: `^(#{1,6})\s+(.+?)\s*#*\s*$` and use these two captures to build up the symbol
",2016-10-05 18:05:17
307,"@@ -265,4 +266,33 @@ class MDDocumentContentProvider implements TextDocumentContentProvider {
 			}, 300);
 		}
 	}
+}
+
+class DocumentHeadingsProvider implements vscode.DocumentSymbolProvider {
+
+	// http://daringfireball.net/projects/markdown/syntax#header
+	private static _atxPattern = /^(#){1,6}\s+.+(\s+\1)?/;
+	private static _settext = /^\s*[-=]+\s*$/;","Make sure to also test that this does not pick up separators
",2016-10-05 18:07:34
344,"@@ -267,4 +267,4 @@ export class AllEditorsPicker extends BaseEditorPicker {
 
 		return super.getAutoFocus(searchValue);
 	}
-}","@bpasero sorry about the newlines.  I can rebase them out. should we add `""files.insertFinalNewline"": false` to workspace settings or `.editorconfig` ?
",2016-10-19 01:26:27
365,"@@ -267,7 +271,7 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 				withElementById(this.partService.getWorkbenchElementId()).getHTMLElement(),
 				{
 					onOk: () => { /* ignore, handle later */ },
-					onCancel: () => { /* ignore, handle later */ },
+					onCancel: () => this.handleOnCancel(true),","@wprater careful, this is being overridden later in a `setCallbacks()` call, so you have to do it there for the picker.
",2016-10-21 09:59:51
556,"@@ -268,6 +268,28 @@ export class SearchService implements IRawSearchService {
 		});
 	}
 
+	private doSearchWithBatchTimeout(engine: ISearchEngine<ISerializedFileMatch>, batchSize: number): PPromise<ISerializedSearchComplete, IRawProgressItem<ISerializedFileMatch>> {
+		return new PPromise<ISerializedSearchComplete, IRawProgressItem<ISerializedFileMatch>>((c, e, p) => {
+			// Use BatchedCollector to get new results to the frontend every 2s at least, until 50 results have been returned
+			const collector = new BatchedCollector(batchSize, /*timeout=*/2000, /*batchOnlyAfter=*/50, p);",I think 2s is a long time. What about using 500ms initially and after 5s start using a timeout of 2s? That would ensure that the first results are show quickly and that progress is visible even for very long running searches.,2016-12-01 18:55:54
752,"@@ -269,11 +269,11 @@ class MarkerNavigationWidget extends ZoneWidget {
 			// update frame color (only applied on 'show')
 			switch (marker.severity) {
 				case Severity.Error:
-					this.options.frameColor = '#ff5a5a';
+					this._container.parentElement.classList.add('marker-error-widget');","Make sure to remove the warning class in this case, same as when you add a warning class remove the error class",2017-02-20 14:01:17
910,"@@ -27,6 +27,11 @@
 	margin-top: 0.5em;
 }
 ",Makes sense,2017-05-05 09:44:13
145,"@@ -27,8 +27,10 @@
     ""iconv-lite"": ""0.4.13"",
     ""minimist"": ""^1.2.0"",
     ""native-keymap"": ""0.1.2"",
+    ""pty.js"": ""git+https://github.com/jeremyramin/pty.js.git#28f2667"",
     ""sax"": ""1.1.2"",","@bpasero You raised concerns about NAN versions but those packages are prebuilt so it shouldn't be a problem, right?
",2016-05-02 11:01:50
659,"@@ -274,31 +269,20 @@ export class TabsTitleControl extends TitleControl {
 			labels.push(item);
 
 			mapLabelToDuplicates.getOrSet(item.name, []).push(item);
-			if (item.description) {
-				mapLabelAndDescriptionToDuplicates.getOrSet(item.name + item.description, []).push(item);
-			}
 		});
 
-		// Mark label duplicates
+		// Mark duplicates and shorten their descriptions
 		const labelDuplicates = mapLabelToDuplicates.values();
 		labelDuplicates.forEach(duplicates => {
 			if (duplicates.length > 1) {
-				duplicates.forEach(duplicate => {
+				var shortenedDescriptions = paths.shorten(duplicates.map(duplicate => duplicate.editor.getDescription()));",`var` => `const`,2017-01-10 05:45:04
470,"@@ -275,7 +282,14 @@ export class Workbench implements IPartService {
 
 					editorOpenPromise = this.editorPart.openEditors(editors);
 				} else {
-					editorOpenPromise = this.editorPart.restoreEditors();
+					if (this.workbenchParams.options.untitledToRestore && this.workbenchParams.options.untitledToRestore.length) {","@Tyriar something is very broken here in this case:
- have a window with a folder open that has a dirty untitled file
- close that window without saving
- from the command line start `code <path to that folder> <file in that folder>`
  => you are not seeing the file being opened 
  => instead the dirty untitled file is opened

This is related to the comment I made in that one issue where I said that your restore logic will not work if someone opens Code like that.
",2016-11-09 07:37:47
941,"@@ -277,10 +285,12 @@ export default class PHPValidationProvider {
 				// Shell args
 				let executableArgs = args.slice(0);
 
-				// Transform Windows file path to Linux file path
-				let windowsPath = executableArgs.pop();
-				let linuxPath = windowsPath.trim().replace(/^([a-zA-Z]):\\/, '/mnt/$1/').replace(/\\/g, '/');
-				executableArgs.push(linuxPath);
+				// If win32 and bash.exe, transform Windows file path to Linux file path
+				if (this.platform === 'win32' && executable.indexOf('bash.exe') !== -1) {",We can't simply test bash.exe here since git under Window installs a bash.exe as well. We either need to test for the full path or better see how bash from git mount the drive and do the path magic as well.,2017-05-18 08:29:09
473,"@@ -28,10 +28,14 @@ import pfs = require('vs/base/node/pfs');
 import encoding = require('vs/base/node/encoding');
 import mime = require('vs/base/node/mime');
 import flow = require('vs/base/node/flow');
+import { IDisposable, dispose } from 'vs/base/common/lifecycle';
 import { FileWatcher as UnixWatcherService } from 'vs/workbench/services/files/node/watcher/unix/watcherService';
 import { FileWatcher as WindowsWatcherService } from 'vs/workbench/services/files/node/watcher/win32/watcherService';
 import { toFileChangesEvent, normalize, IRawFileChange } from 'vs/workbench/services/files/node/watcher/common';
 import { IEventService } from 'vs/platform/event/common/event';
+import { IEnvironmentService } from 'vs/platform/environment/common/environment';","@Tyriar this file contains changes that do NOT seem to be needed after all
",2016-11-09 07:41:07
323,"@@ -28,10 +28,16 @@ import pfs = require('vs/base/node/pfs');
 import encoding = require('vs/base/node/encoding');","Can these methods live in ITextFileService and implementation?
",2016-10-13 15:16:12
685,"@@ -28,34 +29,74 @@ export class Adapter {
 		}
 	}
 
-	public get runtime(): string {
+	public getAdapterExecutable(verifyAgainstFS = true): TPromise<IAdapterExecutable> {
+
+		if (this.rawAdapter.adapterExecutableCommand) {
+			return this.commandService.executeCommand<IAdapterExecutable>(this.rawAdapter.adapterExecutableCommand).then(ad => {
+				return this.verifyAdapterDetails(ad, verifyAgainstFS);
+			});
+		}
+
+		const ad = <IAdapterExecutable>{","ad is a wrong acronym here, I suspect this was previously IAdapterDetails",2017-01-18 14:06:50
688,"@@ -28,34 +29,74 @@ export class Adapter {
 		}
 	}
 
-	public get runtime(): string {
+	public getAdapterExecutable(verifyAgainstFS = true): TPromise<IAdapterExecutable> {
+
+		if (this.rawAdapter.adapterExecutableCommand) {
+			return this.commandService.executeCommand<IAdapterExecutable>(this.rawAdapter.adapterExecutableCommand).then(ad => {
+				return this.verifyAdapterDetails(ad, verifyAgainstFS);
+			});
+		}
+
+		const ad = <IAdapterExecutable>{
+			command: this.getProgram(),
+			args: this.getAttributeBasedOnPlatform('args')
+		};
+		const runtime = this.getRuntime();
+		if (runtime) {
+			const runtimeArgs = this.getAttributeBasedOnPlatform('runtimeArgs');
+			ad.args = (runtimeArgs || []).concat([ad.command]).concat(ad.args || []);
+			ad.command = runtime;
+		}
+		return this.verifyAdapterDetails(ad, verifyAgainstFS);
+	}
+","It feels to me like `verifyAgainstFS` should not be passed to this method, but if that is `false` this method should simply not be called.",2017-01-18 14:13:53
425,"@@ -280,6 +287,12 @@ export abstract class ExtHostEditorsShape {
 	$acceptTextEditorRemove(id: string): void { throw ni(); }
 }
 
+export abstract class ExtHostTreeExplorersShape {
+	$provideRootNode(providerId: string): TPromise<InternalTreeExplorerNode> { throw ni(); };
+	$resolveChildren(providerId: string, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]> { throw ni(); }","As mentioned above, instead of `MainThreadTreeExplorersShape.$showMessage` return a rejected promise from this call and handle the promise (rejected/resolved) in the main side. 
",2016-11-01 09:45:26
426,"@@ -280,6 +287,12 @@ export abstract class ExtHostEditorsShape {
 	$acceptTextEditorRemove(id: string): void { throw ni(); }
 }
 
+export abstract class ExtHostTreeExplorersShape {
+	$provideRootNode(providerId: string): TPromise<InternalTreeExplorerNode> { throw ni(); };
+	$resolveChildren(providerId: string, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]> { throw ni(); }
+	$executeCommand(providerId: string, node: InternalTreeExplorerNode): TPromise<void> { throw ni(); }","[needs change] Related to `MainThreadTreeExplorersShape.$showMessage` - Remove this, because it duplicates functionality and also supports extension host side commands only. The on main side, implement this by calling [`ICommandService#executeCommand`]('https://github.com/Microsoft/vscode/blob/master/src/vs/platform/commands/common/commands.ts#L16').

To preserve the semantics wrt to the node bing the command argument, make sure to use `modes.ICommand`, the [`CommandConverter`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/node/extHostCommands.ts#L45), and the node as argument
",2016-11-01 09:47:43
594,"@@ -281,13 +298,36 @@ class MDDocumentContentProvider implements vscode.TextDocumentContentProvider {
 			}, 300);
 		}
 	}
+}
+
+class MDDocumentSymbolProvider implements vscode.DocumentSymbolProvider {
+
+	constructor(private markdownIt: MarkdownIt) { }
 
-	private getDocumentContentForPreview(document: vscode.TextDocument): string {
-		const content = document.getText();
-		const previewFrontMatter = vscode.workspace.getConfiguration('markdown')['previewFrontMatter'];
-		if (previewFrontMatter === 'hide') {
-			return content.replace(/^-{3}[ \t]*(\r\n|\n)(.|\r\n|\n)*?(\r\n|\n)-{3}[ \t]*(\r\n|\n)/, '');
+	provideDocumentSymbols(document: vscode.TextDocument): vscode.ProviderResult<vscode.SymbolInformation[]> {
+		let offset = 0;
+		let text = document.getText();
+		const frontMatterMatch = FrontMatterRegex.exec(text);
+
+		if (frontMatterMatch) {
+			const frontMatter = frontMatterMatch[0];
+
+			offset = frontMatter.split(/\r\n|\n|\r/g).length - 1;
+			text = text.substr(frontMatter.length);
 		}
-		return content;
+
+		const tokens = this.markdownIt.parse(text);
+		const headings = tokens.filter(token => token.type === 'heading_open');
+
+		const symbols = headings.map(heading => {
+			const lineNumber = heading.map[0];
+			const line = document.lineAt(lineNumber + offset);
+			const location = new vscode.Location(document.uri, line.range);
+			const text = line.text.replace(/^\s*#+\s*/, '');","In order to handle headings such as `# a #`, perform the same replacement backwards on the end of the string too (the number of leading `#` does not have to match the number of trailing `#`)",2016-12-09 20:03:50
278,"@@ -282,10 +288,18 @@ export class ExtensionEditor extends BaseEditor {
 			})
 			.then(null, () => {
 				const p = append(this.content, $('p'));
-				p.textContent = localize('noReadme', ""No README available."");
+				p.textContent = noContentCopy;
 			}));
 	}
 
+	private openReadme(extension: IExtension) {
+		return this.openMarkdown(extension, this.extensionReadme.get(), localize('noReadme', ""No README available.""));","I do not know how expansive is to call `localize`
If it's a lot, we could probably use `localize.bind(this, 'noReadme', ""No README available."")` and use the new returned function only if it's necessary. What's your opinion?
",2016-09-14 17:05:18
279,"@@ -282,10 +288,18 @@ export class ExtensionEditor extends BaseEditor {
 			})
 			.then(null, () => {
 				const p = append(this.content, $('p'));
-				p.textContent = localize('noReadme', ""No README available."");
+				p.textContent = noContentCopy;
 			}));
 	}
 
+	private openReadme(extension: IExtension) {
+		return this.openMarkdown(extension, this.extensionReadme.get(), localize('noReadme', ""No README available.""));
+	}
+
+	private openChangelog(extension : IExtension) {
+		return this.openMarkdown(extension, this.extensionChangelog.get(), localize('noChangelog', ""No CHANGELOG available.""));","Where should I go to provide localisation for this new introduced string?
",2016-09-14 17:05:32
64,"@@ -282,7 +284,15 @@ export class DebugService extends ee.EventEmitter implements debug.IDebugService
 
 		this.toDispose.push(this.session.addListener2(debug.SessionEvents.OUTPUT, (event: DebugProtocol.OutputEvent) => {
 			if (event.body && event.body.category === 'telemetry') {
-				this.telemetryService.publicLog(event.body.output, event.body.data);
+				const key = this.configurationManager.getAdapter().aiKey;
+				// only log telemetry events from debug adapter if the adapter provided the telemetry key
+				if (key) {
+					if (!this.telemetryAdapter) {
+						this.telemetryAdapter = new AIAdapter(key, this.session.getType());","we need here to append common vscode properties such as machineId and sessionId, I will go ahead and merge this and then push a fix for that
",2016-02-16 20:30:33
714,"@@ -284,10 +284,69 @@ export class PeekImplementationAction extends DefinitionAction {
 	}
 
 	protected getDeclarationsAtPosition(model: editorCommon.IModel, position: corePosition.Position): TPromise<Location[]> {
-		return getImplementationAtPosition(model, position);
+		return getImplementationsAtPosition(model, position);
 	}
 }
 
+@editorAction
+export class GoToTypeDefintionAction extends DefinitionAction {
+
+	public static ID = 'editor.action.goToTypeDefinition';
+
+	constructor() {
+		super(new DefinitionActionConfig(), {
+			id: GoToTypeDefintionAction.ID,
+			label: nls.localize('actions.goToTypeDefinition.label', ""Go to Type Definition""),
+			alias: 'Go to Type Definition',
+			precondition: ContextKeyExpr.and(
+				ModeContextKeys.hasTypeDefinitionProvider,
+				ModeContextKeys.isInEmbeddedEditor.toNegated()),
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: 0
+			},
+			menuOpts: {
+				group: 'navigation',
+				order: 1.3
+			}
+		});
+	}
+
+	protected getDeclarationsAtPosition(model: editorCommon.IModel, position: corePosition.Position): TPromise<Location[]> {
+		return getTypeDefinitionsAtPosition(model, position);
+	}
+}
+
+@editorAction
+export class PeekTypeDefinitionAction extends DefinitionAction {
+
+	public static ID = 'editor.action.peekTypeDefinition';
+
+	constructor() {
+		super(new DefinitionActionConfig(false, true, false), {
+			id: PeekTypeDefinitionAction.ID,
+			label: nls.localize('actions.peekTypeDefinition.label', ""Peek Type Definition""),
+			alias: 'Peek Type Definition',
+			precondition: ContextKeyExpr.and(
+				ModeContextKeys.hasTypeDefinitionProvider,
+				ModeContextKeys.isInEmbeddedEditor.toNegated()),
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: 0
+			},
+			menuOpts: {
+				group: 'navigation',
+				order: 1.3",The `order` collides with the one above with means lex sort is applied which means order changes from language to language,2017-02-02 08:01:57
715,"@@ -284,10 +284,69 @@ export class PeekImplementationAction extends DefinitionAction {
 	}
 
 	protected getDeclarationsAtPosition(model: editorCommon.IModel, position: corePosition.Position): TPromise<Location[]> {
-		return getImplementationAtPosition(model, position);
+		return getImplementationsAtPosition(model, position);
 	}
 }
 
+@editorAction
+export class GoToTypeDefintionAction extends DefinitionAction {
+
+	public static ID = 'editor.action.goToTypeDefinition';
+
+	constructor() {
+		super(new DefinitionActionConfig(), {
+			id: GoToTypeDefintionAction.ID,
+			label: nls.localize('actions.goToTypeDefinition.label', ""Go to Type Definition""),
+			alias: 'Go to Type Definition',
+			precondition: ContextKeyExpr.and(
+				ModeContextKeys.hasTypeDefinitionProvider,
+				ModeContextKeys.isInEmbeddedEditor.toNegated()),
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: 0
+			},
+			menuOpts: {
+				group: 'navigation',
+				order: 1.3
+			}
+		});
+	}
+
+	protected getDeclarationsAtPosition(model: editorCommon.IModel, position: corePosition.Position): TPromise<Location[]> {
+		return getTypeDefinitionsAtPosition(model, position);
+	}
+}
+
+@editorAction
+export class PeekTypeDefinitionAction extends DefinitionAction {
+
+	public static ID = 'editor.action.peekTypeDefinition';
+
+	constructor() {
+		super(new DefinitionActionConfig(false, true, false), {
+			id: PeekTypeDefinitionAction.ID,
+			label: nls.localize('actions.peekTypeDefinition.label', ""Peek Type Definition""),
+			alias: 'Peek Type Definition',
+			precondition: ContextKeyExpr.and(
+				ModeContextKeys.hasTypeDefinitionProvider,
+				ModeContextKeys.isInEmbeddedEditor.toNegated()),
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: 0
+			},
+			menuOpts: {
+				group: 'navigation',
+				order: 1.3
+			}","In general we need to revisit the context menu because now it becomes more and more loaded. We will now have

* Find References
* Go to Definition
* Peek Definition
* Go to Implementation
* Peek Implementation
* Go to Type Definition
* Peek Type Definition

which I think is a little messy already",2017-02-02 08:03:49
120,"@@ -287,12 +287,16 @@ export class ConfigurationManager implements debug.IConfigurationManager {
 				return null;
 			}
 
-			return this.massageInitialConfigurations(adapter).then(() =>
-				JSON.stringify({
-					version: '0.2.0',
-					configurations: adapter.initialConfigurations ? adapter.initialConfigurations : []
-				}, null, '\t')
-			);
+			return this.massageInitialConfigurations(adapter).then(() => {
+				let editorConfig = this.configurationService.getConfiguration<any>();
+				return JSON.stringify(
+					{
+						version: '0.2.0',
+						configurations: adapter.initialConfigurations ? adapter.initialConfigurations : []
+					},
+					null,
+					editorConfig.insertSpaces ? strings.repeat(' ', editorConfig.tabSize) : '\t');","editorConfig.insertSpaces => editorConfig.editor.insertSpaces

Note: you can also do this.configurationService.getConfiguration<any>('editor') instead.
",2016-04-21 07:16:41
154,"@@ -288,6 +299,27 @@ export class Scanner {
 		if (tokenType !== null) {
 			return this.finishToken(offset, tokenType);
 		}
+
+		// css variable name --identifier followed by ':' or ')'
+		if (this.stream.advanceIfChars([_MIN, _MIN])) {
+			let content: string[] = ['-', '-'] ;
+			if (this.ident(content)) {
+				let nextChar= this.stream.peekNextChar([_WSP, _TAB, _NWL, _CAR]);
+				if (nextChar === _COL || nextChar === _RPA) {
+					return this.finishToken(offset, TokenType.CssVariableName, content.join(''));
+				}
+			}
+			this.stream.goBackTo(offset);
+		}
+
+		// var
+		if (this.stream.advanceIfChars([_v, _a, _r])) {","As mentioned, let's avoid a separate token for var.
",2016-05-20 10:03:44
383,"@@ -29,6 +29,7 @@ export interface IWindowCreationOptions {
 	state: IWindowState;
 	extensionDevelopmentPath?: string;
 	allowFullscreen?: boolean;
+	macOSUseInlineToolbar: boolean;","I am starting to think that we should make this more open ended because I also would like to have the option to have a custom dark title bar as a choice. This should be an enumeration with open ended values (e.g. default, inline, dark) so that we can continue with experiments.
",2016-10-24 14:15:45
734,"@@ -29,9 +29,12 @@ class ClipboardEventWrapper implements IClipboardEvent {
 		return false;
 	}
 
-	public setTextData(text: string): void {
+	public setTextData(text: string, richText?: string): void {","I would use null for richText as a signal that it should not be set (instead of undefined + optional).

IMHO null is a lot more clear and prevents bugs where we forget by accident to add a second argument....",2017-02-16 15:59:08
531,"@@ -290,11 +290,14 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 				diag('load() - created text editor model', this.resource, new Date());
 
 				return this.backupFileService.loadBackupResource(this.resource).then(backupResource => {
-					let resolveBackupPromise: TPromise<IRawText>;
+					let resolveBackupPromise: TPromise<string | IRawText>;
 
 					// Try get restore content, if there is an issue fallback silently to the original file's content
 					if (backupResource) {
-						resolveBackupPromise = this.textFileService.resolveTextContent(backupResource, BACKUP_FILE_RESOLVE_OPTIONS).then(backup => backup.value, error => content.value);
+						resolveBackupPromise = this.textFileService.resolveTextContent(backupResource, BACKUP_FILE_RESOLVE_OPTIONS).then(backup => {","@Tyriar this is bad, what if we resolve the text content in another place? everyone has to remove the first line? why not move the entire thing into the backup service and thus have the logic in one place where it should be. We can even get rid of `loadBackupResource` and just have 1 method to call to resolve the backup content (which can be null if there is no backup).",2016-11-29 05:18:00
939,"@@ -290,6 +290,25 @@ export function registerCommands(): void {
 	});
 
 	KeybindingsRegistry.registerCommandAndKeybindingRule({
+		id: 'list.selectAll',
+		weight: KeybindingsRegistry.WEIGHT.workbenchContrib(),
+		when: ListFocusContext,
+		primary: KeyMod.CtrlCmd | KeyCode.KEY_A,
+		handler: (accessor) => {
+			const listService = accessor.get(IListService);
+			const focused = listService.getFocused();
+
+			if (focused instanceof List) {
+				const list = focused;
+				if (list.length !== 0) {
+					list.setSelection(Array.apply(null, { length: list.length }).map(Function.call, Number));","We have a helper for creating arrays over a range of numbers, see `range` in src/vs/base/common/arrays.ts. ",2017-05-18 03:21:06
938,"@@ -290,6 +290,25 @@ export function registerCommands(): void {
 	});
 
 	KeybindingsRegistry.registerCommandAndKeybindingRule({
+		id: 'list.selectAll',
+		weight: KeybindingsRegistry.WEIGHT.workbenchContrib(),
+		when: ListFocusContext,
+		primary: KeyMod.CtrlCmd | KeyCode.KEY_A,
+		handler: (accessor) => {
+			const listService = accessor.get(IListService);
+			const focused = listService.getFocused();
+
+			if (focused instanceof List) {
+				const list = focused;
+				if (list.length !== 0) {
+					list.setSelection(Array.apply(null, { length: list.length }).map(Function.call, Number));
+					list.focusFirst();",Can we keep the same element focused?,2017-05-18 03:10:51
214,"@@ -2908,6 +2942,10 @@ export enum MouseTargetType {
 	 */
 	GUTTER_LINE_NUMBERS,
 	/**
+	 * Mouse is on top of the git blame annotation
+	 */
+	GUTTER_GIT_BLAME,","Layer breaker.
",2016-07-11 09:02:20
213,"@@ -294,7 +297,12 @@ export class MouseTargetFactory {
 
 		if (REGEX.IS_CHILD_OF_VIEW_OVERLAYS.test(path)) {
 			var offset = Math.abs(e.posx - editorContent.left);
+			if (offset <= layoutInfo.gitBlameWidth) {
+				// On the git blame annotation
+				return this.createMouseTargetFromGitBlame(t, mouseVerticalOffset, mouseColumn);","Layer breaker.
",2016-07-11 09:01:42
218,"@@ -294,8 +298,13 @@ export class MouseHandler extends ViewEventHandler implements IDisposable {
 		} else if (targetIsViewZone) {
 			let viewZoneData = <editorBrowser.IViewZoneData>t.detail;
 			if (this.viewHelper.shouldSuppressMouseDownOnViewZone(viewZoneData.viewZoneId)) {
+				focus();
+				this._mouseDownOperation.start(t.type, e);
 				e.preventDefault();
 			}
+		} else if (targetIsWidget && (<string>t.detail).indexOf('codeLensWidget') === 0) {","This is a layer breaker -- the editor core should not know about specific widgets. We perhaps need something similar to `shouldSuppressMouseDownOnViewZone` but with content widgets
",2016-07-14 16:16:20
758,"@@ -296,6 +305,47 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		}
 	}
 
+	// exception widget",Why is this public?,2017-02-20 14:19:33
761,"@@ -296,6 +305,47 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		}
 	}
 
+	// exception widget
+	public toggleExceptionWidget(): void {
+		// Toggles exception widget based on the state of the current editor model and debug stack frame
+		const model = this.editor.getModel();
+		const focusedSf = this.debugService.getViewModel().focusedStackFrame;
+		const callStack = focusedSf ? focusedSf.thread.getCallStack() : null;
+		if (!model || !focusedSf || !callStack) {
+			this.closeExceptionWidget();
+			return;
+		}
+
+		// First call stack frame is the frame where exception has been thrown",Callstack can be an empty array in some corner cases,2017-02-20 14:29:12
759,"@@ -296,6 +305,47 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		}
 	}
 
+	// exception widget
+	public toggleExceptionWidget(): void {
+		// Toggles exception widget based on the state of the current editor model and debug stack frame
+		const model = this.editor.getModel();
+		const focusedSf = this.debugService.getViewModel().focusedStackFrame;
+		const callStack = focusedSf ? focusedSf.thread.getCallStack() : null;
+		if (!model || !focusedSf || !callStack) {
+			this.closeExceptionWidget();
+			return;
+		}
+
+		// First call stack frame is the frame where exception has been thrown
+		const exceptionSf = callStack[0];
+		const sameUri = exceptionSf.source.uri.toString() === model.uri.toString();
+		if (this.exceptionWidget && !sameUri) {
+			this.hideExceptionWidget();
+		} else if (focusedSf && focusedSf.thread.stoppedDetails.reason === 'exception' && sameUri) {
+			this.showExceptionWidget(exceptionSf.lineNumber);
+		}
+	}
+
+	private showExceptionWidget(lineNumber: number): void {
+		if (this.exceptionWidget) {
+			this.exceptionWidget.dispose();
+		}
+
+		this.exceptionWidget = this.instantiationService.createInstance(ExceptionWidget, this.editor, lineNumber);
+		this.exceptionWidget.show({ lineNumber, column: 1 }, 3);
+	}
+
+	private hideExceptionWidget() {",Get rid fo this method,2017-02-20 14:21:06
760,"@@ -296,6 +305,47 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		}
 	}
 
+	// exception widget
+	public toggleExceptionWidget(): void {
+		// Toggles exception widget based on the state of the current editor model and debug stack frame
+		const model = this.editor.getModel();
+		const focusedSf = this.debugService.getViewModel().focusedStackFrame;
+		const callStack = focusedSf ? focusedSf.thread.getCallStack() : null;
+		if (!model || !focusedSf || !callStack) {
+			this.closeExceptionWidget();
+			return;
+		}
+
+		// First call stack frame is the frame where exception has been thrown
+		const exceptionSf = callStack[0];
+		const sameUri = exceptionSf.source.uri.toString() === model.uri.toString();
+		if (this.exceptionWidget && !sameUri) {
+			this.hideExceptionWidget();
+		} else if (focusedSf && focusedSf.thread.stoppedDetails.reason === 'exception' && sameUri) {
+			this.showExceptionWidget(exceptionSf.lineNumber);
+		}
+	}
+
+	private showExceptionWidget(lineNumber: number): void {
+		if (this.exceptionWidget) {
+			this.exceptionWidget.dispose();
+		}
+
+		this.exceptionWidget = this.instantiationService.createInstance(ExceptionWidget, this.editor, lineNumber);
+		this.exceptionWidget.show({ lineNumber, column: 1 }, 3);
+	}
+
+	private hideExceptionWidget() {
+		this.exceptionWidget.hide();
+	}
+
+	private closeExceptionWidget(): void {",No need to make difference between hide and close. Always destroy and recreate the widget as needed,2017-02-20 14:22:59
250,"@@ -2972,6 +2972,37 @@ declare namespace vscode {
 	}
 
 	/**
+	 * An individual terminal instance within the integrated terminal.
+	 */
+	export interface Terminal {
+","add `name` as readonly so people can access that data they have passed in the create call
",2016-08-18 19:27:00
249,"@@ -2972,6 +2972,37 @@ declare namespace vscode {
 	}
 
 	/**
+	 * An individual terminal instance within the integrated terminal.
+	 */
+	export interface Terminal {
+
+		/**
+		 * Send text to the terminal.
+		 *
+		 * @param addNewLine Whether to add a new line to the text being sent, this is normally
+		 * required to run a command in the terminal. This defaults to `true`.
+		 */
+		sendText(text: string, addNewLine?: boolean);","Is this always the same sequence for new line or should `addNewLine` be something like `\n|\r\n|\r`?
",2016-08-18 19:25:34
874,"@@ -298,6 +298,11 @@ configurationRegistry.registerConfiguration({
 			'default': true,
 			'description': nls.localize('zenMode.hideStatusBar', ""Controls if turning on Zen Mode also hides the status bar at the bottom of the workbench."")
 		},
+		'zenMode.hideActivityBar': {
+			'type': 'boolean',
+			'default': true,
+			'description': nls.localize('zenMode.hideActivityBar', ""Controls if turning on Zen Mode also hides the activitybar bar at the left of the workbench."")",Please use 'activity bar' not 'activitybar' in the description,2017-04-11 13:43:56
495,"@@ -298,7 +298,7 @@ export class Workbench implements IPartService {
 				} else {
 					if (this.workbenchParams.options.untitledToRestore && this.workbenchParams.options.untitledToRestore.length) {
 						const untitledToRestoreInputs = this.workbenchParams.options.untitledToRestore.map(resourceInput => {
-							return this.untitledEditorService.createOrGet(null, null, resourceInput.resource);
+							return this.untitledEditorService.createOrGet(resourceInput.resource, null, true);","@Tyriar Same here, parameter is not being used later?
",2016-11-16 14:33:28
191,"@@ -3,16 +3,49 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+.monaco-editor.vs .scroll-decoration {
+	box-shadow: #fff 0 6px 6px -6px inset; /* TODO: use a CSS custom property of the theme's `.monaco-editor-background` color here to blend better */
+}
+
+.monaco-editor.vs-dark .scroll-decoration {
+	box-shadow: #1E1E1E 0 6px 6px -6px inset; /* TODO: use a CSS custom property of the theme's `.monaco-editor-background` color here to blend better */
+}","@bpasero are these the scroll styles I changed that you mentioned in the PR? I changed these so that they would match the editor background color so that it creates a fake gradual mask over text when you've scrolled.  That way the active tab, which has the same background color of the editor, will not appear to abruptly chop off text in the editor while also not creating a shadow (as it used to) which would make the tab appear on a different plane than the text.

Unfortunately, I had to hard-code these values, so in other themes than the just the default Dark and Light, it looks weird.  We could just hide these `display: none`, until we can get CSS custom property to give us the theme's editor base color.  I'll leave that up to you.
",2016-06-30 05:22:01
971,"@@ -3,43 +3,10 @@
 <html>
 	<head>
 		<meta charset=""utf-8"" />
+		<meta http-equiv=""Content-Security-Policy"" content=""default-src 'none'; img-src 'self' http: https: data:; media-src 'self' http: https: data:; child-src 'self'; object-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self' https:; font-src 'self' https:;"">
 	</head>
 	<body class=""monaco-shell vs-dark"" aria-label="""">
-		<script>
-			(function() {
-				function getConfig() {
-					let queryParams = window.location.search.substring(1).split('&');
-					for (let i = 0; i < queryParams.length; i++) {
-						var kv = queryParams[i].split('=');
-						if (kv[0] === 'config' && kv[1]) {
-							return JSON.parse(decodeURIComponent(kv[1]));
-						}
-					}
-					return {};
-				}
-				try {
-					let config = getConfig();
-					let document = window.document;
-
-					// sets the base theme class ('vs', 'vs-dark', 'hc-black')
-					let baseTheme = config.baseTheme || 'vs';
-					document.body.className = 'monaco-shell ' + baseTheme;
-
-					// adds a stylesheet with the backgrdound color
-					let backgroundColor = config.backgroundColor;
-					if (!backgroundColor) {
-						backgroundColor = baseTheme === 'hc-black' ? '#000000' : (baseTheme === 'vs' ? '#FFFFFF' : '#1E1E1E');
-					}
-					let foregroundColor = baseTheme === 'hc-black' ? '#FFFFFF' : (baseTheme === 'vs' ? '#6C6C6C' : '#CCCCCC');
-					let style = document.createElement('style');
-					style.innerHTML = '.monaco-shell { background-color:' + backgroundColor + '; color:' + foregroundColor + '; }';
-					document.head.appendChild(style);
-
-				} catch (error) {
-					console.error(error);
-				}
-			})();
-		</script>
+		<script src=""preload.js""></script>","@mjbvz is there a specific need to introduce preload.js here? I would rather want to keep this JS close to the file because it is about updating the background color. Slower loading can result in ugly flicker otherwise.

Is it because of the `unsafe-inline` CSP?",2017-06-14 05:44:41
284,"@@ -3,6 +3,7 @@ npm-debug.log
 Thumbs.db
 node_modules/
 .build/
+.vscode/.browse.VC*","Please remove this one, you can use `.git/info/exclude` for it
",2016-09-21 06:17:16
990,"@@ -3,9 +3,6 @@
 	""version"": ""0.1.0"",
 	""publisher"": ""vscode"",
 	""engines"": { ""vscode"": ""*"" },
-	""scripts"": {",Please keep the script and point it to the repo that has the improved grammar.,2017-06-19 13:55:51
456,"@@ -30,11 +30,12 @@ import { IResourceInput, IEditorInput } from 'vs/platform/editor/common/editor';
 import { IModeService } from 'vs/editor/common/services/modeService';
 import { getIconClasses } from 'vs/workbench/browser/labels';
 import { IModelService } from 'vs/editor/common/services/modelService';
-import { EditorInput, getUntitledOrFileResource, IWorkbenchEditorConfiguration } from 'vs/workbench/common/editor';
+// import { EditorInput, getUntitledOrFileResource, IWorkbenchEditorConfiguration } from 'vs/workbench/common/editor';","@wprater why commented out?
",2016-11-05 07:39:37
200,"@@ -30,6 +30,7 @@ export class TerminalPanel extends Panel {
 	private actions: IAction[];
 	private parentDomElement: HTMLElement;
 	private terminalContainer: HTMLElement;
+	private currentThemeId: string;","Make this `currentBaseThemeId`
",2016-07-06 22:59:29
292,"@@ -30,6 +30,7 @@ namespace schema {
 			case 'editor/title': return MenuId.EditorTitle;
 			case 'editor/context': return MenuId.EditorContext;
 			case 'explorer/context': return MenuId.ExplorerContext;
+			case 'editor/tab': return MenuId.EditorTab;","maybe better editor/tab/context or editor/context/tab?
",2016-10-04 10:49:29
103,"@@ -300,6 +303,25 @@ export class WorkingFilesModel implements IWorkingFilesModel {
 		return null;
 	}
 
+	public restoreRecentlyRemovedEntry(): WorkingFileEntry {","I think I would change the data structure of recently closed entries so that it alway is an array (of up to N entries) so that you can perform the reopening multiple times as needed. 

You have to be aware of the fact that you can have untitled files in the list, I suggest to ignore any entry in the working files list of closed entries that is not file thereby.

Another interesting aspect is that we remove a working file automatically if a file gets deleted. So a remove of an entry might not necessarily be via user interaction. This might change in the future though, because it also has its own set of issues. But it would be weird to reopen a deleted file.
",2016-04-09 14:44:12
12,"@@ -3012,6 +3012,11 @@ declare namespace vscode {
 		export const onDidChangeTextDocument: Event<TextDocumentChangeEvent>;
 
 		/**
+		 * An event that is emitted when a [text document](#TextDocument) is saving to disk (save may fail).
+		 */
+		export const onSavingTextDocument: Event<TextDocument>;","wrong name. must be `onWillSaveTextDocument`
",2015-11-24 09:10:38
305,"@@ -306,7 +305,12 @@ function setupIPC(accessor: ServicesAccessor): TPromise<Server> {
 						promise = service.getMainProcessId()
 							.then(processId => {
 								logService.log('Sending some foreground love to the running instance:', processId);
-								allowSetForegroundWindow(processId);
+								try {
+									const { allowSetForegroundWindow } = <any>require.__$__nodeRequire('windows-foreground-love');","@the-ress this is rather ugly, can we do what windows-mutex does? This native module is also only build for Windows and it still has a nice import 👍 
",2016-10-05 17:36:06
870,"@@ -308,4 +542,556 @@ export function processNlsFiles(opts:{fileHeader:string;}): ThroughStream {
 		}
 		this.emit('data', file);
 	});
+}
+
+export function prepareXlfFiles(projectName?: string, extensionName?: string): ThroughStream {
+	return through(
+		function (file: File) {
+			if (!file.isBuffer()) {
+				log('Error', `Failed to read component file: ${file.relative}`);
+			}
+
+			const extension = path.extname(file.path);
+			if (extension === '.json') {
+				const json = JSON.parse((<Buffer>file.contents).toString('utf8'));
+
+				if (BundledFormat.is(json)) {
+					importBundleJson(file, json, this);
+				} else if (PackageJsonFormat.is(json) || ModuleJsonFormat.is(json)) {
+					importModuleOrPackageJson(file, json, projectName, this, extensionName);
+				} else {
+					log('Error', 'JSON format cannot be deduced.');
+				}
+			} else if (extension === '.isl') {
+				importIsl(file, this);
+			}
+		}
+	);
+}
+
+export function getResource(sourceFile: string): Resource {
+	const editorProject: string = 'vscode-editor',
+		workbenchProject: string = 'vscode-workbench';
+	let resource: string;
+
+	if (sourceFile.startsWith('vs/platform')) {
+		return { name: 'vs/platform', project: editorProject };
+	} else if (sourceFile.startsWith('vs/editor/contrib')) {
+		return { name: 'vs/editor/contrib', project: editorProject };
+	} else if (sourceFile.startsWith('vs/editor')) {
+		return { name: 'vs/editor', project: editorProject };
+	} else if (sourceFile.startsWith('vs/base')) {
+		return { name: 'vs/base', project: editorProject };
+ 	} else if (sourceFile.startsWith('vs/code')) {
+		return { name: 'vs/code', project: workbenchProject };
+	} else if (sourceFile.startsWith('vs/workbench/parts')) {
+		resource = sourceFile.split('/', 4).join('/');
+		return { name: resource, project: workbenchProject };
+	} else if (sourceFile.startsWith('vs/workbench/services')) {
+		resource = sourceFile.split('/', 4).join('/');
+		return { name: resource, project: workbenchProject };
+	} else if (sourceFile.startsWith('vs/workbench')) {
+		return { name: 'vs/workbench', project: workbenchProject };
+	}
+
+	throw new Error (`Could not identify the XLF bundle for ${sourceFile}`);
+}
+
+
+function importBundleJson(file: File, json: BundledFormat, stream: ThroughStream): void {
+	let bundleXlfs: Map<XLF> = Object.create(null);
+
+	for (let source in json.keys) {
+		const projectResource = getResource(source);
+		const resource = projectResource.name;
+		const project = projectResource.project;
+
+		const keys = json.keys[source];
+		const messages = json.messages[source];
+		if (keys.length !== messages.length) {
+			log('Error:', `There is a mismatch between keys and messages in ${file.relative}`);
+		}
+
+		let xlf = bundleXlfs[resource] ? bundleXlfs[resource] : bundleXlfs[resource] = new XLF(project);
+		xlf.addFile('src/' + source, keys, messages);
+	}
+
+	for (let resource in bundleXlfs) {
+		const newFilePath = `${bundleXlfs[resource].project}/${resource.replace(/\//g, '_')}.xlf`;
+		const xlfFile = new File({ path: newFilePath, contents: new Buffer(bundleXlfs[resource].toString(), 'utf-8')});
+		stream.emit('data', xlfFile);
+	}
+}
+
+// Keeps existing XLF instances and a state of how many files were already processed for faster file emission
+var extensions: Map<{ xlf: XLF, processed: number }> = Object.create(null);
+function importModuleOrPackageJson(file: File, json: ModuleJsonFormat | PackageJsonFormat, projectName: string, stream: ThroughStream, extensionName?: string): void {
+	if (ModuleJsonFormat.is(json) && json['keys'].length !== json['messages'].length) {
+		log('Error:', `There is a mismatch between keys and messages in ${file.relative}`);
+	}
+
+	// Prepare the source path for <original/> attribute in XLF & extract messages from JSON
+	const formattedSourcePath = file.relative.replace(/\\/g, '/');
+	const messages = Object.keys(json).map((key) => json[key].toString());
+
+	// Stores the amount of localization files to be transformed to XLF before the emission
+	let localizationFilesCount,
+		originalFilePath;
+	// If preparing XLF for external extension, then use different glob pattern and source path
+	if (extensionName) {
+		localizationFilesCount = glob.sync('**/*.nls.json').length;
+		originalFilePath = `${formattedSourcePath.substr(0, formattedSourcePath.length - '.nls.json'.length)}`;
+	} else {
+		// Used for vscode/extensions folder
+		extensionName = formattedSourcePath.split('/')[0];
+		localizationFilesCount = glob.sync(`./extensions/${extensionName}/**/*.nls.json`).length;
+		originalFilePath = `extensions/${formattedSourcePath.substr(0, formattedSourcePath.length - '.nls.json'.length)}`;
+	}
+
+	let extension = extensions[extensionName] ?
+		extensions[extensionName] : extensions[extensionName] = { xlf: new XLF(projectName), processed: 0 };
+
+	if (ModuleJsonFormat.is(json)) {
+		extension.xlf.addFile(originalFilePath, json['keys'], json['messages']);
+	} else {
+		extension.xlf.addFile(originalFilePath, Object.keys(json), messages);
+	}
+
+	// Check if XLF is populated with file nodes to emit it
+	if (++extensions[extensionName].processed === localizationFilesCount) {
+		const newFilePath = path.join(projectName, extensionName + '.xlf');
+		const xlfFile = new File({ path: newFilePath, contents: new Buffer(extension.xlf.toString(), 'utf-8')});
+		stream.emit('data', xlfFile);
+	}
+}
+
+var islXlf: XLF,
+	islProcessed: number = 0;
+
+function importIsl(file: File, stream: ThroughStream) {
+	const islFiles = ['Default.isl', 'messages.en.isl'];
+	const projectName = 'vscode-workbench';
+
+	let xlf = islXlf ? islXlf : islXlf = new XLF(projectName),
+		keys: string[] = [],
+		messages: string[] = [];
+
+	let model = new TextModel(file.contents.toString());
+	let inMessageSection = false;
+	model.lines.forEach(line => {
+		if (line.length === 0) {
+			return;
+		}
+		let firstChar = line.charAt(0);
+		switch (firstChar) {
+			case ';':
+				// Comment line;
+				return;
+			case '[':
+				inMessageSection = '[Messages]' === line || '[CustomMessages]' === line;
+				return;
+		}
+		if (!inMessageSection) {
+			return;
+		}
+		let sections: string[] = line.split('=');
+		if (sections.length !== 2) {
+			log('Error:', `Badly formatted message found: ${line}`);
+		} else {
+			let key = sections[0];
+			let value = sections[1];
+			if (key.length > 0 && value.length > 0) {
+				keys.push(key);
+				messages.push(value);
+			}
+		}
+	});
+
+	const originalPath = file.path.substring(file.cwd.length+1, file.path.split('.')[0].length).replace(/\\/g, '/');
+	xlf.addFile(originalPath, keys, messages);
+
+	// Emit only upon all ISL files combined into single XLF instance
+	if (++islProcessed === islFiles.length) {
+		const newFilePath = path.join(projectName, 'setup.xlf');
+		const xlfFile = new File({ path: newFilePath, contents: new Buffer(xlf.toString(), 'utf-8')});
+		stream.emit('data', xlfFile);
+	}
+}
+
+export function pushXlfFiles(apiHostname: string, username: string, password: string): ThroughStream {
+	let tryGetPromises = [];
+	let updateCreatePromises = [];
+
+	return through(function(file: File) {
+		const project = path.dirname(file.relative);
+		const fileName = path.basename(file.path);
+		const slug = fileName.substr(0, fileName.length - '.xlf'.length);
+		const credentials = `${username}:${password}`;
+
+		// Check if resource already exists, if not, then create it.
+		let promise = tryGetResource(project, slug, apiHostname, credentials);
+		tryGetPromises.push(promise);
+		promise.then(exists => {
+			if (exists) {
+				promise = updateResource(project, slug, file, apiHostname, credentials);
+			} else {
+				promise = createResource(project, slug, file, apiHostname, credentials);
+			}
+			updateCreatePromises.push(promise);
+		}).catch((reason) => {",I am not a gulp expert either but I think this simply logs something to the console but the gulp stream says in tact and the build will look like it passed. We have to ensure that in the cause of exceptions talking to Transifex this can be observed as a failing build from the outside.,2017-04-04 13:06:52
871,"@@ -308,4 +542,556 @@ export function processNlsFiles(opts:{fileHeader:string;}): ThroughStream {
 		}
 		this.emit('data', file);
 	});
+}
+
+export function prepareXlfFiles(projectName?: string, extensionName?: string): ThroughStream {
+	return through(
+		function (file: File) {
+			if (!file.isBuffer()) {
+				log('Error', `Failed to read component file: ${file.relative}`);
+			}
+
+			const extension = path.extname(file.path);
+			if (extension === '.json') {
+				const json = JSON.parse((<Buffer>file.contents).toString('utf8'));
+
+				if (BundledFormat.is(json)) {
+					importBundleJson(file, json, this);
+				} else if (PackageJsonFormat.is(json) || ModuleJsonFormat.is(json)) {
+					importModuleOrPackageJson(file, json, projectName, this, extensionName);
+				} else {
+					log('Error', 'JSON format cannot be deduced.');
+				}
+			} else if (extension === '.isl') {
+				importIsl(file, this);
+			}
+		}
+	);
+}
+
+export function getResource(sourceFile: string): Resource {
+	const editorProject: string = 'vscode-editor',
+		workbenchProject: string = 'vscode-workbench';
+	let resource: string;
+
+	if (sourceFile.startsWith('vs/platform')) {
+		return { name: 'vs/platform', project: editorProject };
+	} else if (sourceFile.startsWith('vs/editor/contrib')) {
+		return { name: 'vs/editor/contrib', project: editorProject };
+	} else if (sourceFile.startsWith('vs/editor')) {
+		return { name: 'vs/editor', project: editorProject };
+	} else if (sourceFile.startsWith('vs/base')) {
+		return { name: 'vs/base', project: editorProject };
+ 	} else if (sourceFile.startsWith('vs/code')) {
+		return { name: 'vs/code', project: workbenchProject };
+	} else if (sourceFile.startsWith('vs/workbench/parts')) {
+		resource = sourceFile.split('/', 4).join('/');
+		return { name: resource, project: workbenchProject };
+	} else if (sourceFile.startsWith('vs/workbench/services')) {
+		resource = sourceFile.split('/', 4).join('/');
+		return { name: resource, project: workbenchProject };
+	} else if (sourceFile.startsWith('vs/workbench')) {
+		return { name: 'vs/workbench', project: workbenchProject };
+	}
+
+	throw new Error (`Could not identify the XLF bundle for ${sourceFile}`);
+}
+
+
+function importBundleJson(file: File, json: BundledFormat, stream: ThroughStream): void {
+	let bundleXlfs: Map<XLF> = Object.create(null);
+
+	for (let source in json.keys) {
+		const projectResource = getResource(source);
+		const resource = projectResource.name;
+		const project = projectResource.project;
+
+		const keys = json.keys[source];
+		const messages = json.messages[source];
+		if (keys.length !== messages.length) {
+			log('Error:', `There is a mismatch between keys and messages in ${file.relative}`);
+		}
+
+		let xlf = bundleXlfs[resource] ? bundleXlfs[resource] : bundleXlfs[resource] = new XLF(project);
+		xlf.addFile('src/' + source, keys, messages);
+	}
+
+	for (let resource in bundleXlfs) {
+		const newFilePath = `${bundleXlfs[resource].project}/${resource.replace(/\//g, '_')}.xlf`;
+		const xlfFile = new File({ path: newFilePath, contents: new Buffer(bundleXlfs[resource].toString(), 'utf-8')});
+		stream.emit('data', xlfFile);
+	}
+}
+
+// Keeps existing XLF instances and a state of how many files were already processed for faster file emission
+var extensions: Map<{ xlf: XLF, processed: number }> = Object.create(null);
+function importModuleOrPackageJson(file: File, json: ModuleJsonFormat | PackageJsonFormat, projectName: string, stream: ThroughStream, extensionName?: string): void {
+	if (ModuleJsonFormat.is(json) && json['keys'].length !== json['messages'].length) {
+		log('Error:', `There is a mismatch between keys and messages in ${file.relative}`);
+	}
+
+	// Prepare the source path for <original/> attribute in XLF & extract messages from JSON
+	const formattedSourcePath = file.relative.replace(/\\/g, '/');
+	const messages = Object.keys(json).map((key) => json[key].toString());
+
+	// Stores the amount of localization files to be transformed to XLF before the emission
+	let localizationFilesCount,
+		originalFilePath;
+	// If preparing XLF for external extension, then use different glob pattern and source path
+	if (extensionName) {
+		localizationFilesCount = glob.sync('**/*.nls.json').length;
+		originalFilePath = `${formattedSourcePath.substr(0, formattedSourcePath.length - '.nls.json'.length)}`;
+	} else {
+		// Used for vscode/extensions folder
+		extensionName = formattedSourcePath.split('/')[0];
+		localizationFilesCount = glob.sync(`./extensions/${extensionName}/**/*.nls.json`).length;
+		originalFilePath = `extensions/${formattedSourcePath.substr(0, formattedSourcePath.length - '.nls.json'.length)}`;
+	}
+
+	let extension = extensions[extensionName] ?
+		extensions[extensionName] : extensions[extensionName] = { xlf: new XLF(projectName), processed: 0 };
+
+	if (ModuleJsonFormat.is(json)) {
+		extension.xlf.addFile(originalFilePath, json['keys'], json['messages']);
+	} else {
+		extension.xlf.addFile(originalFilePath, Object.keys(json), messages);
+	}
+
+	// Check if XLF is populated with file nodes to emit it
+	if (++extensions[extensionName].processed === localizationFilesCount) {
+		const newFilePath = path.join(projectName, extensionName + '.xlf');
+		const xlfFile = new File({ path: newFilePath, contents: new Buffer(extension.xlf.toString(), 'utf-8')});
+		stream.emit('data', xlfFile);
+	}
+}
+
+var islXlf: XLF,
+	islProcessed: number = 0;
+
+function importIsl(file: File, stream: ThroughStream) {
+	const islFiles = ['Default.isl', 'messages.en.isl'];
+	const projectName = 'vscode-workbench';
+
+	let xlf = islXlf ? islXlf : islXlf = new XLF(projectName),
+		keys: string[] = [],
+		messages: string[] = [];
+
+	let model = new TextModel(file.contents.toString());
+	let inMessageSection = false;
+	model.lines.forEach(line => {
+		if (line.length === 0) {
+			return;
+		}
+		let firstChar = line.charAt(0);
+		switch (firstChar) {
+			case ';':
+				// Comment line;
+				return;
+			case '[':
+				inMessageSection = '[Messages]' === line || '[CustomMessages]' === line;
+				return;
+		}
+		if (!inMessageSection) {
+			return;
+		}
+		let sections: string[] = line.split('=');
+		if (sections.length !== 2) {
+			log('Error:', `Badly formatted message found: ${line}`);
+		} else {
+			let key = sections[0];
+			let value = sections[1];
+			if (key.length > 0 && value.length > 0) {
+				keys.push(key);
+				messages.push(value);
+			}
+		}
+	});
+
+	const originalPath = file.path.substring(file.cwd.length+1, file.path.split('.')[0].length).replace(/\\/g, '/');
+	xlf.addFile(originalPath, keys, messages);
+
+	// Emit only upon all ISL files combined into single XLF instance
+	if (++islProcessed === islFiles.length) {
+		const newFilePath = path.join(projectName, 'setup.xlf');
+		const xlfFile = new File({ path: newFilePath, contents: new Buffer(xlf.toString(), 'utf-8')});
+		stream.emit('data', xlfFile);
+	}
+}
+
+export function pushXlfFiles(apiHostname: string, username: string, password: string): ThroughStream {
+	let tryGetPromises = [];
+	let updateCreatePromises = [];
+
+	return through(function(file: File) {
+		const project = path.dirname(file.relative);
+		const fileName = path.basename(file.path);
+		const slug = fileName.substr(0, fileName.length - '.xlf'.length);
+		const credentials = `${username}:${password}`;
+
+		// Check if resource already exists, if not, then create it.
+		let promise = tryGetResource(project, slug, apiHostname, credentials);
+		tryGetPromises.push(promise);
+		promise.then(exists => {
+			if (exists) {
+				promise = updateResource(project, slug, file, apiHostname, credentials);
+			} else {
+				promise = createResource(project, slug, file, apiHostname, credentials);
+			}
+			updateCreatePromises.push(promise);
+		}).catch((reason) => {
+			log('Error:', reason);
+		});
+
+	}, function() {
+		// End the pipe only after all the communication with Transifex API happened
+		Promise.all(tryGetPromises).then(() => {
+			Promise.all(updateCreatePromises).then(() => {
+				this.emit('end');
+			}).catch((reason) => log('Error:', reason));
+		}).catch((reason) => log('Error:', reason));
+	});
+}
+
+function tryGetResource(project: string, slug: string, apiHostname: string, credentials: string): Promise<boolean> {
+	return new Promise((resolve, reject) => {
+		const options = {
+			hostname: apiHostname,
+			path: `/api/2/project/${project}/resource/${slug}/?details`,
+			auth: credentials,
+			method: 'GET'
+		};
+
+		const request = http.request(options, (response) => {
+			if (response.statusCode === 404) {
+				resolve(false);
+			} else if (response.statusCode === 200) {
+				resolve(true);
+			} else {
+				reject(`Failed to query resource ${project}/${slug}. Response: ${response.statusCode} ${response.statusMessage}`);
+			}
+		}).on('error', (err) => {
+			reject(`Failed to get ${project}/${slug} on Transifex: ${err}`);
+		});
+
+		request.end();
+	});
+}
+
+function createResource(project: string, slug: string, xlfFile: File, apiHostname: string, credentials: any): Promise<any> {
+	return new Promise((resolve, reject) => {
+		const data = JSON.stringify({
+			'content': xlfFile.contents.toString(),
+			'name': slug,
+			'slug': slug,
+			'i18n_type': 'XLIFF'
+		});
+		const options = {
+			hostname: apiHostname,
+			path: `/api/2/project/${project}/resources`,
+			headers: {
+				'Content-Type': 'application/json',
+				'Content-Length': Buffer.byteLength(data)
+			},
+			auth: credentials,
+			method: 'POST'
+		};
+
+		let request = http.request(options, (res) => {
+			if (res.statusCode === 201) {
+				log(`Resource ${project}/${slug} successfully created on Transifex.`);
+			} else {
+				reject(`Something went wrong in the request creating ${slug} in ${project}. ${res.statusCode}`);
+			}
+		}).on('error', (err) => {
+			reject(`Failed to create ${project}/${slug} on Transifex: ${err}`);
+		});
+
+		request.write(data);
+		request.end();
+	});
+}
+
+/**
+ * The following link provides information about how Transifex handles updates of a resource file:
+ * https://dev.befoolish.co/tx-docs/public/projects/updating-content#what-happens-when-you-update-files
+ */
+function updateResource(project: string, slug: string, xlfFile: File, apiHostname: string, credentials: string) : Promise<any> {
+	return new Promise((resolve, reject) => {
+		const data = JSON.stringify({ content: xlfFile.contents.toString() });
+		const options = {
+			hostname: apiHostname,
+			path: `/api/2/project/${project}/resource/${slug}/content`,
+			headers: {
+				'Content-Type': 'application/json',
+				'Content-Length': Buffer.byteLength(data)
+			},
+			auth: credentials,
+			method: 'PUT'
+		};
+
+		let request = http.request(options, (res) => {
+			if (res.statusCode === 200) {
+				res.setEncoding('utf8');
+
+				let responseBuffer: string = '';
+				res.on('data', function (chunk) {
+					responseBuffer += chunk;
+				});
+				res.on('end', () => {
+					const response = JSON.parse(responseBuffer);
+					log(`Resource ${project}/${slug} successfully updated on Transifex. Strings added: ${response.strings_added}, updated: ${response.strings_added}, deleted: ${response.strings_added}`);
+					resolve();
+				});
+			} else {
+				reject(`Something went wrong in the request updating ${slug} in ${project}. ${res.statusCode}`);
+			}
+		}).on('error', (err) => {
+			reject(`Failed to update ${project}/${slug} on Transifex: ${err}`);
+		});
+
+		request.write(data);
+		request.end();
+	});
+}
+
+function getMetadataResources(pathToMetadata: string) : Resource[] {
+	const metadata = fs.readFileSync(pathToMetadata).toString('utf8');
+	const json = JSON.parse(metadata);
+	let slugs = [];
+
+	for (let source in json['keys']) {
+		let projectResource = getResource(source);
+		if (!slugs.find(slug => slug.name === projectResource.name && slug.project === projectResource.project)) {
+			slugs.push(projectResource);
+		}
+	}
+
+	return slugs;
+}
+
+function obtainProjectResources(projectName: string): Resource[] {
+	let resources: Resource[];
+
+	if (projectName === 'vscode-editor-workbench') {
+		resources = getMetadataResources('./out-vscode/nls.metadata.json');
+		resources.push({ name: 'setup', project: 'vscode-workbench' });
+	} else if (projectName === 'vscode-extensions') {
+		let extensionsToLocalize: string[] = glob.sync('./extensions/**/*.nls.json').map(extension => extension.split('/')[2]);
+		let resourcesToPull: string[] = [];
+		resources = [];
+
+		extensionsToLocalize.forEach(extension => {
+			if (resourcesToPull.indexOf(extension) === -1) { // remove duplicate elements returned by glob
+				resourcesToPull.push(extension);
+				resources.push({ name: extension, project: projectName });
+			}
+		});
+	}
+
+	return resources;
+}
+
+export function pullXlfFiles(projectName: string, apiHostname: string, username: string, password: string, resources?: Resource[]): NodeJS.ReadableStream {
+	if (!resources) {
+		resources = obtainProjectResources(projectName);
+	}
+	if (!resources) {
+		throw new Error('Transifex projects and resources must be defined to be able to pull translations from Transifex.');
+	}
+
+	const credentials = `${username}:${password}`;
+	let expectedTranslationsCount = vscodeLanguages.length * resources.length;
+	let translationsRetrieved = 0, called = false;
+
+	return readable(function(count, callback) {
+		// Mark end of stream when all resources were retrieved
+		if (translationsRetrieved === expectedTranslationsCount) {
+			return this.emit('end');
+		}
+
+		if (!called) {
+			called = true;
+			const stream = this;
+
+			vscodeLanguages.map(function(language) {
+				resources.map(function (resource) {
+					const slug = resource.name.replace(/\//g, '_');
+					const project = resource.project;
+					const iso639 = iso639_3_to_2[language];
+					const options = {
+						hostname: apiHostname,
+						path: `/api/2/project/${project}/resource/${slug}/translation/${iso639}?file&mode=onlyreviewed`,
+						auth: credentials,
+						method: 'GET'
+					};
+
+					let request = http.request(options, (res) => {
+							let xlfBuffer: string = '';
+							res.on('data', (data) => xlfBuffer += data);
+							res.on('end', () => {
+								if (res.statusCode === 200) {
+									stream.emit('data', new File({ contents: new Buffer(xlfBuffer) }));
+								} else {
+									log('Error:', `${slug} in ${project} returned no data. Response code: ${res.statusCode}.`);
+								}
+								translationsRetrieved++;
+							});
+					}).on('error', (err) => {
+						log('Error:', `Failed to query resource ${slug} with the following error: ${err}`);
+					});
+					request.end();
+				});
+			});
+		}
+
+		callback();
+	});
+}
+
+export function prepareJsonFiles(): ThroughStream {
+	return through(function(xlf: File) {
+		let stream = this;
+
+		XLF.parse(xlf.contents.toString()).then(
+			function(resolvedFiles) {
+				resolvedFiles.forEach(file => {
+					let messages = file.messages, translatedFile;
+
+					// ISL file path always starts with 'build/'
+					if (file.originalFilePath.startsWith('build/')) {
+						const defaultLanguages = { 'zh-cn': true, 'zh-tw': true, 'ko': true };
+						if (path.basename(file.originalFilePath) === 'Default' && !defaultLanguages[file.language]) {
+							return;
+						}
+
+						translatedFile = createIslFile('..', file.originalFilePath, messages, iso639_2_to_3[file.language]);
+					} else {
+						translatedFile = createI18nFile(iso639_2_to_3[file.language], file.originalFilePath, messages);
+					}
+
+					stream.emit('data', translatedFile);
+				});
+			},
+			function(rejectReason) {
+				log('Error:', rejectReason);
+			}
+		);
+	});
+}
+
+export function createI18nFile(base: string, originalFilePath: string, messages: Map<string>): File {
+	let content = [
+		'/*---------------------------------------------------------------------------------------------',
+		' *  Copyright (c) Microsoft Corporation. All rights reserved.',
+		' *  Licensed under the MIT License. See License.txt in the project root for license information.',
+		' *--------------------------------------------------------------------------------------------*/',
+		'// Do not edit this file. It is machine generated.'
+	].join('\n') + '\n' + JSON.stringify(messages, null, '\t').replace(/\r\n/g, '\n');
+
+	return new File({
+		path: path.join(base, originalFilePath + '.i18n.json'),
+		contents: new Buffer(content, 'utf8')
+	});
+}
+
+
+const languageNames: Map<string> = {
+	'chs': 'Simplified Chinese',
+	'cht': 'Traditional Chinese',
+	'kor': 'Korean'
+};
+
+const languageIds: Map<string> = {
+	'chs': '$0804',
+	'cht': '$0404',
+	'kor': '$0412'
+};
+
+const encodings: Map<string> = {
+	'chs': 'CP936',
+	'cht': 'CP950',
+	'jpn': 'CP932',
+	'kor': 'CP949',
+	'deu': 'CP1252',
+	'fra': 'CP1252',
+	'esn': 'CP1252',
+	'rus': 'CP1251',
+	'ita': 'CP1252'
+};
+
+export function createIslFile(base: string, originalFilePath: string, messages: Map<string>, language: string): File {",Did you consider that for the ISL we only need to push ch* and kor. For all other languages we have translations. Or is this not possible since languages are defined by a Transifex project. If so we might want to consider not pushing the Default.isl to Transifex,2017-04-04 13:10:34
221,"@@ -308,7 +340,12 @@ export class OpenAnythingHandler extends QuickOpenHandler {
 			entry.setHighlights(labelHighlights, descriptionHighlights);
 		});
 
-		return viewResults;
+		return {","Can we make this nicer? E.g. an interface which has one entry for results and another for all performance/telemetry relevant data? Maybe just a Tupel<2>?
",2016-07-14 17:36:35
477,"@@ -31,26 +33,37 @@ export class UntitledEditorModel extends StringEditorModel implements IEncodingS
 
 	private hasAssociatedFilePath: boolean;
 
+	private backupPromises: TPromise<void>[];","@Tyriar this is not being used? and related code around canceling it?
",2016-11-09 07:46:47
476,"@@ -31,26 +33,37 @@ export class UntitledEditorModel extends StringEditorModel implements IEncodingS
 
 	private hasAssociatedFilePath: boolean;
 
+	private backupPromises: TPromise<void>[];
+
 	constructor(
 		value: string,
 		modeId: string,
 		resource: URI,
 		hasAssociatedFilePath: boolean,
 		@IModeService modeService: IModeService,
 		@IModelService modelService: IModelService,
-		@IConfigurationService private configurationService: IConfigurationService
+		@IFileService private fileService: IFileService,","@Tyriar unused `fileService` and `backupFileService`
",2016-11-09 07:46:05
899,"@@ -31,7 +31,8 @@ class ExpandAbbreviationAction extends BasicEmmetEditorAction {
 					EditorContextKeys.hasOnlyEmptySelection,
 					EditorContextKeys.hasSingleSelection,
 					EditorContextKeys.tabDoesNotMoveFocus,
-					ContextKeyExpr.has('config.emmet.triggerExpansionOnTab')
+					ContextKeyExpr.has('config.emmet.triggerExpansionOnTab'),
+					ContextKeyExpr.not('config.emmet.autocomplete')",Shouldn't we have a schema definition for this? Like for other values: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/emmet/node/emmet.contribution.ts#L38,2017-04-25 07:18:32
975,"@@ -310,6 +310,10 @@ export class ViewletActionItem extends ActivityActionItem {
 	public render(container: HTMLElement): void {
 		super.render(container);
 
+		if (this._keybinding) {","@RohithKumbharkar I have a different suggestion where to put this code that makes it much easier. If you look below in that class there is a `public set keybinding(keybinding: string)`. I suggest to set the title in there because it gets computed there:

```typescript
this.$label.title(title);
this.$badge.title(title);
this.$container.title(title); // <-- add it here
```",2017-06-15 15:50:28
572,"@@ -310,7 +310,7 @@ class DecorationRenderHelper {
 				cssTextArr.push(strings.format(this._CSS_MAP.contentIconPath, opts.contentIconPath.toString(true).replace(/'/g, '%27')));","What is the reason for this change?
How can we be sure that we did not break any of the many use cases editor decorations have. 

This PR should not touch anything in the editor land. A change in the editor land is only acceptable if there is no alternative.",2016-12-05 14:48:24
898,"@@ -310,7 +310,7 @@ export class ExtHostSCM {
 		return sourceControl;
 	}
 
-	$provideOriginalResource(sourceControlHandle: number, uri: URI): TPromise<URI> {","I also wasn't entirely sure of `URI` vs `vscode.Uri`. I think the change itself is correct, but I was not confident to know if any existing code is relying on the old signature or if this change could cause any trouble",2017-04-24 23:50:46
515,"@@ -312,7 +312,10 @@ export class DebugService implements debug.IDebugService {
 		}));
 
 		this.toDisposeOnSessionEnd[session.getId()].push(session.onDidContinued(event => {
-			this.transitionToRunningState(session, event.body.allThreadsContinued ? undefined : event.body.threadId);
+			// TODO: This calls onStackFrame with null stack frame on every step causing all decorators to be re-drawn.
+			// onDidContinued also gets called for step-over causing flash in decorators due to removeDecorators and setDecorators call
+			// One idea is to use throttled onStackFrame, other is to only call onDidContinued only for continue
+			// this.transitionToRunningState(session, event.body.allThreadsContinued ? undefined : event.body.threadId);
 		}));","Let's first try with the idea I mentioned in my comment - to use editor.deltaDecorations and keep track of our decorations.
Calling onDidContinued only for continue will not work because some step calls can take arbitrary long, so in essence they can be just like a continue.

If the decoraionts idea does not work then we will update decorations with a delay, similar to how the debug views in the debug viewlet have a delay to prevetn tree collapsing and flashing",2016-11-28 10:22:48
977,"@@ -316,6 +321,29 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 			etag = this.lastResolvedDiskStat.etag; // otherwise respect etag to support caching
 		}
 
+		const storageKey = 'workbench.tasks.ranTaskBefore';",Can you put this in its own method?,2017-06-16 20:13:11
271,"@@ -317,10 +322,10 @@ export class TerminalService implements ITerminalService {
 		return terminalProcess;
 	}
 
-	public static createTerminalEnv(parentEnv: IStringDictionary<string>, shell: IShell, workspace: IWorkspace, locale?: string): IStringDictionary<string> {
+	public static createTerminalEnv(parentEnv: IStringDictionary<string>, shell: IShell, workspace: IWorkspace, shellPath?: string, locale?: string): IStringDictionary<string> {","Thinking about this again, I think we should probably support args for the shellPath too (what `IShell` does). Meaning shellPath and shellArgs should pass through the API layers.
",2016-09-08 19:07:24
104,"@@ -319,6 +341,9 @@ export class WorkingFilesModel implements IWorkingFilesModel {
 	}
 
 	public clear(): void {
+		this.recentlyClosedEntries.push(this.entries.map((entry) => {
+			return entry.resource;
+		}));","This should just shift all entries into the array of recently closed entries.
",2016-04-09 14:44:34
996,"@@ -319,7 +324,57 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 		// Resolve Content
 		return this.textFileService
 			.resolveTextContent(this.resource, { acceptTextOnly: true, etag, encoding: this.preferredEncoding })
-			.then(content => this.handleLoadSuccess(content), error => this.handleLoadError(error));
+			.then(content => this.handleLoadSuccess(content), error => this.handleLoadError(error))
+			.then((result) => {
+				this.showTaskNotification();
+				return result;
+			});
+	}
+
+	private showTaskNotification(): void {
+		const storageKey = 'workbench.tasks.ranTaskBefore';
+		if (this.storageService.get(storageKey)) {
+			const fileName = path.relative(this.contextService.getWorkspace().resource.toString(), this.resource.toString());
+			if (fileName.match(/^gruntfile\.js$/i) || fileName.match(/^gulpfile\.js$/i) || fileName.match(/^tsconfig\.json$/i)) {
+				const message = localize('taskFileOpened', `Run your ${fileName.split('.')[0]} in vscode. Get started here.`);
+				let action: any;
+				let messageTest: string;
+				const showDocumentation = isShowTaskDocumentation(this.storageService);",You can use `telemetryService.getExperiments().showTaskDocumentation` instead.,2017-06-19 22:00:12
66,"@@ -319,71 +319,71 @@ export const HTML_TAGS: ITagSet = {
 };
 
 export const IONIC_TAGS: ITagSet = {
-	'ion-checkbox': new HTMLTagSpecification('',
+	'ion-checkbox': new HTMLTagSpecification(nls.localize('tags.ion.checkbox', 'The checkbox is no different than the HTML checkbox input, except it\'s styled differently. The checkbox behaves like any AngularJS checkbox.'),","I've used nls.localize, with a string ID for each label; is there anything else to do for localization?
",2016-03-04 21:54:55
895,"@@ -32,5 +32,6 @@
 	""typescript.implementationsCodeLens.enabled"": ""Enable/disable implementations CodeLens. Requires TypeScript >= 2.2.0."",
 	""typescript.openTsServerLog.title"": ""Open TS Server log file"",
 	""typescript.selectTypeScriptVersion.title"": ""Select TypeScript Version"",
-	""jsDocCompletion.enabled"": ""Enable/disable auto JSDoc comments""
+	""jsDocCompletion.enabled"": ""Enable/disable auto JSDoc comments"",
+	""javascript.implicitProjectConfig.checkJs"": ""Enable/disable type checking in loose JavaScript files that are not included in any jsconfig or tsconfig projects. Requires TypeScript >= 2.3.1.""","I'm still not sure how to clearly express when this setting applies and when it does not

The setting applies only when a javascript file is not included in a JavaScript project as defined in a `jsconfig` or `tsconfig`. If the file is part of a project, the user must instead enable `checkJs` in the config file itself

@kieferrm Let me know if you have any suggestions here",2017-04-21 03:04:44
549,"@@ -32,6 +32,7 @@ export interface IWindowCreationOptions {
 	extensionDevelopmentPath?: string;
 	allowFullscreen?: boolean;
 	titleBarStyle?: 'native' | 'custom';
+	vscodeWindowId?: string;",@Tyriar I would suggest to call this `id` and instead fix all users of the current `id` property to use `vscodeWindows.win.id` because that makes it very clear what ID is being asked.,2016-12-01 16:20:32
905,"@@ -32,7 +32,7 @@ class JsDocCompletionItem extends CompletionItem {
 	) {
 		super('/** */', CompletionItemKind.Snippet);
 		this.detail = localize('typescript.jsDocCompletionItem.documentation', 'JSDoc comment');
-		this.insertText = '';
+		this.insertText = ' ';","This is the minimal change that fixes the issue. I also considered updating the suggestion provider to not apply the new enter logic for empty insert text or for completions with commands, however this carried more risk.

I'm also going to try to get TypeScript to improve the api we use to get doctemplates so that the `JsDocCompletionItem` doesn't require using a command",2017-05-05 05:10:15
150,"@@ -32,7 +32,7 @@ var baseModules = [
 	'applicationinsights', 'assert', 'child_process', 'chokidar', 'crypto', 'emmet',
 	'events', 'fs', 'getmac', 'glob', 'graceful-fs', 'http', 'http-proxy-agent',
 	'https', 'https-proxy-agent', 'iconv-lite', 'electron', 'net',
-	'os', 'path', 'readline', 'sax', 'semver', 'stream', 'string_decoder', 'url',
+	'os', 'path', 'pty.js', 'readline', 'sax', 'semver', 'stream', 'string_decoder', 'url', 'term.js',","Is this change related to 3077?
",2016-05-20 08:18:13
979,"@@ -321,12 +321,21 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 			etag = this.lastResolvedDiskStat.etag; // otherwise respect etag to support caching
 		}
 
+		this.taskNotification();","Maybe this should only happen after opening the file succeeds? Partly to avoid slowing down the file open with extra work, but also, a file can fail to open, in which case you don't want to show the notification. ",2017-06-16 23:28:40
980,"@@ -321,12 +321,21 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 			etag = this.lastResolvedDiskStat.etag; // otherwise respect etag to support caching
 		}
 
+		this.taskNotification();
+
+		// Resolve Content
+		return this.textFileService
+			.resolveTextContent(this.resource, { acceptTextOnly: true, etag, encoding: this.preferredEncoding })
+			.then(content => this.handleLoadSuccess(content), error => this.handleLoadError(error));
+	}
+
+	private taskNotification(): void {",More verb-y name like `showTaskNotification` or something,2017-06-16 23:29:07
978,"@@ -321,12 +321,21 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 			etag = this.lastResolvedDiskStat.etag; // otherwise respect etag to support caching
 		}
 
+		this.taskNotification();
+
+		// Resolve Content
+		return this.textFileService
+			.resolveTextContent(this.resource, { acceptTextOnly: true, etag, encoding: this.preferredEncoding })
+			.then(content => this.handleLoadSuccess(content), error => this.handleLoadError(error));
+	}
+
+	private taskNotification(): void {
 		const storageKey = 'workbench.tasks.ranTaskBefore';
-		const fileName = path.relative(this.storageService['workspaceKey'], this.resource['_formatted']);
+		const fileName = path.relative(this.contextService.getWorkspace().resource.toString(), this.resource.toString());","Can you only do this check if the storageService check succeeds, to avoid extra work, since most of the time, it won't be needed?",2017-06-16 23:25:56
835,"@@ -323,6 +323,10 @@ export class RawDebugSession extends v8.V8Protocol implements debug.ISession {
 		return this.send('stackTrace', args);",Looks good,2017-03-21 17:01:11
856,"@@ -323,6 +323,7 @@ registry.registerWorkbenchAction(new SyncActionDescriptor(ShowEditorsInGroupThre
 registry.registerWorkbenchAction(new SyncActionDescriptor(OpenNextEditor, OpenNextEditor.ID, OpenNextEditor.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.PageDown, mac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.RightArrow, secondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.US_CLOSE_SQUARE_BRACKET] } }), 'View: Open Next Editor', category);
 registry.registerWorkbenchAction(new SyncActionDescriptor(OpenPreviousEditor, OpenPreviousEditor.ID, OpenPreviousEditor.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.PageUp, mac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.LeftArrow, secondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.US_OPEN_SQUARE_BRACKET] } }), 'View: Open Previous Editor', category);
 registry.registerWorkbenchAction(new SyncActionDescriptor(ReopenClosedEditorAction, ReopenClosedEditorAction.ID, ReopenClosedEditorAction.LABEL, { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_T }), 'View: Reopen Closed Editor', category);
+registry.registerWorkbenchAction(new SyncActionDescriptor(ClearRecentItemsAction, ClearRecentItemsAction.ID, ClearRecentItemsAction.LABEL), 'View: Clear Items', category);",`Clear Recent Files` maybe?,2017-03-23 14:06:25
15,"@@ -325,7 +325,7 @@ export class DebugEditorModelManager implements wbext.IWorkbenchContribution {
 
 	private static FOCUSED_STACK_FRAME_DECORATION: editorcommon.IModelDecorationOptions = {
 		isWholeLine: true,
-		className: 'debug-focussed-stack-frame-line',
+		className: 'debug-focused-stack-frame-line',","Make sure you adopt the same change on `src/vs/workbench/parts/debug/browser/media/debug.contribution.css` where this class name is used.
",2015-11-25 08:35:38
784,"@@ -327,20 +327,14 @@ export class Repository {
 			return TPromise.wrapError(localize('errorBuffer', ""Can't open file from git""));
 		}
 
-		return new Promise((c, e) => {
-			detectMimesFromStream(child.stdout, null, (err, result) => {
-				if (err) {
-					e(err);
-				} else if (isBinaryMime(result.mimes)) {
-					e(<IFileOperationResult>{
-						message: localize('fileBinaryError', ""File seems to be binary and cannot be opened as text""),
-						fileOperationResult: FileOperationResult.FILE_IS_BINARY
-					});
-				} else {
-					c(this.doBuffer(object));
-				}
-			});
-		});
+		return detectMimesFromStream(child.stdout, null).then(result =>
+			isBinaryMime(result.mimes) ?
+				TPromise.wrapError<string>(<IFileOperationResult>{",@katainaka0503 return missing here?,2017-03-01 09:18:16
783,"@@ -328,7 +328,7 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 	}
 
 	private get bundledTypeScriptPath(): string {
-		return path.join(__dirname, '..', 'node_modules', 'typescript', 'lib', 'tsserver.js');
+		return path.join(__dirname, '..', '..', 'node_modules', 'typescript', 'lib', 'tsserver.js');",Use `require.resolve('typescript/lib/tsserver.js')` instead to avoid the path dependency,2017-03-01 08:26:39
960,"@@ -329,16 +329,20 @@ export function createApiFactory(
 				return extHostTerminalService.onDidCloseTerminal(listener, thisArg, disposables);
 			},
 			showInformationMessage(message, first, ...rest) {
-				return extHostMessageService.showMessage(Severity.Info, message, first, rest);",These changes are the main ones I'm uncertain about. Let me know if you think a different fix would be better,2017-06-06 19:00:04
837,"@@ -33,15 +33,40 @@ export class ExceptionWidget extends ZoneWidget {
 		const fontInfo = this.editor.getConfiguration().fontInfo;
 		this.container.style.fontSize = `${fontInfo.fontSize}px`;
 		this.container.style.lineHeight = `${fontInfo.lineHeight}px`;
-
-		let title = $('.title');
-		title.textContent = nls.localize('exceptionThrown', 'Exception occurred');
-		dom.append(container, title);
-
 		const thread = this.debugService.getViewModel().focusedThread;
+
 		if (thread && thread.stoppedDetails) {
+			let title = $('.title');
 			let msg = $('.message');
-			msg.textContent = thread.stoppedDetails.text;
+
+			if (this.exceptionInfo) {
+				let conditionMessage;
+				switch (this.exceptionInfo.body.breakMode) {
+					case 'never':
+						conditionMessage = nls.localize('neverException', 'User-handled exception has occurred.');
+						break;
+					case 'always':
+						conditionMessage = nls.localize('alwaysException', 'Always-breaking exception has occurred.');
+						break;
+					case 'unhandled':
+						conditionMessage = nls.localize('unhandledException', 'Unhandled exception has occurred.');
+						break;
+					case 'userUnhandled':
+						conditionMessage = nls.localize('userUnhandledException', 'User-unhandled exception has occurred.');
+						break;
+					default:
+						conditionMessage = '';",I would prefer if the default case had the same `Exception occurred` message as the case when there is no exceptionInfo,2017-03-21 17:04:00
838,"@@ -33,15 +33,40 @@ export class ExceptionWidget extends ZoneWidget {
 		const fontInfo = this.editor.getConfiguration().fontInfo;
 		this.container.style.fontSize = `${fontInfo.fontSize}px`;
 		this.container.style.lineHeight = `${fontInfo.lineHeight}px`;
-
-		let title = $('.title');
-		title.textContent = nls.localize('exceptionThrown', 'Exception occurred');
-		dom.append(container, title);
-
 		const thread = this.debugService.getViewModel().focusedThread;
+
 		if (thread && thread.stoppedDetails) {
+			let title = $('.title');
 			let msg = $('.message');
-			msg.textContent = thread.stoppedDetails.text;
+
+			if (this.exceptionInfo) {
+				let conditionMessage;
+				switch (this.exceptionInfo.body.breakMode) {
+					case 'never':
+						conditionMessage = nls.localize('neverException', 'User-handled exception has occurred.');
+						break;
+					case 'always':
+						conditionMessage = nls.localize('alwaysException', 'Always-breaking exception has occurred.');
+						break;
+					case 'unhandled':
+						conditionMessage = nls.localize('unhandledException', 'Unhandled exception has occurred.');
+						break;
+					case 'userUnhandled':
+						conditionMessage = nls.localize('userUnhandledException', 'User-unhandled exception has occurred.');
+						break;
+					default:
+						conditionMessage = '';
+						break;
+				}
+
+				title.textContent = `${conditionMessage} ${this.exceptionInfo.body.description}`;",You are missing a colon here between the condition message and the description,2017-03-21 17:04:17
506,"@@ -33,4 +36,42 @@ const extensions = [
 	'html'
 ];
 
-extensions.forEach(extension => npmInstall(`extensions/${extension}`));
\ No newline at end of file
+extensions.forEach(extension => npmInstallSync(`extensions/${extension}`));
+
+function rmDuplicateModulesSync() {
+
+	function fetchModuleIds(basepath) {
+		const result = new Map();
+		for (const candidate of fs.readdirSync(path.join(basepath, 'node_modules'))) {
+			try {
+				let raw = fs.readFileSync(path.join(basepath, 'node_modules', candidate, 'package.json'));
+				let data = JSON.parse(raw);
+				result.set(data._id, path.join(basepath, 'node_modules', candidate));
+			} catch (e) {
+				if (e.code !== 'ENOENT') {
+					throw e;
+				}
+			}
+		}
+		return result;
+	}
+
+	const duplicates = new Set();
+	const baseModules = fetchModuleIds('');
+
+	for (const extension of extensions) {
+		const extensionModules = fetchModuleIds(`extensions/${extension}`);
+		for (let [key, value] of extensionModules) {
+			if (baseModules.has(key)) {
+				duplicates.add(value);
+			}
+		}
+	}
+
+	for (let duplicate of duplicates) {
+		console.log(`REMOVING duplicate module '${duplicate}'`);
+		rimraf.sync(path.join(process.cwd(), duplicate));",Is `process.cwd()` a good idea here?,2016-11-23 18:16:59
811,"@@ -331,6 +331,7 @@ registry.registerWorkbenchAction(new SyncActionDescriptor(CloseEditorsInGroupAct
 registry.registerWorkbenchAction(new SyncActionDescriptor(CloseOtherEditorsInGroupAction, CloseOtherEditorsInGroupAction.ID, CloseOtherEditorsInGroupAction.LABEL, { primary: null, mac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_T } }), 'View: Close Other Editors', category);
 registry.registerWorkbenchAction(new SyncActionDescriptor(CloseEditorsInOtherGroupsAction, CloseEditorsInOtherGroupsAction.ID, CloseEditorsInOtherGroupsAction.LABEL), 'View: Close Editors in Other Groups', category);
 registry.registerWorkbenchAction(new SyncActionDescriptor(SplitEditorAction, SplitEditorAction.ID, SplitEditorAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.US_BACKSLASH }), 'View: Split Editor', category);
+registry.registerWorkbenchAction(new SyncActionDescriptor(JoinEditorsAction, JoinEditorsAction.ID, JoinEditorsAction.LABEL), 'View: Join Editors', category);",Should this maybe be more descriptive to what it actually does? `Join Editors of two Groups`?,2017-03-10 14:23:11
998,"@@ -333,23 +333,44 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 
 	private showTaskNotification(): void {
 		const storageKey = 'workbench.tasks.ranTaskBefore';
-		if (!this.storageService.get(storageKey)) {
+		if (this.storageService.get(storageKey)) {
 			const fileName = path.relative(this.contextService.getWorkspace().resource.toString(), this.resource.toString());
 			if (fileName.match(/^gruntfile\.js$/i) || fileName.match(/^gulpfile\.js$/i) || fileName.match(/^tsconfig\.json$/i)) {
-				const message = localize('taskFileOpened', ""Visual Studio Code has extra functionality for this type of file"");
-				const action = this.instantiationService.createInstance(ShowTasksAction, ShowTasksAction.ID, localize('showTasks', ""Show Tasks""));
-
+				const message = localize('taskFileOpened', `Run your ${fileName.split('.')[0]} in vscode. Get started here.`);","This is going to fail the main build, or not work - localized strings have to be constant string literals. But you can add a placeholder like this:

`localize('id', 'foo {0} bar {1}', 'string inserted at {0}', 'inserted at {1}' ...)`",2017-06-19 22:09:18
999,"@@ -333,23 +333,44 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 
 	private showTaskNotification(): void {
 		const storageKey = 'workbench.tasks.ranTaskBefore';
-		if (!this.storageService.get(storageKey)) {
+		if (this.storageService.get(storageKey)) {
 			const fileName = path.relative(this.contextService.getWorkspace().resource.toString(), this.resource.toString());
 			if (fileName.match(/^gruntfile\.js$/i) || fileName.match(/^gulpfile\.js$/i) || fileName.match(/^tsconfig\.json$/i)) {
-				const message = localize('taskFileOpened', ""Visual Studio Code has extra functionality for this type of file"");
-				const action = this.instantiationService.createInstance(ShowTasksAction, ShowTasksAction.ID, localize('showTasks', ""Show Tasks""));
-
+				const message = localize('taskFileOpened', `Run your ${fileName.split('.')[0]} in vscode. Get started here.`);
+				let action: any;",Type as `Action` instead of `any`,2017-06-19 22:13:18
108,"@@ -333,6 +346,27 @@ export class WorkingFilesModel implements IWorkingFilesModel {
 		return this.mapEntryToResource[resource.toString()];
 	}
 
+	private recordRecentlyClosedEntries(resources: WorkingFileEntry[]): void {
+		if (resources.length === 0) {
+			return;
+		}
+
+		// Make the active entry the first entry","@Tyriar can you explain what these lines are for?
",2016-04-15 06:23:01
890,"@@ -334,6 +335,22 @@ export class VSCodeWindow {
 		return this._readyState;
 	}
 
+	private registerNavigationListenerOn(command: string, back: string, forward: string) {
+		this._win.on(command, (e, cmd) => {
+			if (this.readyState !== ReadyState.READY) {
+				return; // window must be ready
+			}
+
+			if (cmd === back) {
+				this.send('vscode:runAction', 'workbench.action.navigateBack');
+			} else if (cmd === forward) {
+				this.send('vscode:runAction', 'workbench.action.navigateForward');
+			} else {
+				console.warn('[electron command]: did not handle: ', command);","Should not happen, please remove.",2017-04-18 05:51:48
481,"@@ -334,6 +356,9 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 				diag('makeDirty() - prevented save because we are in conflict resolution mode', this.resource, new Date());
 			}
 		}
+
+		// Trigger listeners only if no auto save occurred and model changes were not blocked
+		this._onDidContentChange.fire();","@Tyriar hm careful here. there are some return statements above e.g. when the user undos his changes up to the saved version, don't we want to also update (or actually discard) the backup in that case?

Also I am not sure the comment `if no auto save occurred` makes sense.
",2016-11-09 07:59:48
359,"@@ -339,6 +339,17 @@ export class HistoryService extends BaseHistoryService implements IHistoryServic
 		this.recentlyClosedFiles = [];
 	}
 
+	public block(block: boolean) {
+		if (block) {
+			this.blockStackChanges = true;
+			this.blockEditorHistoryChanges = true;
+		}","@wprater style, prefer `} else {`
",2016-10-21 09:52:52
380,"@@ -339,6 +346,15 @@ export class WorkbenchLayout implements IVerticalSashLayoutProvider, IHorizontal
 
 		// Activity Bar
 		let activityBarMinWidth = this.computedStyles.activitybar.minWidth;
+
+		// For inline titles, we want to ignore the minWidth on the activity bar
+		// and generate a zoom-dependent width, to ensure all other parts lay out correctly
+		const windowConfig = this.configurationService.getConfiguration<IWindowConfiguration>();
+		if (windowConfig && windowConfig.window.macOSUseInlineToolbar) {
+			const zoom = webFrame.getZoomFactor();
+			activityBarMinWidth = 76/zoom;","@orta the 76px should be read from the CSS file if possible and not hardcoded (compare with https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/layout.ts#L307)
",2016-10-23 06:53:05
325,"@@ -339,7 +339,11 @@ export interface IAskpassService {
 }
 
 // Utils
+const invalidBranchPatternName = /(^\.)|(\/\.)|(\.\.)|(~)|(\^)|(:)|(\/$)|(\.lock$)|(\.lock\/)|(\\)|(\*)|(\s)|(^\s*$)|(\.$)/g;","Why wrapping everything in groups? The regex is now broken since the `^` and `$` were making sure the whole string is matched.
",2016-10-14 12:51:15
596,"@@ -34,7 +34,18 @@ export default class TypeScriptDocumentHighlightProvider implements DocumentHigh
 		}
 		return this.client.execute('occurrences', args, token).then((response): DocumentHighlight[] => {
 			let data = response.body;
-			if (data) {
+			if (data && data.length) {","We may also want to scope to using the TypeScript version just to be safe. That way if something does go terribly wrong, users could point to their own ts install as a workaround.",2016-12-12 18:13:18
158,"@@ -340,4 +341,11 @@ suite('Sass - Sass Parser', () => {
 		assertNode('%hover', parser, parser._parseSimpleSelector.bind(parser));
 		assertNode('a%float', parser, parser._parseSimpleSelector.bind(parser));
 	});
+
+	test('Sass Parser - Css Variable Declaration', function() {","Just one tiny suggestion, we may want to use `CSS` or `css` rather than `Css`
",2016-05-20 17:25:00
423,"@@ -340,6 +342,9 @@ export function createApiFactory(initDataConfiguration: IInitConfiguration, init
 			onWillSaveTextDocument: (listener, thisArgs?, disposables?) => {
 				return extHostDocumentSaveParticipant.onWillSaveTextDocumentEvent(listener, thisArgs, disposables);
 			},
+			registerTreeExplorerNodeProvider(providerId: string, provider: vscode.TreeExplorerNodeProvider<any>) {","[needs change] This function must be marked as proposed - look at the [`sampleFunction`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/node/extHost.api.impl.ts#L279)
",2016-11-01 09:40:02
25,"@@ -342,7 +341,15 @@ export const Suggest = {
 		result.documentation = suggestion.documentationLabel;
 		result.sortText = suggestion.sortText;
 		result.filterText = suggestion.filterText;
-		result.textEdit = suggestion.textEdit && <any> TextEdit.to(suggestion.textEdit);
+
+		var overwriteBefore = (typeof suggestion.overwriteBefore !== 'undefined') ? suggestion.overwriteBefore : container.currentWord.length;","boh, `var`
",2015-12-11 10:24:44
614,"@@ -3422,17 +3423,18 @@ declare module 'vscode' {
 	 * register a command handler with the identfier `extension.sayHello`.
 	 * ```javascript
 	 * commands.registerCommand('extension.sayHello', () => {
-	 * 		window.showInformationMessage('Hello World!');
+	 * 	window.showInformationMessage('Hello World!');
 	 * });
 	 * ```
 	 * Second, bind the command identfier to a title under which it will show in the palette (`package.json`).
 	 * ```json
 	 * {
-	 * ""contributes"": {
-	 * 	""commands"": [{
-	 * 		""command"": ""extension.sayHello"",
-	 * 		""title"": ""Hello World""
-	 * 	}]
+	 * 	""contributes"": {
+	 * 		""commands"": [{
+	 * 			""command"": ""extension.sayHello"",
+	 * 			""title"": ""Hello World""
+	 * 		}]
+	 * 	}",This one seemed to be missing a closing curly brace,2016-12-15 23:50:29
251,"@@ -3429,6 +3460,15 @@ declare namespace vscode {
 		 * @return A new status bar item.
 		 */
 		export function createStatusBarItem(alignment?: StatusBarAlignment, priority?: number): StatusBarItem;
+
+		/**
+		 * Creates a [Terminal](#Terminal).
+		 *
+		 * @param name The optional name of a terminal, this will override the label used in the
+		 * terminal dropdown.
+		 * @return A new Terminal.
+		 */
+		export function createTerminal(name?: string): Thenable<vscode.Terminal>;","We do not return promises from there functions but already working objects (see `createStatusBarItem`). It should be `createTerminal(name?: string): Terminal`. We don't expose in the API  that stuff is being created/executed in a different process.
",2016-08-18 19:28:17
554,"@@ -344,3 +366,49 @@ interface CacheStats {
 	cacheFilterStartTime: number;
 	cacheFilterResultCount: number;
 }
+
+/**
+ * Collects a batch of items that each have a size. When the cumulative size of the batch reaches 'maxBatchSize', it calls the callback.
+ * If the batch isn't filled within 'timeout' ms, the callback is also called.
+ * And after 'batchOnlyAfter' items, the timeout is ignored, and the callback is called only when the batch is full.","`batchOnlyAfter` seems misleading, we batch before too.",2016-12-01 18:50:42
555,"@@ -344,3 +366,49 @@ interface CacheStats {
 	cacheFilterStartTime: number;
 	cacheFilterResultCount: number;
 }
+
+/**
+ * Collects a batch of items that each have a size. When the cumulative size of the batch reaches 'maxBatchSize', it calls the callback.
+ * If the batch isn't filled within 'timeout' ms, the callback is also called.
+ * And after 'batchOnlyAfter' items, the timeout is ignored, and the callback is called only when the batch is full.
+ */
+class BatchedCollector<T> {
+	private totalNumberCompleted = 0;
+	private batch: T[] = [];
+	private batchSize = 0;
+	private timeoutHandle: number;
+
+	constructor(private maxBatchSize: number, private timeout: number, private batchOnlyAfter: number, private cb: (items: T | T[]) => void) {
+	}
+
+	addItem(item: T, size: number): void {
+		if (!item) {
+			return;
+		}
+
+		if (this.maxBatchSize > 0) {
+			this.batch.push(item);
+			this.batchSize += size;
+			if (this.batchSize >= this.maxBatchSize) {
+				this.flush();
+			} else {
+				if (!this.timeoutHandle && this.totalNumberCompleted < this.batchOnlyAfter) {
+					this.timeoutHandle = setTimeout(() => {
+						this.flush();
+					}, this.timeout);
+				}
+			}
+		} else {
+			this.cb(item);
+		}
+	}
+
+	flush(): void {
+		this.totalNumberCompleted += this.batchSize;",Check if `this.batchSize > 0`?,2016-12-01 18:52:02
737,"@@ -346,8 +346,10 @@ class MouseDownOperation extends Disposable {
 
 	private _mouseMoveMonitor: GlobalEditorMouseMoveMonitor;
 	private _mouseDownThenMoveEventHandler: EventGateKeeper<EditorMouseEvent>;
+	private _mouseDragThenMoveEventHandler: EventGateKeeper<EditorMouseEvent>;","No need for a separate handler, I suggest to use `mouseState.lastMouseDownEvent` (which should be renamed to something better, see other comment) to differentiate the two cases inside `onMouseDownThenMove`",2017-02-20 11:07:43
273,"@@ -347,4 +352,19 @@ export class TerminalService implements ITerminalService {
 		}
 		return parts.join('_') + '.UTF-8';
 	}
+}
+
+interface ITerminalProcessConfiguration {
+	_name: string;","Underscore not necessary since it's public
",2016-09-08 19:11:24
272,"@@ -347,4 +352,19 @@ export class TerminalService implements ITerminalService {
 		}
 		return parts.join('_') + '.UTF-8';
 	}
+}
+
+interface ITerminalProcessConfiguration {
+	_name: string;
+	_shellPath: string;
+}
+
+class TerminalProcessConfiguration implements ITerminalProcessConfiguration {","We don't really need to implement the interface, an interface is all we need to enforce the types. TypeScript allows regular objects `{}` to use interfaces and keeps the type safe.
",2016-09-08 19:08:23
675,"@@ -349,6 +349,18 @@ export class TabsTitleControl extends TitleControl {
 		tabContainer.setAttribute('role', 'presentation'); // cannot use role ""tab"" here due to https://github.com/Microsoft/vscode/issues/8659
 		DOM.addClass(tabContainer, 'tab monaco-editor-background');
 
+		if (!this.tabOptions.showTabCloseButton || this.tabOptions.tabCloseButton === 'off') {",Please move this into the `doUpdate` method above where you will notice that there already is an update for `no-close-button` class from the other option (that should be deleted). We need to have it there because otherwise tabs will not update live from a config change.,2017-01-16 07:59:36
268,"@@ -3497,9 +3497,10 @@ declare namespace vscode {
 		 * [Terminal.show](#Terminal.show) in order to show the terminal panel.
 		 *
 		 * @param name Optional human-readable string which will be used to represent the terminal in the UI.
+		 * @param shellPath Path to the user-requested shell executable that will be used in the terminal","Change this to:

> @param shellPath Optional path to a custom shell executable to be used in the terminal.
",2016-09-08 18:53:00
329,"@@ -35,6 +35,10 @@
 
 /** Custom Mac Cursor */
 
+.monaco-workbench.mac.use-inline-toolbar > .monaco-sash.mac {","We should not add workbench dependencies here, instead if we want to override something for widgets it should go into workbench.css
",2016-10-15 06:14:13
931,"@@ -358,6 +358,7 @@ export class ManageExtensionAction extends Action {
 				instantiationService.createInstance(EnableGloballyAction, localize('enableAlwaysAction.label', ""Enable (Always)""))
 			],
 			[
+				instantiationService.createInstance(AddToWorkspaceRecommendationsAction, localize('addToWorkspaceRecommendationsAction.label', ""Add to Workspace Recommendations"")),","How about having a short label - `Recommend (Workspace)`  and `Unrecommend (Workspace)`. Not sure `Workspace` word is necessary since a user can recommend only to Workspace, but having it makes it complete.",2017-05-12 09:14:36
876,"@@ -3646,6 +3646,18 @@ declare module 'vscode' {
 		export function showTextDocument(document: TextDocument, column?: ViewColumn, preserveFocus?: boolean): Thenable<TextEditor>;
 
 		/**
+		 * Show the given document in a text editor. A [column](#ViewColumn) can be provided
+		 * to control where the editor is being shown. Might change the [active editor](#window.activeTextEditor).
+		 *
+		 * @param document A text document to be shown.
+		 * @param column A view column in which the editor should be shown. The default is the [one](#ViewColumn.One), other values
+		 * are adjusted to be __Min(column, columnCount + 1)__.
+		 * @param options Editor options for showing the text editor.
+		 * @return A promise that resolves to an [editor](#TextEditor).
+		 */
+		export function showTextDocument(document: TextDocument, column?: ViewColumn, options?: { preserveFocus?: boolean, pinned?: boolean }): Thenable<TextEditor>;","Sooo, if we add this new overload it should include `column` and also make it a type which we can document nicer",2017-04-13 15:13:46
467,"@@ -369,6 +373,30 @@ export class WindowsManager implements IWindowsMainService, IWindowEventService
 			iPathsToOpen = this.cliToPaths(openConfig.cli, ignoreFileNotFound);
 		}
 
+		let configuration: IWindowConfiguration;","@Tyriar suggest to move this code block down before the line

`// Handle files to open/diff or to create when we dont open a folder` 

Because there we actually start the job of opening something.
",2016-11-09 07:21:08
466,"@@ -369,6 +373,30 @@ export class WindowsManager implements IWindowsMainService, IWindowEventService
 			iPathsToOpen = this.cliToPaths(openConfig.cli, ignoreFileNotFound);
 		}
 
+		let configuration: IWindowConfiguration;
+		let openInNewWindow = openConfig.preferNewWindow || openConfig.forceNewWindow;
+
+		// Restore any existing backup workspaces
+		if (openConfig.restoreBackups) {
+			const workspacesWithBackups = this.backupService.getWorkspaceBackupPathsSync();","@Tyriar again not sure about all the sync fs calls are needed here
",2016-11-09 07:20:33
322,"@@ -37,6 +38,7 @@ export class DirtyFilesTracker implements IWorkbenchContribution {
 
 	constructor(
 		@ITextFileService private textFileService: ITextFileService,
+		@IFileService private fileService: IFileService,","Unused service?
",2016-10-13 15:13:31
479,"@@ -370,9 +374,9 @@ export abstract class TextFileService implements ITextFileService {
 		return this._models.getAll(<URI>arg1);
 	}
 
-	private getDirtyFileModels(resources?: URI[]): ITextFileEditorModel[];
-	private getDirtyFileModels(resource?: URI): ITextFileEditorModel[];
-	private getDirtyFileModels(arg1?: any): ITextFileEditorModel[] {
+	public getDirtyFileModels(resources?: URI[]): ITextFileEditorModel[];","@Tyriar why public here? not used outside it seems
",2016-11-09 07:57:00
901,"@@ -373,15 +376,31 @@ export function registerCommands(): void {
 		win: { primary: void 0 }
 	});
 
-	CommandsRegistry.registerCommand('_workbench.diff', function (accessor: ServicesAccessor, args: [URI, URI, string, string]) {
+	CommandsRegistry.registerCommand('_workbench.diff', function (accessor: ServicesAccessor, args: [URI, URI, string, string, vscode.TextDocumentShowOptions]) {",it's dangerous to use the vscode-module here (actually everywhere outside the extension host) because these type actually don't exist. for interfaces it's OK because they disappear but using `IEditorOption` would have been better,2017-04-25 13:58:11
867,"@@ -373,6 +373,19 @@ export class VSCodeWindow {
 			}
 		});
 
+		// Swipe command support (macOS)
+		this._win.on('swipe', (e, cmd) => {",@seivan can we reuse this code with the `on('app-command')` handler? Seems duplicate.,2017-03-30 23:08:19
961,"@@ -375,3 +390,26 @@ CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
 		primary: KeyCode.RightArrow
 	}
 }));
+
+@editorAction
+class ReplCopyAllAction extends EditorAction {
+
+	constructor() {
+		super({
+			id: 'repl.action.copyall',
+			label: nls.localize('actions.repl.copyall', ""Debug Copy All""),","I would prefer the title to be ""Debug: Console Copy All"", that way it nicely aligns with the other debug actions and has a more clear name",2017-06-08 09:56:50
962,"@@ -375,3 +390,26 @@ CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
 		primary: KeyCode.RightArrow
 	}
 }));
+
+@editorAction
+class ReplCopyAllAction extends EditorAction {
+
+	constructor() {
+		super({
+			id: 'repl.action.copyall',
+			label: nls.localize('actions.repl.copyall', ""Debug Copy All""),
+			alias: 'Debug Copy All',
+			precondition: debug.CONTEXT_IN_DEBUG_REPL,
+			kbOpts: {","I think you can just leave out the `kbOpts` and it should nicely compile, please try that",2017-06-08 09:58:02
489,"@@ -376,6 +380,28 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		let configuration: IWindowConfiguration;
+		let openInNewWindow = openConfig.preferNewWindow || openConfig.forceNewWindow;
+
+		// Restore any existing backup workspaces
+		if (openConfig.restoreBackups) {
+			const workspacesWithBackups = this.backupService.getWorkspaceBackupPaths();
+
+			workspacesWithBackups.forEach(workspacePath => {
+				if (!fs.existsSync(workspacePath)) {","@Tyriar would it be possible that we have a backup workspace without backups to restore? maybe we should add more checks here that a backup workspace path should only cause a window to open if it has backups, otherwise it gets deleted. I am thinking of situations where we the backup workspace gets out of sync with the backups within (for whatever reason - e.g. crash). This would prevent bugs where multiple windows just open even though there are no backups.
",2016-11-15 05:56:16
491,"@@ -376,6 +380,28 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		let configuration: IWindowConfiguration;
+		let openInNewWindow = openConfig.preferNewWindow || openConfig.forceNewWindow;
+
+		// Restore any existing backup workspaces
+		if (openConfig.restoreBackups) {
+			const workspacesWithBackups = this.backupService.getWorkspaceBackupPaths();
+
+			workspacesWithBackups.forEach(workspacePath => {
+				if (!fs.existsSync(workspacePath)) {
+					this.backupService.removeWorkspaceBackupPathSync(Uri.file(workspacePath));
+					return;
+				}
+
+				const untitledToRestore = this.backupService.getWorkspaceUntitledFileBackupsSync(Uri.file(workspacePath)).map(filePath => {","@Tyriar same comment here about how to restore untitled files. This would not be needed if untitled had input factory.
",2016-11-15 05:59:45
78,"@@ -378,6 +424,14 @@ export class Model extends ee.EventEmitter implements debug.IModel {
 		this.emit(debug.ModelEvents.CALLSTACK_UPDATED);
 	}
 ","Should `continueThreads()` also `clearCallstack()` for each `thread`?
",2016-03-16 10:44:40
697,"@@ -3801,6 +3810,13 @@ export interface ICommonCodeEditor extends IEditor {
 	onDidType(listener: (text: string) => void): IDisposable;
 
 	/**
+	 * An event emitted when users paste text in the editor.
+	 * @event
+	 * @internal
+	 */
+	onDidPaste(listener: (range: Range) => void): IDisposable;","Here we say we give out a `Range`, but the implementation gives out an `IRange`. Please adjust the implementation.",2017-01-19 15:38:39
399,"@@ -3804,6 +3870,15 @@ declare module 'vscode' {
 		export function registerTextDocumentContentProvider(scheme: string, provider: TextDocumentContentProvider): Disposable;
 
 		/**
+		 * Register a [tree explorer node provider](#TreeExplorerNodeProvider).","tree explorer node provider -> TreeExplorerNodeProvider
",2016-10-24 15:23:09
738,"@@ -384,6 +386,12 @@ class MouseDownOperation extends Disposable {
 				() => !this._viewHelper.isDirty()
 			)
 		);
+		this._mouseDragThenMoveEventHandler = this._register(","No need for a separate handler, I suggest to code the dnd case inside `onMouseDownThenMove`",2017-02-20 11:08:19
26,"@@ -388,20 +388,21 @@ export interface ISuggestion {
 	label: string;
 	codeSnippet: string;
 	type: string;
-	textEdit?: EditorCommon.ISingleEditOperation;
 	typeLabel?: string;
 	documentationLabel?: string;
 	filterText?: string;
 	sortText?: string;
 	noAutoAccept?: boolean;
+	overwriteBefore?: number;
+	overwriteAfter?: number;
+
+	textEdit?: EditorCommon.ISingleEditOperation;","this isn't needed anymore, right?
",2015-12-11 10:25:03
702,"@@ -389,6 +395,16 @@ export class DefaultController implements _.IController {
 
 		return false;
 	}
+
+	protected setOpenMode(openMode: WorkbenchOpenMode) {
+		if (this.options.openMode !== openMode) {
+			this.options.openMode = openMode;
+		}
+	}
+
+	protected isInSingleClickOpenMode() {",Maybe better `openOnSingleClick`,2017-01-20 11:54:38
883,"@@ -39,12 +42,42 @@ export class TerminalLinkHandler {
 	private _tooltipDisposables: IDisposable[] = [];
 	private _widgetManager: TerminalWidgetManager;
 
+	// Changing any regex may effect this value, hence changes this as well if required.
+	private _winLineAndColumnMatchIndex = 12;
+	private _unixLineAndColumnMatchIndex = 15;
+
+	private _lineAndColumnClauses = [",Any reason this isn't a constant up the top so it's shared between multiple instances of `TerminalLinkHandler`?,2017-04-17 17:37:21
54,"@@ -391,11 +418,17 @@ export class Workbench implements IPartService {
 			this.sideBarHidden = true; // we hide sidebar in single-file-mode
 		}
 
-		let registry = (<IViewletRegistry>Registry.as(ViewletExtensions.Viewlets));
+		let registry = (<ViewletRegistry>Registry.as(ViewletExtensions.Viewlets));
 		if (!registry.getDefaultViewletId()) {
 			this.sideBarHidden = true; // can only hide sidebar if we dont have a default viewlet id","@isidorn for the sake of completness, the panel should also be hidden if there is no default panel
",2016-01-19 11:14:04
826,"@@ -391,7 +391,7 @@ export class TerminalTaskSystem extends EventEmitter implements ITaskSystem {
 			} else {
 				(this.terminalService.configHelper as TerminalConfigHelper).mergeDefaultShellPathAndArgs(shellLaunchConfig);
 			}
-			let shellArgs = shellLaunchConfig.args.slice(0);
+			let shellArgs = <string[]>shellLaunchConfig.args.slice(0);",@weinand FYI IShellLaunchConfig can now have args as a string to support @dbaeumer's use case of needed to use a pre-escaped set of arguments. I needed to make this change which I believe shouldn't cause any issues.,2017-03-14 18:22:28
653,"@@ -392,3 +393,58 @@ export const isAbsoluteRegex = /^((\/|[a-zA-Z]:\\)[^\(\)<>\\'\""\[\]]+)/;
 export function isAbsolute(path: string): boolean {
 	return isAbsoluteRegex.test(path);
 }
+
+/**
+ * Shortens the paths but keeps them easy to distinguish.
+ * Replaces not important parts with ellipsis.
+ * Every shorten path matches only one original path and vice versa.
+ */
+export function shorten(paths: string[]): string[] {
+	var separator = isWindows ? '\\' : '/';",Suggest to use `paths.nativeSep` here (https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/paths.ts#L20),2017-01-09 09:10:00
655,"@@ -392,3 +393,58 @@ export const isAbsoluteRegex = /^((\/|[a-zA-Z]:\\)[^\(\)<>\\'\""\[\]]+)/;
 export function isAbsolute(path: string): boolean {
 	return isAbsoluteRegex.test(path);
 }
+
+/**
+ * Shortens the paths but keeps them easy to distinguish.
+ * Replaces not important parts with ellipsis.
+ * Every shorten path matches only one original path and vice versa.
+ */
+export function shorten(paths: string[]): string[] {
+	var separator = isWindows ? '\\' : '/';
+	var ellipsis = '...';",How about using the actual unicode ellipsis character? I think that will save us some pixels (e.g. http://www.fileformat.info/info/unicode/char/2026/index.htm),2017-01-09 09:11:02
105,"@@ -392,6 +392,9 @@ export class VSCodeMenu {
 	}
 
 	private setOpenRecentMenu(openRecentMenu: Electron.Menu): void {
+		openRecentMenu.append(this.createMenuItem(nls.localize({ key: 'miReopenClosedFile', comment: ['&& denotes a mnemonic'] }, ""&&Reopen Closed File""), 'workbench.files.action.reopenClosedFile'));
+		openRecentMenu.append(__separator__());","@Tyriar careful, the menu might not have any entries (if there are not recent files) so you would have one separator too much in the end
",2016-04-15 06:13:35
689,"@@ -392,9 +388,13 @@ export class MainThreadTextEditor {
 		return false;
 	}
 
-	insertSnippet(template: string, opts: IInsertSnippetOptions) {
+	insertSnippet(template: string, opts: IUndoStopOptions) {",@jrieken Should `console.warn('applyEdits on invisible editor');` be added to `insertSnippet`?,2017-01-18 18:22:48
930,"@@ -394,6 +395,48 @@ export class ManageExtensionAction extends Action {
 	}
 }
 
+export class AddToWorkspaceRecommendationsAction extends Action implements IExtensionAction {","Since there is an action to add an extension to recommended list, there should also be a counter action to remove it from recommended list",2017-05-12 09:10:19
927,"@@ -394,6 +395,48 @@ export class ManageExtensionAction extends Action {
 	}
 }
 
+export class AddToWorkspaceRecommendationsAction extends Action implements IExtensionAction {
+
+	static ID = 'extensions.addToWorkspaceRecommendationsAction';
+	static LABEL = localize('addToWorkspaceRecommendationsAction', ""Workspace"");
+
+	private disposables: IDisposable[] = [];
+
+	private _extension: IExtension;
+	get extension(): IExtension { return this._extension; }
+	set extension(extension: IExtension) { this._extension = extension; this.update(); }
+
+	constructor(label: string,
+		@IWorkspaceContextService private workspaceContextService: IWorkspaceContextService,
+		@IExtensionsWorkbenchService private extensionsWorkbenchService: IExtensionsWorkbenchService,
+		@IExtensionEnablementService private extensionEnablementService: IExtensionEnablementService,
+		@IInstantiationService private instantiationService: IInstantiationService",Please remove those services which are not used,2017-05-12 09:04:13
929,"@@ -394,6 +395,48 @@ export class ManageExtensionAction extends Action {
 	}
 }
 
+export class AddToWorkspaceRecommendationsAction extends Action implements IExtensionAction {
+
+	static ID = 'extensions.addToWorkspaceRecommendationsAction';
+	static LABEL = localize('addToWorkspaceRecommendationsAction', ""Workspace"");
+
+	private disposables: IDisposable[] = [];
+
+	private _extension: IExtension;
+	get extension(): IExtension { return this._extension; }
+	set extension(extension: IExtension) { this._extension = extension; this.update(); }
+
+	constructor(label: string,
+		@IWorkspaceContextService private workspaceContextService: IWorkspaceContextService,
+		@IExtensionsWorkbenchService private extensionsWorkbenchService: IExtensionsWorkbenchService,
+		@IExtensionEnablementService private extensionEnablementService: IExtensionEnablementService,
+		@IInstantiationService private instantiationService: IInstantiationService
+	) {
+		super(AddToWorkspaceRecommendationsAction.ID, label);
+
+		this.disposables.push(this.extensionsWorkbenchService.onChange(() => this.update()));
+		this.update();
+	}
+
+	private update(): void {
+		this.enabled = !!this.extension;",Enablement should also depends on if it is already recommended or not and also if there is a workspace or not,2017-05-12 09:09:40
922,"@@ -394,6 +395,48 @@ export class ManageExtensionAction extends Action {
 	}
 }
 
+export class AddToWorkspaceRecommendationsAction extends Action implements IExtensionAction {
+
+	static ID = 'extensions.addToWorkspaceRecommendationsAction';
+	static LABEL = localize('addToWorkspaceRecommendationsAction', ""Workspace"");
+
+	private disposables: IDisposable[] = [];
+
+	private _extension: IExtension;
+	get extension(): IExtension { return this._extension; }
+	set extension(extension: IExtension) { this._extension = extension; this.update(); }
+
+	constructor(label: string,
+		@IWorkspaceContextService private workspaceContextService: IWorkspaceContextService,
+		@IExtensionsWorkbenchService private extensionsWorkbenchService: IExtensionsWorkbenchService,
+		@IExtensionEnablementService private extensionEnablementService: IExtensionEnablementService,
+		@IInstantiationService private instantiationService: IInstantiationService
+	) {
+		super(AddToWorkspaceRecommendationsAction.ID, label);
+
+		this.disposables.push(this.extensionsWorkbenchService.onChange(() => this.update()));
+		this.update();
+	}
+
+	private update(): void {
+		this.enabled = !!this.extension;
+	}
+
+	run(): TPromise<any> {
+		const action = <Action>this.instantiationService.createInstance(
+			ConfigureWorkspaceRecommendedExtensionsAction,
+			ConfigureWorkspaceRecommendedExtensionsAction.ID,
+			ConfigureWorkspaceRecommendedExtensionsAction.LABEL","- Check for the case when there is no workspace.
- Also why do we need to show the extensions file if we can just add the recommendation silently in the background.",2017-05-12 08:45:09
923,"@@ -394,6 +395,48 @@ export class ManageExtensionAction extends Action {
 	}
 }
 
+export class AddToWorkspaceRecommendationsAction extends Action implements IExtensionAction {
+
+	static ID = 'extensions.addToWorkspaceRecommendationsAction';
+	static LABEL = localize('addToWorkspaceRecommendationsAction', ""Workspace"");
+
+	private disposables: IDisposable[] = [];
+
+	private _extension: IExtension;
+	get extension(): IExtension { return this._extension; }
+	set extension(extension: IExtension) { this._extension = extension; this.update(); }
+
+	constructor(label: string,
+		@IWorkspaceContextService private workspaceContextService: IWorkspaceContextService,
+		@IExtensionsWorkbenchService private extensionsWorkbenchService: IExtensionsWorkbenchService,
+		@IExtensionEnablementService private extensionEnablementService: IExtensionEnablementService,
+		@IInstantiationService private instantiationService: IInstantiationService
+	) {
+		super(AddToWorkspaceRecommendationsAction.ID, label);
+
+		this.disposables.push(this.extensionsWorkbenchService.onChange(() => this.update()));
+		this.update();
+	}
+
+	private update(): void {
+		this.enabled = !!this.extension;
+	}
+
+	run(): TPromise<any> {
+		const action = <Action>this.instantiationService.createInstance(
+			ConfigureWorkspaceRecommendedExtensionsAction,
+			ConfigureWorkspaceRecommendedExtensionsAction.ID,
+			ConfigureWorkspaceRecommendedExtensionsAction.LABEL
+		);
+		return action.run()
+			.then(() => this.extensionsWorkbenchService.addToWorkspaceRecommendations(this.extension));",Why not call the ExtensionTip service directly to add a recommendation?,2017-05-12 08:46:46
790,"@@ -394,7 +394,10 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 				if (!fs.existsSync(modulePath)) {
 					window.showWarningMessage(localize('noServerFound', 'The path {0} doesn\'t point to a valid tsserver install. Falling back to bundled TypeScript version.', path.dirname(modulePath)));
 					modulePath = this.bundledTypeScriptPath;
-					// TODO check again?
+					if (!fs.existsSync(modulePath)) {
+						window.showErrorMessage(localize('noBundledServerFound', 'Could not find VSCode\'s tsserver install. Please try reinstalling VSCode'));","This error message is only visible in the rare case that the installation was corrupted by a third party program. I think we should be explicit in calling it out: ""VSCode's tsserver was deleted by a another application such as a misbehaving virus detection tool. Please reinstall VS Code."" Otherwise, if I'd see the message you propose right now, I'd think VS Code did something wrong.",2017-03-02 16:25:06
857,"@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 'use strict';
 
-import { Emitter } from 'vs/base/common/event';
+import { Emitter, createEmptyEvent } from 'vs/base/common/event';",Event.none?,2017-03-24 09:49:21
235,"@@ -4,8 +4,9 @@
  *--------------------------------------------------------------------------------------------*/
 'use strict';
 
-import {onUnexpectedError} from 'vs/base/common/errors';
+import {onUnexpectedError, illegalArgument} from 'vs/base/common/errors';
 import * as strings from 'vs/base/common/strings';
+import types = require('vs/base/common/types');","no more old school require pls
",2016-07-15 11:23:31
231,"@@ -4,9 +4,11 @@
  *--------------------------------------------------------------------------------------------*/
 'use strict';
 
+import nls = require('vs/nls');","no more old school require please
",2016-07-15 11:19:06
230,"@@ -4,9 +4,11 @@
  *--------------------------------------------------------------------------------------------*/
 'use strict';
 
+import nls = require('vs/nls');
 import {IAction} from 'vs/base/common/actions';
 import {IEventEmitter, BulkListenerCallback} from 'vs/base/common/eventEmitter';
 import {MarkedString} from 'vs/base/common/htmlContent';
+import types = require('vs/base/common/types');","no more old school require please
",2016-07-15 11:18:59
149,"@@ -40,10 +40,10 @@ exports.loaderConfig = function (emptyPaths) {
 			paths: {
 				'vs/extensions': 'extensions'
 			}
-		}
+		},
+		nodeModules: emptyPaths||[]","Is this change related to 3077?
",2016-05-20 08:17:59
966,"@@ -40,6 +40,10 @@ registry.registerWorkbenchAction(new SyncActionDescriptor(QuickOpenViewPickerAct
 	primary: KeyMod.CtrlCmd | KeyCode.KEY_Q, mac: { primary: KeyMod.WinCtrl | KeyCode.KEY_Q }, linux: { primary: null }
 }), 'Quick Open View');
 
+registry.registerWorkbenchAction(new SyncActionDescriptor(ShowTasksAction, ShowTasksAction.ID, ShowTasksAction.LABEL, {",`cmd+shift+t` is taken by 'Reopen closed editor',2017-06-12 21:25:25
73,"@@ -40,8 +40,8 @@ export class Source {
 			// first try to find the raw source amongst the stack frames - since that represenation has more data (source reference),","Looks good.
",2016-03-16 10:25:09
583,"@@ -401,3 +407,267 @@ export class DeleteAllLeftAction extends EditorAction {
 		editor.executeEdits(this.id, edits);
 	}
 }
+
+@editorAction
+export class JoinLinesAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.joinLines',
+			label: nls.localize('lines.joinLines', ""Join Lines""),
+			alias: 'Join Lines',
+			precondition: EditorContextKeys.Writable,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: KeyMod.WinCtrl | KeyCode.KEY_J
+			}
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selection = editor.getSelection();
+		let model = editor.getModel();
+		let startLineNumber = selection.startLineNumber;
+		let startColumn = 1;
+		let endLineNumber: number,
+			endColumn: number,
+			columnDeltaOffset: number;
+
+		let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
+
+		if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
+			let position = selection.getStartPosition();
+			if (position.lineNumber < model.getLineCount()) {
+				endLineNumber = startLineNumber + 1;
+				endColumn = model.getLineMaxColumn(endLineNumber);
+			} else {
+				endLineNumber = position.lineNumber;
+				endColumn = model.getLineMaxColumn(position.lineNumber);
+			}
+		} else {
+			endLineNumber = selection.endLineNumber;
+			endColumn = model.getLineMaxColumn(endLineNumber);
+		}
+
+		let trimmedLinesContent = model.getLineContent(startLineNumber);
+
+		for (let i = startLineNumber + 1; i <= endLineNumber; i++) {
+			let lineText = model.getLineContent(i);
+			let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);
+
+			if (firstNonWhitespaceIdx >= 1) {
+				let insertSpace = true;
+				if (trimmedLinesContent === '') {
+					insertSpace = false;
+				}
+
+				if (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||","trimmedLinesContent.length could be 0 here, leading to a call of `trimmedLinesContent.charAt(-1)`. 

You could use if (insertSpace && ....)",2016-12-05 17:09:59
584,"@@ -401,3 +407,267 @@ export class DeleteAllLeftAction extends EditorAction {
 		editor.executeEdits(this.id, edits);
 	}
 }
+
+@editorAction
+export class JoinLinesAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.joinLines',
+			label: nls.localize('lines.joinLines', ""Join Lines""),
+			alias: 'Join Lines',
+			precondition: EditorContextKeys.Writable,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: KeyMod.WinCtrl | KeyCode.KEY_J
+			}
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selection = editor.getSelection();
+		let model = editor.getModel();
+		let startLineNumber = selection.startLineNumber;
+		let startColumn = 1;
+		let endLineNumber: number,
+			endColumn: number,
+			columnDeltaOffset: number;
+
+		let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
+
+		if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
+			let position = selection.getStartPosition();
+			if (position.lineNumber < model.getLineCount()) {
+				endLineNumber = startLineNumber + 1;
+				endColumn = model.getLineMaxColumn(endLineNumber);
+			} else {
+				endLineNumber = position.lineNumber;
+				endColumn = model.getLineMaxColumn(position.lineNumber);
+			}
+		} else {
+			endLineNumber = selection.endLineNumber;
+			endColumn = model.getLineMaxColumn(endLineNumber);
+		}
+
+		let trimmedLinesContent = model.getLineContent(startLineNumber);
+
+		for (let i = startLineNumber + 1; i <= endLineNumber; i++) {
+			let lineText = model.getLineContent(i);
+			let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);
+
+			if (firstNonWhitespaceIdx >= 1) {
+				let insertSpace = true;
+				if (trimmedLinesContent === '') {
+					insertSpace = false;
+				}
+
+				if (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||
+					trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t') {
+					insertSpace = false;
+					trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
+				}
+
+				let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
+
+				if (lineTextWithoutIndent.charAt(0) === ')') {","Why are we looking for `)` in the line text here ? i.e. this looks weird to me, why not for `]`. I suggest to remove this unless it is part of some weird join lines spec.",2016-12-05 17:13:08
585,"@@ -401,3 +407,267 @@ export class DeleteAllLeftAction extends EditorAction {
 		editor.executeEdits(this.id, edits);
 	}
 }
+
+@editorAction
+export class JoinLinesAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.joinLines',
+			label: nls.localize('lines.joinLines', ""Join Lines""),
+			alias: 'Join Lines',
+			precondition: EditorContextKeys.Writable,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: KeyMod.WinCtrl | KeyCode.KEY_J
+			}
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selection = editor.getSelection();
+		let model = editor.getModel();
+		let startLineNumber = selection.startLineNumber;
+		let startColumn = 1;
+		let endLineNumber: number,
+			endColumn: number,
+			columnDeltaOffset: number;
+
+		let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
+
+		if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
+			let position = selection.getStartPosition();
+			if (position.lineNumber < model.getLineCount()) {
+				endLineNumber = startLineNumber + 1;
+				endColumn = model.getLineMaxColumn(endLineNumber);
+			} else {
+				endLineNumber = position.lineNumber;
+				endColumn = model.getLineMaxColumn(position.lineNumber);
+			}
+		} else {
+			endLineNumber = selection.endLineNumber;
+			endColumn = model.getLineMaxColumn(endLineNumber);
+		}
+
+		let trimmedLinesContent = model.getLineContent(startLineNumber);
+
+		for (let i = startLineNumber + 1; i <= endLineNumber; i++) {
+			let lineText = model.getLineContent(i);
+			let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);
+
+			if (firstNonWhitespaceIdx >= 1) {
+				let insertSpace = true;
+				if (trimmedLinesContent === '') {
+					insertSpace = false;
+				}
+
+				if (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||
+					trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t') {
+					insertSpace = false;
+					trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
+				}
+
+				let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
+
+				if (lineTextWithoutIndent.charAt(0) === ')') {
+					insertSpace = false;
+				}
+
+				trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;
+
+				if (insertSpace) {
+					columnDeltaOffset = lineTextWithoutIndent.length + 1;
+				} else {
+					columnDeltaOffset = lineTextWithoutIndent.length;
+				}
+			} else {
+				columnDeltaOffset = 0;
+			}
+		}
+
+		let deleteSelection = new Range(
+			startLineNumber,
+			startColumn,
+			endLineNumber,
+			endColumn
+		);
+
+		if (!deleteSelection.isEmpty()) {
+			if (selection.isEmpty()) {
+				editor.executeCommand(this.id,
+					new ReplaceCommandWithOffsetCursorState(deleteSelection, trimmedLinesContent, 0, -columnDeltaOffset)
+				);
+			} else {
+				if (selection.startLineNumber === selection.endLineNumber) {
+					editor.executeCommand(this.id,
+						new ReplaceCommandThatPreservesSelection(deleteSelection, trimmedLinesContent, selection)
+					);
+				} else {
+					editor.executeCommand(this.id, new ReplaceCommand(deleteSelection, trimmedLinesContent));
+					editor.setSelection(new Selection(selection.startLineNumber, selection.startColumn,
+						selection.startLineNumber, trimmedLinesContent.length - selectionEndPositionOffset));
+				}
+			}
+		}
+	}
+}
+
+@editorAction
+export class TransposeAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transpose',
+			label: nls.localize('editor.transpose', ""Transpose characters around the cursor""),
+			alias: 'Transpose characters around the cursor',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				if (cursor.column > model.getLineContent(cursor.lineNumber).length) {
+					return;
+				}
+
+				let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
+				let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
+				commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars,
+					new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
+			}
+		}
+
+		editor.executeCommands(this.id, commands);
+	}
+}
+
+@editorAction
+class PasteAndFormatAction extends EditorAction {",":-1: IMHO on this action.

I would prefer to have an `editor.formatOnPaste` which in my opinion would align more with our current approach to automatic formatting (same as `formatOnType` and `formatOnSave`). @jrieken what do you think?

This one also assumes it knows how paste is implemented in the cursor, but in case of multicursor paste touches multiple ranges, not just one. i.e. `pastedContentRange` is incorrect in case of multicursor paste.

I suggest to wait with this action and consider implementing it in the format contribution, we are shipping since a long time without it, and there's no reason to rush it in.",2016-12-05 17:23:15
586,"@@ -401,3 +407,267 @@ export class DeleteAllLeftAction extends EditorAction {
 		editor.executeEdits(this.id, edits);
 	}
 }
+
+@editorAction
+export class JoinLinesAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.joinLines',
+			label: nls.localize('lines.joinLines', ""Join Lines""),
+			alias: 'Join Lines',
+			precondition: EditorContextKeys.Writable,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: KeyMod.WinCtrl | KeyCode.KEY_J
+			}
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selection = editor.getSelection();
+		let model = editor.getModel();
+		let startLineNumber = selection.startLineNumber;
+		let startColumn = 1;
+		let endLineNumber: number,
+			endColumn: number,
+			columnDeltaOffset: number;
+
+		let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
+
+		if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
+			let position = selection.getStartPosition();
+			if (position.lineNumber < model.getLineCount()) {
+				endLineNumber = startLineNumber + 1;
+				endColumn = model.getLineMaxColumn(endLineNumber);
+			} else {
+				endLineNumber = position.lineNumber;
+				endColumn = model.getLineMaxColumn(position.lineNumber);
+			}
+		} else {
+			endLineNumber = selection.endLineNumber;
+			endColumn = model.getLineMaxColumn(endLineNumber);
+		}
+
+		let trimmedLinesContent = model.getLineContent(startLineNumber);
+
+		for (let i = startLineNumber + 1; i <= endLineNumber; i++) {
+			let lineText = model.getLineContent(i);
+			let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);
+
+			if (firstNonWhitespaceIdx >= 1) {
+				let insertSpace = true;
+				if (trimmedLinesContent === '') {
+					insertSpace = false;
+				}
+
+				if (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||
+					trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t') {
+					insertSpace = false;
+					trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
+				}
+
+				let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
+
+				if (lineTextWithoutIndent.charAt(0) === ')') {
+					insertSpace = false;
+				}
+
+				trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;
+
+				if (insertSpace) {
+					columnDeltaOffset = lineTextWithoutIndent.length + 1;
+				} else {
+					columnDeltaOffset = lineTextWithoutIndent.length;
+				}
+			} else {
+				columnDeltaOffset = 0;
+			}
+		}
+
+		let deleteSelection = new Range(
+			startLineNumber,
+			startColumn,
+			endLineNumber,
+			endColumn
+		);
+
+		if (!deleteSelection.isEmpty()) {
+			if (selection.isEmpty()) {
+				editor.executeCommand(this.id,
+					new ReplaceCommandWithOffsetCursorState(deleteSelection, trimmedLinesContent, 0, -columnDeltaOffset)
+				);
+			} else {
+				if (selection.startLineNumber === selection.endLineNumber) {
+					editor.executeCommand(this.id,
+						new ReplaceCommandThatPreservesSelection(deleteSelection, trimmedLinesContent, selection)
+					);
+				} else {
+					editor.executeCommand(this.id, new ReplaceCommand(deleteSelection, trimmedLinesContent));
+					editor.setSelection(new Selection(selection.startLineNumber, selection.startColumn,
+						selection.startLineNumber, trimmedLinesContent.length - selectionEndPositionOffset));
+				}
+			}
+		}
+	}
+}
+
+@editorAction
+export class TransposeAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transpose',
+			label: nls.localize('editor.transpose', ""Transpose characters around the cursor""),
+			alias: 'Transpose characters around the cursor',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				if (cursor.column > model.getLineContent(cursor.lineNumber).length) {
+					return;
+				}
+
+				let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
+				let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
+				commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars,
+					new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
+			}
+		}
+
+		editor.executeCommands(this.id, commands);
+	}
+}
+
+@editorAction
+class PasteAndFormatAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.pasteAndFormat',
+			label: nls.localize('editor.pasteAndFormat', ""Paste and format""),
+			alias: 'Paste and format',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): TPromise<void> {
+		const originalCursorPosition = editor.getSelection().getStartPosition();
+
+		// 1. paste
+		editor.focus();
+		document.execCommand('paste');
+
+		const currentCursorPosition = editor.getSelection().getStartPosition();
+		const pastedContentRange = new Selection(currentCursorPosition.lineNumber, currentCursorPosition.column, originalCursorPosition.lineNumber, originalCursorPosition.column);
+
+		// 2. format
+		const model = editor.getModel();
+		const { tabSize, insertSpaces } = model.getOptions();
+		const workerService = accessor.get(IEditorWorkerService);
+		const formattingPromise = getDocumentRangeFormattingEdits(model, pastedContentRange, { tabSize, insertSpaces });
+
+		if (!formattingPromise) {
+			return TPromise.as(void 0);
+		}
+
+		const state = editor.captureState(CodeEditorStateFlag.Value, CodeEditorStateFlag.Position);
+
+		return formattingPromise.then(edits => workerService.computeMoreMinimalEdits(editor.getModel().uri, edits, editor.getSelections())).then(edits => {
+			if (!state.validate(editor) || isFalsyOrEmpty(edits)) {
+				return;
+			}
+
+			const command = new EditOperationsCommand(edits, editor.getSelection());
+			editor.executeCommand(this.id, command);
+			editor.focus();
+
+			// 3. update cursor positions
+			let selection = editor.getSelection();
+			selection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);
+			editor.setSelection(selection);
+		});
+	}
+}
+
+@editorAction
+export class UpperCaseAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transformToUppercase',
+			label: nls.localize('editor.transformToUppercase', ""Transform to Uppercase""),
+			alias: 'Transform to Uppercase',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				let word = model.getWordAtPosition(cursor);",`word` can be null here,2016-12-05 17:24:34
587,"@@ -401,3 +407,267 @@ export class DeleteAllLeftAction extends EditorAction {
 		editor.executeEdits(this.id, edits);
 	}
 }
+
+@editorAction
+export class JoinLinesAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.joinLines',
+			label: nls.localize('lines.joinLines', ""Join Lines""),
+			alias: 'Join Lines',
+			precondition: EditorContextKeys.Writable,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: KeyMod.WinCtrl | KeyCode.KEY_J
+			}
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selection = editor.getSelection();
+		let model = editor.getModel();
+		let startLineNumber = selection.startLineNumber;
+		let startColumn = 1;
+		let endLineNumber: number,
+			endColumn: number,
+			columnDeltaOffset: number;
+
+		let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
+
+		if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
+			let position = selection.getStartPosition();
+			if (position.lineNumber < model.getLineCount()) {
+				endLineNumber = startLineNumber + 1;
+				endColumn = model.getLineMaxColumn(endLineNumber);
+			} else {
+				endLineNumber = position.lineNumber;
+				endColumn = model.getLineMaxColumn(position.lineNumber);
+			}
+		} else {
+			endLineNumber = selection.endLineNumber;
+			endColumn = model.getLineMaxColumn(endLineNumber);
+		}
+
+		let trimmedLinesContent = model.getLineContent(startLineNumber);
+
+		for (let i = startLineNumber + 1; i <= endLineNumber; i++) {
+			let lineText = model.getLineContent(i);
+			let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);
+
+			if (firstNonWhitespaceIdx >= 1) {
+				let insertSpace = true;
+				if (trimmedLinesContent === '') {
+					insertSpace = false;
+				}
+
+				if (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||
+					trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t') {
+					insertSpace = false;
+					trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
+				}
+
+				let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
+
+				if (lineTextWithoutIndent.charAt(0) === ')') {
+					insertSpace = false;
+				}
+
+				trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;
+
+				if (insertSpace) {
+					columnDeltaOffset = lineTextWithoutIndent.length + 1;
+				} else {
+					columnDeltaOffset = lineTextWithoutIndent.length;
+				}
+			} else {
+				columnDeltaOffset = 0;
+			}
+		}
+
+		let deleteSelection = new Range(
+			startLineNumber,
+			startColumn,
+			endLineNumber,
+			endColumn
+		);
+
+		if (!deleteSelection.isEmpty()) {
+			if (selection.isEmpty()) {
+				editor.executeCommand(this.id,
+					new ReplaceCommandWithOffsetCursorState(deleteSelection, trimmedLinesContent, 0, -columnDeltaOffset)
+				);
+			} else {
+				if (selection.startLineNumber === selection.endLineNumber) {
+					editor.executeCommand(this.id,
+						new ReplaceCommandThatPreservesSelection(deleteSelection, trimmedLinesContent, selection)
+					);
+				} else {
+					editor.executeCommand(this.id, new ReplaceCommand(deleteSelection, trimmedLinesContent));
+					editor.setSelection(new Selection(selection.startLineNumber, selection.startColumn,
+						selection.startLineNumber, trimmedLinesContent.length - selectionEndPositionOffset));
+				}
+			}
+		}
+	}
+}
+
+@editorAction
+export class TransposeAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transpose',
+			label: nls.localize('editor.transpose', ""Transpose characters around the cursor""),
+			alias: 'Transpose characters around the cursor',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				if (cursor.column > model.getLineContent(cursor.lineNumber).length) {
+					return;
+				}
+
+				let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
+				let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
+				commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars,
+					new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
+			}
+		}
+
+		editor.executeCommands(this.id, commands);
+	}
+}
+
+@editorAction
+class PasteAndFormatAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.pasteAndFormat',
+			label: nls.localize('editor.pasteAndFormat', ""Paste and format""),
+			alias: 'Paste and format',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): TPromise<void> {
+		const originalCursorPosition = editor.getSelection().getStartPosition();
+
+		// 1. paste
+		editor.focus();
+		document.execCommand('paste');
+
+		const currentCursorPosition = editor.getSelection().getStartPosition();
+		const pastedContentRange = new Selection(currentCursorPosition.lineNumber, currentCursorPosition.column, originalCursorPosition.lineNumber, originalCursorPosition.column);
+
+		// 2. format
+		const model = editor.getModel();
+		const { tabSize, insertSpaces } = model.getOptions();
+		const workerService = accessor.get(IEditorWorkerService);
+		const formattingPromise = getDocumentRangeFormattingEdits(model, pastedContentRange, { tabSize, insertSpaces });
+
+		if (!formattingPromise) {
+			return TPromise.as(void 0);
+		}
+
+		const state = editor.captureState(CodeEditorStateFlag.Value, CodeEditorStateFlag.Position);
+
+		return formattingPromise.then(edits => workerService.computeMoreMinimalEdits(editor.getModel().uri, edits, editor.getSelections())).then(edits => {
+			if (!state.validate(editor) || isFalsyOrEmpty(edits)) {
+				return;
+			}
+
+			const command = new EditOperationsCommand(edits, editor.getSelection());
+			editor.executeCommand(this.id, command);
+			editor.focus();
+
+			// 3. update cursor positions
+			let selection = editor.getSelection();
+			selection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);
+			editor.setSelection(selection);
+		});
+	}
+}
+
+@editorAction
+export class UpperCaseAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transformToUppercase',
+			label: nls.localize('editor.transformToUppercase', ""Transform to Uppercase""),
+			alias: 'Transform to Uppercase',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				let word = model.getWordAtPosition(cursor);
+				let wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);
+
+				if (wordRange !== undefined) {",???,2016-12-05 17:24:42
590,"@@ -401,3 +407,267 @@ export class DeleteAllLeftAction extends EditorAction {
 		editor.executeEdits(this.id, edits);
 	}
 }
+
+@editorAction
+export class JoinLinesAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.joinLines',
+			label: nls.localize('lines.joinLines', ""Join Lines""),
+			alias: 'Join Lines',
+			precondition: EditorContextKeys.Writable,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: KeyMod.WinCtrl | KeyCode.KEY_J
+			}
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selection = editor.getSelection();
+		let model = editor.getModel();
+		let startLineNumber = selection.startLineNumber;
+		let startColumn = 1;
+		let endLineNumber: number,
+			endColumn: number,
+			columnDeltaOffset: number;
+
+		let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
+
+		if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
+			let position = selection.getStartPosition();
+			if (position.lineNumber < model.getLineCount()) {
+				endLineNumber = startLineNumber + 1;
+				endColumn = model.getLineMaxColumn(endLineNumber);
+			} else {
+				endLineNumber = position.lineNumber;
+				endColumn = model.getLineMaxColumn(position.lineNumber);
+			}
+		} else {
+			endLineNumber = selection.endLineNumber;
+			endColumn = model.getLineMaxColumn(endLineNumber);
+		}
+
+		let trimmedLinesContent = model.getLineContent(startLineNumber);
+
+		for (let i = startLineNumber + 1; i <= endLineNumber; i++) {
+			let lineText = model.getLineContent(i);
+			let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);
+
+			if (firstNonWhitespaceIdx >= 1) {
+				let insertSpace = true;
+				if (trimmedLinesContent === '') {
+					insertSpace = false;
+				}
+
+				if (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||
+					trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t') {
+					insertSpace = false;
+					trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
+				}
+
+				let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
+
+				if (lineTextWithoutIndent.charAt(0) === ')') {
+					insertSpace = false;
+				}
+
+				trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;
+
+				if (insertSpace) {
+					columnDeltaOffset = lineTextWithoutIndent.length + 1;
+				} else {
+					columnDeltaOffset = lineTextWithoutIndent.length;
+				}
+			} else {
+				columnDeltaOffset = 0;
+			}
+		}
+
+		let deleteSelection = new Range(
+			startLineNumber,
+			startColumn,
+			endLineNumber,
+			endColumn
+		);
+
+		if (!deleteSelection.isEmpty()) {
+			if (selection.isEmpty()) {
+				editor.executeCommand(this.id,
+					new ReplaceCommandWithOffsetCursorState(deleteSelection, trimmedLinesContent, 0, -columnDeltaOffset)
+				);
+			} else {
+				if (selection.startLineNumber === selection.endLineNumber) {
+					editor.executeCommand(this.id,
+						new ReplaceCommandThatPreservesSelection(deleteSelection, trimmedLinesContent, selection)
+					);
+				} else {
+					editor.executeCommand(this.id, new ReplaceCommand(deleteSelection, trimmedLinesContent));
+					editor.setSelection(new Selection(selection.startLineNumber, selection.startColumn,
+						selection.startLineNumber, trimmedLinesContent.length - selectionEndPositionOffset));
+				}
+			}
+		}
+	}
+}
+
+@editorAction
+export class TransposeAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transpose',
+			label: nls.localize('editor.transpose', ""Transpose characters around the cursor""),
+			alias: 'Transpose characters around the cursor',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				if (cursor.column > model.getLineContent(cursor.lineNumber).length) {
+					return;
+				}
+
+				let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
+				let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
+				commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars,
+					new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
+			}
+		}
+
+		editor.executeCommands(this.id, commands);
+	}
+}
+
+@editorAction
+class PasteAndFormatAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.pasteAndFormat',
+			label: nls.localize('editor.pasteAndFormat', ""Paste and format""),
+			alias: 'Paste and format',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): TPromise<void> {
+		const originalCursorPosition = editor.getSelection().getStartPosition();
+
+		// 1. paste
+		editor.focus();
+		document.execCommand('paste');
+
+		const currentCursorPosition = editor.getSelection().getStartPosition();
+		const pastedContentRange = new Selection(currentCursorPosition.lineNumber, currentCursorPosition.column, originalCursorPosition.lineNumber, originalCursorPosition.column);
+
+		// 2. format
+		const model = editor.getModel();
+		const { tabSize, insertSpaces } = model.getOptions();
+		const workerService = accessor.get(IEditorWorkerService);
+		const formattingPromise = getDocumentRangeFormattingEdits(model, pastedContentRange, { tabSize, insertSpaces });
+
+		if (!formattingPromise) {
+			return TPromise.as(void 0);
+		}
+
+		const state = editor.captureState(CodeEditorStateFlag.Value, CodeEditorStateFlag.Position);
+
+		return formattingPromise.then(edits => workerService.computeMoreMinimalEdits(editor.getModel().uri, edits, editor.getSelections())).then(edits => {
+			if (!state.validate(editor) || isFalsyOrEmpty(edits)) {
+				return;
+			}
+
+			const command = new EditOperationsCommand(edits, editor.getSelection());
+			editor.executeCommand(this.id, command);
+			editor.focus();
+
+			// 3. update cursor positions
+			let selection = editor.getSelection();
+			selection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);
+			editor.setSelection(selection);
+		});
+	}
+}
+
+@editorAction
+export class UpperCaseAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transformToUppercase',
+			label: nls.localize('editor.transformToUppercase', ""Transform to Uppercase""),
+			alias: 'Transform to Uppercase',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				let word = model.getWordAtPosition(cursor);
+				let wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);
+
+				if (wordRange !== undefined) {
+					let text = model.getValueInRange(wordRange);
+					commands.push(new ReplaceCommandThatPreservesSelection(wordRange, text.toLocaleUpperCase(),
+						new Selection(cursor.lineNumber, cursor.column, cursor.lineNumber, cursor.column)));
+				}
+			} else {
+				let text = model.getValueInRange(selection);
+				commands.push(new ReplaceCommandThatPreservesSelection(selection, text.toLocaleUpperCase(), selection));
+			}
+		}
+
+		editor.executeCommands(this.id, commands);
+	}
+}
+
+@editorAction
+export class LowerCaseAction extends EditorAction {",I suggest to create an abstract `CaseAction` that has an abstract method `_modifyText` or whatever that can be overwritten to use `toLocaleUpperCase` and `toLocalLowerCase` to avoid code duplication.,2016-12-05 17:31:57
588,"@@ -401,3 +407,267 @@ export class DeleteAllLeftAction extends EditorAction {
 		editor.executeEdits(this.id, edits);
 	}
 }
+
+@editorAction
+export class JoinLinesAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.joinLines',
+			label: nls.localize('lines.joinLines', ""Join Lines""),
+			alias: 'Join Lines',
+			precondition: EditorContextKeys.Writable,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: KeyMod.WinCtrl | KeyCode.KEY_J
+			}
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selection = editor.getSelection();
+		let model = editor.getModel();
+		let startLineNumber = selection.startLineNumber;
+		let startColumn = 1;
+		let endLineNumber: number,
+			endColumn: number,
+			columnDeltaOffset: number;
+
+		let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
+
+		if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
+			let position = selection.getStartPosition();
+			if (position.lineNumber < model.getLineCount()) {
+				endLineNumber = startLineNumber + 1;
+				endColumn = model.getLineMaxColumn(endLineNumber);
+			} else {
+				endLineNumber = position.lineNumber;
+				endColumn = model.getLineMaxColumn(position.lineNumber);
+			}
+		} else {
+			endLineNumber = selection.endLineNumber;
+			endColumn = model.getLineMaxColumn(endLineNumber);
+		}
+
+		let trimmedLinesContent = model.getLineContent(startLineNumber);
+
+		for (let i = startLineNumber + 1; i <= endLineNumber; i++) {
+			let lineText = model.getLineContent(i);
+			let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);
+
+			if (firstNonWhitespaceIdx >= 1) {
+				let insertSpace = true;
+				if (trimmedLinesContent === '') {
+					insertSpace = false;
+				}
+
+				if (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||
+					trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t') {
+					insertSpace = false;
+					trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
+				}
+
+				let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
+
+				if (lineTextWithoutIndent.charAt(0) === ')') {
+					insertSpace = false;
+				}
+
+				trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;
+
+				if (insertSpace) {
+					columnDeltaOffset = lineTextWithoutIndent.length + 1;
+				} else {
+					columnDeltaOffset = lineTextWithoutIndent.length;
+				}
+			} else {
+				columnDeltaOffset = 0;
+			}
+		}
+
+		let deleteSelection = new Range(
+			startLineNumber,
+			startColumn,
+			endLineNumber,
+			endColumn
+		);
+
+		if (!deleteSelection.isEmpty()) {
+			if (selection.isEmpty()) {
+				editor.executeCommand(this.id,
+					new ReplaceCommandWithOffsetCursorState(deleteSelection, trimmedLinesContent, 0, -columnDeltaOffset)
+				);
+			} else {
+				if (selection.startLineNumber === selection.endLineNumber) {
+					editor.executeCommand(this.id,
+						new ReplaceCommandThatPreservesSelection(deleteSelection, trimmedLinesContent, selection)
+					);
+				} else {
+					editor.executeCommand(this.id, new ReplaceCommand(deleteSelection, trimmedLinesContent));
+					editor.setSelection(new Selection(selection.startLineNumber, selection.startColumn,
+						selection.startLineNumber, trimmedLinesContent.length - selectionEndPositionOffset));
+				}
+			}
+		}
+	}
+}
+
+@editorAction
+export class TransposeAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transpose',
+			label: nls.localize('editor.transpose', ""Transpose characters around the cursor""),
+			alias: 'Transpose characters around the cursor',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				if (cursor.column > model.getLineContent(cursor.lineNumber).length) {
+					return;
+				}
+
+				let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
+				let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
+				commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars,
+					new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
+			}
+		}
+
+		editor.executeCommands(this.id, commands);
+	}
+}
+
+@editorAction
+class PasteAndFormatAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.pasteAndFormat',
+			label: nls.localize('editor.pasteAndFormat', ""Paste and format""),
+			alias: 'Paste and format',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): TPromise<void> {
+		const originalCursorPosition = editor.getSelection().getStartPosition();
+
+		// 1. paste
+		editor.focus();
+		document.execCommand('paste');
+
+		const currentCursorPosition = editor.getSelection().getStartPosition();
+		const pastedContentRange = new Selection(currentCursorPosition.lineNumber, currentCursorPosition.column, originalCursorPosition.lineNumber, originalCursorPosition.column);
+
+		// 2. format
+		const model = editor.getModel();
+		const { tabSize, insertSpaces } = model.getOptions();
+		const workerService = accessor.get(IEditorWorkerService);
+		const formattingPromise = getDocumentRangeFormattingEdits(model, pastedContentRange, { tabSize, insertSpaces });
+
+		if (!formattingPromise) {
+			return TPromise.as(void 0);
+		}
+
+		const state = editor.captureState(CodeEditorStateFlag.Value, CodeEditorStateFlag.Position);
+
+		return formattingPromise.then(edits => workerService.computeMoreMinimalEdits(editor.getModel().uri, edits, editor.getSelections())).then(edits => {
+			if (!state.validate(editor) || isFalsyOrEmpty(edits)) {
+				return;
+			}
+
+			const command = new EditOperationsCommand(edits, editor.getSelection());
+			editor.executeCommand(this.id, command);
+			editor.focus();
+
+			// 3. update cursor positions
+			let selection = editor.getSelection();
+			selection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);
+			editor.setSelection(selection);
+		});
+	}
+}
+
+@editorAction
+export class UpperCaseAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transformToUppercase',
+			label: nls.localize('editor.transformToUppercase', ""Transform to Uppercase""),
+			alias: 'Transform to Uppercase',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				let word = model.getWordAtPosition(cursor);
+				let wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);
+
+				if (wordRange !== undefined) {
+					let text = model.getValueInRange(wordRange);
+					commands.push(new ReplaceCommandThatPreservesSelection(wordRange, text.toLocaleUpperCase(),
+						new Selection(cursor.lineNumber, cursor.column, cursor.lineNumber, cursor.column)));
+				}
+			} else {
+				let text = model.getValueInRange(selection);
+				commands.push(new ReplaceCommandThatPreservesSelection(selection, text.toLocaleUpperCase(), selection));
+			}
+		}
+
+		editor.executeCommands(this.id, commands);
+	}
+}
+
+@editorAction
+export class LowerCaseAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transformToLowercase',
+			label: nls.localize('editor.transformToLowercase', ""Transform to Lowercase""),
+			alias: 'Transform to Lowercase',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				let word = model.getWordAtPosition(cursor);",`word` can be null here. think of empty lines.,2016-12-05 17:25:00
589,"@@ -401,3 +407,267 @@ export class DeleteAllLeftAction extends EditorAction {
 		editor.executeEdits(this.id, edits);
 	}
 }
+
+@editorAction
+export class JoinLinesAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.joinLines',
+			label: nls.localize('lines.joinLines', ""Join Lines""),
+			alias: 'Join Lines',
+			precondition: EditorContextKeys.Writable,
+			kbOpts: {
+				kbExpr: EditorContextKeys.TextFocus,
+				primary: KeyMod.WinCtrl | KeyCode.KEY_J
+			}
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selection = editor.getSelection();
+		let model = editor.getModel();
+		let startLineNumber = selection.startLineNumber;
+		let startColumn = 1;
+		let endLineNumber: number,
+			endColumn: number,
+			columnDeltaOffset: number;
+
+		let selectionEndPositionOffset = model.getLineContent(selection.endLineNumber).length - selection.endColumn;
+
+		if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {
+			let position = selection.getStartPosition();
+			if (position.lineNumber < model.getLineCount()) {
+				endLineNumber = startLineNumber + 1;
+				endColumn = model.getLineMaxColumn(endLineNumber);
+			} else {
+				endLineNumber = position.lineNumber;
+				endColumn = model.getLineMaxColumn(position.lineNumber);
+			}
+		} else {
+			endLineNumber = selection.endLineNumber;
+			endColumn = model.getLineMaxColumn(endLineNumber);
+		}
+
+		let trimmedLinesContent = model.getLineContent(startLineNumber);
+
+		for (let i = startLineNumber + 1; i <= endLineNumber; i++) {
+			let lineText = model.getLineContent(i);
+			let firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);
+
+			if (firstNonWhitespaceIdx >= 1) {
+				let insertSpace = true;
+				if (trimmedLinesContent === '') {
+					insertSpace = false;
+				}
+
+				if (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||
+					trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\t') {
+					insertSpace = false;
+					trimmedLinesContent = trimmedLinesContent.replace(/[\s\uFEFF\xA0]+$/g, ' ');
+				}
+
+				let lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);
+
+				if (lineTextWithoutIndent.charAt(0) === ')') {
+					insertSpace = false;
+				}
+
+				trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;
+
+				if (insertSpace) {
+					columnDeltaOffset = lineTextWithoutIndent.length + 1;
+				} else {
+					columnDeltaOffset = lineTextWithoutIndent.length;
+				}
+			} else {
+				columnDeltaOffset = 0;
+			}
+		}
+
+		let deleteSelection = new Range(
+			startLineNumber,
+			startColumn,
+			endLineNumber,
+			endColumn
+		);
+
+		if (!deleteSelection.isEmpty()) {
+			if (selection.isEmpty()) {
+				editor.executeCommand(this.id,
+					new ReplaceCommandWithOffsetCursorState(deleteSelection, trimmedLinesContent, 0, -columnDeltaOffset)
+				);
+			} else {
+				if (selection.startLineNumber === selection.endLineNumber) {
+					editor.executeCommand(this.id,
+						new ReplaceCommandThatPreservesSelection(deleteSelection, trimmedLinesContent, selection)
+					);
+				} else {
+					editor.executeCommand(this.id, new ReplaceCommand(deleteSelection, trimmedLinesContent));
+					editor.setSelection(new Selection(selection.startLineNumber, selection.startColumn,
+						selection.startLineNumber, trimmedLinesContent.length - selectionEndPositionOffset));
+				}
+			}
+		}
+	}
+}
+
+@editorAction
+export class TransposeAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transpose',
+			label: nls.localize('editor.transpose', ""Transpose characters around the cursor""),
+			alias: 'Transpose characters around the cursor',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				if (cursor.column > model.getLineContent(cursor.lineNumber).length) {
+					return;
+				}
+
+				let deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);
+				let chars = model.getValueInRange(deleteSelection).split('').reverse().join('');
+				commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars,
+					new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));
+			}
+		}
+
+		editor.executeCommands(this.id, commands);
+	}
+}
+
+@editorAction
+class PasteAndFormatAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.pasteAndFormat',
+			label: nls.localize('editor.pasteAndFormat', ""Paste and format""),
+			alias: 'Paste and format',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): TPromise<void> {
+		const originalCursorPosition = editor.getSelection().getStartPosition();
+
+		// 1. paste
+		editor.focus();
+		document.execCommand('paste');
+
+		const currentCursorPosition = editor.getSelection().getStartPosition();
+		const pastedContentRange = new Selection(currentCursorPosition.lineNumber, currentCursorPosition.column, originalCursorPosition.lineNumber, originalCursorPosition.column);
+
+		// 2. format
+		const model = editor.getModel();
+		const { tabSize, insertSpaces } = model.getOptions();
+		const workerService = accessor.get(IEditorWorkerService);
+		const formattingPromise = getDocumentRangeFormattingEdits(model, pastedContentRange, { tabSize, insertSpaces });
+
+		if (!formattingPromise) {
+			return TPromise.as(void 0);
+		}
+
+		const state = editor.captureState(CodeEditorStateFlag.Value, CodeEditorStateFlag.Position);
+
+		return formattingPromise.then(edits => workerService.computeMoreMinimalEdits(editor.getModel().uri, edits, editor.getSelections())).then(edits => {
+			if (!state.validate(editor) || isFalsyOrEmpty(edits)) {
+				return;
+			}
+
+			const command = new EditOperationsCommand(edits, editor.getSelection());
+			editor.executeCommand(this.id, command);
+			editor.focus();
+
+			// 3. update cursor positions
+			let selection = editor.getSelection();
+			selection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);
+			editor.setSelection(selection);
+		});
+	}
+}
+
+@editorAction
+export class UpperCaseAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transformToUppercase',
+			label: nls.localize('editor.transformToUppercase', ""Transform to Uppercase""),
+			alias: 'Transform to Uppercase',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				let word = model.getWordAtPosition(cursor);
+				let wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);
+
+				if (wordRange !== undefined) {
+					let text = model.getValueInRange(wordRange);
+					commands.push(new ReplaceCommandThatPreservesSelection(wordRange, text.toLocaleUpperCase(),
+						new Selection(cursor.lineNumber, cursor.column, cursor.lineNumber, cursor.column)));
+				}
+			} else {
+				let text = model.getValueInRange(selection);
+				commands.push(new ReplaceCommandThatPreservesSelection(selection, text.toLocaleUpperCase(), selection));
+			}
+		}
+
+		editor.executeCommands(this.id, commands);
+	}
+}
+
+@editorAction
+export class LowerCaseAction extends EditorAction {
+	constructor() {
+		super({
+			id: 'editor.action.transformToLowercase',
+			label: nls.localize('editor.transformToLowercase', ""Transform to Lowercase""),
+			alias: 'Transform to Lowercase',
+			precondition: EditorContextKeys.Writable
+		});
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let selections = editor.getSelections();
+		let model = editor.getModel();
+		let commands: ICommand[] = [];
+
+		for (let i = 0, len = selections.length; i < len; i++) {
+			let selection = selections[i];
+			if (selection.isEmpty()) {
+				let cursor = selection.getStartPosition();
+				let word = model.getWordAtPosition(cursor);
+				let wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);
+
+				if (wordRange !== undefined) {",same ??,2016-12-05 17:25:10
302,"@@ -404,7 +404,7 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 			}
 
 			// Focus (unless prevented)
-			const focus = !options || !options.preserveFocus;
+			const focus = !options || options.preserveFocus;","This cannot be changed...
",2016-10-05 08:11:45
721,"@@ -406,15 +409,15 @@ export class WindowsManager implements IWindowsMainService {
 			}
 
 			// Open Files in last instance if any and flag tells us so",The comment should probably be updated,2017-02-07 06:25:31
739,"@@ -407,12 +415,30 @@ class MouseDownOperation extends Disposable {
 		this._dispatchMouse(position, true);
 	}
 
+	private _onMouseDragThenMove(e: EditorMouseEvent): void {","Merge into `_onMouseDownThenMove` and use `mouseState.lastMouseDownEvent` (which should be renamed to something better, see other comment) to differentiate the two cases",2017-02-20 11:09:03
740,"@@ -407,12 +415,30 @@ class MouseDownOperation extends Disposable {
 		this._dispatchMouse(position, true);
 	}
 
+	private _onMouseDragThenMove(e: EditorMouseEvent): void {
+		this._lastMouseEvent = e;
+		this._mouseState.setModifiers(e);
+		this._mouseState.setMouseDownEvent('drag');",`this._mouseState.setMouseDownEvent('drag');` should move to the `start` method when the operation starts. The `lastMouseDownEvent` should be set only once when the operation starts inside `start`.,2017-02-20 11:10:21
805,"@@ -4085,7 +4085,7 @@ declare module 'vscode' {
 		 * @param options Options to control how the document will be created.
 		 * @return A promise that resolves to a [document](#TextDocument).
 		 */
-		export function openTextDocument(options?: { language: string; }): Thenable<TextDocument>;
+		export function openTextDocument(options?: { language?: string; contents?: string; }): Thenable<TextDocument>;","missing jsdoc-comment, also use `content` to align with `TextDocumentContentProvider`",2017-03-07 08:20:45
859,"@@ -409,6 +409,10 @@ export function createApiFactory(initData: IInitData, threadService: IThreadServ
 			onWillSaveTextDocument: (listener, thisArgs?, disposables?) => {
 				return extHostDocumentSaveParticipant.onWillSaveTextDocumentEvent(listener, thisArgs, disposables);
 			},
+			onDidChangeDiffInformation: (listener, thisArgs?, disposables?) => {
+				// TODO@joao
+				return createEmptyEvent()(listener, thisArgs, disposables);",We could the be smart about this and *only* send these event from the main side when we have listeners on the ext host side,2017-03-24 09:50:58
918,"@@ -41,13 +41,12 @@
 		}
 	},
 	""scripts"": {
-		""compile"": ""node ./node_modules/vscode/bin/compile -watch -p ./"",
-		""vscode:prepublish"": ""node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:vscode-api-tests ./tsconfig.json""
+		""compile"": ""gulp compile-extension:vscode-api-tests"",
+		""watch"": ""gulp watch-extension:vscode-api-tests""",The extension shouldn't have an implicit dependency on the *parent* project/package.json. Now it misses the dependency to `gulp` and `typescript`. I'd reckon to simply update the `typescript` dependency here,2017-05-09 07:34:17
375,"@@ -41,13 +43,16 @@ export class UntitledEditorModel extends StringEditorModel implements IEncodingS
 		@IModeService modeService: IModeService,
 		@IModelService modelService: IModelService,
 		@IFileService private fileService: IFileService,
-		@IConfigurationService private configurationService: IConfigurationService
+		@IConfigurationService private configurationService: IConfigurationService,
+		@IBackupService private backupService: IBackupService,","Unused service?
",2016-10-21 14:03:37
373,"@@ -41,19 +42,26 @@ export class UntitledEditorInput extends AbstractUntitledEditorInput {
 		resource: URI,
 		hasAssociatedFilePath: boolean,
 		modeId: string,
+		restoreResource: URI,
 		@IInstantiationService private instantiationService: IInstantiationService,
 		@IWorkspaceContextService private contextService: IWorkspaceContextService,
 		@IModeService private modeService: IModeService,
 		@ITextFileService private textFileService: ITextFileService
 	) {
 		super();
 		this.resource = resource;
+		this.restoreResource = restoreResource;","As mentioned before I think we can get rid of the restoreResource also for untitled. The untitled model should go to the backup service and ask for available backups with the resource URI, similar to how text files now ask.
",2016-10-21 14:01:46
175,"@@ -41,6 +41,14 @@ configurationRegistry.registerConfiguration({
 		'terminal.integrated.fontFamily': {
 			'description': nls.localize('terminal.integrated.fontFamily', ""The font family used by the terminal (CSS font-family format), this defaults to editor.fontFamily's value.""),
 			'type': 'string'
+		},
+		'terminal.integrated.fontSize': {","Font size should have a default here, otherwise auto-complete does this.

![image](https://cloud.githubusercontent.com/assets/2193314/15760084/816ab9b0-28c6-11e6-8262-e26f7e994a58.png)
",2016-06-02 20:33:05
178,"@@ -41,6 +41,14 @@ configurationRegistry.registerConfiguration({
 		'terminal.integrated.fontFamily': {
 			'description': nls.localize('terminal.integrated.fontFamily', ""The font family used by the terminal (CSS font-family format), this defaults to editor.fontFamily's value.""),
 			'type': 'string'
+		},
+		'terminal.integrated.fontSize': {
+			'description': nls.localize('terminal.integrated.fontSize', ""The font size used by the terminal (in pixels), this defaults to editor.fontSize's value.""),","Sorry but let's go for consistency with the editor settings for this in commonEditorConfig.ts:

```
""Controls the font family of the terminal.""
""Controls the font size of the terminal.""
""Controls the line height of the terminal.""
```
",2016-06-02 20:37:43
176,"@@ -41,6 +41,14 @@ configurationRegistry.registerConfiguration({
 		'terminal.integrated.fontFamily': {
 			'description': nls.localize('terminal.integrated.fontFamily', ""The font family used by the terminal (CSS font-family format), this defaults to editor.fontFamily's value.""),
 			'type': 'string'
+		},
+		'terminal.integrated.fontSize': {
+			'description': nls.localize('terminal.integrated.fontSize', ""The font size used by the terminal (in pixels), this defaults to editor.fontSize's value.""),
+			'type': 'number'
+		},
+		'terminal.integrated.lineHeight': {","Same here, it needs the default set.
",2016-06-02 20:33:24
161,"@@ -41,6 +41,14 @@ configurationRegistry.registerConfiguration({
 		'terminal.integrated.fontFamily': {
 			'description': nls.localize('terminal.integrated.fontFamily', ""The font family used by the terminal (CSS font-family format), this defaults to editor.fontFamily's value.""),
 			'type': 'string'
+		},
+		'terminal.integrated.fontSize': {
+			'description': nls.localize('terminal.integrated.fontSize', ""The font size used by the terminal.""),","Add: "" (in pixels)""
",2016-06-02 06:45:23
162,"@@ -41,6 +41,14 @@ configurationRegistry.registerConfiguration({
 		'terminal.integrated.fontFamily': {
 			'description': nls.localize('terminal.integrated.fontFamily', ""The font family used by the terminal (CSS font-family format), this defaults to editor.fontFamily's value.""),
 			'type': 'string'
+		},
+		'terminal.integrated.fontSize': {
+			'description': nls.localize('terminal.integrated.fontSize', ""The font size used by the terminal.""),
+			'type': 'number'
+		},
+		'terminal.integrated.lineHeight': {
+			'description': nls.localize('terminal.integrated.lineHeight', ""The line height used by the terminal.""),","Add: "" (in pixels)""
",2016-06-02 06:45:26
976,"@@ -41,6 +44,20 @@ This project has adopted the [Microsoft Open Source Code of Conduct](https://ope
 * File a bug in [GitHub Issues](https://github.com/Microsoft/vscode/issues).
 * [Tweet](https://twitter.com/code) us with other feedback.
 
+## Related Products
+Microsoft is distributing its own build as Microsoft Visual Studio Code. 
+You can download packages for Windows, Mac and Linux on [VS Code's website](https://code.visualstudio.com/Download). 
+
+It's based on Code Open Source with some changes:
+* Microsoft branding
+* licensed under Microsoft [closed source custom product license](https://code.visualstudio.com/License) (EULA)
+* Extension Marketplace supported
+* crash reporting and telemetry enabled",maybe add that both can be disabled?,2017-06-16 15:49:42
973,"@@ -41,6 +44,20 @@ This project has adopted the [Microsoft Open Source Code of Conduct](https://ope
 * File a bug in [GitHub Issues](https://github.com/Microsoft/vscode/issues).
 * [Tweet](https://twitter.com/code) us with other feedback.
 
+## Related Products
+Microsoft is distributing its own build as Microsoft Visual Studio Code. 
+You can download packages for Windows, Mac and Linux on [VS Code's website](https://code.visualstudio.com/Download). 
+
+It's based on Code Open Source with some changes:
+* Microsoft branding
+* licensed under Microsoft [closed source custom product license](https://code.visualstudio.com/License) (EULA)
+* Extension Marketplace supported
+* crash reporting and telemetry enabled
+* user configuration and extensions stored in different directory then Code - Open Source",Typo: s/then/than/,2017-06-15 03:29:21
827,"@@ -41,6 +65,7 @@ suite('Workbench - TerminalLinkHandler', () => {
 			testLink('c:/a/long/path');
 			testLink('c:\\a\\long\\path');
 			testLink('c:\\mixed/slash\\path');
+			testLink('a/relative/path');","Will this also linkify just plain words for example `""foo""`? That way after validation the output of `ls` should all be linked. If so a test for that would be great.",2017-03-14 18:40:53
343,"@@ -410,14 +410,19 @@ export class QuickOpenWidget implements IModelProvider {
 
 		// Trigger open of element on selection
 		if (this.isVisible()) {
-			const context: IEntryRunContext = { event, keymods: this.extractKeyMods(event), quickNavigateConfiguration: this.quickNavigateConfiguration };
+			let eventForContext = event;
 			let mode = Mode.OPEN;
 
-			if (context.event instanceof StandardKeyboardEvent) {
-				if (context.event.keyCode === KeyCode.RightArrow) {
+			if (event instanceof StandardKeyboardEvent) {
+				eventForContext = event.browserEvent;","@bpasero preserving the browser's event as the context here.  will this work better?  allows us to leave `Mode` logic in `elementSelected`.
",2016-10-18 17:03:27
840,"@@ -411,6 +411,10 @@ export class EndOfLineEdit {
 	static readonly CRLF: EndOfLineEdit = Object.freeze({ newEol: EndOfLine.CRLF });
 
 	newEol: EndOfLine;
+
+	constructor(newEol: EndOfLine) {","Any reason you didn't do:
```ts
constructor(public newEol: EndOfLine) {
}
```
Is it because there would be an empty function body?",2017-03-21 17:40:03
340,"@@ -411,7 +411,15 @@ export class QuickOpenWidget implements IModelProvider {
 		// Trigger open of element on selection
 		if (this.isVisible()) {
 			const context: IEntryRunContext = { event, keymods: this.extractKeyMods(event), quickNavigateConfiguration: this.quickNavigateConfiguration };
-			hide = this.model.runner.run(value, Mode.OPEN, context);
+			let mode = Mode.OPEN;
+
+			if (context.event instanceof KeyboardEvent) {","@wprater can we just send over a flag to indicate this mode from where we call this method with the arrow key right pressed? I think we already create the standard keyboard event there and do not need to create it again here.
",2016-10-18 09:38:22
68,"@@ -414,6 +424,14 @@ export class Model extends ee.EventEmitter implements debug.IModel {
 		this.emit(debug.ModelEvents.CALLSTACK_UPDATED);
 	}
 
+	public continueThreads(): void {","I could add the functionality of `continueThreads` to `clearThreads` behind yet another boolean arguments.

I think having an explicit method is better (`clearThreads` is already confusing enough). Let me know what you think.
",2016-03-16 02:49:32
707,"@@ -416,65 +496,94 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 		}
 
 		const shippedVersion = this.getTypeScriptVersion(this.globalTypescriptPath);
-		const localModulePath = path.join(workspace.rootPath, 'node_modules', 'typescript', 'lib', 'tsserver.js');
+		const localModulePath = this.localTypeScriptPath;
 
-		let messageShown: Thenable<MyMessageItem | undefined>;
-		if (fs.existsSync(localModulePath) && this.getTypeScriptVersion(localModulePath)) {
+		let messageShown: Thenable<MyQuickPickItem | undefined>;
+		if (localModulePath) {
 			const localVersion = this.getTypeScriptVersion(localModulePath);
 			const usingWorkspaceVersion = this.workspaceState.get<boolean>(TypeScriptServiceClient.useWorkspaceTsdkStorageKey, false);
-			messageShown = window.showInformationMessage<MyMessageItem>(
-				usingWorkspaceVersion
-					? localize(
-						'usingWorkspaceTsVersion',
-						'Using TypeScript version {0} from workspace for IntelliSense.',
-						localVersion)
-					: localize(
-						'usingVSCodeTsVersion',
-						'Using VSCode\'s TypeScript version {0} for IntelliSense.',
-						shippedVersion
-					),
+			messageShown = window.showQuickPick<MyQuickPickItem>([
 				{
-					title: localize('use', 'Use workspace version ({0})', localVersion),
+					label: localize('useWorkspaceVersionOption', 'Use Workspace Version'),
+					description: localVersion || '',
+					detail: modulePath === localModulePath ? localize('activeVersion', 'active') : '',",I'd omit the `active` indication. It's not adding additional information as all information is already in the place holder text.,2017-01-27 02:26:35
708,"@@ -416,65 +496,94 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 		}
 
 		const shippedVersion = this.getTypeScriptVersion(this.globalTypescriptPath);
-		const localModulePath = path.join(workspace.rootPath, 'node_modules', 'typescript', 'lib', 'tsserver.js');
+		const localModulePath = this.localTypeScriptPath;
 
-		let messageShown: Thenable<MyMessageItem | undefined>;
-		if (fs.existsSync(localModulePath) && this.getTypeScriptVersion(localModulePath)) {
+		let messageShown: Thenable<MyQuickPickItem | undefined>;
+		if (localModulePath) {
 			const localVersion = this.getTypeScriptVersion(localModulePath);
 			const usingWorkspaceVersion = this.workspaceState.get<boolean>(TypeScriptServiceClient.useWorkspaceTsdkStorageKey, false);
-			messageShown = window.showInformationMessage<MyMessageItem>(
-				usingWorkspaceVersion
-					? localize(
-						'usingWorkspaceTsVersion',
-						'Using TypeScript version {0} from workspace for IntelliSense.',
-						localVersion)
-					: localize(
-						'usingVSCodeTsVersion',
-						'Using VSCode\'s TypeScript version {0} for IntelliSense.',
-						shippedVersion
-					),
+			messageShown = window.showQuickPick<MyQuickPickItem>([
 				{
-					title: localize('use', 'Use workspace version ({0})', localVersion),
+					label: localize('useWorkspaceVersionOption', 'Use Workspace Version'),
+					description: localVersion || '',
+					detail: modulePath === localModulePath ? localize('activeVersion', 'active') : '',
 					id: MessageAction.useLocal
 				}, {
-					title: localize(
-						'useVSCodeVersionOption',
-						'Use VSCode\'s version ({0})',
-						shippedVersion),
+					label: localize('useVSCodeVersionOption', 'Use VSCode\'s Version'),
+					description: shippedVersion || '',
+					detail: modulePath === this.globalTypescriptPath ? localize('activeVersion', 'active') : '',",I'd omit the `active` indication. It's not adding additional information as all information is already in the place holder text.,2017-01-27 02:26:47
705,"@@ -416,65 +496,94 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 		}
 
 		const shippedVersion = this.getTypeScriptVersion(this.globalTypescriptPath);
-		const localModulePath = path.join(workspace.rootPath, 'node_modules', 'typescript', 'lib', 'tsserver.js');
+		const localModulePath = this.localTypeScriptPath;
 
-		let messageShown: Thenable<MyMessageItem | undefined>;
-		if (fs.existsSync(localModulePath) && this.getTypeScriptVersion(localModulePath)) {
+		let messageShown: Thenable<MyQuickPickItem | undefined>;
+		if (localModulePath) {
 			const localVersion = this.getTypeScriptVersion(localModulePath);
 			const usingWorkspaceVersion = this.workspaceState.get<boolean>(TypeScriptServiceClient.useWorkspaceTsdkStorageKey, false);
-			messageShown = window.showInformationMessage<MyMessageItem>(
-				usingWorkspaceVersion
-					? localize(
-						'usingWorkspaceTsVersion',
-						'Using TypeScript version {0} from workspace for IntelliSense.',
-						localVersion)
-					: localize(
-						'usingVSCodeTsVersion',
-						'Using VSCode\'s TypeScript version {0} for IntelliSense.',
-						shippedVersion
-					),
+			messageShown = window.showQuickPick<MyQuickPickItem>([
 				{
-					title: localize('use', 'Use workspace version ({0})', localVersion),
+					label: localize('useWorkspaceVersionOption', 'Use Workspace Version'),
+					description: localVersion || '',
+					detail: modulePath === localModulePath ? localize('activeVersion', 'active') : '',
 					id: MessageAction.useLocal
 				}, {
-					title: localize(
-						'useVSCodeVersionOption',
-						'Use VSCode\'s version ({0})',
-						shippedVersion),
+					label: localize('useVSCodeVersionOption', 'Use VSCode\'s Version'),
+					description: shippedVersion || '',
+					detail: modulePath === this.globalTypescriptPath ? localize('activeVersion', 'active') : '',
 					id: MessageAction.useBundled,
 				}, {
-					title: localize('learnMore', 'Learn More'),
-					id: MessageAction.learnMore,
-					isCloseAffordance: true
+					label: localize('learnMore', 'Learn More'),
+					description: '',
+					id: MessageAction.learnMore
+				}], {
+					placeHolder: usingWorkspaceVersion
+						? localize(
+							'usingWorkspaceTsVersion',
+							'Using TypeScript version {0} from workspace for Typescript language features.',",Please use `TypeScript` rather than `Typescript`.,2017-01-27 02:24:57
706,"@@ -416,65 +496,94 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 		}
 
 		const shippedVersion = this.getTypeScriptVersion(this.globalTypescriptPath);
-		const localModulePath = path.join(workspace.rootPath, 'node_modules', 'typescript', 'lib', 'tsserver.js');
+		const localModulePath = this.localTypeScriptPath;
 
-		let messageShown: Thenable<MyMessageItem | undefined>;
-		if (fs.existsSync(localModulePath) && this.getTypeScriptVersion(localModulePath)) {
+		let messageShown: Thenable<MyQuickPickItem | undefined>;
+		if (localModulePath) {
 			const localVersion = this.getTypeScriptVersion(localModulePath);
 			const usingWorkspaceVersion = this.workspaceState.get<boolean>(TypeScriptServiceClient.useWorkspaceTsdkStorageKey, false);
-			messageShown = window.showInformationMessage<MyMessageItem>(
-				usingWorkspaceVersion
-					? localize(
-						'usingWorkspaceTsVersion',
-						'Using TypeScript version {0} from workspace for IntelliSense.',
-						localVersion)
-					: localize(
-						'usingVSCodeTsVersion',
-						'Using VSCode\'s TypeScript version {0} for IntelliSense.',
-						shippedVersion
-					),
+			messageShown = window.showQuickPick<MyQuickPickItem>([
 				{
-					title: localize('use', 'Use workspace version ({0})', localVersion),
+					label: localize('useWorkspaceVersionOption', 'Use Workspace Version'),
+					description: localVersion || '',
+					detail: modulePath === localModulePath ? localize('activeVersion', 'active') : '',
 					id: MessageAction.useLocal
 				}, {
-					title: localize(
-						'useVSCodeVersionOption',
-						'Use VSCode\'s version ({0})',
-						shippedVersion),
+					label: localize('useVSCodeVersionOption', 'Use VSCode\'s Version'),
+					description: shippedVersion || '',
+					detail: modulePath === this.globalTypescriptPath ? localize('activeVersion', 'active') : '',
 					id: MessageAction.useBundled,
 				}, {
-					title: localize('learnMore', 'Learn More'),
-					id: MessageAction.learnMore,
-					isCloseAffordance: true
+					label: localize('learnMore', 'Learn More'),
+					description: '',
+					id: MessageAction.learnMore
+				}], {
+					placeHolder: usingWorkspaceVersion
+						? localize(
+							'usingWorkspaceTsVersion',
+							'Using TypeScript version {0} from workspace for Typescript language features.',
+							localVersion)
+						: localize(
+							'usingVSCodeTsVersion',
+							'Using VSCode\'s TypeScript version {0} for Typescript language features.',",Should use `TypeScript` rather than `Typescript`,2017-01-27 02:25:09
709,"@@ -416,65 +496,94 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 		}
 
 		const shippedVersion = this.getTypeScriptVersion(this.globalTypescriptPath);
-		const localModulePath = path.join(workspace.rootPath, 'node_modules', 'typescript', 'lib', 'tsserver.js');
+		const localModulePath = this.localTypeScriptPath;
 
-		let messageShown: Thenable<MyMessageItem | undefined>;
-		if (fs.existsSync(localModulePath) && this.getTypeScriptVersion(localModulePath)) {
+		let messageShown: Thenable<MyQuickPickItem | undefined>;
+		if (localModulePath) {
 			const localVersion = this.getTypeScriptVersion(localModulePath);
 			const usingWorkspaceVersion = this.workspaceState.get<boolean>(TypeScriptServiceClient.useWorkspaceTsdkStorageKey, false);
-			messageShown = window.showInformationMessage<MyMessageItem>(
-				usingWorkspaceVersion
-					? localize(
-						'usingWorkspaceTsVersion',
-						'Using TypeScript version {0} from workspace for IntelliSense.',
-						localVersion)
-					: localize(
-						'usingVSCodeTsVersion',
-						'Using VSCode\'s TypeScript version {0} for IntelliSense.',
-						shippedVersion
-					),
+			messageShown = window.showQuickPick<MyQuickPickItem>([
 				{
-					title: localize('use', 'Use workspace version ({0})', localVersion),
+					label: localize('useWorkspaceVersionOption', 'Use Workspace Version'),
+					description: localVersion || '',
+					detail: modulePath === localModulePath ? localize('activeVersion', 'active') : '',
 					id: MessageAction.useLocal
 				}, {
-					title: localize(
-						'useVSCodeVersionOption',
-						'Use VSCode\'s version ({0})',
-						shippedVersion),
+					label: localize('useVSCodeVersionOption', 'Use VSCode\'s Version'),
+					description: shippedVersion || '',
+					detail: modulePath === this.globalTypescriptPath ? localize('activeVersion', 'active') : '',
 					id: MessageAction.useBundled,
 				}, {
-					title: localize('learnMore', 'Learn More'),
-					id: MessageAction.learnMore,
-					isCloseAffordance: true
+					label: localize('learnMore', 'Learn More'),
+					description: '',
+					id: MessageAction.learnMore
+				}], {
+					placeHolder: usingWorkspaceVersion
+						? localize(
+							'usingWorkspaceTsVersion',
+							'Using TypeScript version {0} from workspace for Typescript language features.',
+							localVersion)
+						: localize(
+							'usingVSCodeTsVersion',
+							'Using VSCode\'s TypeScript version {0} for Typescript language features.',
+							shippedVersion),
 				});
 		} else {
-			messageShown = window.showInformationMessage<MyMessageItem>(
-				localize(
-					'versionCheckUsingBundledTS',
-					'Using VSCode\'s TypeScript version {0} for IntelliSense.',
-					shippedVersion),
+			messageShown = window.showQuickPick<MyQuickPickItem>([
 				{
-					title: localize('learnMore', 'Learn More'),
-					id: MessageAction.learnMore,
-					isCloseAffordance: true,
+					label: localize('learnMore', 'Learn More'),
+					description: '',
+
+					id: MessageAction.learnMore
 				}, {
-					title: localize('close', 'Close'),
-					id: MessageAction.close,
-					isCloseAffordance: true,
+					label: localize('close', 'Close'),
+					description: '',
+					id: MessageAction.close
+				}],
+				{
+					placeHolder: localize(
+						'versionCheckUsingBundledTS',
+						'Using VSCode\'s TypeScript version {0} for Typescript language features.',
+						shippedVersion),
 				});
 		}
 
+		const tryShowRestart = (newModulePath: string) => {
+			if (newModulePath === this.modulePath) {
+				return;
+			}
+
+			window.showInformationMessage<MessageItem>(
+				localize('restartBlurb', 'Restart VSCode to apply change'),",We don't use `restart` anywhere else. I think we should use `Reload window to apply changes`.,2017-01-27 02:30:14
229,"@@ -4164,6 +4167,33 @@ export var EventType = {
 };
 
 /**
+ * Positions on the view
+ */
+export const ViewPosition = {","I suggest renaming `ViewPosition` to `MoveCommandViewPosition` or something more specific -- for someone looking at `monaco.d.ts` the current name might be very confusing, as it is simply typing an argument to a specific command and is not a new concept of `Position` <-> `ViewPosition`.
",2016-07-15 11:18:43
227,"@@ -4164,6 +4167,33 @@ export var EventType = {
 };
 
 /**
+ * Positions on the view
+ */
+export const ViewPosition = {
+	LineStart: 'lineStart',
+	LineFirstNonWhitespaceCharacter: 'lineFirstNonWhitespaceCharacter',","Sometimes referred to as ""soft start"". @jrieken @sandy081 -- would `lineSoftStart` be easier to program against?
",2016-07-15 11:16:46
228,"@@ -4164,6 +4167,33 @@ export var EventType = {
 };
 
 /**
+ * Positions on the view
+ */
+export const ViewPosition = {
+	LineStart: 'lineStart',
+	LineFirstNonWhitespaceCharacter: 'lineFirstNonWhitespaceCharacter',
+	LineCenter: 'lineCenter',
+	LineEnd: 'lineEnd',
+	LineLastNonWhitespaceCharacter: 'lineLastNonWhitespaceCharacter'","Same as above, `lineSoftEnd` -- would that be confusing?
",2016-07-15 11:17:09
225,"@@ -4164,6 +4167,33 @@ export var EventType = {
 };
 
 /**
+ * Positions on the view
+ */
+export const ViewPosition = {
+	LineStart: 'lineStart',
+	LineFirstNonWhitespaceCharacter: 'lineFirstNonWhitespaceCharacter',
+	LineCenter: 'lineCenter',
+	LineEnd: 'lineEnd',
+	LineLastNonWhitespaceCharacter: 'lineLastNonWhitespaceCharacter'
+};
+
+/**
+ * @internal
+ */
+export var CommandDescription= {","space before =
",2016-07-15 11:13:54
226,"@@ -4164,6 +4167,33 @@ export var EventType = {
 };
 
 /**
+ * Positions on the view
+ */
+export const ViewPosition = {
+	LineStart: 'lineStart',
+	LineFirstNonWhitespaceCharacter: 'lineFirstNonWhitespaceCharacter',
+	LineCenter: 'lineCenter',
+	LineEnd: 'lineEnd',
+	LineLastNonWhitespaceCharacter: 'lineLastNonWhitespaceCharacter'
+};
+
+/**
+ * @internal
+ */
+export var CommandDescription= {
+	CursorMove: <ICommandHandlerDescription>{
+		description: nls.localize('editorCommand.cursorMove.description', ""Move cursor to a logical position in the view""),
+		args: [
+			{","@jrieken Is this correct? I think the name and description should apply to `firstArgument.to` not to `firstArgument`.
",2016-07-15 11:15:35
159,"@@ -42,6 +42,26 @@ configurationRegistry.registerConfiguration({
 			'description': nls.localize('terminal.integrated.fontFamily', ""The font family used by the terminal (CSS font-family format).""),
 			'type': 'string',
 			'default': 'Menlo, Monaco, Consolas, ""Droid Sans Mono"", ""Courier New"", monospace, ""Droid Sans Fallback""'
+		},
+		'terminal.integrated.fontSize': {
+			'description': nls.localize('terminal.integrated.fontSize', ""The font size used by the terminal (CSS font-size format).""),
+			'type': 'string',
+			'default': ''
+		},
+		'terminal.integrated.lineHeight': {
+			'description': nls.localize('terminal.integrated.lineHeight', ""The line height used by the terminal (CSS line height format).""),
+			'type': 'string',
+			'default': ''
+		},
+		'terminal.integrated.charWidth': {","I think https://github.com/Microsoft/vscode/issues/6456 should be figured out before the font size and line height is added to prevent addition the `charWidth`/`charHeight` settings.
",2016-05-28 20:51:32
553,"@@ -42,6 +42,7 @@ export interface IEnvironmentService {
 
 	execPath: string;
 	appRoot: string;
+	vscodeWindowId: string;","@Tyriar we cannot really add this here because environment service is agnostic to windows, we have one in the shared process as well as the CLI. I suggest to put this into the `IWindowService` on the renderer side.",2016-12-01 16:29:03
989,"@@ -422,4 +423,13 @@ export function registerCommands(): void {
 			return void 0;
 		});
 	});
+
+	CommandsRegistry.registerCommand('_workbench.quickOpen', function (accessor: ServicesAccessor, args: [string, IShowOptions]) {
+		const quickOpenService = accessor.get(IQuickOpenService);",Remove `IShowOptions`,2017-06-19 10:40:16
360,"@@ -424,6 +435,10 @@ export class HistoryService extends BaseHistoryService implements IHistoryServic
 		}
 	}
 
+	private isEditorEagerlyPreviewing(editor: IBaseEditor): boolean {","@wprater why is this method needed? We already have the `block()` method for this purpose and should only rely on that.
",2016-10-21 09:53:51
744,"@@ -424,6 +450,36 @@ class MouseDownOperation extends Disposable {
 		// Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.
 		e.detail = this._mouseState.count;
 
+		if (!this._mouseState.altKey // we don't support multiple mouse",We should also include a test for an editor option here. `editor.dragAndDrop` or something... `this._context.configuration.editor` is available in this class.,2017-02-20 11:28:17
741,"@@ -424,6 +450,36 @@ class MouseDownOperation extends Disposable {
 		// Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.
 		e.detail = this._mouseState.count;
 
+		if (!this._mouseState.altKey // we don't support multiple mouse
+			&& e.detail < 2 // only single click on a selection can work
+			&& !this._isActive // the mouse is not down yet
+			&& !this._currentSelection.isEmpty() // we don't drag single cursor
+			&& this._currentSelection.containsPosition(position.position) // single click on a selection
+		) {
+			this._isActive = true;
+			this._dropTarget = this._createMouseTarget(e, true);",This is where `this._mouseState.setMouseDownEvent('drag');` should be set,2017-02-20 11:10:51
742,"@@ -424,6 +450,36 @@ class MouseDownOperation extends Disposable {
 		// Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.
 		e.detail = this._mouseState.count;
 
+		if (!this._mouseState.altKey // we don't support multiple mouse
+			&& e.detail < 2 // only single click on a selection can work
+			&& !this._isActive // the mouse is not down yet
+			&& !this._currentSelection.isEmpty() // we don't drag single cursor
+			&& this._currentSelection.containsPosition(position.position) // single click on a selection
+		) {
+			this._isActive = true;
+			this._dropTarget = this._createMouseTarget(e, true);
+
+			this._mouseMoveMonitor.startMonitoring(
+				createMouseMoveEventMerger(null),
+				this._mouseDragThenMoveEventHandler.handler,
+				() => {
+					if (this._mouseState.lastMouseDownEvent !== 'drag') {","when can this happen?

IMHO the mouseState is set to `drag` or `mouseDown` and it should not change while the mouse is pressed (i.e. while the global mouse monitoring is active). ",2017-02-20 11:11:55
891,"@@ -425,11 +431,20 @@ export class VSCodeWindow {
 	}
 
 	private onConfigurationUpdated(config: IConfiguration): void {
-		const newMenuBarVisibility = this.getMenuBarVisibility(config);
+		const newMenuBarVisibility = this.getMenuBarVisibility();
 		if (newMenuBarVisibility !== this.currentMenuBarVisibility) {
 			this.currentMenuBarVisibility = newMenuBarVisibility;
 			this.setMenuBarVisibility(newMenuBarVisibility);
 		}
+
+		// Swipe command support (macOS)
+		const workbenchConfig = this.configurationService.getConfiguration<IWorkbenchEditorConfiguration>();
+		if (workbenchConfig && workbenchConfig.workbench && workbenchConfig.workbench.editor.swipeBetweenOpenFiles) {","Careful here, `workbenchConfig.workbench.editor` can be `null` so we need another `null` check.",2017-04-18 05:52:20
490,"@@ -426,6 +430,11 @@ export class VSCodeWindow {
 		delete configuration.filesToCreate;
 		delete configuration.filesToDiff;
 
+		// Update untitled files to restore so they come through in the reloaded window","@Tyriar I am thinking more and more that untitled editors with backups should not be loaded from the main side but rather from the window itself. Files for example restore because we store their state into local storage (via `IEditorInputFactory` -  see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/common/editor/editorStacksModel.ts#L621).

If we add a factory for untitled editors, we would just rely on that to bring the untitled back on reopen. It would also fix the issue that untitled would reopen at the right location where they where before. 
",2016-11-15 05:58:48
464,"@@ -426,6 +430,11 @@ export class VSCodeWindow {
 		delete configuration.filesToCreate;
 		delete configuration.filesToDiff;
 
+		// Update untitled files to restore so they come through in the reloaded window
+		configuration.untitledToRestore = this.backupService.getWorkspaceUntitledFileBackupsSync(Uri.file(configuration.workspacePath)).map(filePath => {","@Tyriar not a big fan of all the sync fs calls. Why can the state of backups not be in memory in the backup service? there should be no other process writing to the file or?
",2016-11-09 07:15:07
465,"@@ -426,6 +430,11 @@ export class VSCodeWindow {
 		delete configuration.filesToCreate;
 		delete configuration.filesToDiff;
 
+		// Update untitled files to restore so they come through in the reloaded window
+		configuration.untitledToRestore = this.backupService.getWorkspaceUntitledFileBackupsSync(Uri.file(configuration.workspacePath)).map(filePath => {
+			return { filePath: filePath };","@Tyriar TS allows you a nicer short hand syntax here:

`return { filePath };`
",2016-11-09 07:15:32
153,"@@ -43,12 +43,13 @@ export enum TokenType {
 	Resolution,
 	Comma,
 	Charset,
-
 	EscapedJavaScript,
 	BadEscapedJavaScript,
 	Comment,
 	SingleLineComment,
 	EOF,
+	Var,","we shouldn't have a special token for `var`. `var` should stay an identifier as there might be selectors of that name, or many other places where `var` is a valid identifier.
",2016-05-20 10:02:48
339,"@@ -43,7 +43,8 @@ export interface IAutoFocus {
 
 export enum Mode {
 	PREVIEW,
-	OPEN
+	OPEN,
+	OPEN_BEHIND","@wprater maybe better ""OPEN_IN_BACKGROUND""?
",2016-10-18 09:36:24
687,"@@ -431,11 +430,7 @@ export class RawDebugSession extends v8.V8Protocol implements debug.ISession {
 	}
 
 	private startServer(): TPromise<any> {
-		if (!this.adapter.program) {
-			return TPromise.wrapError(new Error(nls.localize('noDebugAdapterExtensionInstalled', ""No extension installed for '{0}' debugging."", this.adapter.type)));
-		}
-
-		return this.getLaunchDetails().then(d => this.launchServer(d).then(() => {
+		return this.adapter.getAdapterExecutable().then(d => this.launchServer(d).then(() => {",`d` is the wrong acronym here,2017-01-18 14:11:21
436,"@@ -438,8 +438,7 @@ export class VSCodeMenu {
 	private createOpenRecentMenuItem(path: string): Electron.MenuItem {
 		return new MenuItem({
 			label: unMnemonicLabel(path), click: (menuItem, win, event) => {
-				const openInNewWindow = event && ((!platform.isMacintosh && event.ctrlKey) || (platform.isMacintosh && event.metaKey));
-				const success = !!this.windowsService.open({ cli: this.environmentService.args, pathsToOpen: [path], forceNewWindow: openInNewWindow });
+				const success = !!this.windowsService.open({ cli: this.environmentService.args, pathsToOpen: [path] });","@elemongw can we keep the semantic of forcing a new window when the user presses the Ctrl/Meta key? I see no reason to remove it.
",2016-11-03 07:30:40
192,"@@ -44,20 +44,20 @@
 },
 {
 	""name"": ""libchromiumcontent"",
-	""version"": ""49.0.2623.75"",
+	""version"": ""51.0.2704.103"",
 	""license"": ""MIT"",
 	""repositoryURL"": ""https://github.com/electron/libchromiumcontent"",
 	""isProd"": true
 },
 {
 	""name"": ""nodejs"",
-	""version"": ""5.10.0"",
+	""version"": ""6.10.0"",","@bpasero, that's a bit wrong, isn't it? :cat:

Current version Node.js: v6.2.2
Current version Node.js in Electron: 6.1.0
",2016-07-02 13:31:12
173,"@@ -44,22 +42,23 @@ export class TerminalPanel extends Panel {
 		@IThemeService private themeService: IThemeService
 	) {
 		super(TERMINAL_PANEL_ID, telemetryService);
-		this.configurationHelper = new TerminalConfigHelper(platform.platform, this.configurationService, this.themeService);
 		this.toDispose = [];
 	}
 
 	public layout(dimension: Dimension): void {
-		let cols = Math.floor(this.parentDomElement.offsetWidth / TERMINAL_CHAR_WIDTH);
-		let rows = Math.floor(this.parentDomElement.offsetHeight / TERMINAL_CHAR_HEIGHT);
-		if (this.terminal) {
-			this.terminal.resize(cols, rows);
-		}
-		if (this.ptyProcess.connected) {
-			this.ptyProcess.send({
-				event: 'resize',
-				cols: cols,
-				rows: rows
-			});
+		if (this.font.charWidth && this.font.charHeight) {","Prefer early exits to keep indentation low:

```
if (!this.font.charWidth || !this.font.charHeight) {
    return;
}
```

Also should this attempt to measure at this point or would that just be rework?
",2016-06-02 20:21:21
777,"@@ -44,26 +41,22 @@ export default class MarkdownDocumentLinkProvider implements vscode.DocumentLink
 		return results;
 	}
 
-	private normalizeLink(link: string, base: string, toc: TableOfContentProvider): vscode.Uri {
-		let uri = vscode.Uri.parse(link);
-		if (!uri.scheme) {
-			if (uri.fragment && !uri.path) {
-				// local link
-				const line = toc.lookup(uri.fragment);
-				if (!isNaN(line)) {
-					return vscode.Uri.parse(`command:revealLine?${encodeURIComponent(JSON.stringify({ lineNumber: line, at: 'top' }))}`);
-				}
-			}
+	private normalizeLink(document: vscode.TextDocument, link: string, base: string): vscode.Uri {
+		const uri = vscode.Uri.parse(link);
+		if (uri.scheme) {
+			return uri;
+		}
 
-			// assume it must be a file
-			let file;
-			if (uri.path[0] === '/') {
-				file = path.join(vscode.workspace.rootPath, uri.path);
-			} else {
-				file = path.join(base, uri.path);
-			}
-			uri = vscode.Uri.file(file);
+		// assume it must be a file
+		let resourcePath;
+		if (!uri.path) {
+			resourcePath = document.uri.path;
+		} else if (uri.path[0] === '/') {
+			resourcePath = path.join(vscode.workspace.rootPath, uri.path);
+		} else {
+			resourcePath = path.join(base, uri.path);
 		}
-		return uri;
+
+		return vscode.Uri.parse(`command:_markdown.openDocumentLink?${encodeURIComponent(JSON.stringify({ fragment: uri.fragment, path: resourcePath }))}`);","This is a lot of code for using an URI that goes like this: `file:///files/thisFile.md#L22`. Unless there are bugs which I would happily fix, the `OpenerService` should handle such links correctly.",2017-02-24 11:39:50
452,"@@ -440,6 +440,7 @@ export class EditorOptions implements IEditorOptions {
 		options.forceOpen = settings.forceOpen;
 		options.revealIfVisible = settings.revealIfVisible;
 		options.pinned = settings.pinned;
+		options.forcePreview = settings.forcePreview;","@wprater can you quickly check where else in this file options are handled, I think you missed to add this new flag e.g. to `TextDiffEditorOptions`
",2016-11-05 07:32:13
285,"@@ -441,66 +441,81 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 		// A save participant can still change the model now and since we are so close to saving
 		// we do not want to trigger another auto save or similar, so we block this
 		// In addition we update our version right after in case it changed because of a model change
+		let saveParticipantPromise = TPromise.as(versionId);
+
 		if (TextFileEditorModel.saveParticipant) {
-			this.blockModelContentChange = true;
-			try {
-				TextFileEditorModel.saveParticipant.participate(this, { isAutoSaved });
-			} finally {
+			saveParticipantPromise = TPromise.as(undefined).then(() => {
+				this.blockModelContentChange = true;
+				return TextFileEditorModel.saveParticipant.participate(this, { isAutoSaved });
+			}).then(() => {
 				this.blockModelContentChange = false;
-			}
-			versionId = this.versionId;
+				return this.versionId;
+			}, err => {
+				this.blockModelContentChange = false;
+				return TPromise.wrapError(err);","@jrieken this is a semantical change from how it worked before where a save participant error would never make the save operation fail. maybe we should ignore the possible errors from save participants (especially since they can now come from extensions) and always allow the save to take place.
",2016-09-21 06:23:59
286,"@@ -441,66 +441,81 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 		// A save participant can still change the model now and since we are so close to saving
 		// we do not want to trigger another auto save or similar, so we block this
 		// In addition we update our version right after in case it changed because of a model change
+		let saveParticipantPromise = TPromise.as(versionId);
+
 		if (TextFileEditorModel.saveParticipant) {
-			this.blockModelContentChange = true;
-			try {
-				TextFileEditorModel.saveParticipant.participate(this, { isAutoSaved });
-			} finally {
+			saveParticipantPromise = TPromise.as(undefined).then(() => {
+				this.blockModelContentChange = true;
+				return TextFileEditorModel.saveParticipant.participate(this, { isAutoSaved });
+			}).then(() => {
 				this.blockModelContentChange = false;
-			}
-			versionId = this.versionId;
+				return this.versionId;
+			}, err => {
+				this.blockModelContentChange = false;
+				return TPromise.wrapError(err);
+			});
 		}
 
-		// Clear error flag since we are trying to save again
-		this.inErrorMode = false;
+		this.mapPendingSaveToVersionId[versionId] = saveParticipantPromise.then(newVersionId => {","@jrieken is there a reason why you chose to store the save participant into `mapPendingSaveToVersionId`, then delete it and later store it in `mapPendingSaveToVersionId` again for the `updateContent` call?

Easier to read and understand, I suggest to store the save participant promise into `mapPendingSaveToVersionId` as you do now, but do not delete it right after. Rather let the promise from `this.fileService.updateContent` also contribute to the overall pending save. 

In other words, a pending save is the sum of running save participants and saving to disk.
",2016-09-21 06:27:04
287,"@@ -441,66 +441,81 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 		// A save participant can still change the model now and since we are so close to saving
 		// we do not want to trigger another auto save or similar, so we block this
 		// In addition we update our version right after in case it changed because of a model change
+		let saveParticipantPromise = TPromise.as(versionId);
+
 		if (TextFileEditorModel.saveParticipant) {
-			this.blockModelContentChange = true;
-			try {
-				TextFileEditorModel.saveParticipant.participate(this, { isAutoSaved });
-			} finally {
+			saveParticipantPromise = TPromise.as(undefined).then(() => {
+				this.blockModelContentChange = true;
+				return TextFileEditorModel.saveParticipant.participate(this, { isAutoSaved });
+			}).then(() => {
 				this.blockModelContentChange = false;
-			}
-			versionId = this.versionId;
+				return this.versionId;
+			}, err => {
+				this.blockModelContentChange = false;
+				return TPromise.wrapError(err);
+			});
 		}
 
-		// Clear error flag since we are trying to save again
-		this.inErrorMode = false;
+		this.mapPendingSaveToVersionId[versionId] = saveParticipantPromise.then(newVersionId => {
 
-		// Remember when this model was saved last
-		this.lastSaveAttemptTime = Date.now();
-
-		// Save to Disk
-		diag(`doSave(${versionId}) - before updateContent()`, this.resource, new Date());
-		this.mapPendingSaveToVersionId[versionId] = this.fileService.updateContent(this.versionOnDiskStat.resource, this.getValue(), {
-			overwriteReadonly: overwriteReadonly,
-			overwriteEncoding: overwriteEncoding,
-			mtime: this.versionOnDiskStat.mtime,
-			encoding: this.getEncoding(),
-			etag: this.versionOnDiskStat.etag
-		}).then((stat: IFileStat) => {
-			diag(`doSave(${versionId}) - after updateContent()`, this.resource, new Date());
-
-			// Remove from pending saves
+			// remove save participant promise and update versionId with
+			// its new value (if pre-save changes happened)
 			delete this.mapPendingSaveToVersionId[versionId];
+			versionId = newVersionId;
 
-			// Telemetry
-			this.telemetryService.publicLog('filePUT', { mimeType: stat.mime, ext: paths.extname(this.versionOnDiskStat.resource.fsPath) });
+			// Clear error flag since we are trying to save again
+			this.inErrorMode = false;
 
-			// Update dirty state unless model has changed meanwhile
-			if (versionId === this.versionId) {
-				diag(`doSave(${versionId}) - setting dirty to false because versionId did not change`, this.resource, new Date());
-				this.setDirty(false);
-			} else {
-				diag(`doSave(${versionId}) - not setting dirty to false because versionId did change meanwhile`, this.resource, new Date());
-			}
+			// Remember when this model was saved last
+			this.lastSaveAttemptTime = Date.now();
+
+			// Save to Disk
+			diag(`doSave(${versionId}) - before updateContent()`, this.resource, new Date());
+			this.mapPendingSaveToVersionId[versionId] = this.fileService.updateContent(this.versionOnDiskStat.resource, this.getValue(), {","@jrieken as per my comment above I would here just return the promise and not add it to the map, since it is already added from the save participant.
",2016-09-21 06:27:33
561,"@@ -441,7 +441,17 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		// Handle empty
-		if (emptyToOpen.length > 0) {
+		if (emptyToRestore.length > 0) {
+			emptyToRestore.forEach(backupFolder => {
+				const configuration = this.toConfiguration(openConfig, null, null, null, null, backupFolder);","@Tyriar something is weird about `backupFolder`. As someone that tries to understand the code I would assume every window has an associated `backupFolder`. but that is not true, only the empty windows to restore have it. I would make this more obvious. Maybe remove the property from `IWindowConfiguration` and just pass it into `openInBrowserWindow` method? Also needs a clearer name to make its meaning more obvious.",2016-12-02 06:53:45
558,"@@ -441,7 +441,17 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		// Handle empty
-		if (emptyToOpen.length > 0) {
+		if (emptyToRestore.length > 0) {
+			emptyToRestore.forEach(backupFolder => {
+				const configuration = this.toConfiguration(openConfig, null, null, null, null, backupFolder);
+				const browserWindow = this.openInBrowserWindow(configuration, openInNewWindow, openInNewWindow ? void 0 : openConfig.windowToUse);","@Tyriar we always want each of these windows to open inside a new window so I suggest to just call 

`const browserWindow = this.openInBrowserWindow(configuration, true /* new window */);`

In the same way as we do for restoring folders.",2016-12-02 06:43:30
550,"@@ -441,7 +442,20 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		// Handle empty
-		if (emptyToOpen.length > 0) {
+		if (emptyToRestore.length > 0) {
+			// TODO: There's an extra empty workspace opening when restoring an empty workspace (sometimes)
+			emptyToRestore.forEach(vscodeWindowId => {
+				const configuration = this.toConfiguration(openConfig);
+				configuration.vscodeWindowId = vscodeWindowId;",@Tyriar why is this done here and not inside the `toConfiguration` method?,2016-12-01 16:24:01
562,"@@ -444,7 +444,7 @@ export class WindowsManager implements IWindowsMainService {
 		if (emptyToRestore.length > 0) {
 			emptyToRestore.forEach(emptyWorkspaceBackupFolder => {
 				const configuration = this.toConfiguration(openConfig, null, null, null, null);
-				const browserWindow = this.openInBrowserWindow(configuration, openInNewWindow, openInNewWindow ? void 0 : openConfig.windowToUse, emptyWorkspaceBackupFolder);
+				const browserWindow = this.openInBrowserWindow(configuration, true /* new window */, openInNewWindow ? void 0 : openConfig.windowToUse, emptyWorkspaceBackupFolder);",@Tyriar I would not assume we have a `windowToUse` in this case ever?,2016-12-02 08:27:20
57,"@@ -45,3 +29,25 @@ registerMode({
 	moduleId: 'vs/workbench/parts/output/common/outputMode',
 	ctorName: 'OutputMode'
 });
+
+// Register Output Panel
+(<panel.PanelRegistry>platform.Registry.as(panel.Extensions.Panels)).registerPanel(new panel.PanelDescriptor(","@isidorn do not forget to add the panel to the same buildfile.js where we added REPL so that the loader can load it
",2016-01-21 15:54:22
58,"@@ -45,3 +29,25 @@ registerMode({
 	moduleId: 'vs/workbench/parts/output/common/outputMode',
 	ctorName: 'OutputMode'
 });
+
+// Register Output Panel
+(<panel.PanelRegistry>platform.Registry.as(panel.Extensions.Panels)).registerPanel(new panel.PanelDescriptor(
+	'vs/workbench/parts/output/browser/outputPanel',
+	'OutputPanel',
+	OUTPUT_PANEL_ID,
+	nls.localize('output', ""Output""),
+	'output',
+	40","@isidorn I dont think we need the ""order"" property for panels, it is used for showing the actions in the activity bar only
",2016-01-21 15:55:43
198,"@@ -45,6 +47,19 @@ KeybindingsRegistry.registerCommandDesc({
 
 type ApiThemeClassName = 'vscode-light' | 'vscode-dark' | 'vscode-high-contrast';
 
+function isDefaultKeyboardEvent(e: KeyboardEvent): boolean {
+	let keyEvent = new StandardKeyboardEvent(e);
+	let keybinding = keyEvent.asKeybinding();
+	switch (keybinding) {
+		case KeyMod.CtrlCmd | KeyCode.KEY_C:
+		case KeyMod.CtrlCmd | KeyCode.KEY_V:
+		case KeyMod.CtrlCmd | KeyCode.KEY_X:
+		case KeyMod.CtrlCmd | KeyCode.KEY_A:","this is bad
",2016-07-06 13:51:08
500,"@@ -45,7 +42,7 @@ script:
   - gulp electron
   - gulp compile
   - gulp optimize-vscode
-  - if [[ ""$TRAVIS_OS_NAME"" == ""linux"" ]]; then ./scripts/test.sh --coverage; else ./scripts/test.sh; fi
+  - if [[ ""$TRAVIS_OS_NAME"" == ""linux"" ]]; then ./scripts/test.sh --no-colors --reporter dot --coverage; else ./scripts/test.sh --no-colors --reporter dot; fi",Awesome. Why take out the colors though? Red is what I usually look for when looking at travis.,2016-11-21 15:06:04
205,"@@ -45,7 +49,7 @@ export class TerminalInstance {
 		this.xterm.on('data', (data) => {
 			this.terminalProcess.process.send({
 				event: 'input',
-				data: data
+				data: data && data.replace(TerminalInstance.eolRegex, os.EOL)","This should be split out above for clarity, it looks like it's passing in a boolean right now.
",2016-07-08 00:37:09
557,"@@ -458,10 +458,10 @@ export class Workbench implements IPartService {
 
 		// Backup File Service
 		const workspace = this.contextService.getWorkspace();
-		serviceCollection.set(IBackupFileService, this.instantiationService.createInstance(BackupFileService, workspace ? workspace.resource : null));
+		serviceCollection.set(IBackupFileService, this.instantiationService.createInstance(BackupFileService, this.windowService.getCurrentWindowId()));",@Tyriar why not let backup file service depend on windows service to get the ID?,2016-12-02 06:40:03
829,"@@ -46,18 +47,9 @@ export class ContextValuesContainer {
 		}
 		return ret;
 	}
-
-	public fillInContext(bucket: any): void {
-		if (this._parent) {
-			this._parent.fillInContext(bucket);
-		}
-		for (let key in this._value) {
-			bucket[key] = this._value[key];
-		}
-	}","@joaomoreno I might be missing something but I don't find the place in which now child-context overwrites the values of it's parent. Like, a peek view editor which has `findWidgetVisible: false` and its parent editor/context having `findWidgetVisible: true`",2017-03-16 14:30:55
371,"@@ -46,7 +45,7 @@ export class FileEditorInput extends CommonFileEditorInput {
 		@IHistoryService private historyService: IHistoryService,
 		@IEventService private eventService: IEventService,
 		@ITextFileService private textFileService: ITextFileService,
-		@IBackupService private backupService: IBackupService
+		@IBackupFileService private backupFileService: IBackupFileService","Unused member
",2016-10-21 13:51:08
293,"@@ -462,6 +471,10 @@ export abstract class TitleControl implements ITitleAreaControl {
 			actions.push(new Separator(), this.pinEditorAction);
 		}
 
+		const titleBarMenu = this.menuService.createMenu(MenuId.EditorTab, this.contextKeyService);","Since you update the context key you don't need to create/dispose the menu as it will update when the context keys change. 
",2016-10-04 10:50:56
970,"@@ -462,7 +462,9 @@ export class ActivitybarPart extends Part implements IActivityBarService {
 			const index = this.pinnedViewlets.indexOf(viewletId);
 			this.pinnedViewlets.splice(index, 1);
 
-			this.updateViewletSwitcher();
+			if (this.viewletSwitcherBar) {",@nicksnyder should we not just move this check into the `updateViewletSwitcher` method? There are many more places where we call it.,2017-06-13 04:33:27
640,"@@ -466,11 +466,20 @@ export class SnippetController {
 		return SnippetController.ID;
 	}
 
+	public get inSnippetMode() {
+		return this._inSnippetMode.get();
+	}
+
 	public insertSnippet(template: string, overwriteBefore: number, overwriteAfter: number): void {
 		const snippet = CodeSnippet.fromTextmate(template, this._variableResolver);
 		this.run(snippet, overwriteBefore, overwriteAfter);
 	}
 
+	public insertSnippetWithReplaceRange(template: string, replaceRange: Range): void {",We should try to get away with just using `insertSnippet`. The controller is already complex ,2016-12-21 08:23:13
884,"@@ -47,47 +47,267 @@ class TestWorkspace implements IWorkspace {
 suite('Workbench - TerminalLinkHandler', () => {
 	suite('localLinkRegex', () => {
 		test('Windows', () => {
-			const regex = new TestTerminalLinkHandler(new TestXterm(), Platform.Windows, null, null).localLinkRegex;
-			function testLink(link: string) {
-				assert.equal(` ${link} `.match(regex)[1], link);
-				assert.equal(`:${link}:`.match(regex)[1], link);
-				assert.equal(`;${link};`.match(regex)[1], link);
-				assert.equal(`(${link})`.match(regex)[1], link);
+			const terminalLinkHandler = new TestTerminalLinkHandler(new TestXterm(), Platform.Windows, null, null, null);
+			function testLink(link: string, linkUrl: string, lineNo?: string, columnNo?: string) {
+				assert.equal(terminalLinkHandler.extractLinkUrl(link), linkUrl);
+				assert.equal(terminalLinkHandler.extractLinkUrl(`:${link}:`), linkUrl);
+				assert.equal(terminalLinkHandler.extractLinkUrl(`;${link};`), linkUrl);
+				assert.equal(terminalLinkHandler.extractLinkUrl(`(${link})`), linkUrl);
+
+				if (lineNo) {
+					const lineColumnInfo: LineColumnInfo = terminalLinkHandler.extractLineColumnInfo(link);
+					assert.equal(lineColumnInfo.lineNumber, lineNo);
+
+					if (columnNo) {
+						assert.equal(lineColumnInfo.columnNumber, columnNo);
+					}
+				}
 			}
-			testLink('c:\\foo');
-			testLink('c:/foo');
-			testLink('.\\foo');
-			testLink('./foo');
-			testLink('..\\foo');
-			testLink('../foo');
-			testLink('~\\foo');
-			testLink('~/foo');
-			testLink('c:/a/long/path');
-			testLink('c:\\a\\long\\path');
-			testLink('c:\\mixed/slash\\path');
-			testLink('a/relative/path');
+
+			testLink('c:\\foo', 'c:\\foo');
+			testLink('c:/foo', 'c:/foo');
+			testLink('.\\foo', '.\\foo');
+			testLink('./foo', './foo');
+			testLink('..\\foo', '..\\foo');
+			testLink('../foo', '../foo');
+			testLink('~\\foo', '~\\foo');
+			testLink('~/foo', '~/foo');
+			testLink('c:/a/long/path', 'c:/a/long/path');
+			testLink('c:\\a\\long\\path', 'c:\\a\\long\\path');
+			testLink('c:\\mixed/slash\\path', 'c:\\mixed/slash\\path');
+			testLink('a/relative/path', 'a/relative/path');
+
+			// With line and column number.
+			testLink('c:\\foo:5', 'c:\\foo', '5');
+			testLink('c:\\foo:5:3', 'c:\\foo', '5', '3');
+			testLink('c:\\foo:line 5', 'c:\\foo', '5');
+			testLink('c:\\foo:line 5, column 3', 'c:\\foo', '5', '3');
+			testLink('c:\\foo(5)', 'c:\\foo', '5');
+			testLink('c:\\foo(5,3)', 'c:\\foo', '5', '3');
+			testLink('c:\\foo (5)', 'c:\\foo', '5');
+			testLink('c:\\foo (5,3)', 'c:\\foo', '5', '3');
+			testLink('c:\\foo on line 5', 'c:\\foo', '5');
+			testLink('c:\\foo on line 5, column 3', 'c:\\foo', '5', '3');
+
+			testLink('c:/foo:5', 'c:/foo', '5');
+			testLink('c:/foo:5:3', 'c:/foo', '5', '3');
+			testLink('c:/foo:line 5', 'c:/foo', '5');
+			testLink('c:/foo:line 5, column 3', 'c:/foo', '5', '3');
+			testLink('c:/foo(5)', 'c:/foo', '5');",It would be good to have example programs that output each format (and only add them if we have an example).,2017-04-17 17:38:06
958,"@@ -47,7 +47,7 @@ class ResourceModelCollection extends ReferenceCollection<TPromise<ITextEditorMo
 			} else {
 				model.dispose();
 			}
-		});
+		}, () => void 0);",Not sure if we should log here or add some other handler. We do add catch callbacks  at higher levels that do error handling when the file does not exist. These still should be invoked after this change,2017-06-05 22:23:56
386,"@@ -470,7 +492,11 @@ export class WorkbenchLayout implements IVerticalSashLayoutProvider, IHorizontal
 		}
 
 		// Activity Bar Part
-		this.activitybar.getContainer().size(null, activityBarSize.height);
+		if (windowConfig && windowConfig.window.macOSUseInlineToolbar) {","Instead of duplicating the same code, the `activityBarSize` should be used in both cases. I know it was not used before but I do not think it would cause any harm.
",2016-10-24 14:18:58
146,"@@ -477,9 +477,7 @@ export class SuggestWidget implements IContentWidget, IDisposable {
 	}
 
 	private onModelModeChanged(): void {
-		const model = this.editor.getModel();
-		const supports = SuggestRegistry.all(model);
-		this.shouldShowEmptySuggestionList = supports.some(s => true);
+		this.shouldShowEmptySuggestionList = true;","all of this should be nuked. since the value of `shouldShowEmptySuggestionList` is now always true it should disappear, also we don't need to listen of mode change events anymore
",2016-05-03 09:12:27
368,"@@ -479,6 +483,21 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 
 		this.previousValue = prefix;
 
+		// Track active editor before navigation","@wprater what about the picker? I think you need to extract this into a reusable method so that you can also use it when the picker opens.
",2016-10-21 10:02:45
367,"@@ -479,6 +483,21 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 
 		this.previousValue = prefix;
 
+		// Track active editor before navigation
+		this.previousActiveEditorInput = this.editorService.getActiveEditorInput();","@wprater suggest to just use `activeGroup.activeEditor` here
",2016-10-21 10:01:58
366,"@@ -479,6 +483,21 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 
 		this.previousValue = prefix;
 
+		// Track active editor before navigation
+		this.previousActiveEditorInput = this.editorService.getActiveEditorInput();
+
+		// Determine if there was a preview editor already open
+		this.previousPreviewEditorInput = null;
+		const activeGroup = this.editorGroupService.getStacksModel().activeGroup;
+		if (activeGroup) {
+			const visiblePreviewEditors = activeGroup.getEditors().filter((input: EditorInput) => {","@wprater why not just `activeGroup.previewEditor` ?
",2016-10-21 10:01:24
144,"@@ -479,7 +479,7 @@ export class SuggestWidget implements IContentWidget, IDisposable {
 	private onModelModeChanged(): void {
 		const model = this.editor.getModel();
 		const supports = SuggestRegistry.all(model);
-		this.shouldShowEmptySuggestionList = supports.some(s => s.shouldShowEmptySuggestionList());
+		this.shouldShowEmptySuggestionList = supports.some(s => true);","just set it to `true`, not need for `some`
",2016-05-02 10:13:38
46,"@@ -48,33 +52,43 @@ interface ComputedStyles {
 /**
  * The workbench layout is responsible to lay out all parts that make the Monaco Workbench.
  */
-export class WorkbenchLayout implements IVerticalSashLayoutProvider {
+export class WorkbenchLayout implements IVerticalSashLayoutProvider, IHorizontalSashLayoutProvider {
 
-	private static sashWidthSettingsKey = 'workbench.sidebar.width';
+	private static sashXWidthSettingsKey = 'workbench.sidebar.width';
+	private static sashYHeightSettingsKey = 'workbench.panelpart.height';","=> workbench.panel.height
",2016-01-15 15:21:46
47,"@@ -48,33 +52,43 @@ interface ComputedStyles {
 /**
  * The workbench layout is responsible to lay out all parts that make the Monaco Workbench.
  */
-export class WorkbenchLayout implements IVerticalSashLayoutProvider {
+export class WorkbenchLayout implements IVerticalSashLayoutProvider, IHorizontalSashLayoutProvider {
 
-	private static sashWidthSettingsKey = 'workbench.sidebar.width';
+	private static sashXWidthSettingsKey = 'workbench.sidebar.width';
+	private static sashYHeightSettingsKey = 'workbench.panelpart.height';
 
 	private parent: Builder;
 	private workbenchContainer: Builder;
 	private activitybar: Part;
 	private editor: Part;
 	private sidebar: Part;
+	private panelPart: Part;
 	private statusbar: Part;
 	private quickopen: QuickOpenController;
 	private options: LayoutOptions;
 	private toUnbind: { (): void; }[];
 	private computedStyles: ComputedStyles;
-	private editorHeight: number;
 	private workbenchSize: Dimension;
-	private sash: Sash;
+	private sashX: Sash;
+	private sashY: Sash;
 	private startSidebarWidth: number;
 	private sidebarWidth: number;
+	private sidebarHeight: number;
+	private startPanelPartHeight: number;","@isidorn again easier to read the thing as ""panel"" unless you actually talk about the panelPart class. applies to multiple things in this file, not just here.
",2016-01-15 15:24:59
643,"@@ -48,6 +48,28 @@ export class TypeOperations {
 		);
 	}
 
+	public static shiftIndent(config: CursorConfiguration, indentation: string, count?: number): string {
+		count = count || 1;
+		let desiredIndentCount = ShiftCommand.shiftIndentCount(indentation, indentation.length + count, config.tabSize);
+		let newIndentation = '';",What about `let newIndentation = '\t'.repeat(desiredIntentCount);`?,2016-12-23 04:18:53
831,"@@ -48,6 +48,7 @@ ptyProcess.on('data', function (data) {
 });
 
 ptyProcess.on('exit', function (exitCode) {
+	ptyProcess.kill();","Thanks @chirag64!

Does everything seem to work fine? It's worth testing on Windows if you haven't. I was thinking we might need a timeout here before we kill `terminalProcess` or it could mess with the pty processes' shutdown.",2017-03-19 07:10:51
8,"@@ -48,6 +48,7 @@ var globals = <IGlobalScope><any> (typeof self === 'object' ? self : global);
 // IE: ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; MS-RTC LM 8; InfoPath.3; Zune 4.7)""
 // Opera:	""Opera/9.80 (Windows NT 6.1; U; en) Presto/2.9.168 Version/11.52""
 // FF: ""Mozilla/5.0 (Windows NT 6.1; WOW64; rv:8.0) Gecko/20100101 Firefox/8.0""
+// Edge: ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246""
 ","I don't think we need that comment at the moment
",2015-11-21 19:09:25
695,"@@ -48,6 +49,33 @@ export class ClearOutputAction extends Action {
 	}
 }
 
+export class ToggleOutputScrollLockAction extends Action {
+
+	public static ID = 'workbench.output.action.toggleOutputScrollLock';
+	public static LABEL = nls.localize('toggleOutputScrollLock', ""Toggle Output Scroll Lock"");
+
+	private toDispose: IDisposable[] = [];
+
+	constructor(id: string, label: string,
+		@IOutputService private outputService: IOutputService) {
+		super(id, label, 'output-action toggle-output-scroll-lock');
+		this.toDispose.push(this.outputService.onActiveOutputChannel(channel => this._setChecked(this.outputService.getActiveChannel().hasScrollLock)));
+	}
+
+	public run(): TPromise<any> {
+		const activeChannel = this.outputService.getActiveChannel();","What if there is no active output channel (output hidden) and this command is triggered from the command pallete?
You either need a null check here or even better do not register this action as a global workbench action as I do not see people assigning shortcuts to this action or triggering it via command pallete.",2017-01-19 10:05:00
492,"@@ -485,6 +510,9 @@ export class WindowsManager implements IWindowsMainService {
 			}
 		}
 
+		// Register new paths for backup
+		this.backupService.pushWorkspaceBackupPathsSync(iPathsToOpen.filter(p => p.workspacePath).map(p => Uri.file(p.workspacePath)));","@Tyriar should this only happen if hot exit is enabled in settings?
",2016-11-15 06:00:44
868,"@@ -488,6 +488,7 @@ export class TreeView extends HeightMap {
 		this.viewListeners.push(DOM.addDisposableListener(this.domNode, 'mousedown', (e) => this.onMouseDown(e)));
 		this.viewListeners.push(DOM.addDisposableListener(this.domNode, 'mouseup', (e) => this.onMouseUp(e)));
 		this.viewListeners.push(DOM.addDisposableListener(this.wrapper, 'click', (e) => this.onClick(e)));
+		this.viewListeners.push(DOM.addDisposableListener(this.wrapper, 'auxclick', (e) => this.onClick(e))); // >= Chrome 56","If AUXCLICK is getting disabled, why add an event listener for the event type?",2017-04-02 22:17:47
87,"@@ -49,14 +72,41 @@ export class MacTerminalService implements ITerminalService {
 			child.on('exit', (code: number) => {
 				c(code === 0 ? 'iterm.scpt' : 'terminal.scpt');
 			});
-		}).then(name => uri.parse(require.toUrl(`vs/workbench/parts/execution/electron-browser/${ name }`)).fsPath);
+		}).then(name => uri.parse(require.toUrl(`vs/workbench/parts/execution/electron-browser/${name}`)).fsPath);
 	}
 }
 
 export class LinuxTerminalService implements ITerminalService {
 	public serviceId = ITerminalService;
 
+	constructor(
+		@IConfigurationService private _configurationService: IConfigurationService
+	) { }
+
+
 	public openTerminal(path: string): void {
-		cp.spawn('x-terminal-emulator', [], { cwd: path });
+		this._configurationService.loadConfiguration().done(configuration => {
+			return new Promise((success, failed) => {
+				this.spawnTerminal(
+					cp,
+					configuration,
+					path,
+					success,
+					err => {
+						errors.onUnexpectedError(err);
+						failed(err);
+					}
+				);
+			});
+		}, errors.onUnexpectedError);
 	}
+
+	private spawnTerminal(spawner, configuration, path: string, onExit, onError) {
+		let terminalConfig = configuration.terminal;
+		let exec = terminalConfig.linux.exec || defaultLinuxTerm;
+		const child = spawner.spawn(exec, [], { cwd: path });","Does just setting the `cwd` work with `gnome-terminal`? You may need to pass in `--working-directory=path` for that?
",2016-03-24 01:40:03
956,"@@ -49,7 +51,11 @@ export class MergeConflictParser {
 				}
 
 				// Create a new conflict starting at this line
-				currentConflict = { startHeader: line };
+				currentConflict = { startHeader: line, commonAncestors: null };
+			}
+			// Are we within a conflict block and is this a common ancestors marker? |||||||
+			else if (currentConflict && line.text.startsWith(commonAncestorsMarker)) {
+				currentConflict.commonAncestors = line;","If, for some reason, we ended up with:

```
<<<<<<< HEAD
Foo
||||||| common
foo
||||||| common
fooo
=======
blah
>>>>>>> incoming
```

We will end up extending the ""current"" content over the first merge ancestor block. If we encounter two blocks of `|||||||` I think there are two thing we could do: 

 - Favorable: Don't overwrite `currentConflict.commonAncestors`, just leave it with the first occurrence, this way the current content block will span the correct range. (e.g. `else if (currentConflict && !currentConflict.commonAncestors && line.text.startsWith(commonAncestorsMarker))`
 - Break out of scanning (like we do if we encounter a start marker before an end marker), so we don't provide any decoration if we are unsure what to do. 

FWIW I think this is also true of existing `=======` scanning...",2017-05-30 16:09:15
839,"@@ -490,6 +490,18 @@ export class Thread implements IThread {
 		});
 	}
 
+	/**
+	 * Returns exception info promise if the exception was thrown and the debug adapter supports 'exceptionInfo' request, otherwise null
+	 */
+	public get exceptionInfo(): TPromise<DebugProtocol.ExceptionInfoResponse> {
+		const session = this.process.session;","I would love if the exception widget always calls this method.
And all the logic is in this method, meaning that if we are not stopped we return null, if the session does not supportExceptionInfoRequest we also return something",2017-03-21 17:07:29
844,"@@ -490,6 +490,18 @@ export class Thread implements IThread {
 		});
 	}
 
+	/**
+	 * Returns exception info promise if the exception was thrown and the debug adapter supports 'exceptionInfo' request, otherwise null
+	 */
+	public get exceptionInfo(): TPromise<DebugProtocol.ExceptionInfoResponse> {
+		const session = this.process.session;
+		if (session.capabilities.supportsExceptionInfoRequest && this.stoppedDetails && this.stoppedDetails.reason === 'exception') {","I do not like this check for this.stoppedDetails and this.stoppedDetails.reason === 'exception' since now we do it two times. Once before calling this method and once in the method.

We should do it in only one of those places - whichever feels better to you.
You just have to figure out what is the contract of this method and when should it be calle",2017-03-22 10:55:40
833,"@@ -490,6 +490,18 @@ export class Thread implements IThread {
 		});
 	}
 
+	/**
+	 * Returns exception info promise if the exception was thrown and the debug adapter supports 'exceptionInfo' request, otherwise null
+	 */
+	public get exceptionInfo(): TPromise<DebugProtocol.ExceptionInfoResponse> {
+		const session = this.process.session;
+		if (session.capabilities.supportsExceptionInfoRequest && this.stoppedDetails && this.stoppedDetails.reason === 'exception') {
+			return session.exceptionInfo({ threadId: this.threadId });
+		}
+
+		return null;","You can not just return `null` when a promise is expected, you should
`return TPromise.as(null)`",2017-03-21 17:00:23
44,"@@ -499,6 +533,42 @@ export class Workbench implements IPartService {
 		this.storageService.store(Workbench.sidebarHiddenSettingKey, hidden ? 'true' : 'false', StorageScope.WORKSPACE);
 	}
 
+	public isPanelPartHidden(): boolean {","@isidorn => isPanelHidden
",2016-01-15 15:19:03
45,"@@ -499,6 +533,42 @@ export class Workbench implements IPartService {
 		this.storageService.store(Workbench.sidebarHiddenSettingKey, hidden ? 'true' : 'false', StorageScope.WORKSPACE);
 	}
 
+	public isPanelPartHidden(): boolean {
+		return this.panelPartHidden;
+	}
+
+	public setPanelPartHidden(hidden: boolean, skipLayout?:boolean): void {","@isidorn => setPanelHidden
",2016-01-15 15:19:17
115,"@@ -5,14 +5,14 @@
 import fs = require('fs');
 import env = require('vs/base/common/platform');
 
-export let defaultLinuxTerm = 'x-terminal-emulator';
+export let DEFAULT_LINUX_TERM = 'x-terminal-emulator';
 
 // if we're not on debian and using gnome then
 // set default to gnome-terminal
 if (env.isLinux
 	&& fs.existsSync('/etc/debian_version') === false
 	&& process.env.DESKTOP_SESSION === 'gnome') {
-	defaultLinuxTerm = 'gnome-terminal';
+	DEFAULT_LINUX_TERM = 'gnome-terminal';
 }
 
-export const defaultWindowsTerm = 'cmd';
\ No newline at end of file
+export const DEFAILT_WINDOWS_TERM = 'cmd';","Typo DEFAULT
",2016-04-18 18:50:35
692,"@@ -5,15 +5,17 @@
 'use strict';
 
 import { localize } from 'vs/nls';
-import { WalkThroughInput } from 'vs/workbench/parts/walkThrough/common/walkThroughInput';
+import { WalkThroughInput } from 'vs/workbench/parts/walkThrough/node/walkThroughInput';
 import { WalkThroughPart } from 'vs/workbench/parts/walkThrough/electron-browser/walkThroughPart';
+import { WalkThroughContentProvider, WalkThroughSnippetContentProvider } from 'vs/workbench/parts/walkThrough/node/walkThroughContentProvider';
 import { EditorWalkThroughAction } from 'vs/workbench/parts/walkThrough/electron-browser/editor/editorWalkThrough';
 import { Registry } from 'vs/platform/platform';
 import { EditorDescriptor } from 'vs/workbench/browser/parts/editor/baseEditor';
 import { IEditorRegistry, Extensions as EditorExtensions } from 'vs/workbench/common/editor';
 import { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';
 import { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actionRegistry';
 import { SyncActionDescriptor } from 'vs/platform/actions/common/actions';
+import { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';
 
 (<IEditorRegistry>Registry.as(EditorExtensions.Editors)).registerEditor(new EditorDescriptor(WalkThroughPart.ID,",`Registry.as<IEditorRegistry>(EditorExtensions.Editors)`,2017-01-19 06:01:05
690,"@@ -5,16 +5,114 @@
 
 'use strict';
 
-let pageHeight = 0;
-
-window.onload = () => {
-	pageHeight = document.body.getBoundingClientRect().height;
-};
-
-window.addEventListener('resize', () => {
-	const currentOffset = window.scrollY;
-	const newPageHeight = document.body.getBoundingClientRect().height;
-	const dHeight = newPageHeight / pageHeight;
-	window.scrollTo(0, currentOffset * dHeight);
-	pageHeight = newPageHeight;
-}, true);
+(function () {
+	var pageHeight = 0;
+
+	/**
+	 * Find the elements around line.
+	 *
+	 * If an exact match, returns a single element. If the line is between elements,
+	 * returns the element before and the element after the given line.
+	 */
+	function getElementsAroundSourceLine(targetLine) {
+		const lines = document.getElementsByClassName('code-line');
+		let before = null;
+		for (const element of lines) {
+			const lineNumber = +element.getAttribute('data-line');
+			if (isNaN(lineNumber)) {
+				continue;
+			}
+			const entry = { line: lineNumber, element: element };
+			if (lineNumber === targetLine) {
+				return { before: entry, after: null };
+			} else if (lineNumber > targetLine) {
+				return { before, after: entry };
+			}
+			before = entry;
+		}
+		return { before };
+	}
+
+	function getSourceRevealAddedOffset() {
+		return -(window.innerHeight * 1 / 5);
+	}
+
+	/**
+	 * Attempt to reveal the element for a source line in the editor.
+	 */
+	function scrollToRevealSourceLine(line) {
+		const {before, after} = getElementsAroundSourceLine(line);
+		if (before) {
+			let scrollTo = 0;
+			if (after) {
+				// Between two elements. Go to percentage offset between them.
+				const betweenProgress = (line - before.line) / (after.line - before.line);
+				const elementOffset = after.element.getBoundingClientRect().top - before.element.getBoundingClientRect().top;
+				scrollTo = before.element.getBoundingClientRect().top + betweenProgress * elementOffset;
+			} else {
+				scrollTo = before.element.getBoundingClientRect().top;
+			}
+			window.scroll(0, window.scrollY + scrollTo + getSourceRevealAddedOffset());
+		}
+	}
+
+	function didUpdateScrollPosition(offset) {
+		const lines = document.getElementsByClassName('code-line');
+		let nearest = lines[0];
+		for (let i = lines.length - 1; i >= 0; --i) {
+			const lineElement = lines[i];
+			if (offset <= window.scrollY + lineElement.getBoundingClientRect().top + lineElement.getBoundingClientRect().height) {
+				nearest = lineElement;
+			} else {
+				break;
+			}
+		}
+
+		if (nearest) {
+			const line = +nearest.getAttribute('data-line');
+			const args = [window.initialData.source, line];
+			window.parent.postMessage({
+				command: ""did-click-link"",","This functionality is something we would probably want to standardize, similar to the `postMessage` command. Emulating clicks is pretty iffy.",2017-01-19 00:49:02
488,"@@ -5,19 +5,18 @@
 
 'use strict';
 
-import Uri from 'vs/base/common/uri';
 import { EventEmitter } from 'events';
 import { ipcMain as ipc, app } from 'electron';
 import { TPromise, TValueCallback } from 'vs/base/common/winjs.base';
 import { ReadyState, VSCodeWindow } from 'vs/code/electron-main/window';
 import { IEnvironmentService } from 'vs/platform/environment/common/environment';
 import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
-import { IBackupMainService } from 'vs/platform/backup/common/backup';
 import { ILogService } from 'vs/code/electron-main/log';
 import { IStorageService } from 'vs/code/electron-main/storage';
 
 const EventTypes = {
-	BEFORE_QUIT: 'before-quit'
+	BEFORE_QUIT: 'before-quit',
+	AFTER_UNLOAD: 'after-unload'","@Tyriar should this maybe be `BEFORE_CLOSE`? because the next thing that is going to happen after this event is the window closing.
",2016-11-15 05:40:10
544,"@@ -5,330 +5,178 @@
 
 'use strict';
 
-import * as strings from 'vs/base/common/strings';
+import uri from 'vs/base/common/uri';
 
-import * as fs from 'fs';
+import * as os from 'os';
 import * as path from 'path';
 
-import * as baseMime from 'vs/base/common/mime';
-import { ILineMatch, IProgress } from 'vs/platform/search/common/search';
-import { detectMimeAndEncodingFromBuffer } from 'vs/base/node/mime';
+import * as ipc from 'vs/base/parts/ipc/common/ipc';
+
+import { IProgress } from 'vs/platform/search/common/search';
 import { FileWalker } from 'vs/workbench/services/search/node/fileSearch';
-import { UTF16le, UTF16be, UTF8, UTF8_with_bom, encodingExists, decode } from 'vs/base/node/encoding';
 import { ISerializedFileMatch, ISerializedSearchComplete, IRawSearch, ISearchEngine } from './search';
+import { ISearchWorkerConfig, ISearchWorker, ISearchWorkerChannel, SearchWorkerChannelClient } from './worker/searchWorkerIpc';
 
-interface ReadLinesOptions {
-	bufferLength: number;
-	encoding: string;
-}
+import { Client } from 'vs/base/parts/ipc/node/ipc.cp';
 
 export class Engine implements ISearchEngine<ISerializedFileMatch> {
 
 	private static PROGRESS_FLUSH_CHUNK_SIZE = 50; // optimization: number of files to process before emitting progress event
 
-	private rootFolders: string[];
-	private extraFiles: string[];
-	private maxResults: number;
+	private config: IRawSearch;
 	private walker: FileWalker;
-	private contentPattern: RegExp;
-	private isCanceled: boolean;
-	private isDone: boolean;
-	private total: number;
-	private worked: number;
-	private progressed: number;
 	private walkerError: Error;
-	private walkerIsDone: boolean;
-	private fileEncoding: string;
-	private limitReached: boolean;
+
+	private isCanceled = false;
+	private isDone = false;
+	private totalBytes = 0;
+	private processedBytes = 0;
+	private progressed = 0;
+	private walkerIsDone = false;
+	private limitReached = false;
+	private numResults = 0;
+
+	private nextWorker = 0;
+	private workers: ISearchWorker[] = [];
+	private workerClients: Client[] = [];
 
 	constructor(config: IRawSearch, walker: FileWalker) {
-		this.rootFolders = config.rootFolders;
-		this.extraFiles = config.extraFiles;
+		this.config = config;
 		this.walker = walker;
-		this.contentPattern = strings.createRegExp(config.contentPattern.pattern, config.contentPattern.isRegExp, { matchCase: config.contentPattern.isCaseSensitive, wholeWord: config.contentPattern.isWordMatch, multiline: false, global: true });
-		this.isCanceled = false;
-		this.limitReached = false;
-		this.maxResults = config.maxResults;
-		this.worked = 0;
-		this.progressed = 0;
-		this.total = 0;
-		this.fileEncoding = encodingExists(config.fileEncoding) ? config.fileEncoding : UTF8;
 	}
 
-	public cancel(): void {
+	cancel(): void {
 		this.isCanceled = true;
 		this.walker.cancel();
-	}
 
-	public search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
-		let resultCounter = 0;
+		this.workers.forEach(w => w.cancel());",Add error handler to returned promises?,2016-11-30 19:50:40
541,"@@ -5,330 +5,178 @@
 
 'use strict';
 
-import * as strings from 'vs/base/common/strings';
+import uri from 'vs/base/common/uri';
 
-import * as fs from 'fs';
+import * as os from 'os';
 import * as path from 'path';
 
-import * as baseMime from 'vs/base/common/mime';
-import { ILineMatch, IProgress } from 'vs/platform/search/common/search';
-import { detectMimeAndEncodingFromBuffer } from 'vs/base/node/mime';
+import * as ipc from 'vs/base/parts/ipc/common/ipc';
+
+import { IProgress } from 'vs/platform/search/common/search';
 import { FileWalker } from 'vs/workbench/services/search/node/fileSearch';
-import { UTF16le, UTF16be, UTF8, UTF8_with_bom, encodingExists, decode } from 'vs/base/node/encoding';
 import { ISerializedFileMatch, ISerializedSearchComplete, IRawSearch, ISearchEngine } from './search';
+import { ISearchWorkerConfig, ISearchWorker, ISearchWorkerChannel, SearchWorkerChannelClient } from './worker/searchWorkerIpc';
 
-interface ReadLinesOptions {
-	bufferLength: number;
-	encoding: string;
-}
+import { Client } from 'vs/base/parts/ipc/node/ipc.cp';
 
 export class Engine implements ISearchEngine<ISerializedFileMatch> {
 
 	private static PROGRESS_FLUSH_CHUNK_SIZE = 50; // optimization: number of files to process before emitting progress event
 
-	private rootFolders: string[];
-	private extraFiles: string[];
-	private maxResults: number;
+	private config: IRawSearch;
 	private walker: FileWalker;
-	private contentPattern: RegExp;
-	private isCanceled: boolean;
-	private isDone: boolean;
-	private total: number;
-	private worked: number;
-	private progressed: number;
 	private walkerError: Error;
-	private walkerIsDone: boolean;
-	private fileEncoding: string;
-	private limitReached: boolean;
+
+	private isCanceled = false;
+	private isDone = false;
+	private totalBytes = 0;
+	private processedBytes = 0;
+	private progressed = 0;
+	private walkerIsDone = false;
+	private limitReached = false;
+	private numResults = 0;
+
+	private nextWorker = 0;
+	private workers: ISearchWorker[] = [];
+	private workerClients: Client[] = [];
 
 	constructor(config: IRawSearch, walker: FileWalker) {
-		this.rootFolders = config.rootFolders;
-		this.extraFiles = config.extraFiles;
+		this.config = config;
 		this.walker = walker;
-		this.contentPattern = strings.createRegExp(config.contentPattern.pattern, config.contentPattern.isRegExp, { matchCase: config.contentPattern.isCaseSensitive, wholeWord: config.contentPattern.isWordMatch, multiline: false, global: true });
-		this.isCanceled = false;
-		this.limitReached = false;
-		this.maxResults = config.maxResults;
-		this.worked = 0;
-		this.progressed = 0;
-		this.total = 0;
-		this.fileEncoding = encodingExists(config.fileEncoding) ? config.fileEncoding : UTF8;
 	}
 
-	public cancel(): void {
+	cancel(): void {
 		this.isCanceled = true;
 		this.walker.cancel();
-	}
 
-	public search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
-		let resultCounter = 0;
+		this.workers.forEach(w => w.cancel());
+	}
 
-		let progress = () => {
-			this.progressed++;
-			if (this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
-				onProgress({ total: this.total, worked: this.worked }); // buffer progress in chunks to reduce pressure
+	search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
+		this.startWorkers();
+		const progress = () => {
+			if (++this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
+				onProgress({ total: this.totalBytes, worked: this.processedBytes }); // buffer progress in chunks to reduce pressure
 			}
 		};
 
-		let unwind = (processed: number) => {
-			this.worked += processed;
+		const unwind = (processed: number) => {
+			this.processedBytes += processed;
 
 			// Emit progress() unless we got canceled or hit the limit
 			if (processed && !this.isDone && !this.isCanceled && !this.limitReached) {
 				progress();
 			}
 
 			// Emit done()
-			if (this.worked === this.total && this.walkerIsDone && !this.isDone) {
+			if (!this.isDone && this.processedBytes === this.totalBytes && this.walkerIsDone) {","I wonder if `this.processedBytes === this.totalBytes` is a good condition to rely on. If a file changes its size between the file traversal and the text search it would never hold, would it?",2016-11-30 19:31:30
545,"@@ -5,330 +5,178 @@
 
 'use strict';
 
-import * as strings from 'vs/base/common/strings';
+import uri from 'vs/base/common/uri';
 
-import * as fs from 'fs';
+import * as os from 'os';
 import * as path from 'path';
 
-import * as baseMime from 'vs/base/common/mime';
-import { ILineMatch, IProgress } from 'vs/platform/search/common/search';
-import { detectMimeAndEncodingFromBuffer } from 'vs/base/node/mime';
+import * as ipc from 'vs/base/parts/ipc/common/ipc';
+
+import { IProgress } from 'vs/platform/search/common/search';
 import { FileWalker } from 'vs/workbench/services/search/node/fileSearch';
-import { UTF16le, UTF16be, UTF8, UTF8_with_bom, encodingExists, decode } from 'vs/base/node/encoding';
 import { ISerializedFileMatch, ISerializedSearchComplete, IRawSearch, ISearchEngine } from './search';
+import { ISearchWorkerConfig, ISearchWorker, ISearchWorkerChannel, SearchWorkerChannelClient } from './worker/searchWorkerIpc';
 
-interface ReadLinesOptions {
-	bufferLength: number;
-	encoding: string;
-}
+import { Client } from 'vs/base/parts/ipc/node/ipc.cp';
 
 export class Engine implements ISearchEngine<ISerializedFileMatch> {
 
 	private static PROGRESS_FLUSH_CHUNK_SIZE = 50; // optimization: number of files to process before emitting progress event
 
-	private rootFolders: string[];
-	private extraFiles: string[];
-	private maxResults: number;
+	private config: IRawSearch;
 	private walker: FileWalker;
-	private contentPattern: RegExp;
-	private isCanceled: boolean;
-	private isDone: boolean;
-	private total: number;
-	private worked: number;
-	private progressed: number;
 	private walkerError: Error;
-	private walkerIsDone: boolean;
-	private fileEncoding: string;
-	private limitReached: boolean;
+
+	private isCanceled = false;
+	private isDone = false;
+	private totalBytes = 0;
+	private processedBytes = 0;
+	private progressed = 0;
+	private walkerIsDone = false;
+	private limitReached = false;
+	private numResults = 0;
+
+	private nextWorker = 0;
+	private workers: ISearchWorker[] = [];
+	private workerClients: Client[] = [];
 
 	constructor(config: IRawSearch, walker: FileWalker) {
-		this.rootFolders = config.rootFolders;
-		this.extraFiles = config.extraFiles;
+		this.config = config;
 		this.walker = walker;
-		this.contentPattern = strings.createRegExp(config.contentPattern.pattern, config.contentPattern.isRegExp, { matchCase: config.contentPattern.isCaseSensitive, wholeWord: config.contentPattern.isWordMatch, multiline: false, global: true });
-		this.isCanceled = false;
-		this.limitReached = false;
-		this.maxResults = config.maxResults;
-		this.worked = 0;
-		this.progressed = 0;
-		this.total = 0;
-		this.fileEncoding = encodingExists(config.fileEncoding) ? config.fileEncoding : UTF8;
 	}
 
-	public cancel(): void {
+	cancel(): void {
 		this.isCanceled = true;
 		this.walker.cancel();
-	}
 
-	public search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
-		let resultCounter = 0;
+		this.workers.forEach(w => w.cancel());
+	}
 
-		let progress = () => {
-			this.progressed++;
-			if (this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
-				onProgress({ total: this.total, worked: this.worked }); // buffer progress in chunks to reduce pressure
+	search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
+		this.startWorkers();
+		const progress = () => {
+			if (++this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
+				onProgress({ total: this.totalBytes, worked: this.processedBytes }); // buffer progress in chunks to reduce pressure
 			}
 		};
 
-		let unwind = (processed: number) => {
-			this.worked += processed;
+		const unwind = (processed: number) => {
+			this.processedBytes += processed;
 
 			// Emit progress() unless we got canceled or hit the limit
 			if (processed && !this.isDone && !this.isCanceled && !this.limitReached) {
 				progress();
 			}
 
 			// Emit done()
-			if (this.worked === this.total && this.walkerIsDone && !this.isDone) {
+			if (!this.isDone && this.processedBytes === this.totalBytes && this.walkerIsDone) {
 				this.isDone = true;
+				this.disposeWorkers();",Why is this different from cancel() above? Should the walker also be canceled/disposed?,2016-11-30 19:52:08
546,"@@ -5,330 +5,178 @@
 
 'use strict';
 
-import * as strings from 'vs/base/common/strings';
+import uri from 'vs/base/common/uri';
 
-import * as fs from 'fs';
+import * as os from 'os';
 import * as path from 'path';
 
-import * as baseMime from 'vs/base/common/mime';
-import { ILineMatch, IProgress } from 'vs/platform/search/common/search';
-import { detectMimeAndEncodingFromBuffer } from 'vs/base/node/mime';
+import * as ipc from 'vs/base/parts/ipc/common/ipc';
+
+import { IProgress } from 'vs/platform/search/common/search';
 import { FileWalker } from 'vs/workbench/services/search/node/fileSearch';
-import { UTF16le, UTF16be, UTF8, UTF8_with_bom, encodingExists, decode } from 'vs/base/node/encoding';
 import { ISerializedFileMatch, ISerializedSearchComplete, IRawSearch, ISearchEngine } from './search';
+import { ISearchWorkerConfig, ISearchWorker, ISearchWorkerChannel, SearchWorkerChannelClient } from './worker/searchWorkerIpc';
 
-interface ReadLinesOptions {
-	bufferLength: number;
-	encoding: string;
-}
+import { Client } from 'vs/base/parts/ipc/node/ipc.cp';
 
 export class Engine implements ISearchEngine<ISerializedFileMatch> {
 
 	private static PROGRESS_FLUSH_CHUNK_SIZE = 50; // optimization: number of files to process before emitting progress event
 
-	private rootFolders: string[];
-	private extraFiles: string[];
-	private maxResults: number;
+	private config: IRawSearch;
 	private walker: FileWalker;
-	private contentPattern: RegExp;
-	private isCanceled: boolean;
-	private isDone: boolean;
-	private total: number;
-	private worked: number;
-	private progressed: number;
 	private walkerError: Error;
-	private walkerIsDone: boolean;
-	private fileEncoding: string;
-	private limitReached: boolean;
+
+	private isCanceled = false;
+	private isDone = false;
+	private totalBytes = 0;
+	private processedBytes = 0;
+	private progressed = 0;
+	private walkerIsDone = false;
+	private limitReached = false;
+	private numResults = 0;
+
+	private nextWorker = 0;
+	private workers: ISearchWorker[] = [];
+	private workerClients: Client[] = [];
 
 	constructor(config: IRawSearch, walker: FileWalker) {
-		this.rootFolders = config.rootFolders;
-		this.extraFiles = config.extraFiles;
+		this.config = config;
 		this.walker = walker;
-		this.contentPattern = strings.createRegExp(config.contentPattern.pattern, config.contentPattern.isRegExp, { matchCase: config.contentPattern.isCaseSensitive, wholeWord: config.contentPattern.isWordMatch, multiline: false, global: true });
-		this.isCanceled = false;
-		this.limitReached = false;
-		this.maxResults = config.maxResults;
-		this.worked = 0;
-		this.progressed = 0;
-		this.total = 0;
-		this.fileEncoding = encodingExists(config.fileEncoding) ? config.fileEncoding : UTF8;
 	}
 
-	public cancel(): void {
+	cancel(): void {
 		this.isCanceled = true;
 		this.walker.cancel();
-	}
 
-	public search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
-		let resultCounter = 0;
+		this.workers.forEach(w => w.cancel());
+	}
 
-		let progress = () => {
-			this.progressed++;
-			if (this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
-				onProgress({ total: this.total, worked: this.worked }); // buffer progress in chunks to reduce pressure
+	search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
+		this.startWorkers();
+		const progress = () => {
+			if (++this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
+				onProgress({ total: this.totalBytes, worked: this.processedBytes }); // buffer progress in chunks to reduce pressure
 			}
 		};
 
-		let unwind = (processed: number) => {
-			this.worked += processed;
+		const unwind = (processed: number) => {
+			this.processedBytes += processed;
 
 			// Emit progress() unless we got canceled or hit the limit
 			if (processed && !this.isDone && !this.isCanceled && !this.limitReached) {
 				progress();
 			}
 
 			// Emit done()
-			if (this.worked === this.total && this.walkerIsDone && !this.isDone) {
+			if (!this.isDone && this.processedBytes === this.totalBytes && this.walkerIsDone) {
 				this.isDone = true;
+				this.disposeWorkers();
 				done(this.walkerError, {
 					limitHit: this.limitReached,
 					stats: this.walker.getStats()
 				});
 			}
 		};
 
-		// Walk over the file system
-		this.walker.walk(this.rootFolders, this.extraFiles, result => {
-			const size = result.size || 1;
-			this.total += size;
-
-			// If the result is empty or we have reached the limit or we are canceled, ignore it
-			if (this.limitReached || this.isCanceled) {
-				return unwind(size);
-			}
+		const run = (batch: string[], batchBytes: number): void => {
+			const worker = this.workers[this.nextWorker];
+			this.nextWorker = (this.nextWorker + 1) % this.workers.length;
 
-			// Indicate progress to the outside
-			progress();
-
-			let fileMatch: FileMatch = null;
-
-			let doneCallback = (error?: Error) => {
-				if (!error && !this.isCanceled && fileMatch && !fileMatch.isEmpty()) {
-					onResult(fileMatch.serialize());
-				}
-
-				return unwind(size);
-			};
-
-			const absolutePath = result.base ? [result.base, result.relativePath].join(path.sep) : result.relativePath;
-			let perLineCallback = (line: string, lineNumber: number) => {
-				if (this.limitReached || this.isCanceled) {
-					return; // return early if canceled or limit reached
+			const maxResults = this.config.maxResults - this.numResults;
+			worker.search({ absolutePaths: batch, maxResults }).then(result => {",Add error handler to arguments of .then()?,2016-11-30 19:54:09
542,"@@ -5,330 +5,178 @@
 
 'use strict';
 
-import * as strings from 'vs/base/common/strings';
+import uri from 'vs/base/common/uri';
 
-import * as fs from 'fs';
+import * as os from 'os';
 import * as path from 'path';
 
-import * as baseMime from 'vs/base/common/mime';
-import { ILineMatch, IProgress } from 'vs/platform/search/common/search';
-import { detectMimeAndEncodingFromBuffer } from 'vs/base/node/mime';
+import * as ipc from 'vs/base/parts/ipc/common/ipc';
+
+import { IProgress } from 'vs/platform/search/common/search';
 import { FileWalker } from 'vs/workbench/services/search/node/fileSearch';
-import { UTF16le, UTF16be, UTF8, UTF8_with_bom, encodingExists, decode } from 'vs/base/node/encoding';
 import { ISerializedFileMatch, ISerializedSearchComplete, IRawSearch, ISearchEngine } from './search';
+import { ISearchWorkerConfig, ISearchWorker, ISearchWorkerChannel, SearchWorkerChannelClient } from './worker/searchWorkerIpc';
 
-interface ReadLinesOptions {
-	bufferLength: number;
-	encoding: string;
-}
+import { Client } from 'vs/base/parts/ipc/node/ipc.cp';
 
 export class Engine implements ISearchEngine<ISerializedFileMatch> {
 
 	private static PROGRESS_FLUSH_CHUNK_SIZE = 50; // optimization: number of files to process before emitting progress event
 
-	private rootFolders: string[];
-	private extraFiles: string[];
-	private maxResults: number;
+	private config: IRawSearch;
 	private walker: FileWalker;
-	private contentPattern: RegExp;
-	private isCanceled: boolean;
-	private isDone: boolean;
-	private total: number;
-	private worked: number;
-	private progressed: number;
 	private walkerError: Error;
-	private walkerIsDone: boolean;
-	private fileEncoding: string;
-	private limitReached: boolean;
+
+	private isCanceled = false;
+	private isDone = false;
+	private totalBytes = 0;
+	private processedBytes = 0;
+	private progressed = 0;
+	private walkerIsDone = false;
+	private limitReached = false;
+	private numResults = 0;
+
+	private nextWorker = 0;
+	private workers: ISearchWorker[] = [];
+	private workerClients: Client[] = [];
 
 	constructor(config: IRawSearch, walker: FileWalker) {
-		this.rootFolders = config.rootFolders;
-		this.extraFiles = config.extraFiles;
+		this.config = config;
 		this.walker = walker;
-		this.contentPattern = strings.createRegExp(config.contentPattern.pattern, config.contentPattern.isRegExp, { matchCase: config.contentPattern.isCaseSensitive, wholeWord: config.contentPattern.isWordMatch, multiline: false, global: true });
-		this.isCanceled = false;
-		this.limitReached = false;
-		this.maxResults = config.maxResults;
-		this.worked = 0;
-		this.progressed = 0;
-		this.total = 0;
-		this.fileEncoding = encodingExists(config.fileEncoding) ? config.fileEncoding : UTF8;
 	}
 
-	public cancel(): void {
+	cancel(): void {
 		this.isCanceled = true;
 		this.walker.cancel();
-	}
 
-	public search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
-		let resultCounter = 0;
+		this.workers.forEach(w => w.cancel());
+	}
 
-		let progress = () => {
-			this.progressed++;
-			if (this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
-				onProgress({ total: this.total, worked: this.worked }); // buffer progress in chunks to reduce pressure
+	search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
+		this.startWorkers();
+		const progress = () => {
+			if (++this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
+				onProgress({ total: this.totalBytes, worked: this.processedBytes }); // buffer progress in chunks to reduce pressure
 			}
 		};
 
-		let unwind = (processed: number) => {
-			this.worked += processed;
+		const unwind = (processed: number) => {
+			this.processedBytes += processed;
 
 			// Emit progress() unless we got canceled or hit the limit
 			if (processed && !this.isDone && !this.isCanceled && !this.limitReached) {
 				progress();
 			}
 
 			// Emit done()
-			if (this.worked === this.total && this.walkerIsDone && !this.isDone) {
+			if (!this.isDone && this.processedBytes === this.totalBytes && this.walkerIsDone) {
 				this.isDone = true;
+				this.disposeWorkers();
 				done(this.walkerError, {
 					limitHit: this.limitReached,
 					stats: this.walker.getStats()
 				});
 			}
 		};
 
-		// Walk over the file system
-		this.walker.walk(this.rootFolders, this.extraFiles, result => {
-			const size = result.size || 1;
-			this.total += size;
-
-			// If the result is empty or we have reached the limit or we are canceled, ignore it
-			if (this.limitReached || this.isCanceled) {
-				return unwind(size);
-			}
+		const run = (batch: string[], batchBytes: number): void => {
+			const worker = this.workers[this.nextWorker];
+			this.nextWorker = (this.nextWorker + 1) % this.workers.length;
 
-			// Indicate progress to the outside
-			progress();
-
-			let fileMatch: FileMatch = null;
-
-			let doneCallback = (error?: Error) => {
-				if (!error && !this.isCanceled && fileMatch && !fileMatch.isEmpty()) {
-					onResult(fileMatch.serialize());
-				}
-
-				return unwind(size);
-			};
-
-			const absolutePath = result.base ? [result.base, result.relativePath].join(path.sep) : result.relativePath;
-			let perLineCallback = (line: string, lineNumber: number) => {
-				if (this.limitReached || this.isCanceled) {
-					return; // return early if canceled or limit reached
+			const maxResults = this.config.maxResults - this.numResults;
+			worker.search({ absolutePaths: batch, maxResults }).then(result => {
+				if (!result || this.limitReached || this.isCanceled) {
+					return unwind(batchBytes);
 				}
 
-				let lineMatch: LineMatch = null;
-				let match = this.contentPattern.exec(line);
-
-				// Record all matches into file result
-				while (match !== null && match[0].length > 0 && !this.limitReached && !this.isCanceled) {
-					resultCounter++;
-					if (this.maxResults && resultCounter >= this.maxResults) {
-						this.limitReached = true;
-					}
-
-					if (fileMatch === null) {
-						fileMatch = new FileMatch(absolutePath);
-					}
-
-					if (lineMatch === null) {
-						lineMatch = new LineMatch(line, lineNumber);
-						fileMatch.addMatch(lineMatch);
-					}
-
-					lineMatch.addMatch(match.index, match[0].length);
+				const matches = result.matches;
+				this.numResults += result.numMatches;
+				matches.forEach(m => {
+					onResult(m);
+				});
 
-					match = this.contentPattern.exec(line);
+				if (this.numResults >= this.config.maxResults) {
+					// It's possible to go over maxResults like this, but it's much simpler than trying to extract the exact number
+					// of file matches, line matches, and matches within a line to == maxResults.
+					this.limitReached = true;
 				}
-			};
 
-			// Read lines buffered to support large files
-			this.readlinesAsync(absolutePath, perLineCallback, { bufferLength: 8096, encoding: this.fileEncoding }, doneCallback);
-		}, (error, isLimitHit) => {
-			this.walkerIsDone = true;
-			this.walkerError = error;
-			unwind(0 /* walker is done, indicate this back to our handler to be able to unwind */);
-		});
-	}
+				unwind(batchBytes);
+			});
+		};
 
-	private readlinesAsync(filename: string, perLineCallback: (line: string, lineNumber: number) => void, options: ReadLinesOptions, callback: (error: Error) => void): void {
-		fs.open(filename, 'r', null, (error: Error, fd: number) => {
-			if (error) {
-				return callback(error);
+		// Walk over the file system
+		let nextBatch = [];
+		let nextBatchBytes = 0;
+		const batchFlushBytes = 2 ** 20; // 1MB
+		this.walker.walk(this.config.rootFolders, this.config.extraFiles, result => {
+			let bytes = result.size || 1;",Any idea why we || 1? Would an empty file make the condition `this.processedBytes === this.totalBytes` further up never hold?,2016-11-30 19:34:35
543,"@@ -5,330 +5,178 @@
 
 'use strict';
 
-import * as strings from 'vs/base/common/strings';
+import uri from 'vs/base/common/uri';
 
-import * as fs from 'fs';
+import * as os from 'os';
 import * as path from 'path';
 
-import * as baseMime from 'vs/base/common/mime';
-import { ILineMatch, IProgress } from 'vs/platform/search/common/search';
-import { detectMimeAndEncodingFromBuffer } from 'vs/base/node/mime';
+import * as ipc from 'vs/base/parts/ipc/common/ipc';
+
+import { IProgress } from 'vs/platform/search/common/search';
 import { FileWalker } from 'vs/workbench/services/search/node/fileSearch';
-import { UTF16le, UTF16be, UTF8, UTF8_with_bom, encodingExists, decode } from 'vs/base/node/encoding';
 import { ISerializedFileMatch, ISerializedSearchComplete, IRawSearch, ISearchEngine } from './search';
+import { ISearchWorkerConfig, ISearchWorker, ISearchWorkerChannel, SearchWorkerChannelClient } from './worker/searchWorkerIpc';
 
-interface ReadLinesOptions {
-	bufferLength: number;
-	encoding: string;
-}
+import { Client } from 'vs/base/parts/ipc/node/ipc.cp';
 
 export class Engine implements ISearchEngine<ISerializedFileMatch> {
 
 	private static PROGRESS_FLUSH_CHUNK_SIZE = 50; // optimization: number of files to process before emitting progress event
 
-	private rootFolders: string[];
-	private extraFiles: string[];
-	private maxResults: number;
+	private config: IRawSearch;
 	private walker: FileWalker;
-	private contentPattern: RegExp;
-	private isCanceled: boolean;
-	private isDone: boolean;
-	private total: number;
-	private worked: number;
-	private progressed: number;
 	private walkerError: Error;
-	private walkerIsDone: boolean;
-	private fileEncoding: string;
-	private limitReached: boolean;
+
+	private isCanceled = false;
+	private isDone = false;
+	private totalBytes = 0;
+	private processedBytes = 0;
+	private progressed = 0;
+	private walkerIsDone = false;
+	private limitReached = false;
+	private numResults = 0;
+
+	private nextWorker = 0;
+	private workers: ISearchWorker[] = [];
+	private workerClients: Client[] = [];
 
 	constructor(config: IRawSearch, walker: FileWalker) {
-		this.rootFolders = config.rootFolders;
-		this.extraFiles = config.extraFiles;
+		this.config = config;
 		this.walker = walker;
-		this.contentPattern = strings.createRegExp(config.contentPattern.pattern, config.contentPattern.isRegExp, { matchCase: config.contentPattern.isCaseSensitive, wholeWord: config.contentPattern.isWordMatch, multiline: false, global: true });
-		this.isCanceled = false;
-		this.limitReached = false;
-		this.maxResults = config.maxResults;
-		this.worked = 0;
-		this.progressed = 0;
-		this.total = 0;
-		this.fileEncoding = encodingExists(config.fileEncoding) ? config.fileEncoding : UTF8;
 	}
 
-	public cancel(): void {
+	cancel(): void {
 		this.isCanceled = true;
 		this.walker.cancel();
-	}
 
-	public search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
-		let resultCounter = 0;
+		this.workers.forEach(w => w.cancel());
+	}
 
-		let progress = () => {
-			this.progressed++;
-			if (this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
-				onProgress({ total: this.total, worked: this.worked }); // buffer progress in chunks to reduce pressure
+	search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
+		this.startWorkers();
+		const progress = () => {
+			if (++this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
+				onProgress({ total: this.totalBytes, worked: this.processedBytes }); // buffer progress in chunks to reduce pressure
 			}
 		};
 
-		let unwind = (processed: number) => {
-			this.worked += processed;
+		const unwind = (processed: number) => {
+			this.processedBytes += processed;
 
 			// Emit progress() unless we got canceled or hit the limit
 			if (processed && !this.isDone && !this.isCanceled && !this.limitReached) {
 				progress();
 			}
 
 			// Emit done()
-			if (this.worked === this.total && this.walkerIsDone && !this.isDone) {
+			if (!this.isDone && this.processedBytes === this.totalBytes && this.walkerIsDone) {
 				this.isDone = true;
+				this.disposeWorkers();
 				done(this.walkerError, {
 					limitHit: this.limitReached,
 					stats: this.walker.getStats()
 				});
 			}
 		};
 
-		// Walk over the file system
-		this.walker.walk(this.rootFolders, this.extraFiles, result => {
-			const size = result.size || 1;
-			this.total += size;
-
-			// If the result is empty or we have reached the limit or we are canceled, ignore it
-			if (this.limitReached || this.isCanceled) {
-				return unwind(size);
-			}
+		const run = (batch: string[], batchBytes: number): void => {
+			const worker = this.workers[this.nextWorker];
+			this.nextWorker = (this.nextWorker + 1) % this.workers.length;
 
-			// Indicate progress to the outside
-			progress();
-
-			let fileMatch: FileMatch = null;
-
-			let doneCallback = (error?: Error) => {
-				if (!error && !this.isCanceled && fileMatch && !fileMatch.isEmpty()) {
-					onResult(fileMatch.serialize());
-				}
-
-				return unwind(size);
-			};
-
-			const absolutePath = result.base ? [result.base, result.relativePath].join(path.sep) : result.relativePath;
-			let perLineCallback = (line: string, lineNumber: number) => {
-				if (this.limitReached || this.isCanceled) {
-					return; // return early if canceled or limit reached
+			const maxResults = this.config.maxResults - this.numResults;
+			worker.search({ absolutePaths: batch, maxResults }).then(result => {
+				if (!result || this.limitReached || this.isCanceled) {
+					return unwind(batchBytes);
 				}
 
-				let lineMatch: LineMatch = null;
-				let match = this.contentPattern.exec(line);
-
-				// Record all matches into file result
-				while (match !== null && match[0].length > 0 && !this.limitReached && !this.isCanceled) {
-					resultCounter++;
-					if (this.maxResults && resultCounter >= this.maxResults) {
-						this.limitReached = true;
-					}
-
-					if (fileMatch === null) {
-						fileMatch = new FileMatch(absolutePath);
-					}
-
-					if (lineMatch === null) {
-						lineMatch = new LineMatch(line, lineNumber);
-						fileMatch.addMatch(lineMatch);
-					}
-
-					lineMatch.addMatch(match.index, match[0].length);
+				const matches = result.matches;
+				this.numResults += result.numMatches;
+				matches.forEach(m => {
+					onResult(m);
+				});
 
-					match = this.contentPattern.exec(line);
+				if (this.numResults >= this.config.maxResults) {
+					// It's possible to go over maxResults like this, but it's much simpler than trying to extract the exact number
+					// of file matches, line matches, and matches within a line to == maxResults.
+					this.limitReached = true;
 				}
-			};
 
-			// Read lines buffered to support large files
-			this.readlinesAsync(absolutePath, perLineCallback, { bufferLength: 8096, encoding: this.fileEncoding }, doneCallback);
-		}, (error, isLimitHit) => {
-			this.walkerIsDone = true;
-			this.walkerError = error;
-			unwind(0 /* walker is done, indicate this back to our handler to be able to unwind */);
-		});
-	}
+				unwind(batchBytes);
+			});
+		};
 
-	private readlinesAsync(filename: string, perLineCallback: (line: string, lineNumber: number) => void, options: ReadLinesOptions, callback: (error: Error) => void): void {
-		fs.open(filename, 'r', null, (error: Error, fd: number) => {
-			if (error) {
-				return callback(error);
+		// Walk over the file system
+		let nextBatch = [];
+		let nextBatchBytes = 0;
+		const batchFlushBytes = 2 ** 20; // 1MB
+		this.walker.walk(this.config.rootFolders, this.config.extraFiles, result => {
+			let bytes = result.size || 1;
+			this.totalBytes += bytes;
+
+			// If we have reached the limit or we are canceled, ignore it
+			if (this.limitReached || this.isCanceled) {
+				return unwind(bytes);
 			}
 
-			let buffer = new Buffer(options.bufferLength);
-			let pos: number;
-			let i: number;
-			let line = '';
-			let lineNumber = 0;
-			let lastBufferHadTraillingCR = false;
-
-			const outer = this;
-
-			function decodeBuffer(buffer: NodeBuffer, start: number, end: number): string {
-				if (options.encoding === UTF8 || options.encoding === UTF8_with_bom) {
-					return buffer.toString(undefined, start, end); // much faster to use built in toString() when encoding is default
-				}
+			// Indicate progress to the outside
+			progress();
 
-				return decode(buffer.slice(start, end), options.encoding);
-			}
+			const absolutePath = result.base ? [result.base, result.relativePath].join(path.sep) : result.relativePath;
+			nextBatch.push(absolutePath);
+			nextBatchBytes += bytes;
 
-			function lineFinished(offset: number): void {
-				line += decodeBuffer(buffer, pos, i + offset);
-				perLineCallback(line, lineNumber);
-				line = '';
-				lineNumber++;
-				pos = i + offset;
+			if (nextBatchBytes >= batchFlushBytes) {
+				run(nextBatch, nextBatchBytes);
+				nextBatch = [];
+				nextBatchBytes = 0;
 			}
-
-			function readFile(isFirstRead: boolean, clb: (error: Error) => void): void {
-				if (outer.limitReached || outer.isCanceled) {
-					return clb(null); // return early if canceled or limit reached
+		}, (error, isLimitHit) => {
+			// Send any remaining paths to a worker, or unwind if we're stopping
+			if (nextBatch.length) {
+				if (this.limitReached || this.isCanceled) {
+					unwind(nextBatchBytes);
+				} else {
+					run(nextBatch, nextBatchBytes);
 				}
-
-				fs.read(fd, buffer, 0, buffer.length, null, (error: Error, bytesRead: number, buffer: NodeBuffer) => {
-					if (error || bytesRead === 0 || outer.limitReached || outer.isCanceled) {
-						return clb(error); // return early if canceled or limit reached or no more bytes to read
-					}
-
-					pos = 0;
-					i = 0;
-
-					// Detect encoding and mime when this is the beginning of the file
-					if (isFirstRead) {
-						let mimeAndEncoding = detectMimeAndEncodingFromBuffer(buffer, bytesRead);
-						if (mimeAndEncoding.mimes[mimeAndEncoding.mimes.length - 1] !== baseMime.MIME_TEXT) {
-							return clb(null); // skip files that seem binary
-						}
-
-						// Check for BOM offset
-						switch (mimeAndEncoding.encoding) {
-							case UTF8:
-								pos = i = 3;
-								options.encoding = UTF8;
-								break;
-							case UTF16be:
-								pos = i = 2;
-								options.encoding = UTF16be;
-								break;
-							case UTF16le:
-								pos = i = 2;
-								options.encoding = UTF16le;
-								break;
-						}
-					}
-
-					if (lastBufferHadTraillingCR) {
-						if (buffer[i] === 0x0a) { // LF (Line Feed)
-							lineFinished(1);
-							i++;
-						} else {
-							lineFinished(0);
-						}
-
-						lastBufferHadTraillingCR = false;
-					}
-
-					for (; i < bytesRead; ++i) {
-						if (buffer[i] === 0x0a) { // LF (Line Feed)
-							lineFinished(1);
-						} else if (buffer[i] === 0x0d) { // CR (Carriage Return)
-							if (i + 1 === bytesRead) {
-								lastBufferHadTraillingCR = true;
-							} else if (buffer[i + 1] === 0x0a) { // LF (Line Feed)
-								lineFinished(2);
-								i++;
-							} else {
-								lineFinished(1);
-							}
-						}
-					}
-
-					line += decodeBuffer(buffer, pos, bytesRead);
-
-					readFile(false /* isFirstRead */, clb); // Continue reading
-				});
 			}
 
-			readFile(true /* isFirstRead */, (error: Error) => {
-				if (error) {
-					return callback(error);
-				}
-
-				if (line.length) {
-					perLineCallback(line, lineNumber); // handle last line
-				}
-
-				fs.close(fd, (error: Error) => {
-					callback(error);
-				});
-			});
+			this.walkerIsDone = true;
+			this.walkerError = error;
 		});
 	}
-}
-
-class FileMatch implements ISerializedFileMatch {
-	public path: string;
-	public lineMatches: LineMatch[];
-
-	constructor(path: string) {
-		this.path = path;
-		this.lineMatches = [];
-	}
 
-	public addMatch(lineMatch: LineMatch): void {
-		this.lineMatches.push(lineMatch);
-	}
-
-	public isEmpty(): boolean {
-		return this.lineMatches.length === 0;
-	}
-
-	public serialize(): ISerializedFileMatch {
-		let lineMatches: ILineMatch[] = [];
-
-		for (let i = 0; i < this.lineMatches.length; i++) {
-			lineMatches.push(this.lineMatches[i].serialize());
+	private startWorkers(): void {
+		// If the CPU has hyperthreading enabled, this will report (# of physical cores)*2.
+		const numWorkers = os.cpus().length;
+		for (let i = 0; i < numWorkers; i++) {
+			this.createWorker(i);
 		}
-
-		return {
-			path: this.path,
-			lineMatches: lineMatches
-		};
-	}
-}
-
-class LineMatch implements ILineMatch {
-	public preview: string;
-	public lineNumber: number;
-	public offsetAndLengths: number[][];
-
-	constructor(preview: string, lineNumber: number) {
-		this.preview = preview.replace(/(\r|\n)*$/, '');
-		this.lineNumber = lineNumber;
-		this.offsetAndLengths = [];
 	}
 
-	public getText(): string {
-		return this.preview;
-	}
+	private createWorker(id: number): void {
+		let client = new Client(
+			uri.parse(require.toUrl('bootstrap')).fsPath,
+			{
+				serverName: 'Search Worker ' + id,
+				args: ['--type=searchWorker'],
+				env: {
+					AMD_ENTRYPOINT: 'vs/workbench/services/search/node/worker/searchWorkerApp',
+					PIPE_LOGGING: 'true',
+					VERBOSE_LOGGING: 'true'","Others seem to be using `environmentService.verbose` or `!environmentService.isBuilt || environmentService.verbose`. Not sure if it matters in this case, but we should avoid being noisy.",2016-11-30 19:47:23
547,"@@ -5,330 +5,178 @@
 
 'use strict';
 
-import * as strings from 'vs/base/common/strings';
+import uri from 'vs/base/common/uri';
 
-import * as fs from 'fs';
+import * as os from 'os';
 import * as path from 'path';
 
-import * as baseMime from 'vs/base/common/mime';
-import { ILineMatch, IProgress } from 'vs/platform/search/common/search';
-import { detectMimeAndEncodingFromBuffer } from 'vs/base/node/mime';
+import * as ipc from 'vs/base/parts/ipc/common/ipc';
+
+import { IProgress } from 'vs/platform/search/common/search';
 import { FileWalker } from 'vs/workbench/services/search/node/fileSearch';
-import { UTF16le, UTF16be, UTF8, UTF8_with_bom, encodingExists, decode } from 'vs/base/node/encoding';
 import { ISerializedFileMatch, ISerializedSearchComplete, IRawSearch, ISearchEngine } from './search';
+import { ISearchWorkerConfig, ISearchWorker, ISearchWorkerChannel, SearchWorkerChannelClient } from './worker/searchWorkerIpc';
 
-interface ReadLinesOptions {
-	bufferLength: number;
-	encoding: string;
-}
+import { Client } from 'vs/base/parts/ipc/node/ipc.cp';
 
 export class Engine implements ISearchEngine<ISerializedFileMatch> {
 
 	private static PROGRESS_FLUSH_CHUNK_SIZE = 50; // optimization: number of files to process before emitting progress event
 
-	private rootFolders: string[];
-	private extraFiles: string[];
-	private maxResults: number;
+	private config: IRawSearch;
 	private walker: FileWalker;
-	private contentPattern: RegExp;
-	private isCanceled: boolean;
-	private isDone: boolean;
-	private total: number;
-	private worked: number;
-	private progressed: number;
 	private walkerError: Error;
-	private walkerIsDone: boolean;
-	private fileEncoding: string;
-	private limitReached: boolean;
+
+	private isCanceled = false;
+	private isDone = false;
+	private totalBytes = 0;
+	private processedBytes = 0;
+	private progressed = 0;
+	private walkerIsDone = false;
+	private limitReached = false;
+	private numResults = 0;
+
+	private nextWorker = 0;
+	private workers: ISearchWorker[] = [];
+	private workerClients: Client[] = [];
 
 	constructor(config: IRawSearch, walker: FileWalker) {
-		this.rootFolders = config.rootFolders;
-		this.extraFiles = config.extraFiles;
+		this.config = config;
 		this.walker = walker;
-		this.contentPattern = strings.createRegExp(config.contentPattern.pattern, config.contentPattern.isRegExp, { matchCase: config.contentPattern.isCaseSensitive, wholeWord: config.contentPattern.isWordMatch, multiline: false, global: true });
-		this.isCanceled = false;
-		this.limitReached = false;
-		this.maxResults = config.maxResults;
-		this.worked = 0;
-		this.progressed = 0;
-		this.total = 0;
-		this.fileEncoding = encodingExists(config.fileEncoding) ? config.fileEncoding : UTF8;
 	}
 
-	public cancel(): void {
+	cancel(): void {
 		this.isCanceled = true;
 		this.walker.cancel();
-	}
 
-	public search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
-		let resultCounter = 0;
+		this.workers.forEach(w => w.cancel());
+	}
 
-		let progress = () => {
-			this.progressed++;
-			if (this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
-				onProgress({ total: this.total, worked: this.worked }); // buffer progress in chunks to reduce pressure
+	search(onResult: (match: ISerializedFileMatch) => void, onProgress: (progress: IProgress) => void, done: (error: Error, complete: ISerializedSearchComplete) => void): void {
+		this.startWorkers();
+		const progress = () => {
+			if (++this.progressed % Engine.PROGRESS_FLUSH_CHUNK_SIZE === 0) {
+				onProgress({ total: this.totalBytes, worked: this.processedBytes }); // buffer progress in chunks to reduce pressure
 			}
 		};
 
-		let unwind = (processed: number) => {
-			this.worked += processed;
+		const unwind = (processed: number) => {
+			this.processedBytes += processed;
 
 			// Emit progress() unless we got canceled or hit the limit
 			if (processed && !this.isDone && !this.isCanceled && !this.limitReached) {
 				progress();
 			}
 
 			// Emit done()
-			if (this.worked === this.total && this.walkerIsDone && !this.isDone) {
+			if (!this.isDone && this.processedBytes === this.totalBytes && this.walkerIsDone) {
 				this.isDone = true;
+				this.disposeWorkers();
 				done(this.walkerError, {
 					limitHit: this.limitReached,
 					stats: this.walker.getStats()
 				});
 			}
 		};
 
-		// Walk over the file system
-		this.walker.walk(this.rootFolders, this.extraFiles, result => {
-			const size = result.size || 1;
-			this.total += size;
-
-			// If the result is empty or we have reached the limit or we are canceled, ignore it
-			if (this.limitReached || this.isCanceled) {
-				return unwind(size);
-			}
+		const run = (batch: string[], batchBytes: number): void => {
+			const worker = this.workers[this.nextWorker];
+			this.nextWorker = (this.nextWorker + 1) % this.workers.length;
 
-			// Indicate progress to the outside
-			progress();
-
-			let fileMatch: FileMatch = null;
-
-			let doneCallback = (error?: Error) => {
-				if (!error && !this.isCanceled && fileMatch && !fileMatch.isEmpty()) {
-					onResult(fileMatch.serialize());
-				}
-
-				return unwind(size);
-			};
-
-			const absolutePath = result.base ? [result.base, result.relativePath].join(path.sep) : result.relativePath;
-			let perLineCallback = (line: string, lineNumber: number) => {
-				if (this.limitReached || this.isCanceled) {
-					return; // return early if canceled or limit reached
+			const maxResults = this.config.maxResults - this.numResults;
+			worker.search({ absolutePaths: batch, maxResults }).then(result => {
+				if (!result || this.limitReached || this.isCanceled) {
+					return unwind(batchBytes);
 				}
 
-				let lineMatch: LineMatch = null;
-				let match = this.contentPattern.exec(line);
-
-				// Record all matches into file result
-				while (match !== null && match[0].length > 0 && !this.limitReached && !this.isCanceled) {
-					resultCounter++;
-					if (this.maxResults && resultCounter >= this.maxResults) {
-						this.limitReached = true;
-					}
-
-					if (fileMatch === null) {
-						fileMatch = new FileMatch(absolutePath);
-					}
-
-					if (lineMatch === null) {
-						lineMatch = new LineMatch(line, lineNumber);
-						fileMatch.addMatch(lineMatch);
-					}
-
-					lineMatch.addMatch(match.index, match[0].length);
+				const matches = result.matches;
+				this.numResults += result.numMatches;
+				matches.forEach(m => {
+					onResult(m);
+				});
 
-					match = this.contentPattern.exec(line);
+				if (this.numResults >= this.config.maxResults) {
+					// It's possible to go over maxResults like this, but it's much simpler than trying to extract the exact number
+					// of file matches, line matches, and matches within a line to == maxResults.
+					this.limitReached = true;
 				}
-			};
 
-			// Read lines buffered to support large files
-			this.readlinesAsync(absolutePath, perLineCallback, { bufferLength: 8096, encoding: this.fileEncoding }, doneCallback);
-		}, (error, isLimitHit) => {
-			this.walkerIsDone = true;
-			this.walkerError = error;
-			unwind(0 /* walker is done, indicate this back to our handler to be able to unwind */);
-		});
-	}
+				unwind(batchBytes);
+			});
+		};
 
-	private readlinesAsync(filename: string, perLineCallback: (line: string, lineNumber: number) => void, options: ReadLinesOptions, callback: (error: Error) => void): void {
-		fs.open(filename, 'r', null, (error: Error, fd: number) => {
-			if (error) {
-				return callback(error);
+		// Walk over the file system
+		let nextBatch = [];
+		let nextBatchBytes = 0;
+		const batchFlushBytes = 2 ** 20; // 1MB
+		this.walker.walk(this.config.rootFolders, this.config.extraFiles, result => {
+			let bytes = result.size || 1;
+			this.totalBytes += bytes;
+
+			// If we have reached the limit or we are canceled, ignore it
+			if (this.limitReached || this.isCanceled) {
+				return unwind(bytes);
 			}
 
-			let buffer = new Buffer(options.bufferLength);
-			let pos: number;
-			let i: number;
-			let line = '';
-			let lineNumber = 0;
-			let lastBufferHadTraillingCR = false;
-
-			const outer = this;
-
-			function decodeBuffer(buffer: NodeBuffer, start: number, end: number): string {
-				if (options.encoding === UTF8 || options.encoding === UTF8_with_bom) {
-					return buffer.toString(undefined, start, end); // much faster to use built in toString() when encoding is default
-				}
+			// Indicate progress to the outside
+			progress();
 
-				return decode(buffer.slice(start, end), options.encoding);
-			}
+			const absolutePath = result.base ? [result.base, result.relativePath].join(path.sep) : result.relativePath;
+			nextBatch.push(absolutePath);
+			nextBatchBytes += bytes;
 
-			function lineFinished(offset: number): void {
-				line += decodeBuffer(buffer, pos, i + offset);
-				perLineCallback(line, lineNumber);
-				line = '';
-				lineNumber++;
-				pos = i + offset;
+			if (nextBatchBytes >= batchFlushBytes) {
+				run(nextBatch, nextBatchBytes);
+				nextBatch = [];
+				nextBatchBytes = 0;
 			}
-
-			function readFile(isFirstRead: boolean, clb: (error: Error) => void): void {
-				if (outer.limitReached || outer.isCanceled) {
-					return clb(null); // return early if canceled or limit reached
+		}, (error, isLimitHit) => {
+			// Send any remaining paths to a worker, or unwind if we're stopping
+			if (nextBatch.length) {
+				if (this.limitReached || this.isCanceled) {
+					unwind(nextBatchBytes);
+				} else {
+					run(nextBatch, nextBatchBytes);
 				}
-
-				fs.read(fd, buffer, 0, buffer.length, null, (error: Error, bytesRead: number, buffer: NodeBuffer) => {
-					if (error || bytesRead === 0 || outer.limitReached || outer.isCanceled) {
-						return clb(error); // return early if canceled or limit reached or no more bytes to read
-					}
-
-					pos = 0;
-					i = 0;
-
-					// Detect encoding and mime when this is the beginning of the file
-					if (isFirstRead) {
-						let mimeAndEncoding = detectMimeAndEncodingFromBuffer(buffer, bytesRead);
-						if (mimeAndEncoding.mimes[mimeAndEncoding.mimes.length - 1] !== baseMime.MIME_TEXT) {
-							return clb(null); // skip files that seem binary
-						}
-
-						// Check for BOM offset
-						switch (mimeAndEncoding.encoding) {
-							case UTF8:
-								pos = i = 3;
-								options.encoding = UTF8;
-								break;
-							case UTF16be:
-								pos = i = 2;
-								options.encoding = UTF16be;
-								break;
-							case UTF16le:
-								pos = i = 2;
-								options.encoding = UTF16le;
-								break;
-						}
-					}
-
-					if (lastBufferHadTraillingCR) {
-						if (buffer[i] === 0x0a) { // LF (Line Feed)
-							lineFinished(1);
-							i++;
-						} else {
-							lineFinished(0);
-						}
-
-						lastBufferHadTraillingCR = false;
-					}
-
-					for (; i < bytesRead; ++i) {
-						if (buffer[i] === 0x0a) { // LF (Line Feed)
-							lineFinished(1);
-						} else if (buffer[i] === 0x0d) { // CR (Carriage Return)
-							if (i + 1 === bytesRead) {
-								lastBufferHadTraillingCR = true;
-							} else if (buffer[i + 1] === 0x0a) { // LF (Line Feed)
-								lineFinished(2);
-								i++;
-							} else {
-								lineFinished(1);
-							}
-						}
-					}
-
-					line += decodeBuffer(buffer, pos, bytesRead);
-
-					readFile(false /* isFirstRead */, clb); // Continue reading
-				});
 			}
 
-			readFile(true /* isFirstRead */, (error: Error) => {
-				if (error) {
-					return callback(error);
-				}
-
-				if (line.length) {
-					perLineCallback(line, lineNumber); // handle last line
-				}
-
-				fs.close(fd, (error: Error) => {
-					callback(error);
-				});
-			});
+			this.walkerIsDone = true;
+			this.walkerError = error;
 		});
 	}
-}
-
-class FileMatch implements ISerializedFileMatch {
-	public path: string;
-	public lineMatches: LineMatch[];
-
-	constructor(path: string) {
-		this.path = path;
-		this.lineMatches = [];
-	}
 
-	public addMatch(lineMatch: LineMatch): void {
-		this.lineMatches.push(lineMatch);
-	}
-
-	public isEmpty(): boolean {
-		return this.lineMatches.length === 0;
-	}
-
-	public serialize(): ISerializedFileMatch {
-		let lineMatches: ILineMatch[] = [];
-
-		for (let i = 0; i < this.lineMatches.length; i++) {
-			lineMatches.push(this.lineMatches[i].serialize());
+	private startWorkers(): void {
+		// If the CPU has hyperthreading enabled, this will report (# of physical cores)*2.
+		const numWorkers = os.cpus().length;
+		for (let i = 0; i < numWorkers; i++) {
+			this.createWorker(i);
 		}
-
-		return {
-			path: this.path,
-			lineMatches: lineMatches
-		};
-	}
-}
-
-class LineMatch implements ILineMatch {
-	public preview: string;
-	public lineNumber: number;
-	public offsetAndLengths: number[][];
-
-	constructor(preview: string, lineNumber: number) {
-		this.preview = preview.replace(/(\r|\n)*$/, '');
-		this.lineNumber = lineNumber;
-		this.offsetAndLengths = [];
 	}
 
-	public getText(): string {
-		return this.preview;
-	}
+	private createWorker(id: number): void {
+		let client = new Client(
+			uri.parse(require.toUrl('bootstrap')).fsPath,
+			{
+				serverName: 'Search Worker ' + id,
+				args: ['--type=searchWorker'],
+				env: {
+					AMD_ENTRYPOINT: 'vs/workbench/services/search/node/worker/searchWorkerApp',
+					PIPE_LOGGING: 'true',
+					VERBOSE_LOGGING: 'true'
+				}
+			});
 
-	public getLineNumber(): number {
-		return this.lineNumber;
-	}
+		// Make async?
+		const channel = ipc.getNextTickChannel(client.getChannel<ISearchWorkerChannel>('searchWorker'));
+		const channelClient = new SearchWorkerChannelClient(channel);
+		const config: ISearchWorkerConfig = { pattern: this.config.contentPattern, id, fileEncoding: this.config.fileEncoding };
+		channelClient.initialize(config);",Add error handler.,2016-11-30 19:56:21
91,"@@ -5,4 +5,9 @@
 
 import {IComposite} from 'vs/workbench/common/composite';
 
-export interface IViewlet extends IComposite { }
+export interface IViewlet extends IComposite {
+	/**
+	 * Returns the minimal width needed to avoid any content horizontal truncation
+	 */
+	getOptimalWidth?(): number;","Suggest to make this a non optional method and implement it by default in the base viewlet class.
",2016-03-30 05:25:08
290,"@@ -50,8 +50,8 @@ export function create(container: Builder, keybindingService: IKeybindingService
 					entry.ids
 						.map(id => keybindingService.lookupKeybindings(id)
 							.map(k => keybindingService.getLabelFor(k))
-							.join(', ') || UNBOUND)
-						.join(' / ')
+							.join(' or ') || UNBOUND)
+						.join(' or ')","We'll need to translate these.
",2016-09-27 04:34:16
563,"@@ -51,11 +51,6 @@ export class BackupMainService implements IBackupMainService {
 	}
 
 	public registerWindowForBackups(windowId: number, isEmptyWorkspace: boolean, backupFolder?: string, workspacePath?: string): void {","@Tyriar I didnt know you had this check in here, I am also fine leaving it there to keep this knowledge inside the service!",2016-12-02 08:28:50
497,"@@ -51,6 +51,7 @@ export interface IEnvironmentService {
 	appSettingsPath: string;
 	appKeybindingsPath: string;
 
+	isBackupEnabled: boolean;","@Tyriar not so sure about introducing such a specific option to the environment service. keep in mind that it is being used in a lot of environments, including the CLI when managing extensions. I think a better approach is to introduce an `isExtensionDevelopment` flag that we can use to replace all our checks for `extensionDevelopmentPath` throughout the code. 
",2016-11-17 05:58:36
10,"@@ -51,7 +51,7 @@ export var language = <ILanguage> {
 		'internal', 'private', 'abstract', 'sealed', 'static', 'struct', 'readonly',
 		'volatile', 'virtual', 'override', 'params', 'get', 'set', 'add', 'remove',
 		'operator', 'true', 'false', 'implicit', 'explicit', 'interface', 'enum',
-		'null', 'async', 'await'
+		'null', 'async', 'await','fixed','sizeof','stackalloc','unsafe'
 		],","This change is good, but note that this file is not in use in VS Code. For CSharp colorization in VS Code we use `/extensions/csharp/syntaxes/csharp.json`. 
This file is used for the standalone editor build.
",2015-11-21 19:13:06
683,"@@ -510,30 +505,6 @@ export class RawDebugSession extends v8.V8Protocol implements debug.ISession {
 		return ret;
 	}
 ",Great that this is no longer in RawDebugSession!,2017-01-18 14:03:24
854,"@@ -511,7 +511,8 @@ export class VSCodeMenu {
 
 		if (folders.length || files.length) {
 			openRecentMenu.append(__separator__());
-			openRecentMenu.append(new MenuItem(this.likeAction('clearRecentlyOpened', { label: mnemonicLabel(nls.localize({ key: 'miClearItems', comment: ['&& denotes a mnemonic'] }, ""&&Clear Items"")), click: () => this.windowsService.clearRecentPathsList() }, false)));
+			//workbench.action.clearRecentItems",Extra comment?,2017-03-23 14:05:35
110,"@@ -52,24 +54,40 @@ export interface IWorkbenchActionRegistry {
 	 * Returns the category for the given action or null iff none.
 	 */
 	getCategory(actionId: string): string;
+
+	/**
+	 * Returns the keywords associated with the given action or null iff none.
+	 */
+	getKeywords(actionId: string): string[];
 }
 
 class WorkbenchActionRegistry implements IWorkbenchActionRegistry {
 	private workbenchActions: collections.IStringDictionary<SyncActionDescriptor>;
 	private mapActionIdToCategory: { [id: string]: string; };
+	private mapActionIdToKeywords: { [id: string]: string[]; };
 
 	constructor() {
 		this.workbenchActions = Object.create(null);
 		this.mapActionIdToCategory = Object.create(null);
+		this.mapActionIdToKeywords = Object.create(null);","will it be better to actually have a map to everything? Have map where values will be some structure, so you will not need to maintain two of them?
",2016-04-18 13:35:24
109,"@@ -52,24 +54,40 @@ export interface IWorkbenchActionRegistry {
 	 * Returns the category for the given action or null iff none.
 	 */
 	getCategory(actionId: string): string;
+
+	/**
+	 * Returns the keywords associated with the given action or null iff none.
+	 */
+	getKeywords(actionId: string): string[];
 }
 
 class WorkbenchActionRegistry implements IWorkbenchActionRegistry {
 	private workbenchActions: collections.IStringDictionary<SyncActionDescriptor>;
 	private mapActionIdToCategory: { [id: string]: string; };
+	private mapActionIdToKeywords: { [id: string]: string[]; };
 
 	constructor() {
 		this.workbenchActions = Object.create(null);
 		this.mapActionIdToCategory = Object.create(null);
+		this.mapActionIdToKeywords = Object.create(null);
 	}
 
-	public registerWorkbenchAction(descriptor: SyncActionDescriptor, category?: string): void {
+	public registerWorkbenchAction(descriptor: SyncActionDescriptor, category?: string): void;
+	public registerWorkbenchAction(descriptor: SyncActionDescriptor, keywords?: string[]): void;
+	public registerWorkbenchAction(descriptor: SyncActionDescriptor, category?: string, keywords?: string[]): void;
+	public registerWorkbenchAction(descriptor: SyncActionDescriptor, categoryOrKeywords?: string|string[], keywords?: string[]): void {
 		if (!this.workbenchActions[descriptor.id]) {
 			this.workbenchActions[descriptor.id] = descriptor;
 			registerWorkbenchCommandFromAction(descriptor);
 
-			if (category) {
-				this.mapActionIdToCategory[descriptor.id] = category;
+			if (typeof categoryOrKeywords === 'string') {","`Types.isString`?
",2016-04-18 13:34:07
193,"@@ -52,7 +55,7 @@ export class TerminalInstance {
 				this.isExiting = true;
 				this.dispose();
 				if (exitCode) {
-					console.error('Integrated terminal exited with code ' + exitCode);
+					this.messageService.show(Severity.Error, nls.localize('terminal.integrated.exitedWithCode', 'Terminal: The terminal process terminated with exit code: {0}', exitCode));","I don't think `Terminal:` is necessary here, doesn't seem to be used elsewhere (from a cursory search of `Severity.Error`).
",2016-07-05 20:53:09
156,"@@ -53,6 +53,11 @@ export class SassParser extends cssParser.Parser {
 
 	// Sass variables: $font-size: 12px;
 	public _parseVariableDeclaration(panic:scanner.TokenType[]=[]): nodes.VariableDeclaration {
+		var cssVariableDeclaration= super._parseCssVariableDeclaration(panic);","That looks wrong. Not all places where you can declare a sass variable are also suited to declare a css variable.
",2016-05-20 10:23:37
304,"@@ -532,7 +532,7 @@ export class TextEditorOptions extends EditorOptions {
 	public static from(input: IResourceInput): TextEditorOptions {
 		let options: TextEditorOptions = null;
 		if (input && input.options) {
-			if (input.options.selection || input.options.forceOpen || input.options.revealIfVisible || input.options.preserveFocus || input.options.pinned || input.options.inactive || typeof input.options.index === 'number') {
+			if (input.options.selection || input.options.forceOpen || input.options.revealIfVisible || !input.options.preserveFocus || input.options.pinned || input.options.inactive || typeof input.options.index === 'number') {","all of this cannot be changed...
",2016-10-05 08:24:48
631,"@@ -536,25 +540,37 @@
 					<!-- seperator    [ ]{0,3}([-*_][ ]{0,2}\2){2,}[ \t]*$\n? -->
 					<!-- list         [ ]{0,3}[*+-]([ ]{1,3}|\t) -->
 					<!-- both are folded together in the expression below -->
-					<string>(^|\G)(?!\s*$|#|[ ]{0,3}((([*_][ ]{0,2}\2){2,}[ \t]*$\n?)|([*+-]([ ]{1,3}|\t)))|\s*\[.+?\]:|&gt;)</string>
-				</dict>
-				<key>raw_block</key>
-				<dict>
-					<key>begin</key>
-					<string>(^|\G)([ ]{4}|\t)</string>
-					<key>name</key>
-					<string>markup.raw.block.markdown</string>
-					<key>while</key>
-					<string>(^|\G)([ ]{4}|\t)</string>
+					<string>(^|\G)(?!\s*$|#|[`~]{0,3}|[ ]{0,3}((([*_][ ]{0,2}\2){2,}[ \t]*$\n?)|([*+-]([ ]{1,3}|\t)))|\s*\[.+?\]:|&gt;)</string>
 				</dict>
 				<key>fenced_code_block_css</key>
 				<dict>
 					<key>begin</key>
-					<string>(^|\G)\s*(([`~]){3,})\s*(css|css.erb)(\s+.*)?$</string>
+					<string>(^|\G)\s*([`~]{3,})\s*(css|css.erb)\n</string>
 					<key>name</key>
 					<string>markup.fenced_code.block.markdown</string>
-					<key>while</key>
-					<string>(^|\G)(?!\s*\2\3*\s*$)</string>
+					<key>end</key>
+					<string>(^|\G)\s*([`~]{3,})\n</string>",We have to use a while clause here. This prevents broken language grammars from leaking outside of the fenced block. Switching to while from end fixed a large number of syntax highlighting issues.,2016-12-20 23:29:21
848,"@@ -539,6 +539,48 @@ export class WorkbenchLayout implements IVerticalSashLayoutProvider, IHorizontal
 		return this.panelMaximized;
 	}
 
+	// Add reset for keyboard support
+	public resetSideBarWidth(): number {",Not being used?,2017-03-22 13:26:51
849,"@@ -539,6 +539,48 @@ export class WorkbenchLayout implements IVerticalSashLayoutProvider, IHorizontal
 		return this.panelMaximized;
 	}
 
+	// Add reset for keyboard support
+	public resetSideBarWidth(): number {
+		this.sidebarWidth = MIN_SIDEBAR_PART_WIDTH;
+		return this.sidebarWidth;
+	}
+
+	// change part size along the main axis
+	public setPartSizeChange(part: Parts, sizeChange: number): boolean {",This method should do the same validation about minimal and maximal sizes for a specific part as we already do when the user resizes a view using the sashes (e.g. [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/layout.ts#L192)),2017-03-22 13:28:25
369,"@@ -549,6 +568,33 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 		return promiseCompletedOnHide;
 	}
 
+	private handleOnCancel(isPicker: boolean): void {
+		// restore the editor part state after cancelling
+		this.historyService.block(true);","@wprater shouldn't this be `block(false)`? also I am missing the all to `block(true)`.
",2016-10-21 10:03:37
370,"@@ -549,6 +568,33 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 		return promiseCompletedOnHide;
 	}
 
+	private handleOnCancel(isPicker: boolean): void {
+		// restore the editor part state after cancelling
+		this.historyService.block(true);
+
+		// restore the previous preview editor
+		if (this.previousPreviewEditorInput) {","@wprater unfortunately I think this is more complicated for the restore part. I can see the following states:
- 1.) no active editor
- 2.) no preview editor
- 3.) active editor is preview editor
- 4.) active editor is not preview editor

1.) easy, just close the preview editor that was opened
2.) also easy, just close the preview editor
3.) restore the previous active editor by opening it
4.) restore the previous editor in the preview slot but open it in the background because it was not the active one. also open the previous active editor

Also you have to be careful that you do this from the `onCancel()` callback. Because as far as I remember this method is not called when you actually pick an entry from quick open. I would expect some additional logic when an element is picked.
",2016-10-21 10:06:44
67,"@@ -55,23 +55,30 @@ export interface IThread extends ITreeElement {
 	threadId: number;
 	name: string;
 	stoppedDetails: IRawStoppedDetails;
+
+	/**
+	 * Queries the debug adapter for the callstack and returns a promise with
+	 * the stack frames of the callstack.
+	 * If the thread is not stopped, it returns a promise to an empty array.
+	 */
 	getCallStack(debugService: IDebugService): TPromise<IStackFrame[]>;
-	clearCallStack(): void;
 
 	/**
-	 * Indicates whether the call stack for this thread can be obtained from
-	 * the debug adapter.
+	 * Gets the callstack if it has already been received from the debug
+	 * adapter, otherwise it returns undefined.
 	 */
-	callStackObtainable: boolean;
+	getCachedCallStack(): IStackFrame[];
 
 	/**
-	 * Indicates whether the call stack for this thread is available because it
-	 * has already been obtained from the debug adapter.
-	 * This property is used to determine whether the call stack is available
-	 * without triggering a call to the debug adapter.
+	 * Invalidates the callstack cache
 	 */
-	callStackAvailable: boolean;
+	clearCallStack(): void;
 
+	/**
+	 * Indicates whether this thread is stopped. The callstack for stopped
+	 * threads can be retrieved from the debug adapter.
+	 */
+	stopped: boolean;","`stopped` doesn't necessarily need to be exposed. We could have two methods `setRunning` and `setStopped` that would set `stopped` to false and `true`, respectively.

I left it exposed so that the tests can check it. I'm fine removing `stopped` from the interface and only have setters. Let me know what you think.
",2016-03-16 02:48:04
881,"@@ -55,7 +55,39 @@ export class CodeSnippet implements ICodeSnippet {
 	}
 
 	static fromEmmet(template: string): CodeSnippet {
-		return EmmetSnippetParser.parse(template);
+		//return EmmetSnippetParser.parse(template);
+
+		let matchFinalStops = template.match(/\$\{0\}/g);
+		if (!matchFinalStops || matchFinalStops.length === 1) {
+			return CodeSnippet.fromTextmate(template);
+		}
+
+		// Emmet sometimes returns snippets with multiple ${0}
+		// In such cases, replace ${0} with incremental tab stops
+","There is also the shorthand notion which omits the curlies, like so `foo$1ba$0r`. Isn't emmet using that?",2017-04-14 07:41:24
882,"@@ -55,7 +55,39 @@ export class CodeSnippet implements ICodeSnippet {
 	}
 
 	static fromEmmet(template: string): CodeSnippet {
-		return EmmetSnippetParser.parse(template);
+		//return EmmetSnippetParser.parse(template);
+
+		let matchFinalStops = template.match(/\$\{0\}/g);
+		if (!matchFinalStops || matchFinalStops.length === 1) {
+			return CodeSnippet.fromTextmate(template);
+		}
+
+		// Emmet sometimes returns snippets with multiple ${0}
+		// In such cases, replace ${0} with incremental tab stops
+
+		let maxTabStop = -1;
+		let matches = [];
+		let regex = /\$\{(\d+)\}/g;
+		while (matches = regex.exec(template)) {
+			let tabStop = Number(matches[1]);
+			if (tabStop > maxTabStop) {
+				maxTabStop = tabStop;
+			}
+		}
+		regex = /\$\{(\d+):[^\}]+\}/g;
+		matches = [];
+		while (matches = regex.exec(template)) {
+			let tabStop = Number(matches[1]);
+			if (tabStop > maxTabStop) {
+				maxTabStop = tabStop;
+			}
+		}","If this is becoming too complex, e.g `$1`, with escaped `}`, or nested placeholder (stretch, like `foo ${1:\}}` or `foo${2:b${1:ar}$0`), we should consider using the (new) snippet parser (`SnippetParser`) which allows you read all placeholders. Tho I'd say that depends on the Emmet-TextMate-subset",2017-04-14 07:44:44
291,"@@ -55,7 +55,8 @@
 	width: 49%;
 	margin: 0 1% 0 0;
 	text-align: right;
-	font-weight: bold;
+	font-weight: normal;","You can just take out `font-weight` altogether
",2016-09-29 00:14:11
902,"@@ -55,8 +55,26 @@ export class ExtHostEditors extends ExtHostEditorsShape {
 		return this._extHostDocumentsAndEditors.allEditors();
 	}
 
-	showTextDocument(document: vscode.TextDocument, column: vscode.ViewColumn, preserveFocus: boolean): TPromise<vscode.TextEditor> {
-		return this._proxy.$tryShowTextDocument(<URI>document.uri, TypeConverters.fromViewColumn(column), preserveFocus).then(id => {
+	showTextDocument(document: vscode.TextDocument, column: vscode.ViewColumn, preserveFocus: boolean): TPromise<vscode.TextEditor>;
+	showTextDocument(document: vscode.TextDocument, options: { column: vscode.ViewColumn, preserveFocus: boolean, pinned: boolean }): TPromise<vscode.TextEditor>;
+	showTextDocument(document: vscode.TextDocument, columnOrOptions: vscode.ViewColumn | vscode.TextDocumentShowOptions, preserveFocus?: boolean): TPromise<vscode.TextEditor>;
+	showTextDocument(document: vscode.TextDocument, columnOrOptions: vscode.ViewColumn | vscode.TextDocumentShowOptions, preserveFocus?: boolean): TPromise<vscode.TextEditor> {
+		let options: ITextDocumentShowOptions;
+		if (typeof columnOrOptions === 'number') {
+			options = {
+				position: TypeConverters.fromViewColumn(columnOrOptions),
+				preserveFocus: preserveFocus,
+				pinned: true
+			};
+		} else {
+			options = {",The `else` cannot be unconditional because it will be hit when no second parameter is given. Add a check like `typeof columnOrOptions === 'object'`,2017-04-25 14:05:50
224,"@@ -553,6 +552,18 @@ export class OneCursor {
 	public getViewLineMaxColumn(lineNumber:number): number {
 		return this.viewModelHelper.viewModel.getLineMaxColumn(lineNumber);
 	}
+	public getViewLineMinColumn(lineNumber:number): number {
+		return this.viewModelHelper.viewModel.getLineMinColumn(lineNumber);
+	}
+	public getViewLineCenterColumn(lineNumber:number): number {","You have to be careful about this one. This does not work for lines containing bi-di or variable width character sizes.
",2016-07-15 11:12:25
13,"@@ -553,6 +564,9 @@ export class MainThreadDocuments {
 		modelService.onModelRemoved.add(this._onModelRemoved, this, this._toDispose);
 		modelService.onModelModeChanged.add(this._onModelModeChanged, this, this._toDispose);
 
+		this._toDispose.push(eventService.addListener2(FileEventType.FILE_SAVING, (e: LocalFileChangeEvent) => {
+			this._proxy._acceptModelSaving(e.getAfter().resource);
+		}));","What guarantees do we make when a document is being saved? Can people still modify etc?
",2015-11-24 09:12:06
864,"@@ -555,13 +556,15 @@ export class GlobalNewUntitledFileAction extends Action {
 		id: string,
 		label: string,
 		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
-		@IUntitledEditorService private untitledEditorService: IUntitledEditorService
+		@IUntitledEditorService private untitledEditorService: IUntitledEditorService,
+		@IConfigurationService private configurationService: IConfigurationService
 	) {
 		super(id, label);
 	}
 
 	public run(): TPromise<any> {
-		const input = this.untitledEditorService.createOrGet();
+		const configuration = this.configurationService.getConfiguration<IFilesConfiguration>();","I suggest to not add this to the action but actually to the place where untitled editors are being created. There can be other ways how untitled buffers open (e.g. from extensions) and I think a configured default language would also apply there.

I am thinking somewhere inside https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/untitled/common/untitledEditorService.ts#L177 to use the configuration if the `modeId` parameter is undefined.",2017-03-25 23:52:49
743,"@@ -557,6 +617,7 @@ class MouseDownState {
 	private _lastMouseDownPositionEqualCount: number;
 	private _lastMouseDownCount: number;
 	private _lastSetMouseDownCountTime: number;
+	private _lastMouseDownEvent: 'mouseDown' | 'drag';",pick a better name for this. Perhaps just a boolean `isDragAndDrop` would do. This boolean should be set only in the `start` method above,2017-02-20 11:13:52
732,"@@ -558,4 +560,97 @@ export class ViewModel extends EventEmitter implements IViewModel {
 	public validateModelPosition(position: editorCommon.IPosition): Position {
 		return this.model.validatePosition(position);
 	}
+
+	public getPlainTextToCopy(ranges: Range[], enableEmptySelectionClipboard: boolean): string {
+		let newLineCharacter = this.getEOL();
+
+		if (ranges.length === 1) {
+			let range: Range = ranges[0];
+			if (range.isEmpty()) {
+				if (enableEmptySelectionClipboard) {
+					let modelLineNumber = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(range.startLineNumber, 1)).lineNumber;
+					return this.getModelLineContent(modelLineNumber) + newLineCharacter;
+				} else {
+					return '';
+				}
+			}
+
+			return this.getValueInRange(range, editorCommon.EndOfLinePreference.TextDefined);
+		} else {
+			ranges = ranges.slice(0).sort(Range.compareRangesUsingStarts);
+			let result: string[] = [];
+			for (let i = 0; i < ranges.length; i++) {
+				result.push(this.getValueInRange(ranges[i], editorCommon.EndOfLinePreference.TextDefined));
+			}
+
+			return result.join(newLineCharacter);
+		}
+	}
+
+	public getHTMLToCopy(ranges: Range[], enableEmptySelectionClipboard: boolean): string {
+		let rules: { [key: string]: string } = {};",please leave a TODO here so we clean this up once the minimap branch gets merged in (same as above),2017-02-16 15:55:11
517,"@@ -56,6 +60,12 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		this.hideHoverScheduler = new RunOnceScheduler(() => this.hoverWidget.hide(), HOVER_DELAY);
 		this.registerListeners();
 		this.breakpointWidgetVisible = CONTEXT_BREAKPOINT_WIDGET_VISIBLE.bindTo(contextKeyService);
+
+		// TODO: How do I register a new decoration type using exposed api ?","You do not need to do any of this. Just by calling editor.deltaDecorations editor should register you decoration nicely.
When removing decorations you will also use ids of each of the added decorations by calling deltaDecoraitons.",2016-11-28 10:27:42
620,"@@ -56,8 +56,7 @@ export class KillTerminalAction extends Action {
 }
 
 /**
- * Copies the terminal selection. Note that since the command palette takes focus from the terminal,",This comment seems obsolete to me. Let me know if i'm missing something.,2016-12-18 22:50:04
622,"@@ -56,8 +56,7 @@ export class KillTerminalAction extends Action {
 }
 
 /**
- * Copies the terminal selection. Note that since the command palette takes focus from the terminal,
- * this can only be triggered via a keybinding.
+ * Copies the terminal selection.","The comment is still relevant as you can't trigger it through the command palette. This is what it should probably say though:

```js
/**
 * Copies the terminal selection. Note that since the command palette takes focus from the terminal,
 * this cannot be triggered through the command palette.
 */
```",2016-12-19 05:31:33
134,"@@ -560,7 +560,7 @@ export abstract class BaseGlobalNewAction extends Action {
 }
 
 /* Create new file from anywhere: Open untitled */
-export class GlobalNewFileAction extends Action {
+export class GlobalNewUntitledFileAction extends Action {
 	public static ID = 'workbench.action.files.newUntitledFile';
 	public static LABEL = nls.localize('newFile', ""New File"");","Should this maybe read ""New Untitled File"" to make the difference clear?
",2016-04-21 11:12:56
632,"@@ -566,11 +582,32 @@
 				<key>fenced_code_block_basic</key>
 				<dict>
 					<key>begin</key>
-						<string>(^|\G)\s*(([`~]){3,})\s*(html|htm|shtml|xhtml|inc|tmpl|tpl)(\s+.*)?$</string>
+					<string>(^|\G)\s*([`~]{3,})\s*(html|htm|shtml|xhtml|inc|tmpl|tpl)\n</string>",Keep the `(\s+.*)?$`bit. We allow arbitrary text on the rest of the line after the language identifier to support passing other attributes (like line numbers specifiers) that some markdown engines support.,2016-12-20 23:31:27
633,"@@ -566,11 +582,32 @@
 				<key>fenced_code_block_basic</key>
 				<dict>
 					<key>begin</key>
-						<string>(^|\G)\s*(([`~]){3,})\s*(html|htm|shtml|xhtml|inc|tmpl|tpl)(\s+.*)?$</string>
+					<string>(^|\G)\s*([`~]{3,})\s*(html|htm|shtml|xhtml|inc|tmpl|tpl)\n</string>
 					<key>name</key>
 					<string>markup.fenced_code.block.markdown</string>
-					<key>while</key>
-					<string>(^|\G)(?!\s*\2\3*\s*$)</string>
+					<key>end</key>
+					<string>(^|\G)\s*([`~]{3,})\n</string>",This should also reverted to how it was before so that we consume any number of spaces after the fence end and the end of line.,2016-12-20 23:32:17
762,"@@ -569,6 +569,9 @@ export class TerminalInstance implements ITerminalInstance {
 			env['PTYCOLS'] = cols.toString();
 			env['PTYROWS'] = rows.toString();
 		}
+		if (!env['LANG']) {","I think it's a good idea to have a fallback, but this would probably be better in `_getLangEnvVariable` instead, replacing the `n === 0` case :+1: ",2017-02-20 20:34:02
133,"@@ -57,7 +57,7 @@ const category = nls.localize('filesCategory', ""Files"");
 
 let workbenchActionsRegistry = <IWorkbenchActionRegistry>Registry.as(ActionExtensions.WorkbenchActions);
 workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(SaveFileAsAction, SaveFileAsAction.ID, SaveFileAsAction.LABEL, { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_S }), category, ['save', 'as']);
-workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(GlobalNewFileAction, GlobalNewFileAction.ID, GlobalNewFileAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_N }), category, ['new', 'file']);
+workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(GlobalNewUntitledFileAction, GlobalNewUntitledFileAction.ID, GlobalNewUntitledFileAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.KEY_N }), category, ['new', 'file']);","Maybe add the ""untitled"" to the keywords?
",2016-04-21 11:12:17
282,"@@ -57,7 +61,15 @@ export class LineNumbersOverlay extends DynamicViewOverlay {
 		return true;
 	}
 	public onCursorPositionChanged(e:editorCommon.IViewCursorPositionChangedEvent): boolean {
-		return false;
+		let modelPosition = this._context.model.convertViewPositionToModelPosition(e.position.lineNumber, e.position.column);
+
+		if (!this._relativeLineNumbers || this._currentLineNumber === modelPosition.lineNumber) {
+			return false;
+		}
+
+		this._currentLineNumber = modelPosition.lineNumber;","In the case where `this._relativeLineNumbers` is `false`, `this._currentLineNumber` should still be assigned such that `this._currentLineNumber` always has a good value.

It is possible that the `relativeLineNumbers` option changes at runtime and in that case we'd want `this._currentLineNumber` to be up-to-date.
",2016-09-21 06:06:24
865,"@@ -575,6 +575,7 @@ export interface IFilesConfiguration {
 		exclude: glob.IExpression;
 		watcherExclude: { [filepattern: string]: boolean };
 		encoding: string;
+		defaultLanguage: string;",We do have an extension running that provides intellisense inside settings. For this setting I would like to see the list of language Ids when the user wants to quickly select a known language. The place to add this is here: https://github.com/Microsoft/vscode/blob/master/extensions/configuration-editing/src/settingsDocumentHelper.ts#L26,2017-03-25 23:55:11
680,"@@ -58,12 +59,19 @@ export enum TextEditorRevealType {
 	InCenterIfOutsideViewport = 2
 }
 
-export interface IApplyEditsOptions {
+export interface IUndoStopOptions {
 	undoStopBefore: boolean;
 	undoStopAfter: boolean;
+}
+
+export interface IApplyEditsOptions extends IUndoStopOptions {
 	setEndOfLine: EndOfLine;
 }
 
+export interface IInsertSnippetOptions extends IUndoStopOptions {
+",![](https://cdn.meme.am/Instance/Preview?imageID=10051184&generatorTypeID=&panels=&text0=Machete&text1=don't%20do%20empty%20interface&text2=&text3=),2017-01-18 10:32:49
717,"@@ -58,4 +67,27 @@ export class MainThreadMessageService extends MainThreadMessageServiceShape {
 			});
 		});
 	}
+
+	private showModalMessage(severity: Severity, message: string, commands: { title: string; isCloseAffordance: boolean; handle: number; }[]): Thenable<number> {
+		let closeAffordanceIndex = -1;",Just keep a `boolean`? I do not see `closeAffordanceIndex` being used for anything but that. Or is that an oversight?,2017-02-02 16:00:54
474,"@@ -58,7 +68,7 @@ export interface IUntitledEditorService {
 	 * It is valid to pass in a file resource. In that case the path will be used as identifier.
 	 * The use case is to be able to create a new file with a specific path with VSCode.
 	 */
-	createOrGet(resource?: URI, modeId?: string): UntitledEditorInput;
+	createOrGet(resource?: URI, modeId?: string, restoreResource?: URI): UntitledEditorInput;","@Tyriar maybe `restoreFromBackupResource` to make it clear this is about backups?
",2016-11-09 07:44:16
28,"@@ -583,6 +586,63 @@ export class OneCursorOp {
 		return true;
 	}
 
+	public static moveSubWordLeft(cursor:OneCursor, inSelectionMode: boolean, ctx: IOneCursorOperationContext): boolean {
+		let position = cursor.getPosition();
+		var lineNumber = position.lineNumber;","Use `const` as much as possible. If the value changes, like `positionFound` at L608, use `let`. Try to avoid `var`.

Tough I noticed Microsoft isn't doing this everytime as well. But it's best practice :).
",2015-12-11 13:11:48
964,"@@ -586,6 +586,7 @@ export class CodeMenu {
 		const output = this.createMenuItem(nls.localize({ key: 'miToggleOutput', comment: ['&& denotes a mnemonic'] }, ""&&Output""), 'workbench.action.output.toggleOutput');
 		const debugConsole = this.createMenuItem(nls.localize({ key: 'miToggleDebugConsole', comment: ['&& denotes a mnemonic'] }, ""De&&bug Console""), 'workbench.debug.action.toggleRepl');
 		const integratedTerminal = this.createMenuItem(nls.localize({ key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] }, ""&&Integrated Terminal""), 'workbench.action.terminal.toggleTerminal');
+		const taskMenu = this.createMenuItem(nls.localize({ key: 'miShowTask', comment: ['&& denotes a mnemonic'] }, ""&&Show Tasks...""), 'workbench.action.showTasks');","The && mnemonic is the letter that gets underlined on windows, then you can open the menu with alt+that letter. Looks like S is taken by Search, maybe use T",2017-06-12 21:22:52
696,"@@ -588,6 +589,25 @@ export abstract class CommonCodeEditor extends EventEmitter implements editorCom
 			return;
 		}
 
+		if (handlerId === editorCommon.Handler.Paste) {
+			if (!this.cursor || typeof payload.text !== 'string' || payload.text.length === 0) {
+				// nothing to do
+				return;
+			}
+			const startPosition = this.cursor.getSelection().getStartPosition();
+			this.cursor.trigger(source, handlerId, payload);
+			const endPosition = this.cursor.getSelection().getStartPosition();
+			if (source === 'keyboard') {
+				this.emit(editorCommon.EventType.DidPaste, {",I would prefer for the editor to always give out rich objects (i.e. `Range` and not `IRange`). It does so for all non-serializable events.,2017-01-19 15:37:45
780,"@@ -59,6 +59,31 @@ export class CloseEditorAction extends Action {
 	}
 }
 
+export class ForceCloseEditorAction extends Action {",Suggest to move this into `editorActions.ts`,2017-03-01 05:15:11
779,"@@ -59,6 +59,31 @@ export class CloseEditorAction extends Action {
 	}
 }
 
+export class ForceCloseEditorAction extends Action {
+
+	public static ID = 'workbench.action.forceCloseActiveEditor';",Maybe better `workbench.action.revertAndCloseActiveEditor` ?,2017-03-01 05:14:33
781,"@@ -59,6 +59,31 @@ export class CloseEditorAction extends Action {
 	}
 }
 
+export class ForceCloseEditorAction extends Action {
+
+	public static ID = 'workbench.action.forceCloseActiveEditor';
+	public static LABEL = nls.localize('forceCloseActiveEditor', ""Force Close Editor"");",`Revert and Close Editor`,2017-03-01 05:15:28
20,"@@ -59,7 +59,8 @@
 				"".xml"",
 				"".xpdl"",
 				"".xsd"",
-				"".xul""","H
H
",2015-12-01 12:17:19
238,"@@ -596,6 +596,14 @@ export class View extends ViewEventHandler implements editorBrowser.IView, IDisp
 		return viewModel.convertViewRangeToModelRange(currentCenteredViewRange);
 	}
 
+	public getVisibleRangeInViewport(): Range {
+		if (this._isDisposed) {
+			throw new Error('ViewImpl.getVisibleRangeInViewport: View is disposed');
+		}
+		let visibleRange= this.layoutProvider.getLinesViewportData().visibleRange;","spacing around `=`
",2016-07-20 13:25:04
181,"@@ -6,10 +6,12 @@
 {
 	""label.closeButton"": ""关闭"",
 	""label.find"": ""查找"",
-	""label.matchesLocation"": ""第 {0} 个(共 {1} 个)"",
+	""label.matchesLocation"": ""{0} / {1}"",
 	""label.nextMatchButton"": ""下一个匹配"",
 	""label.noResults"": ""无结果"",
 	""label.previousMatchButton"": ""上一个匹配"",
+	""label"".allMatchButton"": ""选中所有匹配"",","I think we don't modify locaization files ourselves, only touch the English version.
",2016-06-12 04:12:09
582,"@@ -6,10 +6,16 @@
 
 import * as nls from 'vs/nls';
 import { KeyCode, KeyMod, KeyChord } from 'vs/base/common/keyCodes';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { isFalsyOrEmpty } from 'vs/base/common/arrays';
 import { SortLinesCommand } from 'vs/editor/contrib/linesOperations/common/sortLinesCommand';
+import { getDocumentRangeFormattingEdits } from 'vs/editor/contrib/format/common/format';
+import { EditOperationsCommand } from 'vs/editor/contrib/format/common//formatCommand';",two slashes here -> vs/editor/contrib/format/common//formatCommand,2016-12-05 17:04:48
567,"@@ -6,12 +6,17 @@
 'use strict';
 
 import DOM = require('vs/base/browser/dom');
+import { onUnexpectedError } from 'vs/base/common/errors';
 import { defaultGenerator } from 'vs/base/common/idGenerator';
 import { escape } from 'vs/base/common/strings';
+import URI from 'vs/base/common/uri';
 import { TPromise } from 'vs/base/common/winjs.base';
 import { IHTMLContentElement, MarkedString } from 'vs/base/common/htmlContent';
 import { marked } from 'vs/base/common/marked/marked';
 import { IMouseEvent } from 'vs/base/browser/mouseEvent';
+import { tokenizeToString } from 'vs/editor/common/modes/textToHtmlTokenizer';",layer breaker,2016-12-05 13:56:12
568,"@@ -6,12 +6,17 @@
 'use strict';
 
 import DOM = require('vs/base/browser/dom');
+import { onUnexpectedError } from 'vs/base/common/errors';
 import { defaultGenerator } from 'vs/base/common/idGenerator';
 import { escape } from 'vs/base/common/strings';
+import URI from 'vs/base/common/uri';
 import { TPromise } from 'vs/base/common/winjs.base';
 import { IHTMLContentElement, MarkedString } from 'vs/base/common/htmlContent';
 import { marked } from 'vs/base/common/marked/marked';
 import { IMouseEvent } from 'vs/base/browser/mouseEvent';
+import { tokenizeToString } from 'vs/editor/common/modes/textToHtmlTokenizer';
+import { IModeService } from 'vs/editor/common/services/modeService';",same,2016-12-05 13:56:23
569,"@@ -6,12 +6,17 @@
 'use strict';
 
 import DOM = require('vs/base/browser/dom');
+import { onUnexpectedError } from 'vs/base/common/errors';
 import { defaultGenerator } from 'vs/base/common/idGenerator';
 import { escape } from 'vs/base/common/strings';
+import URI from 'vs/base/common/uri';
 import { TPromise } from 'vs/base/common/winjs.base';
 import { IHTMLContentElement, MarkedString } from 'vs/base/common/htmlContent';
 import { marked } from 'vs/base/common/marked/marked';
 import { IMouseEvent } from 'vs/base/browser/mouseEvent';
+import { tokenizeToString } from 'vs/editor/common/modes/textToHtmlTokenizer';
+import { IModeService } from 'vs/editor/common/services/modeService';
+import { IOpenerService } from 'vs/platform/opener/common/opener';",same,2016-12-05 13:56:32
217,"@@ -6,40 +6,31 @@
 .monaco-editor .margin-view-overlays .folding {
 	margin-left: 5px;
 	cursor: pointer;
-}
-
-.monaco-editor .margin-view-overlays .folding::after {
 	background-repeat: no-repeat;","why are these changes part of this PR? Is the change in the editor core forcing these changes?
",2016-07-14 09:39:57
756,"@@ -6,6 +6,8 @@
 .monaco-editor .zone-widget .zone-widget-container.breakpoint-widget {
 	height: 30px !important;
 	display: flex;",Try to put it in one rule together,2017-02-20 14:16:34
65,"@@ -6,7 +6,7 @@
 	""contributes"": {
 		""languages"": [{
 			""id"": ""html"",
-			""extensions"": [ "".html"", "".htm"", "".shtml"", "".mdoc"", "".jsp"", "".asp"", "".aspx"", "".jshtm"" ],
+			""extensions"": [ "".html"", "".htm"", "".shtml"", "".xhtml"", "".mdoc"", "".jsp"", "".asp"", "".aspx"", "".jshtm"" ],
 			""aliases"": [ ""HTML"", ""htm"", ""html"", ""xhtml"" ],
 			""mimetypes"": [""text/html"", ""text/x-jshtm"", ""text/template"", ""text/ng-template""]","Oh you should also probably add `application/xhtml+xml` to this list.
",2016-02-29 22:56:59
1,"@@ -6,7 +6,7 @@
 	""contributes"": {
 		""languages"": [{
 			""id"": ""powershell"",
-			""extensions"": [ "".ps1"", "".psm1"", "".psd1"" ],
+			""extensions"": [  "".ps1"", "".psm1"", "".psd1"", "".pssc"", "".psrc"" ],","Remove the space before `"".ps1""`
",2015-11-19 22:03:13
916,"@@ -60,6 +60,26 @@ class CheckoutRemoteHeadItem extends CheckoutItem {
 	}
 }
 
+class BranchDeleteItem implements QuickPickItem {
+
+	protected get shortCommit(): string { return (this.ref.commit || '').substr(0, 8); }
+	protected get treeish(): string | undefined { return this.ref.name; }
+	get label(): string { return this.ref.name || this.shortCommit; }
+	get description(): string { return this.shortCommit; }
+
+	constructor(protected ref: Ref) { }
+
+	async run(model: Model): Promise<void> {
+		const ref = this.treeish;
+
+		if (!ref) {
+			return;
+		}
+
+		await model.deleteBranch(ref);","A common error from this operation happens when the branch isn't yet merged:

![image](https://cloud.githubusercontent.com/assets/22350/25742311/24ce0144-318f-11e7-96ea-81dfbf6f3d5d.png)

It would be great if the underlying git library would catch this situation, wrap it neatly in a `GitError` with a new `GitErrorCode` and we `try catch` it here, prompting the user `Hey, the branch isn't yet merge. Do you still want to delete it?`.",2017-05-05 10:35:08
311,"@@ -602,6 +605,18 @@ export class WindowsManager implements IWindowsService {
 			iPathsToOpen = this.cliToPaths(openConfig.cli, ignoreFileNotFound);
 		}
 
+		// Add any existing backup workspaces
+		if (openConfig.restoreBackups) {
+			// TODO: Ensure the workspaces being added actually have backups
+			this.backupService.getBackupWorkspaces().forEach(ws => {","What if a window is already opened with a workspace that has backup files, I think you need to avoid opening those again (since we prevent opening the same workspace twice we would just focus that window).
",2016-10-13 15:00:12
934,"@@ -61,11 +64,25 @@ function registerSettingsCompletions(): vscode.Disposable {
 	});
 }
 
-function newSimpleCompletionItem(text: string, range: vscode.Range, description?: string): vscode.CompletionItem {
+function registerExtensionsCompletions(): vscode.Disposable {
+	return vscode.languages.registerCompletionItemProvider({ pattern: '**/extensions.json' }, {
+		provideCompletionItems(document, position, token) {
+			const location = getLocation(document.getText(), document.offsetAt(position));
+			const range = document.getWordRangeAtPosition(position) || new vscode.Range(position, position);
+			if (location.path[0] === 'recommendations') {
+				return vscode.extensions.all",What do you suggest if there are no installed extensions?,2017-05-12 09:21:44
935,"@@ -61,11 +64,25 @@ function registerSettingsCompletions(): vscode.Disposable {
 	});
 }
 
-function newSimpleCompletionItem(text: string, range: vscode.Range, description?: string): vscode.CompletionItem {
+function registerExtensionsCompletions(): vscode.Disposable {
+	return vscode.languages.registerCompletionItemProvider({ pattern: '**/extensions.json' }, {
+		provideCompletionItems(document, position, token) {
+			const location = getLocation(document.getText(), document.offsetAt(position));
+			const range = document.getWordRangeAtPosition(position) || new vscode.Range(position, position);
+			if (location.path[0] === 'recommendations') {
+				return vscode.extensions.all
+					.filter(e => !e.id.startsWith('vscode.'))","- You also need to exclude following extension which is packaged along with VS Code - `Microsoft.vscode-markdown`. This was getting shown in the intelli-sense.

- Intelli-sense should not show already entered extensions. ",2017-05-15 14:46:39
933,"@@ -61,11 +64,25 @@ function registerSettingsCompletions(): vscode.Disposable {
 	});
 }
 
-function newSimpleCompletionItem(text: string, range: vscode.Range, description?: string): vscode.CompletionItem {
+function registerExtensionsCompletions(): vscode.Disposable {
+	return vscode.languages.registerCompletionItemProvider({ pattern: '**/extensions.json' }, {
+		provideCompletionItems(document, position, token) {
+			const location = getLocation(document.getText(), document.offsetAt(position));
+			const range = document.getWordRangeAtPosition(position) || new vscode.Range(position, position);
+			if (location.path[0] === 'recommendations') {
+				return vscode.extensions.all
+					.filter(e => e.id.indexOf('vscode') === -1)",is this should ne `e.id.startsWith('vscode.')`?,2017-05-12 09:21:02
937,"@@ -61,11 +64,32 @@ function registerSettingsCompletions(): vscode.Disposable {
 	});
 }
 
-function newSimpleCompletionItem(text: string, range: vscode.Range, description?: string): vscode.CompletionItem {
+function registerExtensionsCompletions(): vscode.Disposable {
+	return vscode.languages.registerCompletionItemProvider({ pattern: '**/extensions.json' }, {
+		provideCompletionItems(document, position, token) {
+			const location = getLocation(document.getText(), document.offsetAt(position));
+			const range = document.getWordRangeAtPosition(position) || new vscode.Range(position, position);
+			if (location.path[0] === 'recommendations') {
+				const config = vscode.workspace && vscode.workspace.getConfiguration('extensions.json');","I do not think`vscode.workspace.getConfiguration('extensions.json')` will get the extension recommendations. 
You might have to read the document and parse it. You already have document with text, so you can just use parse from `jsonc-parser` to get the existing recommendations.",2017-05-16 16:29:05
32,"@@ -61,28 +61,28 @@ export class ActivitybarPart extends Part implements IActivityService {
 	private registerListeners(): void {
 
 		// Activate viewlet action on opening of a viewlet
-		this.toUnbind.push(this.eventService.addListener(EventType.VIEWLET_OPENING, (e: ViewletEvent) => this.onViewletOpening(e)));
+		this.toUnbind.push(this.eventService.addListener(EventType.VIEWLET_OPENING, (e: CompositeEvent) => this.onViewletOpening(e)));","@isidorn I think we can generalize this event to be COMPOSITE_OPENING and onCompositeOpening() because the listener seems to use the ID of the composite to do something and it also seems to be the only client through out the workbench.
",2016-01-15 15:02:19
968,"@@ -610,6 +610,9 @@ class TaskService extends EventEmitter implements ITaskService {
 
 	private registerCommands(): void {
 		CommandsRegistry.registerCommand('workbench.action.tasks.runTask', (accessor, arg) => {",If I run the build task with cmd+shift+b does this get called?,2017-06-12 21:48:02
945,"@@ -62,10 +68,24 @@ export class StatusBarColorProvider extends Themable implements IWorkbenchContri
 			return STATUS_BAR_NO_FOLDER_BACKGROUND;
 		}
 
-		// debugging
+		// Debugging
 		return STATUS_BAR_DEBUGGING_BACKGROUND;
 	}
 
+	private getForegroundColorKey(): string {","This looks almost identical to `getBackgroundColorKey`. Can we just have one method where all color keys are passed in? Something like `getColorKey(noFolderColor, debuggingColor, normalColor)`?",2017-05-22 04:50:06
635,"@@ -62,6 +65,7 @@ export interface ITerminalConfigHelper {
 	getFont(): ITerminalFont;
 	getFontLigaturesEnabled(): boolean;
 	getCursorBlink(): boolean;
+	isRightClickCopyPaste(): boolean;",Change this to `get...` like `getCursorBlink`,2016-12-21 03:01:49
236,"@@ -622,15 +632,55 @@ export class OneCursorOp {
 			validatedViewPosition = cursor.convertModelPositionToViewPosition(validatedPosition.lineNumber, validatedPosition.column);
 		}
 
+		return this.move(cursor, inSelectionMode, validatedViewPosition, eventSource, ctx);
+	}
+
+	public static move(cursor:OneCursor, inSelectionMode: boolean, to:editorCommon.IPosition | string, eventSource: string, ctx: IOneCursorOperationContext): boolean {","please move argument decoding to `cursor.ts` to do it only once even if there are 1000 cursors.

Please also make it clear which one is cursorMove and which one is the old one. They are all called move now.
",2016-07-15 11:26:08
237,"@@ -622,15 +632,55 @@ export class OneCursorOp {
 			validatedViewPosition = cursor.convertModelPositionToViewPosition(validatedPosition.lineNumber, validatedPosition.column);
 		}
 
+		return this.move(cursor, inSelectionMode, validatedViewPosition, eventSource, ctx);
+	}
+
+	public static move(cursor:OneCursor, inSelectionMode: boolean, to:editorCommon.IPosition | string, eventSource: string, ctx: IOneCursorOperationContext): boolean {
+		if (!to) {
+			illegalArgument('to');
+		}
+
+		if (types.isString(to)) {
+			return this._move(cursor, inSelectionMode, to, ctx);
+		}
+
+		let viewPosition: editorCommon.IPosition= <editorCommon.IPosition>to;","space before equal pls
",2016-07-15 11:26:18
573,"@@ -622,6 +622,10 @@ export abstract class CommonCodeEditor extends EventEmitter implements editorCom
 		return this.model.deltaDecorations(oldDecorations, newDecorations, this.id);
 	}
 ","Same as my previous comment. This PR should not touch anything in the editor land.

As I commented earlier have you tried using editor.deltaDecoraitions which should automatically register a decoration. A nice use case of this api can be found [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/browser/debugEditorModelManager.ts#L97)",2016-12-05 14:49:47
80,"@@ -624,11 +676,13 @@ export class Model extends ee.EventEmitter implements debug.IModel {
 
 	public sourceIsUnavailable(source: Source): void {
 		Object.keys(this.threads).forEach(key => {
-			this.threads[key].callStack.forEach(stackFrame => {","For some reason I had missed updating this reference to `callStack`.

Just pointing out what we have changed today that wasn't in yesterday's commit and you hadn't commented on.
",2016-03-17 00:57:12
255,"@@ -63,6 +66,8 @@ export class TerminalInstance {
 				event: 'input',
 				data: this.sanitizeInput(data)
 			});
+
+			console.log('this.terminalProcess.process.pid=' + this.terminalProcess.process.pid);","💥 
",2016-08-18 19:36:22
527,"@@ -63,9 +63,10 @@ export class TerminalPanel extends Panel {
 		this._terminalService.setContainers(this.getContainer().getHTMLElement(), this._terminalContainer);
 
 		this._register(this._themeService.onDidColorThemeChange(this._updateTheme.bind(this)));
-		this._register(this._configurationService.onDidUpdateConfiguration(this._updateConfig.bind(this)));
+		this._register(this._configurationService.onDidUpdateConfiguration(this._updateFont.bind(this)));
+		this._updateFont();
 		this._updateTheme();
-		this._updateConfig();
+		this._terminalService.updateConfig();",I think this can safely be removed.,2016-11-28 19:11:06
372,"@@ -639,18 +639,26 @@ export class WindowsManager implements IWindowsService {
 			iPathsToOpen = this.cliToPaths(openConfig.cli, ignoreFileNotFound);
 		}
 
-		// Add any existing backup workspaces
+		let configuration: IWindowConfiguration;
+		let openInNewWindow = openConfig.preferNewWindow || openConfig.forceNewWindow;
+
+		// Restore any existing backup workspaces
 		if (openConfig.restoreBackups) {
-			this.backupService.getWorkspaceBackupPathsSync().forEach(ws => {
-				iPathsToOpen.push(this.toIPath(ws));
-			});
-			// Get rid of duplicates
-			iPathsToOpen = arrays.distinct(iPathsToOpen, path => {
-				if (!('workspacePath' in path)) {
-					return path.workspacePath;
-				}
-				return platform.isLinux ? path.workspacePath : path.workspacePath.toLowerCase();
+			const workspacesWithBackups = this.backupService.getWorkspaceBackupPathsSync();","As reported in a different issue that code should really move out of the `open()` method and only be used from the first startup code. Otherwise it makes it very hard to understand what this method is actually doing (it is already quite complex).
",2016-10-21 13:57:17
534,"@@ -64,6 +67,14 @@ export class BackupFilesModel implements IBackupFilesModel {
 		return true;
 	}
 
+	public getTextFiles(): string[] {","@Tyriar this is some crazy string magic that is not very robust, instead I suggest to use the `URI` apis we already have: use `URI.parse()` to convert the resource string into a `URI` and then you have access to `fsPath` and scheme to find out what you want.",2016-11-29 05:26:25
645,"@@ -645,19 +645,40 @@ export class VSCodeWindow implements IVSCodeWindow {
 
 		this.win.setFullScreen(willBeFullScreen);
 
-		// Windows & Linux: Hide the menu bar but still allow to bring it up by pressing the Alt key
-		if (platform.isWindows || platform.isLinux) {
-			if (willBeFullScreen) {
-				this.setMenuBarVisibility(false);
-			} else {
-				this.setMenuBarVisibility(!this.storageService.getItem<boolean>(VSCodeWindow.menuBarHiddenKey, false)); // restore as configured
-			}
-		}
+		// respect configured menu bar visibility",@bpasero I changed the existing behavior here. Does this make sense for you?,2016-12-23 15:18:38
254,"@@ -65,15 +65,15 @@ export interface ITerminalService {
 
 	close(): TPromise<any>;
 	copySelection(): TPromise<any>;
-	createNew(): TPromise<any>;
-	focus(): TPromise<any>;
+	createNew(name?: string): TPromise<number>;","As a recommendation I'd return the `ITerminalPanel` here and move `setActive`, `show`, `dispose` etc in it - the services seems to become quite large. 
",2016-08-18 19:35:52
405,"@@ -65,6 +97,30 @@ export class ActivitybarPart extends Part implements IActivityService {
 		}
 	}
 
+	getIsEnabledForRegisteredViewlets(): { [viewletId: string]: boolean } {","Add access modifier
",2016-10-24 15:41:53
406,"@@ -65,6 +97,30 @@ export class ActivitybarPart extends Part implements IActivityService {
 		}
 	}
 
+	getIsEnabledForRegisteredViewlets(): { [viewletId: string]: boolean } {
+		const result = {};
+		for (let viewletId in this.registeredViewlets) {
+			result[viewletId] = (this.enabledExternalViewlets.indexOf(viewletId) !== -1);
+		}
+		return result;
+	}
+
+	toggleViewlet(viewletId: string): void {","Add access modifier
",2016-10-24 15:41:57
915,"@@ -650,6 +650,11 @@ export class Repository {
 		await this.run(args);
 	}
 
+	async deleteBranch(name: string): Promise<void> {
+		const args = ['branch', '-d', name];",Maybe we should be explicit with the branch name and use its full form `refs/heads/${name}` instead of simply `name`.,2017-05-05 10:33:26
994,"@@ -651,12 +651,16 @@ export class List<T> implements ISpliceable<T>, IDisposable {
 		if (options.ariaLabel) {
 			this.view.domNode.setAttribute('aria-label', options.ariaLabel);
 		}
+		this.view.domNode.setAttribute('aria-setsize', this.length.toString());","Just make this `0`, to be explicit.",2017-06-19 14:39:42
995,"@@ -651,12 +651,16 @@ export class List<T> implements ISpliceable<T>, IDisposable {
 		if (options.ariaLabel) {
 			this.view.domNode.setAttribute('aria-label', options.ariaLabel);
 		}
+		this.view.domNode.setAttribute('aria-setsize', this.length.toString());
 
 		this.style(options);
 	}
 
 	splice(start: number, deleteCount: number, elements: T[] = []): void {
-		this.eventBufferer.bufferEvents(() => this.spliceable.splice(start, deleteCount, elements));
+		this.eventBufferer.bufferEvents(() => {",Return this to the old syntax.,2017-06-19 14:39:57
651,"@@ -652,19 +652,40 @@ export class VSCodeWindow implements IVSCodeWindow {
 
 		this.win.setFullScreen(willBeFullScreen);
 
-		// Windows & Linux: Hide the menu bar but still allow to bring it up by pressing the Alt key
-		if (platform.isWindows || platform.isLinux) {
-			if (willBeFullScreen) {
-				this.setMenuBarVisibility(false);
-			} else {
-				this.setMenuBarVisibility(!this.storageService.getItem<boolean>(VSCodeWindow.menuBarHiddenKey, false)); // restore as configured
-			}
-		}
+		// respect configured menu bar visibility
+		const windowConfig = this.configurationService.getConfiguration<IWindowSettings>('window');
+		this.setMenuBarVisibility(windowConfig && windowConfig.menuBarVisibility, false);
 	}
 
-	public setMenuBarVisibility(visible: boolean): void {
-		this.win.setMenuBarVisibility(visible);
-		this.win.setAutoHideMenuBar(!visible);
+	public setMenuBarVisibility(visibility: '' | 'visible' | 'toggle' | 'hidden', notify: boolean = true): void {
+
+		switch (visibility) {
+			case ('visible'): {
+				this.win.setMenuBarVisibility(true);
+				this.win.setAutoHideMenuBar(false);
+				break;
+			}
+			case ('toggle'): {
+				this.win.setMenuBarVisibility(false);
+				this.win.setAutoHideMenuBar(true);
+
+				if (notify) {
+					this.send('vscode:showInfoMessage', nls.localize('hiddenMenuBar', ""You can still access the menu bar by pressing the **Alt** key.""));
+				};
+				break;
+			}
+			case ('hidden'): {
+				this.win.setMenuBarVisibility(false);
+				this.win.setAutoHideMenuBar(false);
+				break;
+			}
+			default: {",@xwvvvvwx can we merge this with the 'visible' case? that avoids code duplication here.,2017-01-04 10:54:12
992,"@@ -656,7 +656,10 @@ export class List<T> implements ISpliceable<T>, IDisposable {
 	}
 
 	splice(start: number, deleteCount: number, elements: T[] = []): void {
-		this.eventBufferer.bufferEvents(() => this.spliceable.splice(start, deleteCount, elements));
+		this.eventBufferer.bufferEvents(() => {
+			this.spliceable.splice(start, deleteCount, elements);
+			this.view.domNode.setAttribute('aria-setsize', this.length.toString());","You should do this outside the event buffering.

Shouldn't there be an initial value for this, before any `splice` is called?",2017-06-19 14:28:57
186,"@@ -658,6 +662,22 @@
 						</dict>
 					</array>
 				</dict>
+				<key>fenced_code_block_php</key>
+				<dict>
+					<key>begin</key>
+					<string>(^|\G)\s*([`~]{3,})\s*(php|php3|php4|php5|phpt|phtml|aw|ctp)\s*$</string>
+					<key>name</key>
+					<string>markup.fenced_code.block.markdown</string>
+					<key>end</key>
+					<string>(^|\G)(\2)\n</string>
+					<key>patterns</key>
+					<array>
+						<dict>
+							<key>include</key>
+							<string>text.html.php</string>","It's the same as the scopeName inside php syntax file, but currently the inline highlighting doesn't work. Will look into it later on.
",2016-06-20 09:36:02
823,"@@ -66,6 +66,10 @@ workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(Toggle
 if (isWindows || isLinux) {
 	workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMenuBarAction, ToggleMenuBarAction.ID, ToggleMenuBarAction.LABEL), 'View: Toggle Menu Bar', viewCategory);
 }
+workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(NavigateUpAction, NavigateUpAction.ID, NavigateUpAction.LABEL, null), 'View: Move to the View Part above', viewCategory);","@misoguy please use capital casing here, e.g. `View: Move to the View Part Above`",2017-03-14 05:40:24
808,"@@ -66,6 +66,10 @@ workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(Toggle
 if (isWindows || isLinux) {
 	workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMenuBarAction, ToggleMenuBarAction.ID, ToggleMenuBarAction.LABEL), 'View: Toggle Menu Bar', viewCategory);
 }
+workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(NavigateUpAction, NavigateUpAction.ID, NavigateUpAction.LABEL, null), 'View: Navigate Up', viewCategory);","I wonder if the command name is verbose enough to understand the intent. Can we see how others (VIM?) name this command? Maybe ""Navigate to next View to the Left"" etc?",2017-03-10 05:45:35
321,"@@ -66,6 +68,7 @@ export class DirtyFilesTracker implements IWorkbenchContribution {
 	}
 
 	private onUntitledDidChangeDirty(resource: URI): void {
+","I prefer to not add empty lines in the beginning of a method, please stick to the coding format used elsewhere in the files.
",2016-10-13 15:13:17
163,"@@ -67,11 +72,23 @@ const DEFAULT_ANSI_COLORS = {
 	]
 };
 
+export interface ITerminalFont {
+	fontFamily: string;
+	fontSize: number;
+	lineHeight: number;
+	charWidth: number;
+	charHeight: number;
+}
+
 /**
  * Encapsulates terminal configuration logic, the primary purpose of this file is so that platform
  * specific test cases can be written.
  */
 export class TerminalConfigHelper {
+	private characterMeasureElement: HTMLElement;","Name `charMeasureElement` for consistency
",2016-06-02 06:46:40
172,"@@ -67,34 +69,73 @@ const DEFAULT_ANSI_COLORS = {
 	]
 };
 
+export interface ITerminalFont {
+	fontFamily: string;
+	fontSize: number;
+	lineHeight: number;
+	charWidth: number;
+	charHeight: number;
+}
+
 /**
  * Encapsulates terminal configuration logic, the primary purpose of this file is so that platform
  * specific test cases can be written.
  */
 export class TerminalConfigHelper {
+	private charMeasureElement: HTMLElement;
+
 	public constructor(
 		private platform: Platform,
 		private configurationService: IConfigurationService,
-		private themeService: IThemeService) {
+		private themeService: IThemeService,
+		private parentDomElement: HTMLElement) {
 	}
 
 	public getTheme(): string[] {
 		let baseThemeId = getBaseThemeId(this.themeService.getTheme());
 		return DEFAULT_ANSI_COLORS[baseThemeId];
 	}
 
+	private neasureFont(fontFamily: string, fontSize: number, lineHeight: number): ITerminalFont {
+		if (!this.charMeasureElement) {
+			this.charMeasureElement = new Builder(this.parentDomElement, true).div().build().getHTMLElement();
+		}
+		let style = this.charMeasureElement.style;
+		style.display = 'inline';","Will this flicker the element on the screen? Should it be positioned absolutely off screen?
",2016-06-02 20:19:31
177,"@@ -67,34 +69,73 @@ const DEFAULT_ANSI_COLORS = {
 	]
 };
 
+export interface ITerminalFont {
+	fontFamily: string;
+	fontSize: number;
+	lineHeight: number;
+	charWidth: number;
+	charHeight: number;
+}
+
 /**
  * Encapsulates terminal configuration logic, the primary purpose of this file is so that platform
  * specific test cases can be written.
  */
 export class TerminalConfigHelper {
+	private charMeasureElement: HTMLElement;
+
 	public constructor(
 		private platform: Platform,
 		private configurationService: IConfigurationService,
-		private themeService: IThemeService) {
+		private themeService: IThemeService,
+		private parentDomElement: HTMLElement) {
 	}
 
 	public getTheme(): string[] {
 		let baseThemeId = getBaseThemeId(this.themeService.getTheme());
 		return DEFAULT_ANSI_COLORS[baseThemeId];
 	}
 
+	private neasureFont(fontFamily: string, fontSize: number, lineHeight: number): ITerminalFont {
+		if (!this.charMeasureElement) {
+			this.charMeasureElement = new Builder(this.parentDomElement, true).div().build().getHTMLElement();
+		}
+		let style = this.charMeasureElement.style;
+		style.display = 'inline';
+		style.fontFamily = fontFamily;
+		style.fontSize = fontSize + 'px';
+		style.lineHeight = lineHeight + 'px';
+		this.charMeasureElement.innerText = 'X';
+		let rect = this.charMeasureElement.getBoundingClientRect();
+		style.display = 'none';
+		let charWidth = Math.ceil(rect.width);
+		let charHeight = Math.ceil(rect.height);
+		return {
+			fontFamily,
+			fontSize,
+			lineHeight,
+			charWidth,
+			charHeight
+		};
+	}
+
 	/**
-	 * Set the terminal font to `terminal.integrated.fontFamily` if it is set, otherwise fallback to
-	 * `editor.fontFamily`.
+	 * Gets the font information based on the terminal.integrated.fontFamily,
+	 * terminal.integrated.fontSize, terminal.integrated.lineHeight configuration properties
 	 */
-	public getFontFamily(): string {
-		let terminalConfig = this.configurationService.getConfiguration<ITerminalConfiguration>();
-		let fontFamily = terminalConfig.terminal.integrated.fontFamily;
-		if (!fontFamily) {
-			let editorConfig = this.configurationService.getConfiguration<IConfiguration>();
-			fontFamily = editorConfig.editor.fontFamily;
+	public getFont(): ITerminalFont {
+		let terminalConfig = this.configurationService.getConfiguration<ITerminalConfiguration>().terminal.integrated;
+		let editorConfig = this.configurationService.getConfiguration<IConfiguration>();
+
+		let fontFamily = terminalConfig.fontFamily || editorConfig.editor.fontFamily;
+		let fontSize = this.toInteger(terminalConfig.fontSize, 0) || editorConfig.editor.fontSize;
+		let lineHeight = this.toInteger(terminalConfig.lineHeight, 0) || editorConfig.editor.lineHeight;
+
+		if (lineHeight === 0) {
+			lineHeight = Math.round(GOLDEN_LINE_HEIGHT_RATIO * fontSize);","We basically want consistency with how editor.lineHeight works here, is this how that falls back?
",2016-06-02 20:36:11
592,"@@ -67,4 +67,118 @@ suite('Editor Contrib - Line Operations', () => {
 				assert.equal(model.getLineContent(5), 'horlworld', '005');
 			});
 	});
+
+	test('Join lines', function () {
+		withMockCodeEditor(
+			[
+				'hello',
+				'world',
+				'hello ',
+				'world',
+				'hello		',
+				'	world',
+				'hello   ',
+				'	world',
+				'',
+				'',
+				'hello world'
+			], {}, (editor, cursor) => {
+				let model = editor.getModel();
+				let joinLinesAction = new JoinLinesAction();
+
+				editor.setSelection(new Selection(1, 2, 1, 2));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(1), 'hello world', '001');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(1, 6, 1, 6).toString(), '002');
+
+				editor.setSelection(new Selection(2, 2, 2, 2));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(2), 'hello world', '003');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(2, 7, 2, 7).toString(), '004');
+
+				editor.setSelection(new Selection(3, 2, 3, 2));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(3), 'hello world', '005');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(3, 7, 3, 7).toString(), '006');
+
+				editor.setSelection(new Selection(4, 2, 5, 3));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(4), 'hello world', '007');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(4, 2, 4, 8).toString(), '008');
+
+				editor.setSelection(new Selection(5, 1, 7, 3));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(5), 'hello world', '009');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(5, 1, 5, 3).toString(), '010');
+			});
+	});
+
+	test('transpose', function () {","does it work for empty lines, or on empty files?

You can use scripts\test.bat --coverage and my awesome LCOV plugin to see your code coverage ;)",2016-12-05 17:33:49
591,"@@ -67,4 +67,118 @@ suite('Editor Contrib - Line Operations', () => {
 				assert.equal(model.getLineContent(5), 'horlworld', '005');
 			});
 	});
+
+	test('Join lines', function () {
+		withMockCodeEditor(
+			[
+				'hello',
+				'world',
+				'hello ',
+				'world',
+				'hello		',
+				'	world',
+				'hello   ',
+				'	world',
+				'',
+				'',
+				'hello world'
+			], {}, (editor, cursor) => {
+				let model = editor.getModel();
+				let joinLinesAction = new JoinLinesAction();
+
+				editor.setSelection(new Selection(1, 2, 1, 2));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(1), 'hello world', '001');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(1, 6, 1, 6).toString(), '002');
+
+				editor.setSelection(new Selection(2, 2, 2, 2));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(2), 'hello world', '003');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(2, 7, 2, 7).toString(), '004');
+
+				editor.setSelection(new Selection(3, 2, 3, 2));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(3), 'hello world', '005');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(3, 7, 3, 7).toString(), '006');
+
+				editor.setSelection(new Selection(4, 2, 5, 3));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(4), 'hello world', '007');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(4, 2, 4, 8).toString(), '008');
+
+				editor.setSelection(new Selection(5, 1, 7, 3));
+				joinLinesAction.run(null, editor);
+				assert.equal(model.getLineContent(5), 'hello world', '009');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(5, 1, 5, 3).toString(), '010');
+			});
+	});
+
+	test('transpose', function () {
+		withMockCodeEditor(
+			[
+				'hello world'
+			], {}, (editor, cursor) => {
+				let model = editor.getModel();
+				let transposeAction = new TransposeAction();
+
+				editor.setSelection(new Selection(1, 1, 1, 1));
+				transposeAction.run(null, editor);
+				assert.equal(model.getLineContent(1), 'hello world', '001');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(1, 2, 1, 2).toString(), '002');
+
+				editor.setSelection(new Selection(1, 6, 1, 6));
+				transposeAction.run(null, editor);
+				assert.equal(model.getLineContent(1), 'hell oworld', '003');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(1, 7, 1, 7).toString(), '004');
+
+				editor.setSelection(new Selection(1, 12, 1, 12));
+				transposeAction.run(null, editor);
+				assert.equal(model.getLineContent(1), 'hell oworld', '005');
+				assert.deepEqual(editor.getSelection().toString(), new Selection(1, 12, 1, 12).toString(), '006');
+			}
+		);
+	});
+
+	test('toggle case', function () {","add more tests, e.g. for empty lines or for the cursor in the middle of whitespace.",2016-12-05 17:32:39
921,"@@ -67,6 +70,12 @@ export class TextFileEditor extends BaseTextEditor {
 		}
 	}
 
+	private onWillCloseEditor(e: IEditorIdentifier): void {
+		if (e.editor === this.input && this.position === this.editorGroupService.getStacksModel().positionOfGroup(e.group)) {","It is fine to do the equality check here between editors here? They are actually the same reference?
I understand you do not have an `id` for the editors here.

You also treat the input as FileEditorInput later on so I guess you could check their resource uri as comparison?",2017-05-10 08:23:13
630,"@@ -67,7 +67,7 @@ export class PackageJSONContribution implements IJSONContribution {
 										let name = keys[0];
 										let insertText = new SnippetString().appendText(JSON.stringify(name));
 										if (addValue) {
-											insertText.appendText(': ').appendPlaceholder('*');
+											insertText.appendText(': ""').appendPlaceholder('').appendText('""');
 											if (!isLast) {","should be `""*""`, not just `""""`",2016-12-20 08:32:22
872,"@@ -670,7 +669,7 @@ export class ActionBar extends EventEmitter implements IActionRunner {
 
 	public dispose(): void {
 		if (this.items !== null) {
-			lifecycle.dispose(this.items);
+			this.clear();","Can we not do this for stable, but only on insiders? Seems like an additional change on top that is not needed to fix the actual issue.",2017-04-04 15:23:32
914,"@@ -671,6 +677,29 @@ export class CommandCenter {
 		await this.model.branch(name);
 	}
 
+	@command('git.merge')
+	async merge(): Promise<void> {
+		const config = workspace.getConfiguration('git');
+		const checkoutType = config.get<string>('checkoutType') || 'all';
+		const includeRemotes = checkoutType === 'all' || checkoutType === 'remote';
+
+		const heads = this.model.refs.filter(ref => ref.type === RefType.Head)
+			.map(ref => new CheckoutItem(ref));
+
+		const remoteHeads = (includeRemotes ? this.model.refs.filter(ref => ref.type === RefType.RemoteHead) : [])
+			.map(ref => new CheckoutRemoteHeadItem(ref));
+
+		const picks = [...heads, ...remoteHeads];
+		const placeHolder = 'Select a ref to checkout';","Where's the `localize` call? Remember, Code needs to be localized for other languages. Also, the sentence is wrong. It should be something like `Select a branch to merge from`",2017-05-05 10:15:42
494,"@@ -68,7 +68,7 @@ export interface IUntitledEditorService {
 	 * It is valid to pass in a file resource. In that case the path will be used as identifier.
 	 * The use case is to be able to create a new file with a specific path with VSCode.
 	 */
-	createOrGet(resource?: URI, modeId?: string, restoreResource?: URI): UntitledEditorInput;
+	createOrGet(resource?: URI, modeId?: string, hasBackupToRestore?: boolean): UntitledEditorInput;","@Tyriar `hasBackupToRestore` is not being used after all?
",2016-11-16 14:30:34
878,"@@ -699,6 +699,26 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * Represents options to configure the behavior of showing a [document](#TextDocument) in an [editor](#TextEditor).
+	 */
+	export interface ShowTextDocumentOptions {","@jrieken I don't love this name, let me know what you think",2017-04-13 18:53:00
900,"@@ -699,6 +699,26 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * Represents options to configure the behavior of showing a [document](#TextDocument) in an [editor](#TextEditor).
+	 */
+	export interface TextDocumentShowOptions {
+		/**
+		 * An optional view column in which the [editor](#TextEditor) should be shown. The default is the [one](#ViewColumn.One), other values are adjusted to be __Min(column, columnCount + 1)__.
+		 */
+		column ?: ViewColumn,",Wow - your commit should have been blocked because that's a formatting issue...,2017-04-25 13:56:23
954,"@@ -7,11 +7,13 @@ import * as interfaces from './interfaces';
 import { DocumentMergeConflict } from './documentMergeConflict';
 
 const startHeaderMarker = '<<<<<<< ';
+const commonAncestorsMarker = '||||||| ';
 const splitterMarker = '=======';
 const endFooterMarker = '>>>>>>> ';
 
 interface IScanMergedConflict {
 	startHeader: vscode.TextLine;
+	commonAncestors: vscode.TextLine | null;",Nit; might as well mark `commonAncestors` as optional e.g. `commonAncestors?`,2017-05-30 15:42:22
911,"@@ -7,13 +7,10 @@ import * as nls from 'vs/nls';
 import { TPromise } from 'vs/base/common/winjs.base';","Looks good overall and I like we removed code from this class.

I only have the issue that you are creating a `linkDetector` at every iteration in a loop. Would it not make sense just to create one global one for the replViewer and always to reuse it?",2017-05-05 09:46:06
330,"@@ -7,13 +7,19 @@
 	transform: rotate(180deg);
 }
 
-.monaco-workbench > .part.activitybar {
+.monaco-workbench > .part.activitybar, .monaco-workbench.mac.fullscreen.use-inline-toolbar > .part.activitybar {","I do not understand why this rule is duplicated here?
",2016-10-15 06:17:22
785,"@@ -7,28 +7,20 @@
 
 const fs = require('fs');
 const path = require('path');
+const toDelete = new Set(['tsc.js', 'tsserverlibrary.js', 'typescript.js', 'typescriptServices.js']);
 
-function removeFile(filePath) {
-	try {
-		fs.unlinkSync(filePath);
-		console.log(`removed '${filePath}'`);
-	} catch (e) {
-		console.warn(e);
+const root = path.join(__dirname, 'node_modules', 'typescript', 'lib');
+for (let name of fs.readdirSync(root)) {
+	if (name === 'lib.d.ts' || name.match(/^lib\..*\.d\.ts$/) || name === 'protocol.d.ts') {
+		continue;
 	}",Should we just use glob patterns to avoid the mix of `toDelete` and or-conditions?,2017-03-01 09:23:27
74,"@@ -7,6 +7,11 @@ import assert = require('assert');
 import uri from 'vs/base/common/uri';","Really happy for the tests.
",2016-03-16 10:25:45
7,"@@ -7,6 +7,7 @@
 		<string>ps1</string>
 		<string>psm1</string>
 		<string>psd1</string>
+		<string>ps1xml</string>","Same here, `/extensions/powershell/package.json` contains the file extensions
",2015-11-21 19:07:45
951,"@@ -7,6 +7,7 @@
   ""license"": ""MIT"",
   ""publisher"": ""vscode"",
   ""aiKey"": ""AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217"",
+  ""enableProposedApi"": true,",No need to use proposed API here anymore. I moved the API to vscode.d.ts ,2017-05-23 19:14:38
654,"@@ -7,6 +7,7 @@
 import { isLinux, isWindows } from 'vs/base/common/platform';
 import { fill } from 'vs/base/common/arrays';
 import { CharCode } from 'vs/base/common/charCode';
+import { endsWith } from 'vs/base/common/strings';","Overall, can you please use `const` and `let` instead of `var` for variables?",2017-01-09 09:10:27
6,"@@ -7,6 +7,9 @@
 		<string>clj</string>
 		<string>cljs</string>
 		<string>clojure</string>
+		<string>cljc</string>
+		<string>cljx</string>
+		<string>edn</string>","If you want to add file extensions for clojure, you have to do that `/extensions/clojure/package.json`. From `/extensions/clojure/syntaxes/Clojure.tmLanguage` we only take the colorizer information.
",2015-11-21 19:07:06
430,"@@ -70,4 +70,24 @@ export interface IActivityService {
 	 * Clears activity shown in the activitybar for the given viewlet or panel.
 	 */
 	clearActivity(compositeId: string): void;
-}
\ No newline at end of file
+
+	/**
+	 * Get registered external viewlets' info for populating 'Toggle Custom Explorer' command picks.
+	 */
+	getInfoForRegisteredViewlets(): {
+		[viewletId: string]: {
+			isEnabled: boolean;
+			treeLabel: string;
+		}
+	};
+
+	/**
+	 * Enable/disable an external viewlet.
+	 */
+	toggleViewlet(viewletId: string): void;
+
+	/**
+	 * Get the external viewlet id that is about to open.
+	 */
+	getExternalViewletIdToOpen(): string;
+}","[needs thinking] @bpasero will know better, but I have a strong feeling that the `IActivityService` isn't the right place for viewlet specifics. Isn't there an `IViewletService` and wouldn't that be the better place for this?
",2016-11-01 10:05:06
447,"@@ -70,4 +71,19 @@ export interface IActivityService {
 	 * Clears activity shown in the activitybar for the given viewlet or panel.
 	 */
 	clearActivity(compositeId: string): void;
-}
\ No newline at end of file
+","@octref this Viewlet related code should move into `IViewletService` or if that is impossible for some reason maybe into a new `IExtensionViewletService`
",2016-11-03 08:38:55
919,"@@ -703,6 +703,7 @@ export class EditorStacksModel implements IEditorStacksModel {
 	private _onEditorDirty: Emitter<EditorIdentifier>;
 	private _onEditorLabelChange: Emitter<EditorIdentifier>;
 	private _onEditorOpened: Emitter<EditorIdentifier>;
+	private _onWillCloseEditor: Emitter<EditorIdentifier>;
 	private _onEditorClosed: Emitter<GroupEvent>;
 	private _onModelChanged: Emitter<IStacksModelChangeEvent>;","Why does `onWillCloseEditor` emit a different event than `onEditorClosed`?
Intuitivly they should emit the same and it makes sense to me that is the `EditorIdentififer`",2017-05-10 08:19:47
301,"@@ -709,6 +718,17 @@ export class Workbench implements IPartService {
 		// Create Workbench DIV Off-DOM
 		this.workbenchContainer = $('.monaco-workbench-container');
 		this.workbench = $().div({ 'class': 'monaco-workbench ' + (isWindows ? 'windows' : isLinux ? 'linux' : 'mac'), id: Identifiers.WORKBENCH_CONTAINER }).appendTo(this.workbenchContainer);
+
+		// Only needed while the option `windowConfig.macOSUseInlineToolbar` exists
+		if (isMacintosh) {","Please move all of this code into `renderWorkbench` where we already adjust some CSS classes based on things like sidebar visible or not. It is also much easier to get hold of the IConfigurationService by adding the following to the constructor of the workbench:

`@IConfigurationService private configurationService: IConfigurationService`

All the other code is not needed then. 

To find out if the setting is set, I suggest this code:

`this.configurationService.lookup('window.macOSUseInlineToolbar').value`
",2016-10-05 06:53:48
437,"@@ -709,7 +709,18 @@ export class WindowsManager implements IWindowsService {
 		}
 
 		// Handle folders to open
-		let openInNewWindow = openConfig.preferNewWindow || openConfig.forceNewWindow;
+		let openInNewWindow: boolean;","@elemongw sorry, but this does not work for me when I try it. The folder opens in the same window no matter how I configure the setting. I believe you need to turn the logic around: set `openInNewWindow` to true when the setting is enabled!
",2016-11-03 07:31:33
993,"@@ -712,6 +715,7 @@ export class List<T> implements ISpliceable<T>, IDisposable {
 	setFocus(indexes: number[]): void {
 		indexes = indexes.sort(numericSort);
 		this.focus.set(indexes);
+		this.view.domNode.setAttribute('aria-posinset', indexes.length ? (indexes[0] + 1).toString() : undefined);","The [w3 docs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset) state:

> Authors MUST set the value for aria-posinset to an integer greater than or equal to 1, and less than or equal to the size of the set.

Setting it to `undefined` doesn't sound like it's the right thing to do here.",2017-06-19 14:30:41
637,"@@ -72,6 +72,11 @@ configurationRegistry.registerConfiguration({
 			},
 			'default': []
 		},
+		'terminal.integrated.rightClickCopyPaste': {
+			'description': nls.localize('terminal.integrated.rightClickCopyPaste', ""Controls whether copy/paste happens on mouse right click in integrated terminal.""),","I think the description needs to be more detailed, how about this?

> When set, this will prevent the context menu from appearing on right clicking in the terminal, instead it will copy when there is a selection and paste when there is no selection.",2016-12-21 03:07:43
623,"@@ -72,6 +84,12 @@ configurationRegistry.registerConfiguration({
 			},
 			'default': []
 		},
+		'terminal.integrated.rightClickAction.windows': {","I'm thinking instead of having 3 settings for each platform and using strings, instead having a single setting for all platforms that just turns on rightClickCopy/Paste. Maybe `terminal.integrated.rightClickCopyPaste`? Then the default could be true when `platform.isWindows` (put the default in terminal.ts and import it into this file).",2016-12-19 05:33:46
539,"@@ -72,8 +72,8 @@ export default class LinkedMap<T> {
 		return item.value;
 	}
 
-	public shift(): T {
-		if (!this.head && !this.tail) {
+	public shift(): T | undefined {",The idea why I used && here is that only having one being undefined / null basically points to a programming error somewhere else and the code should fail later on. Now that error might be covered up. I think if we go with a || here then we should add additional asserts.,2016-11-30 09:15:49
551,"@@ -729,9 +744,16 @@ export class WindowsManager implements IWindowsMainService {
 				state: this.getNewWindowState(configuration),
 				extensionDevelopmentPath: configuration.extensionDevelopmentPath,
 				allowFullscreen: this.lifecycleService.wasUpdated || (windowConfig && windowConfig.restoreFullscreen),
-				titleBarStyle: windowConfig ? windowConfig.titleBarStyle : void 0
+				titleBarStyle: windowConfig ? windowConfig.titleBarStyle : void 0,
+				vscodeWindowId: configuration.vscodeWindowId
 			});
 
+			configuration.vscodeWindowId = vscodeWindow.vscodeWindowId;
+			if (!configuration.extensionDevelopmentPath) {
+				// TODO: Cover closing a folder/existing window case
+				this.backupService.pushEmptyWorkspaceBackupWindowIdSync(configuration.vscodeWindowId);",@Tyriar I suggest to move this up to the place where we already call `pushWorkspaceBackupPathsSync` so that we have it in one place. doing this from `toConfiguration` is very weird. As a caller of this method I would expect to get a configuration object but as a side effect I am writing to the backup folder??,2016-12-01 16:25:57
289,"@@ -73,7 +73,7 @@
 		""menus"": {
 			""editor/title"": [
 				{
-					""when"": ""resourceLangId == markdown"",
+					""when"": ""editorLangId == markdown"",","I could also change this to be `resourceLangId == markdown || editorLangId == markdown`, but only showing the preview menu item for files that are viewed as markdown makes more sense  to me
",2016-09-22 18:14:49
312,"@@ -730,6 +745,12 @@ export class WindowsManager implements IWindowsService {
 		// Emit events
 		iPathsToOpen.forEach(iPath => this.eventEmitter.emit(EventTypes.OPEN, iPath));
 
+		// Add to backups","Why are we adding these workspaces again to backup service?
",2016-10-13 15:01:36
336,"@@ -736,6 +736,16 @@ export class Workbench implements IPartService {
 		// Create Workbench DIV Off-DOM
 		this.workbenchContainer = $('.monaco-workbench-container');
 		this.workbench = $().div({ 'class': 'monaco-workbench ' + (isWindows ? 'windows' : isLinux ? 'linux' : 'mac'), id: Identifiers.WORKBENCH_CONTAINER }).appendTo(this.workbenchContainer);
+
+
+		// Mac specific UI changes
+		if (isMacintosh) {
+			const {serviceCollection} = this.workbenchParams;","Unused serviceCollection?
",2016-10-15 06:21:59
337,"@@ -736,6 +736,16 @@ export class Workbench implements IPartService {
 		// Create Workbench DIV Off-DOM
 		this.workbenchContainer = $('.monaco-workbench-container');
 		this.workbench = $().div({ 'class': 'monaco-workbench ' + (isWindows ? 'windows' : isLinux ? 'linux' : 'mac'), id: Identifiers.WORKBENCH_CONTAINER }).appendTo(this.workbenchContainer);
+
+
+		// Mac specific UI changes
+		if (isMacintosh) {
+			const {serviceCollection} = this.workbenchParams;
+			const windowConfig = this.configurationService.getConfiguration<any>('window');","Instead of any, you should add the setting to https://github.com/Microsoft/vscode/blob/mac-titlebar-inline/src/vs/workbench/electron-browser/common.ts#L24 and use `IWindowConfiguration` properly.
",2016-10-15 06:22:42
338,"@@ -736,6 +736,16 @@ export class Workbench implements IPartService {
 		// Create Workbench DIV Off-DOM
 		this.workbenchContainer = $('.monaco-workbench-container');
 		this.workbench = $().div({ 'class': 'monaco-workbench ' + (isWindows ? 'windows' : isLinux ? 'linux' : 'mac'), id: Identifiers.WORKBENCH_CONTAINER }).appendTo(this.workbenchContainer);
+
+
+		// Mac specific UI changes
+		if (isMacintosh) {
+			const {serviceCollection} = this.workbenchParams;
+			const windowConfig = this.configurationService.getConfiguration<any>('window');
+			if (windowConfig.macOSUseInlineToolbar) {","`windowConfig` can be null if the user has a weird config
",2016-10-15 06:23:06
299,"@@ -74,6 +74,11 @@ import {IEnvironmentService} from 'vs/platform/environment/common/environment';
 import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
 import * as watermark from 'vs/workbench/parts/watermark/watermark';
 
+// These three are used for the macOS inline toolbars option, and can be removed once default
+import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
+import { ConfigurationService } from 'vs/platform/configuration/node/configurationService';","Can you make sure the formatting of imports matches the other imports? also I suggest to remove the comment for now, we will likely not make this default soon nor get rid of the setting if people don't like it. We still have to figure out how to run this experiment, maybe settings is not the best in the end.
",2016-10-05 06:51:28
298,"@@ -74,6 +74,11 @@ import {IEnvironmentService} from 'vs/platform/environment/common/environment';
 import {ITelemetryService} from 'vs/platform/telemetry/common/telemetry';
 import * as watermark from 'vs/workbench/parts/watermark/watermark';
 
+// These three are used for the macOS inline toolbars option, and can be removed once default
+import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
+import { ConfigurationService } from 'vs/platform/configuration/node/configurationService';
+import { IWindowSettings } from 'vs/code/electron-main/window';","this is a layer break: we cannot depend from a VSCode window into the main process, please see https://github.com/Microsoft/vscode/wiki/Code-Organization
",2016-10-05 06:50:44
682,"@@ -75,6 +75,10 @@ export const debuggersExtPoint = extensionsRegistry.ExtensionsRegistry.registerE
 				description: nls.localize('vscode.extension.contributes.debuggers.languages', ""List of languages for which the debug extension could be considered the \""default debugger\"".""),
 				type: 'array'
 			},
+			adapterExecutableCommand: {",argumnts is missing an E argumEnts,2017-01-18 14:02:37
219,"@@ -76,6 +86,8 @@ export class OpenAnythingHandler extends QuickOpenHandler {
 	}
 
 	public getResults(searchValue: string): TPromise<QuickOpenModel> {
+		const timerEvent = this.telemetryService.timedPublicLog('openAnything');
+		const startTime = timerEvent.startTime ? timerEvent.startTime.getTime() : Date.now();","I find the check weird here, why would startTime be undefined if you got timerEvent from the timedPublicLog method?
",2016-07-14 17:33:48
888,"@@ -76,8 +109,8 @@ export class TerminalLinkHandler {
 			this._handleLocalLink(url);
 			return;
 		});
+
 		return this._xterm.registerLinkMatcher(this._localLinkRegex, wrappedHandler, {
-			matchIndex: 1,",Don't we need this?,2017-04-17 17:44:34
892,"@@ -76,83 +76,96 @@ workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(Decrea
 
 // Configuration: Workbench
 const configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);
+
+let workbenchProperties: { [path: string]: IJSONSchema; } = {
+	'workbench.editor.showTabs': {
+		'type': 'boolean',
+		'description': nls.localize('showEditorTabs', ""Controls if opened editors should show in tabs or not.""),
+		'default': true
+	},
+	'workbench.editor.tabCloseButton': {
+		'type': 'string',
+		'enum': ['left', 'right', 'off'],
+		'default': 'right',
+		'description': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorTabCloseButton' }, ""Controls the position of the editor's tabs close buttons or disables them when set to 'off'."")
+	},
+	'workbench.editor.showIcons': {
+		'type': 'boolean',
+		'description': nls.localize('showIcons', ""Controls if opened editors should show with an icon or not. This requires an icon theme to be enabled as well.""),
+		'default': true
+	},
+	'workbench.editor.enablePreview': {
+		'type': 'boolean',
+		'description': nls.localize('enablePreview', ""Controls if opened editors show as preview. Preview editors are reused until they are kept (e.g. via double click or editing).""),
+		'default': true
+	},
+	'workbench.editor.enablePreviewFromQuickOpen': {
+		'type': 'boolean',
+		'description': nls.localize('enablePreviewFromQuickOpen', ""Controls if opened editors from Quick Open show as preview. Preview editors are reused until they are kept (e.g. via double click or editing).""),
+		'default': true
+	},
+	'workbench.editor.openPositioning': {
+		'type': 'string',
+		'enum': ['left', 'right', 'first', 'last'],
+		'default': 'right',
+		'description': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorOpenPositioning' }, ""Controls where editors open. Select 'left' or 'right' to open editors to the left or right of the current active one. Select 'first' or 'last' to open editors independently from the currently active one."")
+	},
+	'workbench.editor.revealIfOpen': {
+		'type': 'boolean',
+		'description': nls.localize('revealIfOpen', ""Controls if an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.""),
+		'default': false
+	},
+	'workbench.quickOpen.closeOnFocusLost': {
+		'type': 'boolean',
+		'description': nls.localize('closeOnFocusLost', ""Controls if Quick Open should close automatically once it loses focus.""),
+		'default': true
+	},
+	'workbench.settings.openDefaultSettings': {
+		'type': 'boolean',
+		'description': nls.localize('openDefaultSettings', ""Controls if opening settings also opens an editor showing all default settings.""),
+		'default': true
+	},
+	'workbench.sideBar.location': {
+		'type': 'string',
+		'enum': ['left', 'right'],
+		'default': 'left',
+		'description': nls.localize('sideBarLocation', ""Controls the location of the sidebar. It can either show on the left or right of the workbench."")
+	},
+	'workbench.statusBar.visible': {
+		'type': 'boolean',
+		'default': true,
+		'description': nls.localize('statusBarVisibility', ""Controls the visibility of the status bar at the bottom of the workbench."")
+	},
+	'workbench.activityBar.visible': {
+		'type': 'boolean',
+		'default': true,
+		'description': nls.localize('activityBarVisibility', ""Controls the visibility of the activity bar in the workbench."")
+	},
+	'workbench.editor.closeOnFileDelete': {
+		'type': 'boolean',
+		'description': nls.localize('closeOnFileDelete', ""Controls if editors showing a file should close automatically when the file is deleted or renamed by some other process. Disabling this will keep the editor open as dirty on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.""),
+		'default': true
+	}
+};
+
+if (isMacintosh) {
+	workbenchProperties['workbench.editor.swipeBetweenOpenFiles'] = {","I am not a big fan of the naming `swipeBetweenOpenFiles`, because in reality you can swipe left and right between any editor that is opened, not just files. How about naming this `workbench.editor.swipeToNavigate`?",2017-04-18 05:53:33
648,"@@ -760,7 +760,7 @@ export class EditorGroupsControl implements IEditorGroupsControl, IVerticalSashL
 			this.sashTwo.setOrientation(this.layoutVertically ? Orientation.VERTICAL : Orientation.HORIZONTAL);
 
 			// Trigger layout
-			this.arrangeGroups(GroupArrangement.EVEN);
+			this.arrangeGroups(GroupArrangement.KEEP_RATIO);","Suggest to not introduce a `GroupArrangement.KEEP_RATIO` but rather allow to call `arrangeGroups` without any parameter and then use that as an indication to ""keep the ratio"". I would not expose this as API but just set the arrangement optional here in this file.",2017-01-04 10:26:25
559,"@@ -761,6 +768,8 @@ export class WindowsManager implements IWindowsMainService {
 			}
 		}
 
+		this.backupService.registerWindowForBackups(vscodeWindow.id, !configuration.workspacePath, configuration.backupFolder, configuration.workspacePath);",@Tyriar are you missing the check for `openConfig.cli.extensionDevelopmentPath` on purpose here?,2016-12-02 06:47:15
361,"@@ -77,16 +78,22 @@ export class EditorPickerEntry extends QuickOpenEntryGroup {
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
 		if (mode === Mode.OPEN) {
-			return this.runOpen(context);
+			this.runOpen(context);
+
+			return true;
+		}","@wprater style: `} else {`
",2016-10-21 09:54:52
834,"@@ -77,6 +77,7 @@ export interface IExpression extends ITreeElement, IExpressionContainer {
 ",Looks good,2017-03-21 17:00:36
267,"@@ -77,7 +77,7 @@ function prepareDebPackage(arch) {
 function buildDebPackage(arch) {
 	const debArch = getDebPackageArch(arch);
 	return shell.task([
-		'chmod 755 ' + product.applicationName + '-' + debArch + '/DEBIAN/postinst ' + product.applicationName + '-' + debArch + '/DEBIAN/prerm',
+		'chmod 755 ' + product.applicationName + '-' + debArch + '/DEBIAN/postinst ' + product.applicationName + '-' + debArch + '/DEBIAN/prerm ' + product.applicationName + '-' + debArch + '/DEBIAN/postrm',","Thanks for fixing this!
",2016-09-06 16:04:08
378,"@@ -778,9 +746,9 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 		this.createTextEditorModelPromise = null;
 
 		this.cancelAutoSavePromises();
-		this.cancelBackupPromises();
 
-		this.fileService.discardBackup(this.resource);
+		// TODO: Can this be moved to BackupModelService?
+		this.backupFileService.discardAndDeregisterResource(this.resource);","Yes, I suggest another event on the service maybe when this model gets disposed.
",2016-10-21 14:06:28
646,"@@ -78,20 +78,32 @@ export class OnEnterSupport {
 
 		// (3): Indentation Support
 		if (this._indentationRules) {
+			let enterAction: EnterAction = null;
 			if (this._indentationRules.increaseIndentPattern && this._indentationRules.increaseIndentPattern.test(beforeEnterText)) {
-				return OnEnterSupport._INDENT;
+				enterAction = OnEnterSupport._INDENT;
 			}
 			if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(beforeEnterText)) {
-				return OnEnterSupport._INDENT;
+				enterAction = OnEnterSupport._INDENT;
 			}
 			if (/^\s/.test(beforeEnterText)) {
 				// No reason to run regular expressions if there is nothing to outdent from
 				if (this._indentationRules.decreaseIndentPattern && this._indentationRules.decreaseIndentPattern.test(afterEnterText)) {
-					return OnEnterSupport._OUTDENT;
+					enterAction = OnEnterSupport._OUTDENT;
 				}
 				if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(oneLineAboveText)) {
-					return OnEnterSupport._OUTDENT;
+					enterAction = OnEnterSupport._OUTDENT;
 				}
+				if (this._indentationRules.decreaseIndentPattern && this._indentationRules.decreaseIndentPattern.test(beforeEnterText)) {
+					if (enterAction === null) {
+						enterAction = { indentAction: IndentAction.None, outdentCurrentLine: true };
+					} else {
+						enterAction.outdentCurrentLine = true;","Given this line modifies enterAction, please remove the instances OnEnterSupport._INDENT, OnEnterSupport._OUTDENT and create new object instances everywhere, otherwise the second call to this function might contain a stale outdentCurrentLine set to true.",2016-12-27 09:20:58
860,"@@ -78,7 +78,11 @@ export interface IEditorGroupsControl {
 	setGroupOrientation(orientation: GroupOrientation): void;
 	getGroupOrientation(): GroupOrientation;
 
+	requestActiveGroupSizeChange(groupSizeChange: number): boolean;","Can we maybe call this similar to the other one `resizePart` in `partService`, e.g. `resizeGroup` and you pass in the position of the group to resize?",2017-03-24 20:25:46
986,"@@ -785,6 +786,19 @@ export class ImportFileAction extends BaseFileAction {
 		return this.tree;
 	}
 
+	private bringWindowToForeground(): void {
+		if (isWindows) {
+			try {
+				const { allowSetForegroundWindow } = <any>require.__$__nodeRequire('windows-foreground-love');
+				allowSetForegroundWindow(process.pid);","Testing this, I do not see any fix for the issue where sometimes the task bar is just flashing and focus is not put. I suggest to remove this code for now, I see no added value.",2017-06-18 15:46:23
985,"@@ -785,6 +786,19 @@ export class ImportFileAction extends BaseFileAction {
 		return this.tree;
 	}
 
+	private bringWindowToForeground(): void {
+		if (isWindows) {
+			try {
+				const { allowSetForegroundWindow } = <any>require.__$__nodeRequire('windows-foreground-love');
+				allowSetForegroundWindow(process.pid);
+			} catch (e) {
+				// noop
+			}
+		}
+
+		this.windowService.focusWindow();",I suggest to move this closer to the place of the drop operation because that is really where we want to focus the window: https://github.com/Microsoft/vscode/blob/ben/work/src/vs/workbench/parts/files/browser/views/explorerViewer.ts#L735,2017-06-18 15:45:52
924,"@@ -79,6 +79,27 @@ export class ExtensionTipsService implements IExtensionTipsService {
 		}, err => []);
 	}
 
+	addToWorkspaceRecommendations(extensionId: string): TPromise<void> {","- Check if extensionId is valid or not
- I would rather use workbench model service and json edit utility to update. This will retain the existing formatting options of the file. Refer [ConfigurationEditingService](https://github.com/microsoft/vscode/blob/thr0w-13456/src/vs/workbench/services/configuration/node/configurationEditingService.ts#L64) that edits configuration files programatically.",2017-05-12 08:56:08
42,"@@ -79,6 +82,7 @@ export class Workbench implements IPartService {
 
 	private static sidebarPositionSettingKey = 'workbench.sidebar.position';
 	private static sidebarHiddenSettingKey = 'workbench.sidebar.hidden';
+	private static panelPartHiddenSettingKey = 'workbench.panelPart.hidden';","@isidorn suggest to call it just ""workbench.panel.hidden""
",2016-01-15 15:17:23
925,"@@ -799,6 +799,32 @@ export class ExtensionsWorkbenchService implements IExtensionsWorkbenchService {
 			});
 	}
 
+	addToWorkspaceRecommendations(extension: IExtension): TPromise<void> {
+		return this.tipsService.addToWorkspaceRecommendations(extension.id);
+	}
+
+	installAllWorkspaceRecommendations(): TPromise<void> {
+		return this.tipsService.getWorkspaceRecommendations()
+			.then(extensions => {
+				this.queryGallery({ names: extensions })
+					.done(result => {
+						if (result.total < 1) {
+							return;
+						}
+
+						const extension = result.firstPage[0];
+						const promises = [this.open(extension)];",Sorry.. I did not get why do we need to open extension,2017-05-12 08:59:10
926,"@@ -799,6 +799,32 @@ export class ExtensionsWorkbenchService implements IExtensionsWorkbenchService {
 			});
 	}
 
+	addToWorkspaceRecommendations(extension: IExtension): TPromise<void> {
+		return this.tipsService.addToWorkspaceRecommendations(extension.id);
+	}
+
+	installAllWorkspaceRecommendations(): TPromise<void> {
+		return this.tipsService.getWorkspaceRecommendations()
+			.then(extensions => {
+				this.queryGallery({ names: extensions })
+					.done(result => {
+						if (result.total < 1) {
+							return;
+						}
+
+						const extension = result.firstPage[0];
+						const promises = [this.open(extension)];
+
+						if (this.local.every(local => local.id !== extension.id)) {
+							promises.push(this.install(extension));
+						}
+",Not sure if I misunderstood.. I see it is installing only one recommended extensions in the list not all.. I do not see complete result is being read to install?,2017-05-12 09:02:45
727,"@@ -8,11 +8,115 @@ import * as strings from 'vs/base/common/strings';
 import { IState, ITokenizationSupport, TokenizationRegistry, LanguageId } from 'vs/editor/common/modes';
 import { NULL_STATE, nullTokenize2 } from 'vs/editor/common/modes/nullMode';
 import { LineTokens } from 'vs/editor/common/core/lineTokens';
+import { CharacterMapping } from 'vs/editor/common/viewLayout/viewLineRenderer';
+import { CharCode } from 'vs/base/common/charCode';
+import { ViewLineToken } from 'vs/editor/common/core/viewLineToken';
 
 export function tokenizeToString(text: string, languageId: string): string {
 	return _tokenizeToString(text, _getSafeTokenizationSupport(languageId));
 }
 
+export function tokenizeLineToHTML(text: string, viewLineTokens: ViewLineToken[], rules: { [key: string]: string }, options: { startOffset: number, endOffset: number, tabSize: number, containsRTL: boolean }): string {
+	let tabSize = options.tabSize;
+	let containsRTL = options.containsRTL;
+
+	let result = `<div>`;
+	const characterMapping = new CharacterMapping(text.length + 1, viewLineTokens.length);",No need to build up character mapping here,2017-02-16 15:48:36
729,"@@ -8,11 +8,115 @@ import * as strings from 'vs/base/common/strings';
 import { IState, ITokenizationSupport, TokenizationRegistry, LanguageId } from 'vs/editor/common/modes';
 import { NULL_STATE, nullTokenize2 } from 'vs/editor/common/modes/nullMode';
 import { LineTokens } from 'vs/editor/common/core/lineTokens';
+import { CharacterMapping } from 'vs/editor/common/viewLayout/viewLineRenderer';
+import { CharCode } from 'vs/base/common/charCode';
+import { ViewLineToken } from 'vs/editor/common/core/viewLineToken';
 
 export function tokenizeToString(text: string, languageId: string): string {
 	return _tokenizeToString(text, _getSafeTokenizationSupport(languageId));
 }
 
+export function tokenizeLineToHTML(text: string, viewLineTokens: ViewLineToken[], rules: { [key: string]: string }, options: { startOffset: number, endOffset: number, tabSize: number, containsRTL: boolean }): string {
+	let tabSize = options.tabSize;
+	let containsRTL = options.containsRTL;
+
+	let result = `<div>`;
+	const characterMapping = new CharacterMapping(text.length + 1, viewLineTokens.length);
+
+	let charIndex = options.startOffset;
+	let tabsCharDelta = 0;
+	let charOffsetInPart = 0;","since there's no need to build up character mapping, there's also no need to keep track of charOffsetInPart",2017-02-16 15:50:33
728,"@@ -8,11 +8,115 @@ import * as strings from 'vs/base/common/strings';
 import { IState, ITokenizationSupport, TokenizationRegistry, LanguageId } from 'vs/editor/common/modes';
 import { NULL_STATE, nullTokenize2 } from 'vs/editor/common/modes/nullMode';
 import { LineTokens } from 'vs/editor/common/core/lineTokens';
+import { CharacterMapping } from 'vs/editor/common/viewLayout/viewLineRenderer';
+import { CharCode } from 'vs/base/common/charCode';
+import { ViewLineToken } from 'vs/editor/common/core/viewLineToken';
 
 export function tokenizeToString(text: string, languageId: string): string {
 	return _tokenizeToString(text, _getSafeTokenizationSupport(languageId));
 }
 
+export function tokenizeLineToHTML(text: string, viewLineTokens: ViewLineToken[], rules: { [key: string]: string }, options: { startOffset: number, endOffset: number, tabSize: number, containsRTL: boolean }): string {
+	let tabSize = options.tabSize;
+	let containsRTL = options.containsRTL;
+
+	let result = `<div>`;
+	const characterMapping = new CharacterMapping(text.length + 1, viewLineTokens.length);
+
+	let charIndex = options.startOffset;
+	let tabsCharDelta = 0;
+	let charOffsetInPart = 0;
+
+	for (let tokenIndex = 0, lenJ = viewLineTokens.length; tokenIndex < lenJ; tokenIndex++) {
+		const token = viewLineTokens[tokenIndex];
+		const tokenEndIndex = token.endIndex;
+
+		if (token.endIndex < options.startOffset) {
+			continue;
+		}
+
+		const tokenType = token.type;
+		let partContentCnt = 0;","since there's no need to build up character mapping, there's also no need to keep track of partContentCnt",2017-02-16 15:49:59
730,"@@ -8,11 +8,115 @@ import * as strings from 'vs/base/common/strings';
 import { IState, ITokenizationSupport, TokenizationRegistry, LanguageId } from 'vs/editor/common/modes';
 import { NULL_STATE, nullTokenize2 } from 'vs/editor/common/modes/nullMode';
 import { LineTokens } from 'vs/editor/common/core/lineTokens';
+import { CharacterMapping } from 'vs/editor/common/viewLayout/viewLineRenderer';
+import { CharCode } from 'vs/base/common/charCode';
+import { ViewLineToken } from 'vs/editor/common/core/viewLineToken';
 
 export function tokenizeToString(text: string, languageId: string): string {
 	return _tokenizeToString(text, _getSafeTokenizationSupport(languageId));
 }
 
+export function tokenizeLineToHTML(text: string, viewLineTokens: ViewLineToken[], rules: { [key: string]: string }, options: { startOffset: number, endOffset: number, tabSize: number, containsRTL: boolean }): string {
+	let tabSize = options.tabSize;
+	let containsRTL = options.containsRTL;
+
+	let result = `<div>`;
+	const characterMapping = new CharacterMapping(text.length + 1, viewLineTokens.length);
+
+	let charIndex = options.startOffset;
+	let tabsCharDelta = 0;
+	let charOffsetInPart = 0;
+
+	for (let tokenIndex = 0, lenJ = viewLineTokens.length; tokenIndex < lenJ; tokenIndex++) {
+		const token = viewLineTokens[tokenIndex];
+		const tokenEndIndex = token.endIndex;
+
+		if (token.endIndex < options.startOffset) {
+			continue;
+		}
+
+		const tokenType = token.type;
+		let partContentCnt = 0;
+		let partContent = '';
+
+		for (; charIndex < tokenEndIndex && charIndex < options.endOffset; charIndex++) {
+			characterMapping.setPartData(charIndex, tokenIndex, charOffsetInPart);
+			const charCode = text.charCodeAt(charIndex);
+
+			switch (charCode) {
+				case CharCode.Tab:
+					let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;
+					tabsCharDelta += insertSpacesCount - 1;
+					charOffsetInPart += insertSpacesCount - 1;
+					while (insertSpacesCount > 0) {
+						partContent += '&nbsp;';
+						partContentCnt++;
+						insertSpacesCount--;
+					}
+					break;
+
+				case CharCode.Space:
+					partContent += '&nbsp;';
+					partContentCnt++;
+					break;
+
+				case CharCode.LessThan:
+					partContent += '&lt;';
+					partContentCnt++;
+					break;
+
+				case CharCode.GreaterThan:
+					partContent += '&gt;';
+					partContentCnt++;
+					break;
+
+				case CharCode.Ampersand:
+					partContent += '&amp;';
+					partContentCnt++;
+					break;
+
+				case CharCode.Null:
+					partContent += '&#00;';
+					partContentCnt++;
+					break;
+
+				case CharCode.UTF8_BOM:
+				case CharCode.LINE_SEPARATOR_2028:
+					partContent += '\ufffd';
+					partContentCnt++;
+					break;
+
+				case CharCode.CarriageReturn:
+					// zero width space, because carriage return would introduce a line break
+					partContent += '&#8203';
+					partContentCnt++;
+					break;
+
+				default:
+					partContent += String.fromCharCode(charCode);
+					partContentCnt++;
+			}
+
+			charOffsetInPart++;
+		}
+
+		characterMapping.setPartLength(tokenIndex, partContentCnt);
+		let style = tokenType.split(' ').map(type => rules[type]).join('');","please leave a todo here, we should clean this up once I merge the minimap branch where a view line token holds on to the metadata, it should be straight-forward with those changes to read here the font style and the foreground color directly",2017-02-16 15:52:49
731,"@@ -8,11 +8,115 @@ import * as strings from 'vs/base/common/strings';
 import { IState, ITokenizationSupport, TokenizationRegistry, LanguageId } from 'vs/editor/common/modes';
 import { NULL_STATE, nullTokenize2 } from 'vs/editor/common/modes/nullMode';
 import { LineTokens } from 'vs/editor/common/core/lineTokens';
+import { CharacterMapping } from 'vs/editor/common/viewLayout/viewLineRenderer';
+import { CharCode } from 'vs/base/common/charCode';
+import { ViewLineToken } from 'vs/editor/common/core/viewLineToken';
 
 export function tokenizeToString(text: string, languageId: string): string {
 	return _tokenizeToString(text, _getSafeTokenizationSupport(languageId));
 }
 
+export function tokenizeLineToHTML(text: string, viewLineTokens: ViewLineToken[], rules: { [key: string]: string }, options: { startOffset: number, endOffset: number, tabSize: number, containsRTL: boolean }): string {
+	let tabSize = options.tabSize;
+	let containsRTL = options.containsRTL;
+
+	let result = `<div>`;
+	const characterMapping = new CharacterMapping(text.length + 1, viewLineTokens.length);
+
+	let charIndex = options.startOffset;
+	let tabsCharDelta = 0;
+	let charOffsetInPart = 0;
+
+	for (let tokenIndex = 0, lenJ = viewLineTokens.length; tokenIndex < lenJ; tokenIndex++) {
+		const token = viewLineTokens[tokenIndex];
+		const tokenEndIndex = token.endIndex;
+
+		if (token.endIndex < options.startOffset) {
+			continue;
+		}
+
+		const tokenType = token.type;
+		let partContentCnt = 0;
+		let partContent = '';
+
+		for (; charIndex < tokenEndIndex && charIndex < options.endOffset; charIndex++) {
+			characterMapping.setPartData(charIndex, tokenIndex, charOffsetInPart);
+			const charCode = text.charCodeAt(charIndex);
+
+			switch (charCode) {
+				case CharCode.Tab:
+					let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;
+					tabsCharDelta += insertSpacesCount - 1;
+					charOffsetInPart += insertSpacesCount - 1;
+					while (insertSpacesCount > 0) {
+						partContent += '&nbsp;';
+						partContentCnt++;
+						insertSpacesCount--;
+					}
+					break;
+
+				case CharCode.Space:
+					partContent += '&nbsp;';
+					partContentCnt++;
+					break;
+
+				case CharCode.LessThan:
+					partContent += '&lt;';
+					partContentCnt++;
+					break;
+
+				case CharCode.GreaterThan:
+					partContent += '&gt;';
+					partContentCnt++;
+					break;
+
+				case CharCode.Ampersand:
+					partContent += '&amp;';
+					partContentCnt++;
+					break;
+
+				case CharCode.Null:
+					partContent += '&#00;';
+					partContentCnt++;
+					break;
+
+				case CharCode.UTF8_BOM:
+				case CharCode.LINE_SEPARATOR_2028:
+					partContent += '\ufffd';
+					partContentCnt++;
+					break;
+
+				case CharCode.CarriageReturn:
+					// zero width space, because carriage return would introduce a line break
+					partContent += '&#8203';
+					partContentCnt++;
+					break;
+
+				default:
+					partContent += String.fromCharCode(charCode);
+					partContentCnt++;
+			}
+
+			charOffsetInPart++;
+		}
+
+		characterMapping.setPartLength(tokenIndex, partContentCnt);
+		let style = tokenType.split(' ').map(type => rules[type]).join('');
+		if (containsRTL) {
+			result += `<span dir=""ltr"" style=""${style}"">${partContent}</span>`;","perhaps this is overkill. I have a feeling the software where we paste should figure out by itself what to do with RTL characters, so I suggest to ignore RTL here for now.",2017-02-16 15:53:59
81,"@@ -8,11 +8,16 @@
 		<string>bash</string>
 		<string>zsh</string>
 		<string>bashrc</string>
+        <string>zshrc</string>","I think you can safely remove these since they're added to the package.json which is the source of truth. Good to go after this is done :+1: 
",2016-03-22 08:10:18
9,"@@ -8,13 +8,13 @@ define([
 	""vs/languages/html/common/html.contribution"",
 	""vs/languages/javascript/common/javascript.contribution"",
 	""vs/languages/json/common/json.contribution"",
+	""vs/languages/less/common/less.contribution"",
 	""vs/languages/markdown/common/markdown.contribution"",
 	""vs/languages/php/common/php.contribution"",
 	""vs/languages/plaintext/common/plaintext.contribution"",
 	""vs/languages/razor/common/razor.contribution"",
-	""vs/languages/typescript/common/typescript.contribution"",
-	""vs/languages/less/common/less.contribution"",
-	""vs/languages/sass/common/sass.contribution""
+	""vs/languages/sass/common/sass.contribution"",
+	""vs/languages/typescript/common/typescript.contribution""","This change is not really necessary
",2015-11-21 19:12:58
757,"@@ -8,14 +8,12 @@
 	background-image: url('debug.svg');
 }
 
-.monaco-editor .debug-top-stack-frame-line {
+.monaco-editor .debug-top-stack-frame-line,
+.monaco-editor .debug-top-stack-frame-exception-line
+{",Put the bracket on the previous line,2017-02-20 14:17:29
499,"@@ -8,23 +8,22 @@ import { TPromise } from 'vs/base/common/winjs.base';
 import URI from 'vs/base/common/uri';
 import { createDecorator } from 'vs/platform/instantiation/common/instantiation';
 import { IModel } from 'vs/editor/common/editorCommon';
-import { ITextEditorModel as IBaseTextEditorModel } from 'vs/platform/editor/common/editor';
-import { IDisposable } from 'vs/base/common/lifecycle';
+import { IEditorModel } from 'vs/platform/editor/common/editor';
+import { IDisposable, IReference } from 'vs/base/common/lifecycle';
 
 export const ITextModelResolverService = createDecorator<ITextModelResolverService>('textModelResolverService');
 
 export interface ITextModelResolverService {
 	_serviceBrand: any;
 
 	/**
-	 * Given a resource, tries to resolve a ITextEditorModel out of it. Will support many schemes like file://, untitled://,
-	 * inMemory:// and for anything else fall back to the model content provider registry.
+	 * Provided a resource URI, it will return a model reference
+	 * which should be disposed once not needed anymore.
 	 */
-	resolve(resource: URI): TPromise<ITextEditorModel>;
+	getModelReference(resource: URI): IReference<TPromise<ITextEditorModel>>;","@joaomoreno good stuff. the only thing I am uncertain about is the flow of getting the reference and disposing it. Typically we say you need to `dispose` if you called a `create` method. Here we do a `getReference` and then ask clients to `dispose`. 

I think I would also call it `aquire` and `release` in the resolver service so that it becomes clear that you need to dispose. I am also fine with `createReference` and `dispose`. ",2016-11-21 12:55:56
451,"@@ -8,6 +8,7 @@
 import 'vs/css!./media/activitybarpart';
 import nls = require('vs/nls');
 import { TPromise } from 'vs/base/common/winjs.base';
+import Event, { Emitter } from 'vs/base/common/event';","@octref I expect some code from here to move out to `IViewletService` or `IExtensionViewletService`. it feels lots of things that should not be activity bar related are now inside this part. To me, the part should not really distinguish between normal viewlets and extension viewlets, but just do its business of rendering a set of viewlets and their activity.
",2016-11-03 08:49:44
686,"@@ -8,6 +8,7 @@ import * as paths from 'vs/base/common/paths';
 import * as platform from 'vs/base/common/platform';
 import { Adapter } from 'vs/workbench/parts/debug/node/debugAdapter';
 import { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';
+import debug = require('vs/workbench/parts/debug/common/debug');
 ","This is the old style of importing we no longer use, instead we should switch to
`import * as debug from 'vs/workbench/parts/debug/common/debug'`
which should be preferable in new TS versions",2017-01-18 14:08:56
658,"@@ -8,6 +8,7 @@ import { isLinux, isWindows } from 'vs/base/common/platform';
 import { fill } from 'vs/base/common/arrays';
 import { rtrim } from 'vs/base/common/strings';
 import { CharCode } from 'vs/base/common/charCode';
+import { endsWith } from 'vs/base/common/strings';",@hun1ahpu unused import?,2017-01-10 05:44:32
513,"@@ -80,6 +80,7 @@ export class TerminalService implements ITerminalService {
 			this.setActiveInstanceByIndex(0);
 		}
 		this._onInstancesChanged.fire();
+		terminalInstance.setCommandsToSkipShell(this.configHelper.getCommandsToSkipShell());","You've actually stumbled upon a bug bigger than this in that no settings values are updated correctly, including scrollback and cursorBlinking as well. Having a brief look at the code, I think the best way to fix this might be to move `TerminalPanel._updateConfig` to `TerminalService.updateConfig` and then call into that after creating the new instance.",2016-11-24 21:09:19
997,"@@ -80,6 +83,11 @@ export function isWelcomePageEnabled(storageService: IStorageService) {
 	return 'enableWelcomePage' in overrides ? overrides.enableWelcomePage : splitExperimentsRandomness(storageService).enableWelcomePage;
 }
 
+export function isShowTaskDocumentation(storageService: IStorageService) {",This is not needed then (see below). The welcome page one (you probably looked at) was a special case I'm about to remove.,2017-06-19 22:01:32
525,"@@ -80,6 +83,9 @@ export class TerminalService implements ITerminalService {
 			this.setActiveInstanceByIndex(0);
 		}
 		this._onInstancesChanged.fire();
+		this._updateCursorBlink(terminalInstance);","These calls would be more at home inside `TerminalInstance.constructor`. Thinking about this further we may be able to get rid of both calls in `TerminalPanel.setVisible` as well by updating the config at the end of `TerminalInstance.attachToElement`. I believe that covers the cases we need to worry about for updating the config:

- When the terminal is created and the panel exists (`attachToElement` will trigger immediately)
- When the terminal is created via the API and the panel does not exist (`attachToElement` call will be deferred)
- When the config is updated (`TerminalService` now listens to `IConfigurationservice.onDidUpdateConfiguration`)",2016-11-28 19:09:11
815,"@@ -808,9 +808,9 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 		this._onEditorsMoved.fire();
 	}
 
-	public moveEditor(input: EditorInput, from: EditorGroup, to: EditorGroup, index?: number): void;
-	public moveEditor(input: EditorInput, from: Position, to: Position, index?: number): void;
-	public moveEditor(input: EditorInput, arg2: any, arg3: any, index?: number): void {
+	public moveEditor(input: EditorInput, from: EditorGroup, to: EditorGroup, index?: number, inactive?: boolean): void;",I suggest to put `index` and `inactive` into a new optional options bag (`IMoveOptions`).,2017-03-11 07:14:11
29,"@@ -81,22 +83,37 @@ export class PluginScanner {
 	/**
 	 * Scan a list of extensions defined in `absoluteFolderPath`
 	 */
-	public static scanPlugins(version: string, collector: IPluginsMessageCollector, absoluteFolderPath:string, isBuiltin:boolean): TPromise<IPluginDescription[]> {
-		return pfs.readDirsInDir(absoluteFolderPath).then((folders) => {
-			return TPromise.join(
-				folders.map((folder) => this.scanPlugin(version, collector, paths.join(absoluteFolderPath, folder), isBuiltin))
-			);
-		}, (err) => {
-			collector.error(absoluteFolderPath, err);
-			return [];
-		}).then((results) => results.filter(item => (item !== null)));
+	public static scanPlugins(
+		version: string,
+		collector: IPluginsMessageCollector,
+		absoluteFolderPath:string,
+		isBuiltin:boolean
+	) : TPromise<IPluginDescription[]>
+	{
+		return pfs.readDirsInDir(absoluteFolderPath)
+			.then(folders => TPromise.join(folders.map(f => this.scanPlugin(version, collector, paths.join(absoluteFolderPath, f), isBuiltin))))
+			.then(plugins => plugins.filter(item => item !== null))
+			.then(plugins => {
+				const pluginsById = values(groupBy(plugins, p => p.id));
+				return pluginsById.map(p => p.sort((a, b) => semver.rcompare(a.version, b.version))[0]);","@joaomoreno 

`semver.rcompare(a.version, b.version)` throws if `a.version` or `b.version` are undefined.

Effectively, this change makes `version` a required field in `package.json`. If this is the intent, then the validation of `package.json` must reflect this. If the version field is required, then `pluginsRegistry.ts` > `isValidPluginDescription` must be updated to check the field exists and **is parsable by semver**.

The following `package.json` breaks all user extension loading:

```
{
    ""name"": ""test"",
    ""publisher"": ""alex"",
    ""engines"": {
        ""vscode"": ""0.10.x""
    }
}
```

Just place it twice in the extensions folder with two different folder names to repro. It should fail twice but not prevent other extensions in the same folder from being discovered.

You can do the following:
- in `pluginsRegistry.ts` > `isValidPluginDescription` check that a version field is present and is a string
- in `vs\platform\plugins\node\pluginVersionValidator.ts` > `isValidPluginDescription` use semver and check that semver can parse the version

Of course all of this if you know for a fact that no extension made it into the gallery without a valid semver version field, otherwise this new check might break already installed extensions
",2015-12-16 14:12:08
472,"@@ -81,7 +81,7 @@ export class FileService implements IFileService {
 
 		// create service
 		const workspace = this.contextService.getWorkspace();
-		this.raw = new NodeFileService(workspace ? workspace.resource.fsPath : void 0, fileServiceConfig, this.eventService);
+		this.raw = new NodeFileService(workspace ? workspace.resource.fsPath : void 0, fileServiceConfig, this.eventService, this.environmentService, this.configurationService);","@Tyriar these changes are all NOT needed
",2016-11-09 07:40:51
841,"@@ -82,23 +94,31 @@ class EditTask implements IDisposable {
 	}
 
 	public addEdit(edit: IResourceEdit): void {
-		let range: IRange;
-		if (!edit.range) {
-			range = this._model.getFullModelRange();
+		if (isIEndOfLineSequenceEdit(edit)) {
+			// store new EOL-sequence, last wins
+			this._newEol = edit.eol;
+
 		} else {
-			range = edit.range;
+			// create edit operation
+			let range: IRange;","Consider a `const` here:
```ts
const range = edit.range || this._model.getFullModelRange();
```",2017-03-21 17:44:01
164,"@@ -83,18 +100,60 @@ export class TerminalConfigHelper {
 		return DEFAULT_ANSI_COLORS[baseThemeId];
 	}
 
+	private initializeCharacterSize(font: ITerminalFont, parentDomElement: HTMLElement) {
+		if (!this.characterMeasureElement) {
+			this.characterMeasureElement = new Builder(parentDomElement, true).div().build().getHTMLElement();
+		}
+
+		this.characterMeasureElement.style.display = 'inline';
+		this.characterMeasureElement.style.fontFamily = font.fontFamily;
+		this.characterMeasureElement.style.fontSize = font.fontSize + 'px';
+		this.characterMeasureElement.style.lineHeight = font.lineHeight + 'px';
+		this.characterMeasureElement.innerText = 'X';
+		let bcr = this.characterMeasureElement.getBoundingClientRect();","Probably better named `rect`
",2016-06-02 06:48:36
165,"@@ -83,18 +100,60 @@ export class TerminalConfigHelper {
 		return DEFAULT_ANSI_COLORS[baseThemeId];
 	}
 
+	private initializeCharacterSize(font: ITerminalFont, parentDomElement: HTMLElement) {
+		if (!this.characterMeasureElement) {
+			this.characterMeasureElement = new Builder(parentDomElement, true).div().build().getHTMLElement();
+		}
+
+		this.characterMeasureElement.style.display = 'inline';
+		this.characterMeasureElement.style.fontFamily = font.fontFamily;
+		this.characterMeasureElement.style.fontSize = font.fontSize + 'px';
+		this.characterMeasureElement.style.lineHeight = font.lineHeight + 'px';
+		this.characterMeasureElement.innerText = 'X';
+		let bcr = this.characterMeasureElement.getBoundingClientRect();
+		this.characterMeasureElement.style.display = 'none';
+		this.charWidth = Math.ceil(bcr.width || TERMINAL_CHAR_WIDTH_FALLBACK);","Do you know when `bcr.width` will be falsey or was this just defensive?
",2016-06-02 06:51:25
166,"@@ -83,18 +100,60 @@ export class TerminalConfigHelper {
 		return DEFAULT_ANSI_COLORS[baseThemeId];
 	}
 
+	private initializeCharacterSize(font: ITerminalFont, parentDomElement: HTMLElement) {
+		if (!this.characterMeasureElement) {
+			this.characterMeasureElement = new Builder(parentDomElement, true).div().build().getHTMLElement();
+		}
+
+		this.characterMeasureElement.style.display = 'inline';
+		this.characterMeasureElement.style.fontFamily = font.fontFamily;
+		this.characterMeasureElement.style.fontSize = font.fontSize + 'px';
+		this.characterMeasureElement.style.lineHeight = font.lineHeight + 'px';
+		this.characterMeasureElement.innerText = 'X';
+		let bcr = this.characterMeasureElement.getBoundingClientRect();
+		this.characterMeasureElement.style.display = 'none';
+		this.charWidth = Math.ceil(bcr.width || TERMINAL_CHAR_WIDTH_FALLBACK);
+		this.charHeight = Math.ceil(bcr.height || TERMINAL_CHAR_HEIGHT_FALLBACK);
+	}
+
 	/**
-	 * Set the terminal font to `terminal.integrated.fontFamily` if it is set, otherwise fallback to
-	 * `editor.fontFamily`.
+	 * Gets the font information based on the terminal.integrated.fontFamily,
+	 * terminal.integrated.fontSize, terminal.integrated.lineHeight configuration properties
+	 *
+	 * @param parentDomElement Host for the character measurement element
+	 * @param updateCharSize A flag which indicates whether the character size should be measured
 	 */
-	public getFontFamily(): string {
+	public getFont(parentDomElement: HTMLElement, updateCharSize?: boolean): ITerminalFont {","Pass `parentDomElement` into the constructor and have `TerminalConfigHelper` keep a pointer to it.
",2016-06-02 06:52:58
168,"@@ -83,18 +100,60 @@ export class TerminalConfigHelper {
 		return DEFAULT_ANSI_COLORS[baseThemeId];
 	}
 
+	private initializeCharacterSize(font: ITerminalFont, parentDomElement: HTMLElement) {
+		if (!this.characterMeasureElement) {
+			this.characterMeasureElement = new Builder(parentDomElement, true).div().build().getHTMLElement();
+		}
+
+		this.characterMeasureElement.style.display = 'inline';
+		this.characterMeasureElement.style.fontFamily = font.fontFamily;
+		this.characterMeasureElement.style.fontSize = font.fontSize + 'px';
+		this.characterMeasureElement.style.lineHeight = font.lineHeight + 'px';
+		this.characterMeasureElement.innerText = 'X';
+		let bcr = this.characterMeasureElement.getBoundingClientRect();
+		this.characterMeasureElement.style.display = 'none';
+		this.charWidth = Math.ceil(bcr.width || TERMINAL_CHAR_WIDTH_FALLBACK);
+		this.charHeight = Math.ceil(bcr.height || TERMINAL_CHAR_HEIGHT_FALLBACK);
+	}
+
 	/**
-	 * Set the terminal font to `terminal.integrated.fontFamily` if it is set, otherwise fallback to
-	 * `editor.fontFamily`.
+	 * Gets the font information based on the terminal.integrated.fontFamily,
+	 * terminal.integrated.fontSize, terminal.integrated.lineHeight configuration properties
+	 *
+	 * @param parentDomElement Host for the character measurement element
+	 * @param updateCharSize A flag which indicates whether the character size should be measured
 	 */
-	public getFontFamily(): string {
+	public getFont(parentDomElement: HTMLElement, updateCharSize?: boolean): ITerminalFont {
 		let terminalConfig = this.configurationService.getConfiguration<ITerminalConfiguration>();
+		let editorConfig = this.configurationService.getConfiguration<IConfiguration>();
+
 		let fontFamily = terminalConfig.terminal.integrated.fontFamily;
+		let fontSize = this.toInteger(terminalConfig.terminal.integrated.fontSize, 0, 100) || this.toInteger(editorConfig.editor.fontSize, 0, 100);","Is the max necessary?

Also you can simplify:

``` ts
this.toInteger(terminalConfig.terminal.integrated.fontSize || editorConfig.editor.fontSize, 0, 100)
```
",2016-06-02 06:57:51
167,"@@ -83,18 +100,60 @@ export class TerminalConfigHelper {
 		return DEFAULT_ANSI_COLORS[baseThemeId];
 	}
 
+	private initializeCharacterSize(font: ITerminalFont, parentDomElement: HTMLElement) {
+		if (!this.characterMeasureElement) {
+			this.characterMeasureElement = new Builder(parentDomElement, true).div().build().getHTMLElement();
+		}
+
+		this.characterMeasureElement.style.display = 'inline';
+		this.characterMeasureElement.style.fontFamily = font.fontFamily;
+		this.characterMeasureElement.style.fontSize = font.fontSize + 'px';
+		this.characterMeasureElement.style.lineHeight = font.lineHeight + 'px';
+		this.characterMeasureElement.innerText = 'X';
+		let bcr = this.characterMeasureElement.getBoundingClientRect();
+		this.characterMeasureElement.style.display = 'none';
+		this.charWidth = Math.ceil(bcr.width || TERMINAL_CHAR_WIDTH_FALLBACK);
+		this.charHeight = Math.ceil(bcr.height || TERMINAL_CHAR_HEIGHT_FALLBACK);
+	}
+
 	/**
-	 * Set the terminal font to `terminal.integrated.fontFamily` if it is set, otherwise fallback to
-	 * `editor.fontFamily`.
+	 * Gets the font information based on the terminal.integrated.fontFamily,
+	 * terminal.integrated.fontSize, terminal.integrated.lineHeight configuration properties
+	 *
+	 * @param parentDomElement Host for the character measurement element
+	 * @param updateCharSize A flag which indicates whether the character size should be measured
 	 */
-	public getFontFamily(): string {
+	public getFont(parentDomElement: HTMLElement, updateCharSize?: boolean): ITerminalFont {
 		let terminalConfig = this.configurationService.getConfiguration<ITerminalConfiguration>();
+		let editorConfig = this.configurationService.getConfiguration<IConfiguration>();
+
 		let fontFamily = terminalConfig.terminal.integrated.fontFamily;
+		let fontSize = this.toInteger(terminalConfig.terminal.integrated.fontSize, 0, 100) || this.toInteger(editorConfig.editor.fontSize, 0, 100);
+		let lineHeight = this.toInteger(terminalConfig.terminal.integrated.lineHeight, 0, 150) || this.toInteger(editorConfig.editor.lineHeight, 0, 150);
+
 		if (!fontFamily) {
-			let editorConfig = this.configurationService.getConfiguration<IConfiguration>();
 			fontFamily = editorConfig.editor.fontFamily;
 		}
-		return fontFamily;
+
+		if (lineHeight === 0) {
+			lineHeight = Math.round(GOLDEN_LINE_HEIGHT_RATIO * fontSize);
+		}
+
+		var font: ITerminalFont = {","Prefer `let`
",2016-06-02 06:55:32
524,"@@ -84,12 +85,14 @@ export class TerminalPanel extends Panel {
 	public setVisible(visible: boolean): TPromise<void> {
 		if (visible) {
 			if (this._terminalService.terminalInstances.length > 0) {
-				this._updateConfig();
+				this._terminalService.updateConfig();
+				this._updateFont();
 				this._updateTheme();
 			} else {
 				return super.setVisible(visible).then(() => {
 					this._terminalService.createInstance();
-					this._updateConfig();
+					this._terminalService.updateConfig();",This shouldn't be needed anymore as it's called within `ITerminalService.createInstance`,2016-11-28 19:02:15
407,"@@ -84,43 +140,77 @@ export class ActivitybarPart extends Part implements IActivityService {
 		const $result = $('.content').appendTo($el);
 
 		// Top Actionbar with action items for each viewlet action
-		this.createViewletSwitcher($result.clone());
+		this.createViewletSwitcher($result.clone().addClass('position-top'));","What does this do?
",2016-10-24 15:42:28
408,"@@ -84,43 +140,77 @@ export class ActivitybarPart extends Part implements IActivityService {
 		const $result = $('.content').appendTo($el);
 
 		// Top Actionbar with action items for each viewlet action
-		this.createViewletSwitcher($result.clone());
+		this.createViewletSwitcher($result.clone().addClass('position-top'));
 
 		return $result;
 	}
 
 	private createViewletSwitcher(div: Builder): void {
-
-		// Composite switcher is on top","Why remove?
",2016-10-24 15:43:08
560,"@@ -84,6 +84,7 @@ export interface IWindowConfiguration extends ParsedArgs {
 	perfWindowLoadTime?: number;
 
 	workspacePath?: string;
+	backupFolder?: string;",@Tyriar suggest `backupPath` to keep naming consistent,2016-12-02 06:48:36
955,"@@ -84,6 +90,12 @@ export class MergeConflictParser {
 			return null;
 		}
 
+		let tokenAfterCurrentBlock: vscode.TextLine = scanned.splitter;
+
+		if (scanned.commonAncestors !== null) {
+			tokenAfterCurrentBlock = scanned.commonAncestors;
+		}
+","Nit; Could be condensed to

```javascript
const tokenAfterCurrentBlock = scanned.commonAncestors || scanned.splitter; 
```",2017-05-30 15:43:48
638,"@@ -85,4 +85,16 @@ declare module 'vscode' {
 		 */
 		getClickCommand?(node: T): string;
 	}
+	export interface TextEditor {
+		/**
+		 * Inserts the given snippet template and enters snippet mode.
+		 *
+		 * If the editor is already in snippet mode, insertion fails and the returned promise resolves to false.
+		 *
+		 * @param template The snippet template to insert
+		 * @param posOrRange The position or replacement range representing the location of the insertion.
+		 * @return A promise that resolves with a value indicating if the snippet could be inserted.
+		 */
+		insertSnippet(template: string, posOrRange: Position | Range): Thenable<boolean>;
+	}",this isn't needed as we make the change directly in `vscode.d.ts`,2016-12-21 08:17:27
869,"@@ -85,6 +299,26 @@ const iso639_3_to_2: Map<string> = {
 	'trk': 'tr'
 };
 
+const iso639_2_to_3: Map<string> = {",We might want to consider using 2 letter id in the future. The reason why we have this mapping is that MS internally uses 3. If all is public we could switch over to 2.,2017-04-04 13:02:52
664,"@@ -85,6 +85,39 @@ class MyCompletionItem extends CompletionItem {
 
 		return CompletionItemKind.Property;
 	}
+
+	private static getCommitCharacters(document: TextDocument, kind: string): string[] | undefined {
+		switch (kind) {
+			case PConst.Kind.externalModuleName:
+				return ['""', '\''];
+
+			case PConst.Kind.file:
+			case PConst.Kind.directory:
+				return ['/', '""', '\''];",backslash?,2017-01-12 08:36:26
665,"@@ -85,6 +85,39 @@ class MyCompletionItem extends CompletionItem {
 
 		return CompletionItemKind.Property;
 	}
+
+	private static getCommitCharacters(document: TextDocument, kind: string): string[] | undefined {
+		switch (kind) {
+			case PConst.Kind.externalModuleName:
+				return ['""', '\''];
+
+			case PConst.Kind.file:
+			case PConst.Kind.directory:
+				return ['/', '""', '\''];
+
+			case PConst.Kind.alias:
+			case PConst.Kind.variable:
+			case PConst.Kind.localVariable:
+			case PConst.Kind.memberVariable:
+			case PConst.Kind.memberGetAccessor:
+			case PConst.Kind.memberSetAccessor:
+			case PConst.Kind.constructSignature:
+			case PConst.Kind.callSignature:
+			case PConst.Kind.indexSignature:
+			case PConst.Kind.enum:
+			case PConst.Kind.module:
+			case PConst.Kind.class:
+			case PConst.Kind.interface:
+			case PConst.Kind.function:",`(` for functions?,2017-01-12 08:36:49
953,"@@ -85,6 +90,11 @@ export default class MergeDectorator implements vscode.Disposable {
 				}
 			});
 
+			this.decorations['commonAncestors.header'] = vscode.window.createTextEditorDecorationType({
+				color: new vscode.ThemeColor('editor.foreground'),","@kieferrm, @chrmarti: We should probably add a new theme color from common ancestor blocks. I'd be in favor of coloring them at some point. ",2017-05-30 15:41:11
355,"@@ -85,6 +91,7 @@ export interface IExtensionContributions {
 	menus?: { [context: string]: IMenu[] };
 	snippets?: ISnippet[];
 	themes?: ITheme[];
+	explorer?: ITreeExplorer;","Only one tree per extension?
",2016-10-21 07:44:44
269,"@@ -85,8 +87,8 @@ export class ExtHostTerminalService {
 		this._proxy = threadService.get(MainContext.MainThreadTerminalService);
 	}
 
-	public createTerminal(name?: string): vscode.Terminal {
-		return new ExtHostTerminal(this._proxy, -1, name);
+	public createTerminal(name?: string, path?: string): vscode.Terminal {","path -> shellPath
",2016-09-08 19:02:55
862,"@@ -853,6 +857,83 @@ export class EditorGroupsControl extends Themable implements IEditorGroupsContro
 		return ratio;
 	}
 
+	// Request size change on the active editor/group - changes main axis
+	public requestActiveGroupSizeChange(groupSizeChange: number): boolean {
+
+		enum VISIBLE_EDITORS {
+			ONE = 1,
+			TWO = 2,
+			THREE = 3
+		}
+
+		const visibleEditors = this.getVisibleEditorCount();
+
+		if (visibleEditors <= VISIBLE_EDITORS.ONE) {
+			return false;
+		}
+
+		let availableSize = this.totalSize;
+		const activeGroupPosition = this.getActivePosition();
+
+		switch (visibleEditors) {
+			case VISIBLE_EDITORS.TWO:
+				switch (activeGroupPosition) {
+					case Position.ONE:
+						this.silosSize[Position.ONE] = this.boundSiloSize(Position.ONE, groupSizeChange);
+						this.silosSize[Position.TWO] = availableSize - this.silosSize[Position.ONE];
+						break;
+					case Position.TWO:
+						this.silosSize[Position.TWO] = this.boundSiloSize(Position.TWO, groupSizeChange);
+						this.silosSize[Position.ONE] = availableSize - this.silosSize[Position.TWO];
+					default:
+						break;
+				}
+				break;
+			case VISIBLE_EDITORS.THREE:
+				switch (activeGroupPosition) {
+					case Position.ONE:
+						this.silosSize[Position.ONE] = this.boundSiloSize(Position.ONE, groupSizeChange);
+						this.distributeRemainingSilosSize(Position.TWO, Position.THREE, availableSize - this.silosSize[Position.ONE]);
+						break;
+					case Position.TWO:
+						this.silosSize[Position.TWO] = this.boundSiloSize(Position.TWO, groupSizeChange);
+						this.distributeRemainingSilosSize(Position.ONE, Position.THREE, availableSize - this.silosSize[Position.TWO]);
+						break;
+					case Position.THREE:
+						this.silosSize[Position.THREE] = this.boundSiloSize(Position.THREE, groupSizeChange);
+						this.distributeRemainingSilosSize(Position.ONE, Position.TWO, availableSize - this.silosSize[Position.THREE]);
+						break;
+					default:
+						break;
+				}
+			default:
+				break;
+		}
+		this.layout(this.dimension);
+
+		return true;
+	}
+
+	protected boundSiloSize(siloPosition: Position, sizeChangePx: number): number {",`protected` =>  `private`?,2017-03-24 20:37:46
863,"@@ -853,6 +857,83 @@ export class EditorGroupsControl extends Themable implements IEditorGroupsContro
 		return ratio;
 	}
 
+	// Request size change on the active editor/group - changes main axis
+	public requestActiveGroupSizeChange(groupSizeChange: number): boolean {
+
+		enum VISIBLE_EDITORS {
+			ONE = 1,
+			TWO = 2,
+			THREE = 3
+		}
+
+		const visibleEditors = this.getVisibleEditorCount();
+
+		if (visibleEditors <= VISIBLE_EDITORS.ONE) {
+			return false;
+		}
+
+		let availableSize = this.totalSize;
+		const activeGroupPosition = this.getActivePosition();
+
+		switch (visibleEditors) {
+			case VISIBLE_EDITORS.TWO:
+				switch (activeGroupPosition) {
+					case Position.ONE:
+						this.silosSize[Position.ONE] = this.boundSiloSize(Position.ONE, groupSizeChange);
+						this.silosSize[Position.TWO] = availableSize - this.silosSize[Position.ONE];
+						break;
+					case Position.TWO:
+						this.silosSize[Position.TWO] = this.boundSiloSize(Position.TWO, groupSizeChange);
+						this.silosSize[Position.ONE] = availableSize - this.silosSize[Position.TWO];
+					default:
+						break;
+				}
+				break;
+			case VISIBLE_EDITORS.THREE:
+				switch (activeGroupPosition) {
+					case Position.ONE:
+						this.silosSize[Position.ONE] = this.boundSiloSize(Position.ONE, groupSizeChange);
+						this.distributeRemainingSilosSize(Position.TWO, Position.THREE, availableSize - this.silosSize[Position.ONE]);
+						break;
+					case Position.TWO:
+						this.silosSize[Position.TWO] = this.boundSiloSize(Position.TWO, groupSizeChange);
+						this.distributeRemainingSilosSize(Position.ONE, Position.THREE, availableSize - this.silosSize[Position.TWO]);
+						break;
+					case Position.THREE:
+						this.silosSize[Position.THREE] = this.boundSiloSize(Position.THREE, groupSizeChange);
+						this.distributeRemainingSilosSize(Position.ONE, Position.TWO, availableSize - this.silosSize[Position.THREE]);
+						break;
+					default:
+						break;
+				}
+			default:
+				break;
+		}
+		this.layout(this.dimension);
+
+		return true;
+	}
+
+	protected boundSiloSize(siloPosition: Position, sizeChangePx: number): number {
+		const visibleEditors = this.getVisibleEditorCount();
+		let newSiloSize: number = 0;
+
+		newSiloSize = Math.max(this.minSize, this.silosSize[siloPosition] + sizeChangePx);
+		newSiloSize = Math.min(newSiloSize, (this.totalSize - this.minSize * (visibleEditors - 1)));
+
+		return newSiloSize;
+	}
+
+	protected distributeRemainingSilosSize(remPosition1: Position, remPosition2: Position, availableSize: number): void {",`protected` =>  `private`?,2017-03-24 20:37:51
82,"@@ -86,7 +86,8 @@ class ExtHostApiCommands {
 			description: 'Execute signature help provider.',
 			args: [
 				{ name: 'uri', description: 'Uri of a text document', constraint: URI },
-				{ name: 'position', description: 'Position in a text document', constraint: types.Position }
+				{ name: 'position', description: 'Position in a text document', constraint: types.Position },
+				{ name: 'triggerCharacter', description: 'Trigger signature help when the user types the character, like `,` or `(`', constraint: String }
 			],","this is an array and called triggerCharacters, also it's optional which I don't know if we express yet
",2016-03-22 10:58:51
496,"@@ -87,8 +86,13 @@ export class UntitledEditorInput extends AbstractUntitledEditorInput {
 			return this.cachedModel.isDirty();
 		}
 
-		// untitled files with an associated path or restore resource are always dirty
-		return this.hasAssociatedFilePath || !!this.restoreResource;
+		// A disposed input is never dirty, even if it was restored from backup
+		if (this.isDisposed()) {
+			return false;
+		}
+
+		// untitled files with an associated path or associated resource
+		return this.hasAssociatedFilePath || !!this.resource;","@Tyriar isn't that wrong? every untitled editor input will have a resource but will not be dirty when opened (e.g. open a new untitled file without content, it should not show dirty).
",2016-11-16 14:57:41
723,"@@ -88,42 +88,82 @@ export function shorten(paths: string[]): string[] {
 	// for every path
 	let match = false;
 	for (let pathIndex = 0; pathIndex < paths.length; pathIndex++) {
-		const path = paths[pathIndex];
+		let path = paths[pathIndex];
+
+		if (path === '') {
+			shortenedPaths[pathIndex] = '.';
+			continue;
+		}
+
+		if (!path) {
+			shortenedPaths[pathIndex] = path;
+			continue;
+		}
+
 		match = true;
 
+		let prefix = '';
+		// trim for now and concatenate network path (e.g. \\network) or root path (/etc) later
+		if (path.indexOf(`${nativeSep + nativeSep}`) === 0) {",I suggest to extract a new `const unc = ${nativeSep + nativeSep}`,2017-02-09 06:30:07
724,"@@ -88,42 +88,82 @@ export function shorten(paths: string[]): string[] {
 	// for every path
 	let match = false;
 	for (let pathIndex = 0; pathIndex < paths.length; pathIndex++) {
-		const path = paths[pathIndex];
+		let path = paths[pathIndex];
+
+		if (path === '') {
+			shortenedPaths[pathIndex] = '.';
+			continue;
+		}
+
+		if (!path) {
+			shortenedPaths[pathIndex] = path;
+			continue;
+		}
+
 		match = true;
 
+		let prefix = '';
+		// trim for now and concatenate network path (e.g. \\network) or root path (/etc) later
+		if (path.indexOf(`${nativeSep + nativeSep}`) === 0) {
+			prefix = path.substr(0, path.indexOf(`${nativeSep + nativeSep}`) + 2);
+			path = path.substr(path.indexOf(`${nativeSep + nativeSep}`) + 2);
+		} else if (path.indexOf(`${nativeSep}`) === 0) {
+			prefix = path.substr(0, path.indexOf(`${nativeSep}`) + 1);","Makes it unnecessarily hard to read to put a variable around ticks, just use `nativeSep` here?",2017-02-09 06:30:44
820,"@@ -88,6 +88,30 @@ export function tildify(path: string, userHome: string): string {
  * Shortens the paths but keeps them easy to distinguish.
  * Replaces not important parts with ellipsis.
  * Every shorten path matches only one original path and vice versa.
+ *
+ * Algorithm for shortening paths is as follows:
+ * 1. For every path in list, find unique substring of that path.
+ * 2. Unique substring along with ellipsis is shortened path of that path.
+ * 3. To find unique substring of path, consider every segment of length from 1 to path.length of path from end of string
+ *    and if present segment is not substring to any other paths then present segment is unique path,
+ *    else check if it is not present as suffix of any other path and present segment is suffix of path itself,
+ *    if it is true take present segment as unique path.
+ * 4. Apply ellipsis to unique segment according to whether segment is present at start/in-between/end of path.
+ *
+ * Example 1
+ * 1. consider 2 paths i.e. ['a\\b\\c\\d', 'a\\f\\b\\c\\d']
+ * 2. find unique path of first path,
+ * 	a. 'd' is present in path2 and is suffix of path2, hence not unique of present path.
+ * 	b. 'c' is present in path2 and 'c' is not suffix of present path, similarly for 'b' and 'a' also.
+ * 	c. 'd\\c' is suffix of path2.
+ *  d. 'b\\c' is not suffix of present path.
+ *  e. 'a\\b' is not present in path2, hence unique path is 'a\\b...'.
+ * 3. for path2, 'f' is not present in path1 hence unique is '...\\f\\...'.
+ *
+ * Example 2
+ * 1. consider 2 paths i.e. ['a\\b', 'a\\b\\c'].
+ * 	a. Even if 'b' is present in path2, as 'b' is suffix of path1 and is not suffix of path2, unique path will be '...\\b'.
+ * 2. for path2, 'c' is not present in path1 hence unique path is '..\\c'.","@bpasero @hun1ahpu @Tyriar Adding detailed algorithm. Please review.

I think algorithm can be improved with the help of better data-structure, will create new PR with improved algorithm.

Thanks :)",2017-03-13 12:12:36
152,"@@ -889,7 +909,8 @@ export class Parser {
 			node.setExpression(this._parseStringLiteral()) ||
 			node.setExpression(this._parseNumeric()) ||
 			node.setExpression(this._parseHexColor()) ||
-			node.setExpression(this._parseOperation())
+			node.setExpression(this._parseOperation()) ||
+			node.setExpression(this._parseVariableExpression())","This needs to be before parseIndent (there could be an ident 'var'). Actually i'd rather do not have a _parseVariableExpression but let variable declarations be handled by _parseFunction.
",2016-05-20 09:59:25
676,"@@ -898,6 +898,7 @@ export interface IWorkbenchEditorConfiguration {
 		editor: {
 			showTabs: boolean;
 			showTabCloseButton: boolean;
+			tabCloseButton: 'left' | 'right' | 'off';",remove `showTabCloseButton`,2017-01-16 07:59:57
967,"@@ -899,6 +905,24 @@ export class CodeMenu {
 		}
 	}
 
+	private setTaskMenu(taskMenu: Electron.Menu): void {
+		const runTask = this.createMenuItem(nls.localize({ key: 'miRunTask', comment: ['&& denotes a mnemonic'] }, ""&&Run Task...""), 'workbench.action.tasks.runTask');
+		const restartTask = this.createMenuItem(nls.localize({ key: 'miRestartTask', comment: ['&& denotes a mnemonic'] }, ""&&Restart Task""), 'workbench.action.tasks.restartTask');
+		const terminateTask = this.createMenuItem(nls.localize({ key: 'miTerminateTask', comment: ['&& denotes a mnemonic'] }, ""&&Terminate Task""), 'workbench.action.tasks.terminate');
+		const buildTask = this.createMenuItem(nls.localize({ key: 'miBuildTask', comment: ['&& denotes a mnemonic'] }, ""&&Build Task""), 'workbench.action.tasks.build');
+		const testTask = this.createMenuItem(nls.localize({ key: 'miTestTask', comment: ['&& denotes a mnemonic'] }, ""&&Test Task""), 'workbench.action.tasks.test');
+		const showTaskLog = this.createMenuItem(nls.localize({ key: 'miShowTaskLog', comment: ['&& denotes a mnemonic'] }, ""&&Show Task Log""), 'workbench.action.tasks.showLog');","De-dupe the mnemonics here- R, T",2017-06-12 21:34:30
55,"@@ -9,10 +9,28 @@
 
 declare namespace vscode {
 
-	/**
-	 * The version of the editor.
-	 */
-	export var version: string;","that is API breakage which we cannot do
",2016-01-21 11:29:53
56,"@@ -9,10 +9,28 @@
 
 declare namespace vscode {
 
-	/**
-	 * The version of the editor.
-	 */
-	export var version: string;
+	export const env: {
+		/**
+		 * The version of the editor.
+		 */
+		version: string;
+
+		/**
+		 * locale, like de-ch, en-us
+		 */
+		locale: string;","@dbaeumer We are looking into adding some vscode environment information. What do thing is needed for localisation support. Is a `locale` string enough?
",2016-01-21 11:30:53
471,"@@ -9,11 +9,13 @@ import fs = require('fs');
 import path = require('path');
 import os = require('os');
 import assert = require('assert');
+import crypto = require('crypto');","@Tyriar warnings in this file
",2016-11-09 07:39:16
190,"@@ -9,21 +9,46 @@ import * as vscode from 'vscode';
 import * as path from 'path';
 import { ExtensionContext, TextDocumentContentProvider, EventEmitter, Event, Uri, ViewColumn } from ""vscode"";
 
-const hljs = require('highlight.js');
-const mdnh = require('markdown-it-named-headers');
-const md = require('markdown-it')({
-	html: true,
-	highlight: function (str, lang) {
-		if (lang && hljs.getLanguage(lang)) {
-			try {
-				return `<pre class=""hljs""><code><div>${hljs.highlight(lang, str, true).value}</div></code></pre>`;
-			} catch (error) { }
+let md;
+let userStyles = [];
+
+export function activate(context: ExtensionContext) {
+	// Upon activation, load markdown module with default
+	// plugins, and then load any user-defined plugins.
+	// Note: user-defined plugins may override default plugins.
+	const hljs = require('highlight.js');","Would suggest a better naming for the hljs. const HIGHLIGHT? Same for the const below MARKDOWN_HEADERS? And out of curiosity why are the const namings not ALL_CAPS? I cannot find this back in the https://github.com/Microsoft/vscode/wiki/Coding-Guidelines
",2016-06-21 11:29:28
188,"@@ -9,21 +9,46 @@ import * as vscode from 'vscode';
 import * as path from 'path';
 import { ExtensionContext, TextDocumentContentProvider, EventEmitter, Event, Uri, ViewColumn } from ""vscode"";
 
-const hljs = require('highlight.js');
-const mdnh = require('markdown-it-named-headers');
-const md = require('markdown-it')({
-	html: true,
-	highlight: function (str, lang) {
-		if (lang && hljs.getLanguage(lang)) {
-			try {
-				return `<pre class=""hljs""><code><div>${hljs.highlight(lang, str, true).value}</div></code></pre>`;
-			} catch (error) { }
+let md;
+let userStyles = [];
+
+export function activate(context: ExtensionContext) {
+	// Upon activation, load markdown module with default
+	// plugins, and then load any user-defined plugins.
+	// Note: user-defined plugins may override default plugins.
+	const hljs = require('highlight.js');
+	const mdnh = require('markdown-it-named-headers');","Put it into a special list, maybe called `builtInPlugins` and merge it with `userPlugins` at runtime?
",2016-06-20 10:02:31
189,"@@ -9,21 +9,46 @@ import * as vscode from 'vscode';
 import * as path from 'path';
 import { ExtensionContext, TextDocumentContentProvider, EventEmitter, Event, Uri, ViewColumn } from ""vscode"";
 
-const hljs = require('highlight.js');
-const mdnh = require('markdown-it-named-headers');
-const md = require('markdown-it')({
-	html: true,
-	highlight: function (str, lang) {
-		if (lang && hljs.getLanguage(lang)) {
-			try {
-				return `<pre class=""hljs""><code><div>${hljs.highlight(lang, str, true).value}</div></code></pre>`;
-			} catch (error) { }
+let md;
+let userStyles = [];
+
+export function activate(context: ExtensionContext) {
+	// Upon activation, load markdown module with default
+	// plugins, and then load any user-defined plugins.
+	// Note: user-defined plugins may override default plugins.
+	const hljs = require('highlight.js');
+	const mdnh = require('markdown-it-named-headers');
+	md = require('markdown-it')({
+		html: true,
+		highlight: function (str, lang) {
+			if (lang && hljs.getLanguage(lang)) {
+				try {
+					return `<pre class=""hljs""><code><div>${hljs.highlight(lang, str, true).value}</div></code></pre>`;
+				} catch (error) { }
+			}
+			return `<pre class=""hljs""><code><div>${md.utils.escapeHtml(str)}</div></code></pre>`;
 		}
-		return `<pre class=""hljs""><code><div>${md.utils.escapeHtml(str)}</div></code></pre>`;
+	}).use(mdnh, {});
+
+	// Load user-defined packages
+	const userPlugins = <Array<Object>>vscode.workspace.getConfiguration('markdown')['plugins'];
+	if (userPlugins && Array.isArray(userPlugins)) {","This can be a single `instanceof Array`
",2016-06-20 10:04:30
183,"@@ -9,26 +9,41 @@
 	<script>
 		'use strict';
 
+		var initData = {};
+
+		function styleBody(body) {
+			if (body) {
+				let currentClasses = body.className.split(' ');
+				let strippedClasses = currentClasses.filter((cl) => {
+					return !initData.bodyClasses.remove.includes(cl);
+				});
+				body.className= `${strippedClasses.join(' ')} ${initData.bodyClasses.add}`;
+			}","Could we just use: `body.classList.remove(""vs"", ""vs-dark"", ""hc-dark""); body.classList.add(""theActualTheme"")`?
",2016-06-14 13:39:47
86,"@@ -9,42 +9,132 @@
 	""properties"": {
 		""compilerOptions"": {
 			""type"": ""object"",
-			""description"": ""Instructs the JavaScript language service how to validate .js files"",
+			""description"": ""Instructs the JavaScript language service how to validate and down level compile .js files"",
 			""properties"": {
 				""charset"": {
 					""description"": ""The character set of the input files"",
 					""type"": ""string""
 				},
 				""diagnostics"": {
-					""description"": ""Show diagnostic information."",
+					""description"": ""When down-level compiling, show diagnostic information."",
 					""type"": ""boolean""
 				},
-				""locale"": {
-					""description"": ""The locale to use to show error messages, e.g. en-us."",
+				""emitBOM"": {
+					""description"": ""When down-level compiling, emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files."",
+					""type"": ""boolean""
+				},
+				""inlineSourceMap"": {
+					""description"": ""When down-level compiling, emit a single file with source maps instead of having a separate file."",
+					""type"": ""boolean""
+				},
+				""inlineSources"": {
+					""description"": ""When down-level compiling, emit the source alongside the sourcemaps within a single file; requires --inlineSourceMap to be set."",
+					""type"": ""boolean""
+				},
+				""jsx"": {
+					""description"": ""When down-level compiling, specify JSX code generation: 'preserve' or 'react'."",
+					""enum"": [
+						""preserve"",
+						""react""
+					]
+				},
+				""reactNamespace"": {
+					""description"": ""When down-level compiling, specifies the object invoked for createElement and __spread when targeting 'react' JSX emit."",
 					""type"": ""string""
 				},
+				""listFiles"": {
+					""description"": ""When down-level compiling, print names of files part of the compilation."",
+					""type"": ""boolean""
+				},
 				""mapRoot"": {
-					""description"": ""Specifies the location where debugger should locate map files instead of generated locations"",
+					""description"": ""When down-level compiling, specifies the location where debugger should locate map files instead of generated locations"",
 					""type"": ""string"",
 					""format"": ""uri""
 				},
 				""module"": {
-					""description"": ""Specify used module type: 'commonjs', 'system', 'umd', 'es6', or 'es2015'. Note: 'amd' is currently not supported."",
+					""description"": ""When down-level compiling, specify module code generation: 'commonjs', 'system', 'umd', 'amd', 'es6', or 'es2015'."",
 					""enum"": [
 						""commonjs"",
 						""umd"",
+						""amd"",
 						""system"",
 						""es6"",
 						""es2015""
 					]
 				},
-
+				""newLine"": {
+					""description"": ""When down-level compiling, specifies the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."",
+					""enum"": [
+						""CRLF"",
+						""LF""
+					]
+				},
+				""noEmit"": {
+					""description"": ""When down-level compiling, do not emit output."",
+					""type"": ""boolean""
+				},
+				""noEmitHelpers"": {
+					""description"": ""When down-level compiling, do not generate custom helper functions like __extends in compiled output."",
+					""type"": ""boolean""
+				},
+				""noEmitOnError"": {
+					""description"": ""When down-level compiling, do not emit outputs if any type checking errors were reported."",
+					""type"": ""boolean""
+				},
 				""noLib"": {
 					""description"": ""Do not include the default library file (lib.d.ts)."",
 					""type"": ""boolean""
 				},
+				""noResolve"": {
+					""description"": ""When down-level compiling, do not add triple-slash references or module import targets to the input files."",","I changed it from
Do not add triple-slash references or module import targets to the _list of compiled_ files.
",2016-03-22 12:04:49
85,"@@ -9,42 +9,132 @@
 	""properties"": {
 		""compilerOptions"": {
 			""type"": ""object"",
-			""description"": ""Instructs the JavaScript language service how to validate .js files"",
+			""description"": ""Instructs the JavaScript language service how to validate and down level compile .js files"",
 			""properties"": {
 				""charset"": {
 					""description"": ""The character set of the input files"",
 					""type"": ""string""
 				},
 				""diagnostics"": {
-					""description"": ""Show diagnostic information."",
+					""description"": ""When down-level compiling, show diagnostic information."",
 					""type"": ""boolean""
 				},
-				""locale"": {
-					""description"": ""The locale to use to show error messages, e.g. en-us."",
+				""emitBOM"": {
+					""description"": ""When down-level compiling, emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files."",
+					""type"": ""boolean""
+				},
+				""inlineSourceMap"": {
+					""description"": ""When down-level compiling, emit a single file with source maps instead of having a separate file."",
+					""type"": ""boolean""
+				},
+				""inlineSources"": {
+					""description"": ""When down-level compiling, emit the source alongside the sourcemaps within a single file; requires --inlineSourceMap to be set."",
+					""type"": ""boolean""
+				},
+				""jsx"": {
+					""description"": ""When down-level compiling, specify JSX code generation: 'preserve' or 'react'."",
+					""enum"": [
+						""preserve"",
+						""react""
+					]
+				},
+				""reactNamespace"": {
+					""description"": ""When down-level compiling, specifies the object invoked for createElement and __spread when targeting 'react' JSX emit."",
 					""type"": ""string""
 				},
+				""listFiles"": {
+					""description"": ""When down-level compiling, print names of files part of the compilation."",
+					""type"": ""boolean""
+				},
 				""mapRoot"": {
-					""description"": ""Specifies the location where debugger should locate map files instead of generated locations"",
+					""description"": ""When down-level compiling, specifies the location where debugger should locate map files instead of generated locations"",
 					""type"": ""string"",
 					""format"": ""uri""
 				},
 				""module"": {
-					""description"": ""Specify used module type: 'commonjs', 'system', 'umd', 'es6', or 'es2015'. Note: 'amd' is currently not supported."",
+					""description"": ""When down-level compiling, specify module code generation: 'commonjs', 'system', 'umd', 'amd', 'es6', or 'es2015'."",
 					""enum"": [
 						""commonjs"",
 						""umd"",
+						""amd"",
 						""system"",
 						""es6"",
 						""es2015""
 					]
 				},
-
+				""newLine"": {
+					""description"": ""When down-level compiling, specifies the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."",
+					""enum"": [
+						""CRLF"",
+						""LF""
+					]
+				},
+				""noEmit"": {
+					""description"": ""When down-level compiling, do not emit output."",
+					""type"": ""boolean""
+				},
+				""noEmitHelpers"": {
+					""description"": ""When down-level compiling, do not generate custom helper functions like __extends in compiled output."",
+					""type"": ""boolean""
+				},
+				""noEmitOnError"": {
+					""description"": ""When down-level compiling, do not emit outputs if any type checking errors were reported."",
+					""type"": ""boolean""
+				},
 				""noLib"": {
 					""description"": ""Do not include the default library file (lib.d.ts)."",
 					""type"": ""boolean""
 				},
+				""noResolve"": {
+					""description"": ""When down-level compiling, do not add triple-slash references or module import targets to the input files."",
+					""type"": ""boolean""
+				},
+				""skipDefaultLibCheck"": {
+					""description"": ""When down-level compiling, do not check for the default library (lib.d.ts)."",","I made up this description (description missing in the tsconfig schema)
",2016-03-22 12:03:16
537,"@@ -9,6 +9,7 @@ License:  MIT
 URL:      https://code.visualstudio.com/
 Icon:     @@NAME@@.xpm
 Requires: glibc >= 2.15
+Requires: GConf2",Thanks for the PR! Will this work for both 32 and 64 bit across most distributions? We had some issues with `libXss.so.1` where installation failed because the package was not found in the local package manager..,2016-11-29 22:47:05
130,"@@ -9,6 +9,7 @@ global.vscodeStart = Date.now();
 var app = require('electron').app;
 var fs = require('fs');
 var path = require('path');
+var product = require('../product.json');","Isn't product.json one level more up?
",2016-04-21 08:50:30
684,"@@ -9,8 +9,9 @@ import * as strings from 'vs/base/common/strings';
 import * as objects from 'vs/base/common/objects';
 import * as paths from 'vs/base/common/paths';
 import * as platform from 'vs/base/common/platform';
+import fs = require('fs');","I would put this at the top of the imports as we usually first put node imports than base, editor, platform, workbench",2017-01-18 14:04:47
72,"@@ -90,16 +91,61 @@ export function getFullExpressionName(expression: debug.IExpression, sessionType
 }
 
 export class Thread implements debug.IThread {
-
+	private promisedCallStack: TPromise<debug.IStackFrame[]>;
+	private cachedCallStack: debug.IStackFrame[];
+	private callStackQueried: boolean;
 	public stoppedDetails: debug.IRawStoppedDetails;
+	public stopped: boolean;
 
-	constructor(public name: string, public threadId, public callStack: debug.IStackFrame[]) {
+	constructor(public name: string, public threadId) {","Not important - but I personally am not a big fun of using `undefined`. I always try to use `null`, because having one `null` is already bad enough. You do not have to change anything here, but just for the future so you know that is my style.
",2016-03-16 10:23:35
77,"@@ -90,16 +91,61 @@ export function getFullExpressionName(expression: debug.IExpression, sessionType
 }
 
 export class Thread implements debug.IThread {
-
+	private promisedCallStack: TPromise<debug.IStackFrame[]>;
+	private cachedCallStack: debug.IStackFrame[];
+	private callStackQueried: boolean;
 	public stoppedDetails: debug.IRawStoppedDetails;
+	public stopped: boolean;
 
-	constructor(public name: string, public threadId, public callStack: debug.IStackFrame[]) {
+	constructor(public name: string, public threadId) {
+		this.promisedCallStack = undefined;
 		this.stoppedDetails = undefined;
+		this.callStackQueried = false;
+		this.cachedCallStack = undefined;
+		this.stopped = false;
 	}
 
 	public getId(): string {
 		return `thread:${ this.name }:${ this.threadId }`;
 	}
+
+	public clearCallStack(): void {
+		this.promisedCallStack = undefined;
+		this.cachedCallStack = undefined;
+		this.callStackQueried = false;
+	}
+
+	public getCachedCallStack(): debug.IStackFrame[] {
+		return this.cachedCallStack;
+	}
+
+	public getCallStack(debugService: debug.IDebugService): TPromise<debug.IStackFrame[]> {
+		if (!this.stopped) {
+			return TPromise.as([]);
+		}
+		if (!this.callStackQueried) {","I believe the `callStackQueried` flag is superflous and we can remove it. What I propose is to just change line 126 to `if (!this.promisedCallStack)`. This way if we already queried a call to the adapter the original call will be returned and no additional calls will be made. Same as the `ExpressionsContainer` does with `getChildren`
",2016-03-16 10:41:46
650,"@@ -90,6 +90,12 @@ interface INativeOpenDialogOptions {
 	window?: VSCodeWindow;
 }
 
+interface IConfiguration {",@xwvvvvwx I suggest to move this into `window.ts` including the configuration change listener. I think it is OK to let each window handle this change from within instead of from outside.,2017-01-04 10:53:03
433,"@@ -90,6 +90,29 @@ function _renderHtml(content: IHTMLContentElement, options: RenderOptions = {}):
 		const withInnerHTML = new TPromise(c => signalInnerHTML = c);
 
 		const renderer = new marked.Renderer();
+		renderer.image = (href: string, title: string, text: string) => {
+			let attributes = '';
+			if (title) {
+				const splitted = title.split('|');
+				title = splitted[0];","Looks like the actual title is getting lost now. Add it back into the attributes
",2016-11-01 22:18:11
432,"@@ -90,6 +90,29 @@ function _renderHtml(content: IHTMLContentElement, options: RenderOptions = {}):
 		const withInnerHTML = new TPromise(c => signalInnerHTML = c);
 
 		const renderer = new marked.Renderer();
+		renderer.image = (href: string, title: string, text: string) => {
+			let attributes = '';
+			if (title) {
+				const splitted = title.split('|');
+				title = splitted[0];
+				const parameters = splitted[1];
+				if (parameters) {
+					const heightFromParams = new RegExp(/height=(\d+)/).exec(parameters);","[nit] Just use regexp literal, not `new RegExp`
",2016-11-01 22:13:50
434,"@@ -90,6 +90,29 @@ function _renderHtml(content: IHTMLContentElement, options: RenderOptions = {}):
 		const withInnerHTML = new TPromise(c => signalInnerHTML = c);
 
 		const renderer = new marked.Renderer();
+		renderer.image = (href: string, title: string, text: string) => {
+			let attributes = '';
+			if (title) {
+				const splitted = title.split('|');
+				title = splitted[0];
+				const parameters = splitted[1];
+				if (parameters) {
+					const heightFromParams = new RegExp(/height=(\d+)/).exec(parameters);
+					const widthFromParams = new RegExp(/width=(\d+)/).exec(parameters);
+					const height = (heightFromParams && heightFromParams[1]);
+					const width = (widthFromParams && widthFromParams[1]);
+					const dimensions = [];
+					if (width) {","Change this check to `isFinite` to correctly handle zero width/heights
",2016-11-01 22:20:58
247,"@@ -90,8 +90,35 @@ export class UserSettings {
 	}
 
 	private registerWatchers(): void {
-		this.watcher = fs.watch(path.dirname(this.appSettingsPath));
-		this.watcher.on('change', (eventType: string, fileName: string) => this.onSettingsFileChange(eventType, fileName));
+		let self = this;
+		function attachSettingsChangeWatcher(watchPath: string): void {
+			self.watcher = fs.watch(watchPath);
+			self.watcher.on('change', (eventType: string, fileName: string) => self.onSettingsFileChange(eventType, fileName));","I think onSettingsFileChange ignores eventType and fileName so maybe just remove it from there and invocations.
",2016-08-09 19:47:26
248,"@@ -90,8 +90,35 @@ export class UserSettings {
 	}
 
 	private registerWatchers(): void {
-		this.watcher = fs.watch(path.dirname(this.appSettingsPath));
-		this.watcher.on('change', (eventType: string, fileName: string) => this.onSettingsFileChange(eventType, fileName));
+		let self = this;
+		function attachSettingsChangeWatcher(watchPath: string): void {
+			self.watcher = fs.watch(watchPath);
+			self.watcher.on('change', (eventType: string, fileName: string) => self.onSettingsFileChange(eventType, fileName));
+		}
+
+		// Attach a watcher to the settings directory
+		attachSettingsChangeWatcher(path.dirname(this.appSettingsPath));
+
+		// Follow symlinks for settings and keybindings and attach watchers if they resolve
+		let followSymlinkPaths = [
+			this.appSettingsPath,
+			this.appKeybindingsPath
+		];
+		followSymlinkPaths.forEach((path) => {
+			fs.lstat(path, function(err, stats) {
+				if (err) {
+					return;
+				}
+				if (stats.isSymbolicLink()) {
+					fs.readlink(path, function(err, realPath) {","What if the symlink is actually a folder? Can you check that the stat is a file?
",2016-08-09 19:48:07
701,"@@ -91,8 +91,11 @@ export enum ClickBehavior {
 	ON_MOUSE_UP
 }
 
+export type WorkbenchOpenMode = 'singleClick' | 'doubleClick';",I would not call this `WorkbenchXY` but just `OpenMode` since the tree itself is not only used in the workbench scope.,2017-01-20 11:52:36
825,"@@ -918,4 +922,261 @@ export class ToggleSharedProcessAction extends Action {
 	run(): TPromise<void> {
 		return this.windowsService.toggleSharedProcess();
 	}
-}
\ No newline at end of file
+}
+
+export abstract class BaseNavigationAction extends Action {
+
+	protected NEXT = 'next';","@misoguy a bit weird, why not use an enum outside of the action?

```
enum Direction {
   Next,
   Previous
}
```",2017-03-14 05:42:36
824,"@@ -918,4 +922,261 @@ export class ToggleSharedProcessAction extends Action {
 	run(): TPromise<void> {
 		return this.windowsService.toggleSharedProcess();
 	}
-}
\ No newline at end of file
+}
+
+export abstract class BaseNavigationAction extends Action {
+
+	protected NEXT = 'next';
+	protected PREVIOUS = 'previous';
+
+	constructor(
+		id: string,
+		label: string,
+		@IEditorGroupService protected groupService: IEditorGroupService,
+		@IPanelService protected panelService: IPanelService,
+		@IPartService protected partService: IPartService,
+		@IViewletService protected viewletService: IViewletService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		const isEditorFocus = this.partService.hasFocus(Parts.EDITOR_PART);
+		const isPanelFocus = this.partService.hasFocus(Parts.PANEL_PART);
+		const isSidebarFocus = this.partService.hasFocus(Parts.SIDEBAR_PART);
+
+		const isEditorGroupVertical = this.groupService.getGroupOrientation() === 'vertical';
+		const isSidebarPositionLeft = this.partService.getSideBarPosition() === SidebarPosition.LEFT;
+
+		if (isEditorFocus) {
+			return this.navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isPanelFocus) {
+			return this.navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isSidebarFocus) {
+			return this.navigateOnSidebarFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		return TPromise.as(false);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnSidebarFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateToPanel(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.PANEL_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activePanelId = this.panelService.getActivePanel().getId();
+		return this.panelService.openPanel(activePanelId, true);
+	}
+
+	protected navigateToSidebar(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.SIDEBAR_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activeViewletId = this.viewletService.getActiveViewlet().getId();
+		return this.viewletService.openViewlet(activeViewletId, true);
+	}
+
+	protected navigateAcrossEditorGroup(direction: string): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		const currentPosition = model.positionOfGroup(model.activeGroup);
+		const nextPosition = direction === this.NEXT ? currentPosition + 1 : currentPosition - 1;
+
+		if (nextPosition < 0 || nextPosition > model.groups.length - 1) {
+			return TPromise.as(false);
+		}
+
+		this.groupService.focusGroup(nextPosition);
+		return TPromise.as(true);
+	}
+
+	protected navigateToLastActiveGroup(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		const lastActiveGroup = model.activeGroup;
+		this.groupService.focusGroup(lastActiveGroup);
+		return TPromise.as(true);
+	}
+
+	protected navigateToFirstEditorGroup(): TPromise<any> {
+		this.groupService.focusGroup(0);
+		return TPromise.as(true);
+	}
+
+	protected navigateToLastEditorGroup(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		const lastEditorGroupPosition = model.groups.length - 1;
+		this.groupService.focusGroup(lastEditorGroupPosition);
+		return TPromise.as(true);
+	}
+}
+
+export class NavigateLeftAction extends BaseNavigationAction {
+
+	public static ID = 'workbench.action.navigateLeft';
+	public static LABEL = nls.localize('navigateLeft', ""Navigate Left"");",@misoguy please make sure that these labels are in sync with where you register them (e.g. this one should be `View: Move to the View Part on the Left`).,2017-03-14 05:41:31
821,"@@ -918,4 +922,261 @@ export class ToggleSharedProcessAction extends Action {
 	run(): TPromise<void> {
 		return this.windowsService.toggleSharedProcess();
 	}
-}
\ No newline at end of file
+}
+
+export abstract class BaseNavigationAction extends Action {
+
+	protected NEXT = 'next';
+	protected PREVIOUS = 'previous';
+
+	constructor(
+		id: string,
+		label: string,
+		@IEditorGroupService protected groupService: IEditorGroupService,
+		@IPanelService protected panelService: IPanelService,
+		@IPartService protected partService: IPartService,
+		@IViewletService protected viewletService: IViewletService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		const isEditorFocus = this.partService.hasFocus(Parts.EDITOR_PART);
+		const isPanelFocus = this.partService.hasFocus(Parts.PANEL_PART);
+		const isSidebarFocus = this.partService.hasFocus(Parts.SIDEBAR_PART);
+
+		const isEditorGroupVertical = this.groupService.getGroupOrientation() === 'vertical';
+		const isSidebarPositionLeft = this.partService.getSideBarPosition() === SidebarPosition.LEFT;
+
+		if (isEditorFocus) {
+			return this.navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isPanelFocus) {
+			return this.navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isSidebarFocus) {
+			return this.navigateOnSidebarFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		return TPromise.as(false);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnSidebarFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateToPanel(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.PANEL_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activePanelId = this.panelService.getActivePanel().getId();
+		return this.panelService.openPanel(activePanelId, true);
+	}
+
+	protected navigateToSidebar(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.SIDEBAR_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activeViewletId = this.viewletService.getActiveViewlet().getId();
+		return this.viewletService.openViewlet(activeViewletId, true);
+	}
+
+	protected navigateAcrossEditorGroup(direction: string): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		const currentPosition = model.positionOfGroup(model.activeGroup);
+		const nextPosition = direction === this.NEXT ? currentPosition + 1 : currentPosition - 1;
+
+		if (nextPosition < 0 || nextPosition > model.groups.length - 1) {
+			return TPromise.as(false);
+		}
+
+		this.groupService.focusGroup(nextPosition);
+		return TPromise.as(true);
+	}
+
+	protected navigateToLastActiveGroup(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		const lastActiveGroup = model.activeGroup;
+		this.groupService.focusGroup(lastActiveGroup);
+		return TPromise.as(true);
+	}
+
+	protected navigateToFirstEditorGroup(): TPromise<any> {
+		this.groupService.focusGroup(0);
+		return TPromise.as(true);
+	}
+
+	protected navigateToLastEditorGroup(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		const lastEditorGroupPosition = model.groups.length - 1;
+		this.groupService.focusGroup(lastEditorGroupPosition);
+		return TPromise.as(true);
+	}
+}
+
+export class NavigateLeftAction extends BaseNavigationAction {
+
+	public static ID = 'workbench.action.navigateLeft';
+	public static LABEL = nls.localize('navigateLeft', ""Navigate Left"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IEditorGroupService groupService: IEditorGroupService,
+		@IPanelService panelService: IPanelService,
+		@IPartService partService: IPartService,
+		@IViewletService viewletService: IViewletService
+	) {
+		super(id, label, groupService, panelService, partService, viewletService);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {","If `isEditorGroupVertical` is `false`, navigate left will navigate to the sidebar, whether the sidebar is on the left or right. However, if `isEditorGroupVertical` is `true` and `isSidebarPositionLeft ` is `false`, it won't navigate to the sidebar on the right. The behavior is not consistent.",2017-03-14 03:43:41
822,"@@ -918,4 +922,261 @@ export class ToggleSharedProcessAction extends Action {
 	run(): TPromise<void> {
 		return this.windowsService.toggleSharedProcess();
 	}
-}
\ No newline at end of file
+}
+
+export abstract class BaseNavigationAction extends Action {
+
+	protected NEXT = 'next';
+	protected PREVIOUS = 'previous';
+
+	constructor(
+		id: string,
+		label: string,
+		@IEditorGroupService protected groupService: IEditorGroupService,
+		@IPanelService protected panelService: IPanelService,
+		@IPartService protected partService: IPartService,
+		@IViewletService protected viewletService: IViewletService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		const isEditorFocus = this.partService.hasFocus(Parts.EDITOR_PART);
+		const isPanelFocus = this.partService.hasFocus(Parts.PANEL_PART);
+		const isSidebarFocus = this.partService.hasFocus(Parts.SIDEBAR_PART);
+
+		const isEditorGroupVertical = this.groupService.getGroupOrientation() === 'vertical';
+		const isSidebarPositionLeft = this.partService.getSideBarPosition() === SidebarPosition.LEFT;
+
+		if (isEditorFocus) {
+			return this.navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isPanelFocus) {
+			return this.navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isSidebarFocus) {
+			return this.navigateOnSidebarFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		return TPromise.as(false);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnSidebarFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateToPanel(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.PANEL_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activePanelId = this.panelService.getActivePanel().getId();
+		return this.panelService.openPanel(activePanelId, true);
+	}
+
+	protected navigateToSidebar(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.SIDEBAR_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activeViewletId = this.viewletService.getActiveViewlet().getId();
+		return this.viewletService.openViewlet(activeViewletId, true);
+	}
+
+	protected navigateAcrossEditorGroup(direction: string): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		const currentPosition = model.positionOfGroup(model.activeGroup);
+		const nextPosition = direction === this.NEXT ? currentPosition + 1 : currentPosition - 1;
+
+		if (nextPosition < 0 || nextPosition > model.groups.length - 1) {
+			return TPromise.as(false);
+		}
+
+		this.groupService.focusGroup(nextPosition);
+		return TPromise.as(true);
+	}
+
+	protected navigateToLastActiveGroup(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		const lastActiveGroup = model.activeGroup;
+		this.groupService.focusGroup(lastActiveGroup);
+		return TPromise.as(true);
+	}
+
+	protected navigateToFirstEditorGroup(): TPromise<any> {
+		this.groupService.focusGroup(0);
+		return TPromise.as(true);
+	}
+
+	protected navigateToLastEditorGroup(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		const lastEditorGroupPosition = model.groups.length - 1;
+		this.groupService.focusGroup(lastEditorGroupPosition);
+		return TPromise.as(true);
+	}
+}
+
+export class NavigateLeftAction extends BaseNavigationAction {
+
+	public static ID = 'workbench.action.navigateLeft';
+	public static LABEL = nls.localize('navigateLeft', ""Navigate Left"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IEditorGroupService groupService: IEditorGroupService,
+		@IPanelService panelService: IPanelService,
+		@IPartService partService: IPartService,
+		@IViewletService viewletService: IViewletService
+	) {
+		super(id, label, groupService, panelService, partService, viewletService);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (!isEditorGroupVertical) {
+			return this.navigateToSidebar();
+		}
+		return this.navigateAcrossEditorGroup(this.PREVIOUS)
+			.then(didNavigate => {
+				if (!didNavigate && isSidebarPositionLeft) {
+					return this.navigateToSidebar();
+				}
+				return TPromise.as(true);
+			});
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isSidebarPositionLeft) {
+			return this.navigateToSidebar();
+		}
+		return TPromise.as(false);
+	}
+
+	protected navigateOnSidebarFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isSidebarPositionLeft) {
+			return TPromise.as(false);
+		}
+		if (isEditorGroupVertical) {
+			return this.navigateToLastEditorGroup();
+		}
+		return this.navigateToLastActiveGroup();
+	}
+}
+
+export class NavigateRightAction extends BaseNavigationAction {
+
+	public static ID = 'workbench.action.navigateRight';
+	public static LABEL = nls.localize('navigateRight', ""Navigate Right"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IEditorGroupService groupService: IEditorGroupService,
+		@IPanelService panelService: IPanelService,
+		@IPartService partService: IPartService,
+		@IViewletService viewletService: IViewletService
+	) {
+		super(id, label, groupService, panelService, partService, viewletService);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (!isEditorGroupVertical) {",Same here.,2017-03-14 03:45:58
809,"@@ -918,4 +922,289 @@ export class ToggleSharedProcessAction extends Action {
 	run(): TPromise<void> {
 		return this.windowsService.toggleSharedProcess();
 	}
-}
\ No newline at end of file
+}
+
+export abstract class BaseNavigationAction extends Action {
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService protected editorService: IWorkbenchEditorService,
+		@IEditorGroupService protected groupService: IEditorGroupService,
+		@IPanelService protected panelService: IPanelService,
+		@IPartService protected partService: IPartService,
+		@IViewletService protected viewletService: IViewletService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		const isEditorFocus = this.partService.hasFocus(Parts.EDITOR_PART);
+		const isPanelFocus = this.partService.hasFocus(Parts.PANEL_PART);
+		const isSidebarFocus = this.partService.hasFocus(Parts.SIDEBAR_PART);
+
+		const isEditorGroupVertical = this.groupService.getGroupOrientation() === 'vertical';
+		const isSidebarPositionLeft = this.partService.getSideBarPosition() === SidebarPosition.LEFT;
+
+		if (isEditorFocus) {
+			return this.navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isPanelFocus) {
+			return this.navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isSidebarFocus) {
+			return this.navigateOnSidebarFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		return TPromise.as(false);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnSidebarFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateToPanel(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.PANEL_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activePanelId = this.panelService.getActivePanel().getId();
+		return this.panelService.openPanel(activePanelId, true);
+	}
+
+	protected navigateToSidebar(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.SIDEBAR_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activeViewletId = this.viewletService.getActiveViewlet().getId();
+		return this.viewletService.openViewlet(activeViewletId, true);
+	}
+
+	protected navigateToLastActiveEditor(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		if (model.groups.length < 1) {
+			return null;
+		}
+
+		const lastGroup = model.activeGroup;
+		const activeEditor = lastGroup.activeEditor;
+		return this.editorService.openEditor(activeEditor, null, model.positionOfGroup(lastGroup));
+	}
+
+	protected navigateToStartOfEditor(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		if (model.groups.length < 1) {
+			return null;
+		}
+
+		const firstGroup = model.getGroup(0);
+		const firstEditor = firstGroup.getEditor(0);
+		return this.editorService.openEditor(firstEditor, null, model.positionOfGroup(firstGroup));
+	}
+
+	protected navigateToEndOfEditor(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		if (model.groups.length < 1) {
+			return null;
+		}
+
+		const lastGroup = model.getGroup(model.groups[model.groups.length - 1].id);
+		const lastEditor = lastGroup.getEditor(lastGroup.count - 1);
+		return this.editorService.openEditor(lastEditor, null, model.positionOfGroup(lastGroup));
+	}
+}
+
+export class NavigateLeftAction extends BaseNavigationAction {
+
+	public static ID = 'workbench.action.navigateLeft';
+	public static LABEL = nls.localize('navigateLeft', ""Navigate Left"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService editorService: IWorkbenchEditorService,
+		@IEditorGroupService groupService: IEditorGroupService,
+		@IPanelService panelService: IPanelService,
+		@IPartService partService: IPartService,
+		@IViewletService viewletService: IViewletService
+	) {
+		super(id, label, editorService, groupService, panelService, partService, viewletService);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isEditorGroupVertical) {
+			return this.navigateLeftFromEditor(true, isSidebarPositionLeft);
+		}
+		return this.navigateLeftFromEditor(false, isSidebarPositionLeft);
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isSidebarPositionLeft) {
+			return this.navigateToSidebar();
+		}
+		return TPromise.as(false);
+	}
+
+	protected navigateOnSidebarFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isSidebarPositionLeft) {
+			return TPromise.as(false);
+		}
+		if (isEditorGroupVertical) {
+			return this.navigateToEndOfEditor();
+		}
+		return this.navigateToLastActiveEditor();
+	}
+
+	private navigateLeftFromEditor(jumpGroups: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {",Why would we ever not jump groups? I am in a state where I have 2 editors open in one group and navigating left and right jumps between those tabs. My understanding is that this is entirely not about navigating between tabs?,2017-03-10 05:51:42
810,"@@ -918,4 +922,289 @@ export class ToggleSharedProcessAction extends Action {
 	run(): TPromise<void> {
 		return this.windowsService.toggleSharedProcess();
 	}
-}
\ No newline at end of file
+}
+
+export abstract class BaseNavigationAction extends Action {
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService protected editorService: IWorkbenchEditorService,
+		@IEditorGroupService protected groupService: IEditorGroupService,
+		@IPanelService protected panelService: IPanelService,
+		@IPartService protected partService: IPartService,
+		@IViewletService protected viewletService: IViewletService
+	) {
+		super(id, label);
+	}
+
+	public run(): TPromise<any> {
+		const isEditorFocus = this.partService.hasFocus(Parts.EDITOR_PART);
+		const isPanelFocus = this.partService.hasFocus(Parts.PANEL_PART);
+		const isSidebarFocus = this.partService.hasFocus(Parts.SIDEBAR_PART);
+
+		const isEditorGroupVertical = this.groupService.getGroupOrientation() === 'vertical';
+		const isSidebarPositionLeft = this.partService.getSideBarPosition() === SidebarPosition.LEFT;
+
+		if (isEditorFocus) {
+			return this.navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isPanelFocus) {
+			return this.navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		if (isSidebarFocus) {
+			return this.navigateOnSidebarFocus(isEditorGroupVertical, isSidebarPositionLeft);
+		}
+
+		return TPromise.as(false);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateOnSidebarFocus(isEditorGroupVertical: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		return TPromise.as(true);
+	}
+
+	protected navigateToPanel(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.PANEL_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activePanelId = this.panelService.getActivePanel().getId();
+		return this.panelService.openPanel(activePanelId, true);
+	}
+
+	protected navigateToSidebar(): TPromise<any> {
+		if (!this.partService.isVisible(Parts.SIDEBAR_PART)) {
+			return TPromise.as(false);
+		}
+
+		const activeViewletId = this.viewletService.getActiveViewlet().getId();
+		return this.viewletService.openViewlet(activeViewletId, true);
+	}
+
+	protected navigateToLastActiveEditor(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		if (model.groups.length < 1) {
+			return null;
+		}
+
+		const lastGroup = model.activeGroup;
+		const activeEditor = lastGroup.activeEditor;
+		return this.editorService.openEditor(activeEditor, null, model.positionOfGroup(lastGroup));
+	}
+
+	protected navigateToStartOfEditor(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		if (model.groups.length < 1) {
+			return null;
+		}
+
+		const firstGroup = model.getGroup(0);
+		const firstEditor = firstGroup.getEditor(0);
+		return this.editorService.openEditor(firstEditor, null, model.positionOfGroup(firstGroup));
+	}
+
+	protected navigateToEndOfEditor(): TPromise<any> {
+		const model = this.groupService.getStacksModel();
+		if (model.groups.length < 1) {
+			return null;
+		}
+
+		const lastGroup = model.getGroup(model.groups[model.groups.length - 1].id);
+		const lastEditor = lastGroup.getEditor(lastGroup.count - 1);
+		return this.editorService.openEditor(lastEditor, null, model.positionOfGroup(lastGroup));
+	}
+}
+
+export class NavigateLeftAction extends BaseNavigationAction {
+
+	public static ID = 'workbench.action.navigateLeft';
+	public static LABEL = nls.localize('navigateLeft', ""Navigate Left"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService editorService: IWorkbenchEditorService,
+		@IEditorGroupService groupService: IEditorGroupService,
+		@IPanelService panelService: IPanelService,
+		@IPartService partService: IPartService,
+		@IViewletService viewletService: IViewletService
+	) {
+		super(id, label, editorService, groupService, panelService, partService, viewletService);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isEditorGroupVertical) {
+			return this.navigateLeftFromEditor(true, isSidebarPositionLeft);
+		}
+		return this.navigateLeftFromEditor(false, isSidebarPositionLeft);
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isSidebarPositionLeft) {
+			return this.navigateToSidebar();
+		}
+		return TPromise.as(false);
+	}
+
+	protected navigateOnSidebarFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isSidebarPositionLeft) {
+			return TPromise.as(false);
+		}
+		if (isEditorGroupVertical) {
+			return this.navigateToEndOfEditor();
+		}
+		return this.navigateToLastActiveEditor();
+	}
+
+	private navigateLeftFromEditor(jumpGroups: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		const model = this.groupService.getStacksModel();
+		let result = model.previous(jumpGroups, false);
+		if (result) {
+			return this.editorService.openEditor(result.editor, null, model.positionOfGroup(result.group))
+				.then(ok => true);
+		}
+		if (isSidebarPositionLeft) {
+			return this.navigateToSidebar();
+		}
+		return TPromise.as(false);
+	}
+}
+
+export class NavigateRightAction extends BaseNavigationAction {
+
+	public static ID = 'workbench.action.navigateRight';
+	public static LABEL = nls.localize('navigateRight', ""Navigate Right"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService editorService: IWorkbenchEditorService,
+		@IEditorGroupService groupService: IEditorGroupService,
+		@IPanelService panelService: IPanelService,
+		@IPartService partService: IPartService,
+		@IViewletService viewletService: IViewletService
+	) {
+		super(id, label, editorService, groupService, panelService, partService, viewletService);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isEditorGroupVertical) {
+			return this.navigateRightFromEditor(true, isSidebarPositionLeft);
+		}
+		return this.navigateRightFromEditor(false, isSidebarPositionLeft);
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (!isSidebarPositionLeft) {
+			return this.navigateToSidebar();
+		}
+		return TPromise.as(false);
+	}
+
+	protected navigateOnSidebarFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (!isSidebarPositionLeft) {
+			return TPromise.as(false);
+		}
+		if (isEditorGroupVertical) {
+			return this.navigateToStartOfEditor();
+		}
+		return this.navigateToLastActiveEditor();
+	}
+
+	private navigateRightFromEditor(jumpGroups: boolean, isSidebarPositionLeft: boolean): TPromise<boolean> {
+		const model = this.groupService.getStacksModel();
+		let result = model.next(jumpGroups, false);
+		if (result) {
+			return this.editorService.openEditor(result.editor, null, model.positionOfGroup(result.group))
+				.then(ok => true);
+		}
+		if (!isSidebarPositionLeft) {
+			return this.navigateToSidebar();
+		}
+		return TPromise.as(false);
+	}
+}
+
+export class NavigateUpAction extends BaseNavigationAction {
+
+	public static ID = 'workbench.action.navigateUp';
+	public static LABEL = nls.localize('navigateUp', ""Navigate Up"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService editorService: IWorkbenchEditorService,
+		@IEditorGroupService groupService: IEditorGroupService,
+		@IPanelService panelService: IPanelService,
+		@IPartService partService: IPartService,
+		@IViewletService viewletService: IViewletService
+	) {
+		super(id, label, editorService, groupService, panelService, partService, viewletService);
+	}
+
+	protected navigateOnEditorFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isEditorGroupVertical) {
+			return TPromise.as(false);
+		}
+		return this.navigateUpFromEditor();
+	}
+
+	protected navigateOnPanelFocus(isEditorGroupVertical, isSidebarPositionLeft): TPromise<boolean> {
+		if (isEditorGroupVertical) {
+			return this.navigateToLastActiveEditor();
+		}
+		return this.navigateToEndOfEditor();
+	}
+
+	private navigateUpFromEditor(): TPromise<boolean> {
+		const model = this.groupService.getStacksModel();
+		const position = model.positionOfGroup(model.activeGroup);
+		this.groupService.focusGroup(position - 1);
+		return TPromise.as(true);
+	}
+}
+
+export class NavigateDownAction extends BaseNavigationAction {",Should we navigate down to the panel when focus is in the sidebar? Currently that is not happening.,2017-03-10 05:53:24
62,"@@ -92,13 +95,23 @@ export class ExtHostAPIImplementation {
 	constructor(
 		@IThreadService threadService: IThreadService,
 		@IPluginService pluginService: IPluginService,
-		@IWorkspaceContextService contextService: IWorkspaceContextService
+		@IWorkspaceContextService contextService: IWorkspaceContextService,
+		@ITelemetryService telemetryService: ITelemetryService
 	) {
 		this._pluginService = pluginService;
 		this._threadService = threadService;
+		this._telemetryService = telemetryService;
 		this._proxy = threadService.getRemotable(MainProcessVSCodeAPIHelper);
 
 		this.version = contextService.getConfiguration().env.version;
+		this._telemetryService.getTelemetryInfo().then((info) => {
+			this.env = {
+				machineId: info.machineId,
+				sessionId: info.sessionId,
+				locale: null","this is not good. either fill in or don't have it yet - i'll tackle
",2016-01-22 08:32:11
789,"@@ -92,4 +93,24 @@ export function detectEncodingByBOMFromBuffer(buffer: NodeBuffer, bytesRead: num
  */
 export function detectEncodingByBOM(file: string): TPromise<string> {
 	return stream.readExactlyByFile(file, 3).then(({buffer, bytesRead}) => detectEncodingByBOMFromBuffer(buffer, bytesRead));
+}
+
+const IGNORE_ENCODINGS = ['ascii', 'utf-8', 'utf-16', 'urf-32'];","This meant to be ""utf-32"" instead of ""urf-32"", right?",2017-03-02 12:23:01
969,"@@ -920,6 +920,9 @@ class TaskService extends EventEmitter implements ITaskService {
 	}
 
 	private executeTask(task: Task, resolver: ITaskResolver): TPromise<ITaskSummary> {
+		if (!this.storageService.get('userRanTask', StorageScope.GLOBAL)) {","Add some variable for this, see RecentlyUsedTasks_Key ",2017-06-12 23:39:55
493,"@@ -928,6 +928,17 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 			};
 		});
 
+		// Add any untitled files to be restored from backup","@Tyriar again this would not be needed if we had untitled editor factory.
",2016-11-15 06:01:40
202,"@@ -93,6 +93,12 @@ export default class Webview {
 					this._webview.style.opacity = '';
 					return;
 				}
+			}),
+			addDisposableListener(this._webview, EventType.DRAG_OVER, (event: DragEvent) => {
+				event.stopImmediatePropagation();
+			}),","this leaks a listener
",2016-07-07 06:28:29
203,"@@ -93,6 +93,12 @@ export default class Webview {
 					this._webview.style.opacity = '';
 					return;
 				}
+			}),
+			addDisposableListener(this._webview, EventType.DRAG_OVER, (event: DragEvent) => {
+				event.stopImmediatePropagation();
+			}),
+			addDisposableListener(this._webview, EventType.DROP, (event: DragEvent) => {
+				event.stopImmediatePropagation();","same

@bpasero I this a change you agree with? I haven't been involved in any dnd thing
",2016-07-07 06:28:47
71,"@@ -93,7 +93,7 @@ class VariablesView extends viewlet.CollapsibleViewletView {
 		this.toDispose.push(this.debugService.addListener2(debug.ServiceEvents.STATE_CHANGED, () => {","Looks good.
",2016-03-16 10:21:36
16,"@@ -941,9 +941,10 @@ export abstract class BaseSyncAction extends GitAction {
 export class SyncAction extends BaseSyncAction {
 
 	static ID = 'workbench.action.sync';
+	static LABEL = nls.localize('sync', ""Sync"");
 
-	constructor(@IGitService gitService: IGitService) {
-		super(SyncAction.ID, nls.localize('sync', ""Sync""), 'git-action sync', gitService);
+	constructor(id: string, label: string, @IGitService gitService: IGitService) {","Make `id` and `label` optional with predefined values of `GitActions.SyncAction.ID` and `GitActions.SyncAction.LABEL` instead of polluting that...
",2015-11-25 15:13:01
795,"@@ -944,6 +944,16 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups.indexOf(group);
 	}
 
+	public findGroup(editorInput: EditorInput, activeOnly: Boolean): EditorGroup {",`Boolean` => `boolean`,2017-03-07 06:15:27
796,"@@ -944,6 +944,16 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups.indexOf(group);
 	}
 
+	public findGroup(editorInput: EditorInput, activeOnly: Boolean): EditorGroup {
+		const found = this.groups.filter(group =>","I suggest to change this logic a) for perf reasons and b) for logical reasons

a) Perf: I suggest to simply use 2 for loops here to avoid iterating over all groups and all editors even if a match has found. With the current logic, if the editor is found in group 1 you will still iterate over all other groups and editors even though we only return one result.

b) Logic: there is always an active group and that group might not be group 1. Wouldn't it make more sense to start with the currently active group to look for the editor and then check the others? This means we prefer to reveal an editor in the currently active group if we find it. Another solution would be to prefer an editor if it is already visible in one of the groups. You have to decide after all how this option should behave:
* does it prefer active editors over inactive
* does it prefer active groups over inactive
* does it prefer strict spatial order of the groups (left to right)",2017-03-07 06:18:39
798,"@@ -944,6 +944,16 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups.indexOf(group);
 	}
 
+	public findGroup(editorInput: EditorInput, activeOnly: Boolean): EditorGroup {
+		const found = this.groups.filter(group =>
+			group.getEditors().some(editor => {
+				const isActive = group.isActive(editor);
+				return editor.matches(editorInput)",You should first check for the `isActive` condition and then do the `editor.matches` call to avoid it unless needed.,2017-03-07 06:21:05
797,"@@ -944,6 +944,16 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups.indexOf(group);
 	}
 
+	public findGroup(editorInput: EditorInput, activeOnly: Boolean): EditorGroup {
+		const found = this.groups.filter(group =>
+			group.getEditors().some(editor => {
+				const isActive = group.isActive(editor);
+				return editor.matches(editorInput)
+					&& (!activeOnly || isActive);
+			}));
+		return found[0] || null;","It is fine to return `undefined` instead of `null`, you do not need to do an explicit `|| null`.",2017-03-07 06:19:31
232,"@@ -944,6 +944,7 @@ export class Cursor extends EventEmitter {
 
 		this._handlers[H.JumpToBracket] =				(ctx) => this._jumpToBracket(ctx);
 
+		this._handlers[H.CursorMove] = 					(ctx) => this._move(false, ctx);","Please rename the method `_move` to `_cursorMove` to easily find it and not get confused with the previous moveTo
",2016-07-15 11:22:11
858,"@@ -945,6 +945,12 @@ declare module 'vscode' {
 		viewColumn?: ViewColumn;
 
 		/**
+		 * The diff information for this text editor. Will be `udnefined` in case",udnefined,2017-03-24 09:49:40
642,"@@ -95,6 +95,19 @@ class InsertCursorAtEndOfEachLineSelected extends EditorAction {
 				});
 			}
 		}
-		editor.setSelections(newSelections);
+		return newSelections;
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let newSelections = new Array<ISelection>();
+		let selections = editor.getSelections();
+
+		for (var i = 0; i < selections.length; ++i) {","This can be simplified to `let newSelections = selections.map(selection => this.getCursorsForSelection(selection, editor));`",2016-12-23 04:06:31
126,"@@ -95,6 +96,26 @@ function getNLSConfiguration() {
 	return { locale: initialLocale, availableLanguages: {} };
 }
 
+function migrateUserDataDir(newDir) {
+	var oldDir = path.join(process.env.HOME, '.config', product.nameShort);","Why do you need to compute the old dir? Is it not much safer to use app.getPath('userData')
",2016-04-21 08:45:31
127,"@@ -95,6 +96,26 @@ function getNLSConfiguration() {
 	return { locale: initialLocale, availableLanguages: {} };
 }
 
+function migrateUserDataDir(newDir) {
+	var oldDir = path.join(process.env.HOME, '.config', product.nameShort);
+	if (!fs.existsSync(oldDir)) {
+		return;","I am not sure this test holds, please verify. My understanding is that Chrome might create this folder very early, so please test it.
",2016-04-21 08:46:10
128,"@@ -95,6 +96,26 @@ function getNLSConfiguration() {
 	return { locale: initialLocale, availableLanguages: {} };
 }
 
+function migrateUserDataDir(newDir) {
+	var oldDir = path.join(process.env.HOME, '.config', product.nameShort);
+	if (!fs.existsSync(oldDir)) {
+		return;
+	}
+	mkdirp(path.dirname(newDir));
+	fs.renameSync(oldDir, newDir);","Please note that rename does not work if source and target are on different drives. I think we need to add a lot more error handling to your code so that in case of an issue we can show something useful to the user.
",2016-04-21 08:46:54
129,"@@ -95,6 +96,26 @@ function getNLSConfiguration() {
 	return { locale: initialLocale, availableLanguages: {} };
 }
 
+function migrateUserDataDir(newDir) {
+	var oldDir = path.join(process.env.HOME, '.config', product.nameShort);
+	if (!fs.existsSync(oldDir)) {
+		return;
+	}
+	mkdirp(path.dirname(newDir));
+	fs.renameSync(oldDir, newDir);
+}
+
+function mkdirp(newDir) {
+	var stack = [];
+	while (!fs.existsSync(newDir)) {
+		stack.push(newDir);
+		newDir = path.dirname(newDir);
+	}
+	while (stack.length > 0) {
+		fs.mkdirSync(stack.pop());
+	}
+}
+","Please review this with https://github.com/Microsoft/vscode/blob/master/src/vs/base/node/extfs.ts#L51 there are some interesting issues with mkdirp
",2016-04-21 08:49:03
157,"@@ -955,6 +976,34 @@ export class Parser {
 		return null;
 	}
 
+	public _parseCssVariable(): nodes.Variable {
+		var node = <nodes.Variable> this.create(nodes.Variable);
+		if (!this.accept(scanner.TokenType.CssVariableName)) {
+			return null;
+		}
+		return <nodes.Variable> node;
+	}
+
+	public _parseVariableExpression(): nodes.Node {
+		if (!this.accept(scanner.TokenType.Var)) {
+			return null;
+		}
+
+		var node= this.createNode(nodes.NodeType.VariableExpression);
+		if (!this.accept(scanner.TokenType.ParenthesisL)) {
+			return this.finish(node, errors.ParseError.LeftParenthesisExpected);
+		}
+
+		if (!node.addChild(this._parseCssVariable())) {
+			return this.finish(node, errors.ParseError.VariableValueExpected);
+		}
+
+		if (!this.accept(scanner.TokenType.ParenthesisR)) {","The var syntax also allows extra parameters (default values).
see https://drafts.csswg.org/css-variables/#using-variables, example 10.

As mentioned I'd just use the regular _parseFunction for that.
",2016-05-20 10:27:09
530,"@@ -96,4 +96,70 @@ export function readExactlyByFile(file: string, totalBytes: number, callback: (e
 
 		loop();
 	});
+}
+
+/**
+ * Reads a file until a matching string is found.
+ *
+ * @param file The file to read.
+ * @param matchingString The string to search for.
+ * @param chunkBytes The number of bytes to read each iteration.
+ * @param maximumBytesToRead The maximum number of bytes to read before giving up.
+ * @param callback The finished callback.
+ */
+export function readToMatchingString(file: string, matchingString: string, chunkBytes: number, maximumBytesToRead: number, callback: (error: Error, result: string) => void): void {
+	fs.open(file, 'r', null, (err, fd) => {
+		if (err) {
+			return callback(err, null);
+		}
+
+		function end(err: Error, result: string): void {
+			fs.close(fd, (closeError: Error) => {
+				if (closeError) {
+					return callback(closeError, null);
+				}
+
+				if (err && (<any>err).code === 'EISDIR') {
+					return callback(err, null); // we want to bubble this error up (file is actually a folder)
+				}
+
+				return callback(null, result);
+			});
+		}
+
+		let buffer = new Buffer(maximumBytesToRead);
+		let bytesRead = 0;
+		let zeroAttempts = 0;
+		function loop(): void {
+			fs.read(fd, buffer, bytesRead, chunkBytes, null, (err, moreBytesRead) => {
+				if (err) {
+					return end(err, null);
+				}
+
+				// Retry up to N times in case 0 bytes where read
+				if (moreBytesRead === 0) {
+					if (++zeroAttempts === 10) {
+						return end(null, null);
+					}
+
+					return loop();
+				}
+
+				bytesRead += moreBytesRead;
+
+				const newLineIndex = buffer.indexOf(matchingString);
+				if (buffer.indexOf('\n') >= 0) {",@Tyriar is this an oversight? why suddenly you look for `\n` and call it `newLineIndex` if `matchingString` can be anything?,2016-11-29 05:14:26
526,"@@ -96,6 +102,9 @@ export class TerminalService implements ITerminalService {
 		if (wasActiveInstance && this.terminalInstances.length > 0) {
 			let newIndex = index < this.terminalInstances.length ? index : this.terminalInstances.length - 1;
 			this.setActiveInstanceByIndex(newIndex);
+			if (terminalInstance.hadFocusOnExit) {",Love it! :+1: ,2016-11-28 19:09:43
819,"@@ -96,7 +96,7 @@ export class TerminalConfigHelper implements ITerminalConfigHelper {
 		return DEFAULT_ANSI_COLORS[baseThemeId];
 	}
 
-	private _measureFont(fontFamily: string, fontSize: number, lineHeight: number): ITerminalFont {
+	private _measureFont(fontFamily: string, fontSize: number, lineHeight: number, fontWeight: string): ITerminalFont {",It's fine to leave out font weight from font measurement as the terminal assumes we're working with a monospace font where bold size is the same as non-bold size.,2017-03-12 01:55:51
639,"@@ -968,6 +968,17 @@ declare module 'vscode' {
 		edit(callback: (editBuilder: TextEditorEdit) => void, options?: { undoStopBefore: boolean; undoStopAfter: boolean; }): Thenable<boolean>;
 
 		/**
+		 * Inserts the given snippet template and enters snippet mode.
+		 *
+		 * If the editor is already in snippet mode, insertion fails and the returned promise resolves to false.
+		 *
+		 * @param template The snippet template to insert
+		 * @param posOrRange The position or replacement range representing the location of the insertion.
+		 * @return A promise that resolves with a value indicating if the snippet could be inserted.
+		 */
+		insertSnippet(template: string, posOrRange: Position | Range): Thenable<boolean>;","* template should be of type `SnippetString`
* Unsure about `posOrRange` - we should consider using the current editor selection/selections. That would allow to insert snippets in multiple locations at the same time. Also inserting snippets is highly interactive, so it's fair to use the current selection for that (or change the selection first).
* We should consider making this an overload of the `edit` method",2016-12-21 08:21:30
807,"@@ -975,7 +975,7 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups[position];
 	}
 
-	public next(jumpGroups: boolean): IEditorIdentifier {
+	public next(jumpGroups: boolean, cycleAtEnd = true): IEditorIdentifier {",Please add a test for this in `editorStacksModel.test.ts`,2017-03-10 05:44:57
5,"@@ -979,10 +979,17 @@ export class TextModel extends OrderGuaranteeEventEmitter implements EditorCommo
 
 	private _findMatchesInLine(searchRegex:RegExp, text:string, lineNumber:number, deltaOffset:number, counter:number, result:EditorCommon.IEditorRange[], limitResultCount:number): number {
 		var m:RegExpExecArray;
+		// Reset regex to search from the beginning
+		searchRegex.lastIndex = 0;
 		do {
 			m = searchRegex.exec(text);
 			if (m) {
-				result.push(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset));
+				var range = new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset);","Why use `var` in TS when `let` and `const` are available?
",2015-11-20 23:27:43
300,"@@ -98,6 +103,10 @@ const Identifiers = {
 	STATUSBAR_PART: 'workbench.parts.statusbar'
 };
 
+const ExposedWindowOptions = {","Just inline this one and avoid the const
",2016-10-05 06:51:43
21,"@@ -99,7 +105,23 @@ export class ShiftCommand implements EditorCommon.ICommand {
 				indents[j] = indents[j-1] + oneIndent;
 			}
 
-			builder.addEditOperation(new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), indents[desiredIndentCount]);
+			var desiredIndent = indents[desiredIndentCount];
+			if (isMultilineComment) {
+				// Add space to align the multiline comment
+				desiredIndent += "" "";
+			}
+
+			// Check whether we're in a multiline comment or not
+			if (lineText.length >= 2 + indentationEndIndex) {
+				if (lineText.indexOf(""/*"") === indentationEndIndex) {
+					isMultilineComment = true;
+				}
+				if (lineText.indexOf(""*/"") !== -1) {","[minor] You can pass the start index in the call to indexOf. Will reduce atleast 2 comparisons. 
",2015-12-04 05:30:10
