,code,target,prediction
0,"@@ -0,0 +1,101 @@
+/*---------------------------------------------------------------------------------------------","Awesome work :+1:
",
1,"@@ -0,0 +1,102 @@
+/*---------------------------------------------------------------------------------------------","Seems like a lot of overlap with https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/bootstrap/index.js#L48, maybe better to have a common base that both can reuse?",
2,"@@ -0,0 +1,110 @@
+/*---------------------------------------------------------------------------------------------","I like the idea of inferring the tsconfig.json to use from the open active TS file. However if no file is open I think we should still provide a reasonable command and not just look into the workspace root. We should search for all tsconfig.json and return all of them. If a build is trigger the task runner will run all of them

Regarding activation: I have a similar problem in ESLint where I need to active the plugin to simply being able to listen to config changes. This is all I do in activate. In addition I listen to open event and if a JS files opens I start the ESLint server by hand. So basically I have an activate and a realActivate. We could do the same for TS and start the tsserver when we get a open event for a TS file in the listener registered in activate. ",
3,"@@ -0,0 +1,119 @@
+/*---------------------------------------------------------------------------------------------","If this is a service it should move into vs/workbench/services !
",
4,"@@ -0,0 +1,12 @@
+# EditorConfig is awesome: http://EditorConfig.org
+
+# top-most EditorConfig file
+root = true
+
+# Tab indentation (no size specified)
+[*]
+indent_style = tab
+
+[{.travis.yml,npm-shrinkwrap.json}]
+indent_style = space
+indent_size = 2","indent must be 4
",I don't think this is needed.
5,"@@ -0,0 +1,128 @@
+{
+  ""name"": ""merge-conflict"",
+  ""publisher"": ""vscode"",
+  ""displayName"": ""merge-conflict"",
+  ""description"": ""Merge Conflict"",
+  ""version"": ""0.7.0"",
+  ""aiKey"": ""AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217"",
+  ""enableProposedApi"": true,","Not needed, I believe. Remove the property to clarify.",This should be `0.7.0-preview`
6,"@@ -0,0 +1,129 @@
+/*---------------------------------------------------------------------------------------------","This should also live in `electron-browser/`.
",
7,"@@ -0,0 +1,13 @@
+/*---------------------------------------------------------------------------------------------",I suggest to move this out of this new file and into `src/vs/workbench/parts/files/common/files.ts`,
8,"@@ -0,0 +1,147 @@
+/*---------------------------------------------------------------------------------------------","@Tyriar I see warnings in this file. you gotta get your ghooks setup to prevent pushing files with warnings üëé 
",
9,"@@ -0,0 +1,149 @@
+# Auto-detect text files
+* text=auto",":memo: If the repository requires the use of a specific line ending by all users, it can be added to this line, and we can remove everything below except the *exceptions* to this case. However, the preferable case is to not require a specific line ending and instead allow it to be controlled by the user (or automated system) which checks out the code. For example, a build machine which validates line endings (I believe this is ""hygiene"" or something), could use the following configuration without being a noisy neighbor to all other contributors:

```
git config core.eol lf
```",
10,"@@ -0,0 +1,164 @@
+/*---------------------------------------------------------------------------------------------","@Tyriar seeing again lots of warnings in this file
",
11,"@@ -0,0 +1,18 @@
+/*---------------------------------------------------------------------------------------------","This file should live in `src/vs/workbench/parts/execution/common/electron-browser/terminal.ts` as it's not usable in a browser. Check out [this wiki page](https://github.com/Microsoft/vscode/blob/master/wiki/contributing/code-organization.md#target-environments) for more information on code organization, basically things in common/ and browser/ need to work both in vscode (under node) and in monaco (on a browser).
",
12,"@@ -0,0 +1,18 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+import fs = require('fs');
+import env = require('vs/base/common/platform');","`env` -> `platform`, I think the instances where this is `env` are older ones that weren't cleaned up
",nit: remove empty line
13,"@@ -0,0 +1,2 @@
+Line 1","Line 1: **Awesome**
",
14,"@@ -0,0 +1,2 @@
+Line 1
+Line 2","Line 2: **Better Even**
",
15,"@@ -0,0 +1,212 @@
+/*---------------------------------------------------------------------------------------------",Awesome that we have tests for this!,
16,"@@ -0,0 +1,295 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+","Is this actually our copyright and was this copied from some public source?
",This file should be removed.
17,"@@ -0,0 +1,30 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>",Let's leave this as MIT for now as I don't think we use a special license for metadata.,This should be `1.0`
18,"@@ -0,0 +1,30 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>
+	<project_license>MIT</project_license>",This can be sourced from `product.licenseName` now.,This should be `1.0.0`
19,"@@ -0,0 +1,32 @@
+<!-- Copyright (C) Microsoft Corporation. All rights reserved. -->
+<!DOCTYPE html>
+<html>
+
+<head>
+	<meta charset=""utf-8"" />
+</head>
+
+<body class=""monaco-shell vs-dark"" aria-label="""">
+	<script>
+		(function () {
+			try {
+				window.location.search.substring(1).split('&').forEach(p => {",Theming here?,"This should be `<script type=""text/javascript"">`"
20,"@@ -0,0 +1,35 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+export function domElement() {",maybe `getHtml()` - it's not a dom element yet,Why do we need this function?
21,"@@ -0,0 +1,46 @@
+/*---------------------------------------------------------------------------------------------","all of this should sit in `electron-browser` and not in the `node` namespace cos we have a dependency to the browser world, like DOM etc, and nodejs libs
",
22,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>","Could you check that this validates against:

```
appstream-util validate code.appdata.xml
```",
23,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">",If you wanted to split the .appdata.xml change out into a separate PR we can merge this a lot faster.,
24,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>",@chrisdias do we have a preferred license for metadata files like these?,This should be `1.0`
25,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>
+	<project_license>MIT</project_license>",This will need to change to be based on product.json but I just realized we don't do it for the rpm package so this is work I'll need to follow up :smile: #17133,This should be `1.0.0`
26,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>
+	<project_license>MIT</project_license>
+	<name>@@NAME_LONG@@</name>
+	<url type=""homepage"">https://code.visualstudio.com</url>
+	<summary>Code editor for developers supporting integration with existing tools</summary>","As in https://github.com/Microsoft/vscode/issues/17130, let's make this ""Code editing. Redefined."" for now",This should be `1.0.0`
27,"@@ -0,0 +1,46 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<component type=""desktop"">
+	<id>@@NAME@@.desktop</id>
+	<metadata_license>CC-BY-SA-3.0</metadata_license>
+	<project_license>MIT</project_license>
+	<name>@@NAME_LONG@@</name>
+	<url type=""homepage"">https://code.visualstudio.com</url>
+	<summary>Code editor for developers supporting integration with existing tools</summary>
+	<description>
+		<p>
+			Visual Studio Code is a lightweight but powerful source code editor which","Let's go with the standard description now as defined in https://github.com/Microsoft/vscode/issues/17130, also could you put it all one line? `<p>Visual Studio...`",I think this should be `@@NAME@@.desktop`
28,"@@ -0,0 +1,56 @@
+/*---------------------------------------------------------------------------------------------","Great for having tests üëç 
",
29,"@@ -0,0 +1,57 @@
+/*---------------------------------------------------------------------------------------------","@octref not sure if you care about it but this file could move into the `common` layer since it does not seem to depend on anything browser related.
",
30,"@@ -0,0 +1,7 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';
+
+export const VIEWLET_ID_ROOT = 'workbench.view.customTreeExplorer.';","@octref since you seem to use this always as a prefix, might be more elegant to just expose a function `toViewletId()` that does the concatenation?
",Is this used anywhere?
31,"@@ -0,0 +1,72 @@
+/*---------------------------------------------------------------------------------------------","@Tyriar for performance reasons I think we need to add some buffer logic when processing the events. doing a backup on every keystroke is crazy. you should really measure how many model change events you get while typing to get a feeling on it.
",
32,"@@ -0,0 +1,76 @@
+/*---------------------------------------------------------------------------------------------","@octref I find the naming of this service weird and hard to understand what it does. can we maybe rename it to something that better tells us what the purpose is? I see the name is `ITreeExplorerViewletService` but it gets contributed as `customViewletService` which seems weird. Mayb `IExtensionTreeService`? Afaik it seems only tree related but not viewlet related.
",
33,"@@ -0,0 +1,79 @@
+/*---------------------------------------------------------------------------------------------",only copy the functions you need,
34,"@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------------------------","So this guy is the one that manages all backups across all workspaces and the vs/platform/backup is the one per workspace for individual files?
",
35,"@@ -0,0 +1,89 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+'use strict';","We no longer 'use strict', this is simply ignored",This file should be removed.
36,"@@ -0,0 +1,9 @@
+/*---------------------------------------------------------------------------------------------
+ *  Copyright (c) Microsoft Corporation. All rights reserved.
+ *  Licensed under the MIT License. See License.txt in the project root for license information.
+ *--------------------------------------------------------------------------------------------*/
+
+/// <reference path='../../../../src/vs/vscode.d.ts'/>
+/// <reference path='../../../../src/vs/vscode.proposed.d.ts'/>","Not needed, I believe. Remove to clarify.",nit: remove empty line
37,"@@ -0,0 +1,9 @@
+[Desktop Entry]
+Type=Application
+Encoding=UTF-8
+Name=Visual Studio Code
+Comment=Code Editing. Redefined. Build and debug modern web and cloud applications.
+Exec=code","The `Exec` property depends on the symlink made by the installation script. I have hardcoded the script (`install.py`) in a way that the symlink will always be called `code`.
",Why is this needed?
38,"@@ -1,101 +1,104 @@
 {
-	""name"": ""csharp-o"",","why is this just whitespace changes?
","""type"":"
39,"@@ -1,12 +1,16 @@
 {
     ""name"": ""scss"",
     ""displayName"": ""%displayName%"",
-	""description"": ""%description%"",
+	  ""description"": ""%description%"",
     ""version"": ""1.0.0"",
     ""publisher"": ""vscode"",
     ""engines"": { ""vscode"": ""*"" },
     ""scripts"": {
-        ""update-grammar"": ""node ../../build/npm/update-grammar.js atom/language-sass grammars/scss.cson ./syntaxes/scss.tmLanguage.json""
+        ""update-grammar"": ""npm run update-scss && npm run update-sassdoc"",",update-grammar.js can already update multiple grammars from the same file. See https://github.com/Microsoft/vscode/blob/master/extensions/perl/package.json#L9 for the syntax.,I think this should be `npm run update-scss && npm run update-sassdoc`
40,"@@ -1,2 +1,2 @@
-import * as Proto from '../node_modules/typescript/lib/protocol';
+import * as Proto from '../../node_modules/typescript/lib/protocol';",Use `import * as Proto from 'typescript/lib/protocol';` instead to avoid the path dependency,Why is this change needed?
41,"@@ -1,3 +1,4 @@
 --ui tdd
 --useColors true
-./out/test
\ No newline at end of file
+./out/test
+./out/test/pathCompletion",Should not be necessary when the file uses the right file extension: `pathCompletion.test.ts`,Why did you change this?
42,"@@ -1,5 +1,5 @@
 {
-	""name"": ""MagicRegExp"",
+	""name"": ""Python"",","This one should say something else -- that's a syntax for Python regexps. The name isn't that important, it can be ""Regular Expressions (Python)""
","""type"": ""Python"","
43,"@@ -1,6 +1,6 @@
 {
 	""account"": ""monacobuild"",
 	""container"": ""debuggers"",
-	""zip"": ""624d700/node-debug.zip"",
+	""zip"": ""3c7ed19/node-debug.zip"",","Is this change related to 3077?
",Why did you change this?
44,"@@ -1,6 +1,7 @@
 Ôªø{
-	""configuration.validate.enable"": ""Whether php validation is enabled or not."",
-	""configuration.validate.executablePath"": ""Points to the php executable."",
+	""configuration.builtInCompletions.enable"": ""Enable/disable built-in PHP completions."",
+	""configuration.validate.enable"": ""Enable/disable built-in PHP validation."",
+	""configuration.validate.executablePath"": ""Points to the PHP executable."",","Do we have a strategy for aliasing settings names? e.g. php.validate.enable is somewhat ambiguous, but it's also already in use.",This should be `configuration.validate.completions.enable`
45,"@@ -1,7 +1,9 @@
 /*---------------------------------------------------------------------------------------------
- *  Copyright (c) Microsoft Corporation. All rights reserved.
- *  Licensed under the MIT License. See License.txt in the project root for license information.
- *--------------------------------------------------------------------------------------------*/
+*  Copyright (c) Microsoft Corporation. All rights reserved.",Not sure why there are diffs on this line? You might have committed the wrong line endings or something,This file should be reverted.
46,"@@ -10,6 +10,7 @@
 	""insertSpaceAfterFunctionKeywordForAnonymousFunctions"": true,
 	""insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"": false,
 	""insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"": false,
+	""insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"": true,",I'm inclined to leave this file alone for now since it is used for the VSCode codebase itself. Any specific reasons for adding this setting here?,"""insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"": true,"
47,"@@ -10,6 +10,8 @@
 	display: flex;
 	padding: 4px;
 	align-items: center;
+	width: 255px;",Might be better to keep the default smaller for now since there's no clever adding padding to top like in the editor. The find result is also shown on the first line generally so the chance of a collision is fairly high.,width: 255px;
48,"@@ -10,7 +10,7 @@ import * as lifecycle from 'vs/base/common/lifecycle';
 import * as nls from 'vs/nls';
 import * as platform from 'vs/base/common/platform';
 import * as dom from 'vs/base/browser/dom';
-import Event, { Emitter } from 'vs/base/common/event';
+import Event, { Emitter, debounceEvent } from 'vs/base/common/event';",Can be removed,Why do we need to debounce the event?
49,"@@ -100,14 +100,17 @@ export class GitStatusbarItem implements IStatusbarItem {
 
 	private onGitServiceChange(): void {
 		const model = this.gitService.getModel();
+		const ps1 = model.getPS1();
+		const tags = model.getRefs().filter(iref => iref.commit.substr(0,8) === ps1);","You should use `model.getHEAD().commit` to compare with `iref.commit`.
",const tags = model.getRefs().filter(iref => iref.commit === ps1);
50,"@@ -100,14 +100,17 @@ export class GitStatusbarItem implements IStatusbarItem {
 
 	private onGitServiceChange(): void {
 		const model = this.gitService.getModel();
+		const ps1 = model.getPS1();
+		const tags = model.getRefs().filter(iref => iref.commit.substr(0,8) === ps1);
+		const name = tags.length > 0 ? tags[0].name : model.getPS1();","This breaks the `+*!` symbols in front of branches, since whenever a branch is checked out, `model.getPS1` is never called.
",Why do we need to filter here?
51,"@@ -100,19 +100,15 @@ class CodeLensAdapter {
 }
 
 class DefinitionAdapter {
-
-	private _documents: ExtHostDocuments;
-	private _provider: vscode.DefinitionProvider;
-
-	constructor(documents: ExtHostDocuments, provider: vscode.DefinitionProvider) {
-		this._documents = documents;
-		this._provider = provider;
-	}
+	constructor(
+		private documents: ExtHostDocuments,
+		private provider: vscode.DefinitionProvider)
+	{ }",restore previous coding style,Why is this empty constructor needed?
52,"@@ -100,6 +100,15 @@ suite('workspace-namespace', () => {
 		});
 	});
 
+	test('openTextDocument, untitled without path but language ID and contents', function () {
+		return workspace.openTextDocument({ language: 'html', contents: '<h1>Hello world!</h1>' }).then(doc => {","singular, `content`?",
53,"@@ -101,11 +98,19 @@ export class TerminalPanel extends Panel {
 	) {
 		super(TERMINAL_PANEL_ID, telemetryService);
 		this.toDispose = [];
+		configurationService.onDidUpdateConfiguration(()=>{
+			this.applyFont();","If #6456 gets done, this should reuse the the `onDidUpdateConfiguration` that's being merged into master soon https://github.com/Microsoft/vscode/pull/6985/commits/3fde03980baf7d33d14c36dce623ad1c89470d93
",export default function(configurationService) {
54,"@@ -102,11 +104,16 @@ export class MainThreadEditors extends MainThreadEditorsShape {
 
 	// --- from extension host process
 
-	$tryShowTextDocument(resource: URI, position: EditorPosition, preserveFocus: boolean): TPromise<string> {
+	$tryShowTextDocument(resource: URI, options: vscode.ShowTextDocumentOptions): TPromise<string> {
+		const position: EditorPosition = TypeConverters.fromViewColumn(options.column);","@jrieken I moved some of the data massaging into here, so that it could take the same `ShowTextDocumentOptions` (since I think you can technically call the proxy methods from inside an extension).",`preserveFocus` is no longer used.
55,"@@ -102,6 +102,7 @@ export class Symbol {
 export class ScopeBuilder implements nodes.IVisitor {","Thinking about this again, I think we should put all css variables always in the global scope (along with the local scope). That way intellisense will show all variables.
That simplifies the code a bit and we get rid of the _isRootSelectorNode, which is not confusing and not correct when sass and less variables are found.
",public
56,"@@ -1023,6 +1026,21 @@ export class WindowsManager implements IWindowsMainService {
 		return res && res[0];
 	}
 
+	private findBestWindow(context: OpenContext, filePaths: IPath[]): VSCodeWindow {
+		const findContainer = context === OpenContext.DESKTOP || context === OpenContext.CLI;
+		return findContainer && this.findContainingWindow(filePaths) || this.getLastActiveWindow();","I find it hard to understand the precedence logic here without paranthesis, suggest to rewrite to:

`return (findContainer && this.findContainingWindow(filePaths)) || this.getLastActiveWindow();`",nit: `findContainingWindow(filePaths) || getLastActiveWindow()`
57,"@@ -103,7 +115,15 @@ export class OpenAnythingHandler extends QuickOpenHandler {
 		// Check Cache first
 		let cachedResults = this.getResultsFromCache(searchValue, searchWithRange ? searchWithRange.range : null);
 		if (cachedResults) {
-			return TPromise.as(new QuickOpenModel(cachedResults));
+			timerEvent.data = <ITimerEventData>{","I find quite some similarities to the ITimerEventData further below in the file, can we extract a method and use it in both places to construct the ITimerEventData?
",Why do we need this change?
58,"@@ -1035,11 +1026,10 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		// Open it
-		this.open({ context: openConfig.context, cli: openConfig.cli, forceNewWindow: true, forceEmpty: openConfig.cli._.length === 0, userEnv: openConfig.userEnv });",Passing thru the `targetWindowId` option.,if (openConfig.cli) {
59,"@@ -104,6 +104,16 @@ let workbenchProperties: { [path: string]: IJSONSchema; } = {
 		'description': nls.localize('showEditorTabs', ""Controls if opened editors should show in tabs or not.""),
 		'default': true
 	},
+	'workbench.editor.tabDescription': {","I wonder how clear this setting for users is. I know we call this ""description"" internally, but unsure if people will relate this to the small text next to the main label of a tab. 

We already have `window.title`, maybe this should be `workbench.editor.tabSubtitle` ?",'workbench.editor.showTabs': {
60,"@@ -104,6 +104,17 @@ let workbenchProperties: { [path: string]: IJSONSchema; } = {
 		'description': nls.localize('showEditorTabs', ""Controls if opened editors should show in tabs or not.""),
 		'default': true
 	},
+	'workbench.editor.tabSubtitle': {",Please also define the `enumDescriptions` property to get more help when typing. See https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-browser/main.contribution.ts#L229 for example how we use it for the `workbench.fontAliasing` setting.,'workbench.editor.showTabs': {
61,"@@ -104,6 +104,49 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 		return this.domNode;
 	}
 
+	private getHoveredExpression(lineContent: string, range: Range) : Range {","Please rename this to better represent what is specific about this method
",
62,"@@ -105,6 +105,11 @@ configurationRegistry.registerConfiguration({
 			'type': 'number',
 			'default': 1.2
 		},
+		'terminal.integrated.fontWeight': {
+			'type': 'string',
+			'description': nls.localize('terminal.integrated.fontWeight', ""Customizes font weight in terminal.""),","This needs to be something like `enableBold` like how gnome-terminal does it, otherwise this setting will override the terminal's regular bold/normal formatting with what's in this setting.

The logic should then be added as an event listener on the `IConfigurationService` so it's picked up when the setting is changed, something like this:

```
set class name 'disable-bold' if `enableBold` setting is not set
```

I use `disable-bold` as the class name here because enableBold will be the standard.",I don't think you need to specify the default here.
63,"@@ -105,6 +105,27 @@ export interface IFileService {
 	del(resource: URI, useTrash?: boolean): TPromise<void>;
 
 	/**
+	 * Backs up the provided file to a temporary directory to be used by the hot
+	 * exit feature and crash recovery.
+	 */
+	backupFile(resource: URI, content: string): TPromise<IFileStat>;","I think all of this should move into textfile.ts (ITextFileService) because in here we talk about all files but for hot exit we only care about text files.
",Why is this a<msg>I don't think it should be a<msg>I don't think it should be a<msg>Why is this a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I don't think it should be part of the public API.
64,"@@ -105,6 +105,8 @@ export interface IWorkingFilesModel {
 	removeEntry(entry: IWorkingFileEntry): IWorkingFileEntry;
 	removeEntry(arg1: IWorkingFileEntry | URI): IWorkingFileEntry;
 
+	restoreRecentlyRemovedEntry(): IWorkingFileEntry;","Rather something like ""getLastClosedEntry()""
",restoreRecentlyRemovedEntry(entry: IWorkingFileEntry): IWorkingFileEntry;
65,"@@ -105,6 +107,7 @@ export class ViewCursor {
 		}
 		if (e.viewInfo) {
 			this._cursorStyle = this._context.configuration.editor.viewInfo.cursorStyle;
+			this._lineCursorWidth = Math.min(this._context.configuration.editor.viewInfo.lineCursorWidth, this._typicalHalfwidthCharacterWidth);","`this._typicalHalfwidthCharacterWidth` might change in next block, which makes `this._lineCursorWidth` out of date.","this._typicalHalfwidthCharacterWidth = Math.min(this._context.configuration.editor.viewInfo.lineCursorWidth, this._typicalHalfwidthCharacterWidth);"
66,"@@ -106,6 +106,16 @@
           ""description"": ""%typescript.tsserver.log%"",
           ""scope"": ""window""
         },
+        ""typescript.tsserver.pluginPaths"": {","Add ` ""isExecutable"": true` here. This prevents this from ever being used as a workspace setting","""pluginPaths"": {"
67,"@@ -106,6 +106,71 @@ export class SplitEditorAction extends Action {
 	}
 }
 
+export class JoinEditorsAction extends Action {
+
+	public static ID = 'workbench.action.joinEditors';
+	public static LABEL = nls.localize('joinEditors', ""Join Editors"");
+
+	constructor(
+		id: string,
+		label: string,
+		@IWorkbenchEditorService private editorService: IWorkbenchEditorService,
+		@IEditorGroupService private editorGroupService: IEditorGroupService
+	) {
+		super(id, label, 'join-editors-action');","You do not need the CSS class here unless it would show up as icon, so I suggest to remove it.",nit: `private` is redundant.
68,"@@ -106,7 +106,7 @@ export declare class TPromise<V> {
 	public static wrap<ValueType>(value: Thenable<ValueType>): TPromise<ValueType>;
 	public static wrap<ValueType>(value: ValueType): TPromise<ValueType>;
 
-	public static wrapError<ValueType>(error: any): TPromise<ValueType>;
+	public static wrapError<ValueType>(error: Error): TPromise<ValueType>;",what happened to `wrapError(error: Error): TPromise<never>`?,public static wrapError<ValueType>(error: Error): TPromise<ValueType>;
69,"@@ -107,11 +128,19 @@ try {
 	console.error(err);
 }
 
-// Set path according to being built or not
+// If root user, use a root-owned directory for user data
+var configDir = path.join(process.env.HOME, product.dataFolderName);","Are you really sure this is a solid cross platform way of finding out the users home directory? What if it is not defined? Please see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/env.ts#L98 how we get it.
","This should be `var configDir = path.join(process.env.HOME, product.dataFolderName);`"
70,"@@ -107,11 +128,19 @@ try {
 	console.error(err);
 }
 
-// Set path according to being built or not
+// If root user, use a root-owned directory for user data
+var configDir = path.join(process.env.HOME, product.dataFolderName);
 if (process.env.VSCODE_DEV) {
-	var appData = app.getPath('appData');
-	app.setPath('userData', path.join(appData, 'Code-Development'));
+	configDir += '-dev';","Do we need this actually? We already have this: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/electron-main/env.ts#L79
","I'm not sure if this is the best way to do this. I think it would be better to use `app.setPath('userData', path.join(process.env.HOME, product.dataFolderName));`"
71,"@@ -107,11 +128,19 @@ try {
 	console.error(err);
 }
 
-// Set path according to being built or not
+// If root user, use a root-owned directory for user data
+var configDir = path.join(process.env.HOME, product.dataFolderName);
 if (process.env.VSCODE_DEV) {
-	var appData = app.getPath('appData');
-	app.setPath('userData', path.join(appData, 'Code-Development'));
+	configDir += '-dev';
 }
+var userDataDir = path.join(configDir, 'user-data');","Suggest to make this use really no special characters and reflect what it stores. maybe just ""userdata""? it contains all kind of Chromium stuff...
","I'm not sure if this is the best way to do this. I think it would be better to use `app.setPath('userData', path.join(configDir, 'Code-Development'));`"
72,"@@ -107,4 +166,18 @@ export class TerminalConfigHelper {
 		}
 		return config.terminal.integrated.shell.linux;
 	}
+
+	private toInteger(source:any, minimum?:number, maximum?:number): number {","Spaces after `:` for consistency
","I think this should be `toInteger(source: string, minimum: number, maximum: number)`"
73,"@@ -108,27 +110,29 @@ export abstract class TextFileService implements ITextFileService {
 		this.toUnbind.push(this.editorGroupService.onEditorsChanged(() => this.onEditorFocusChanged()));
 	}
 
-	private beforeShutdown(): boolean | TPromise<boolean> {
+	private beforeShutdown(quitRequested: boolean): boolean | TPromise<boolean> {","@Tyriar can you explain again why the backup service cannot participate in the shutdown and do its work there?
",`quitRequested` -> `quitRequested`
74,"@@ -108,6 +108,17 @@ declare module 'vscode' {
 		getClickCommand?(node: T): string;
 	}
 
+	export interface TextEditor {
+		/**
+		 * Enters snippet mode in the editor with the specified snippet.
+		 *
+		 * @param snippet The snippet to insert in this edit.
+		 * @param options The undo/redo behaviour around this edit. By default, undo stops will be created before and after this edit.
+		 */
+		edit(snippet: SnippetString, options?: { undoStopBefore: boolean; undoStopAfter: boolean; }): void;
+
+	}",It is enough to have it `vscode.d.ts` only. Duplication not needed,Why do we need this interface?
75,"@@ -108,7 +108,7 @@ class Extension implements IExtension {
 			return this.local.changelogUrl;
 		}
 
-		return ''; // Hopefully we will change this once the gallery will support that.
+		return this.gallery && this.gallery.assets.changelog;","This was the wrong place. You should do it in the `hasChangelog` and `getChangelog`. While you're at it, just delete the `readmeUrl` and `changelogUrl`; the former was an old implementation which I forgot to delete.
",Shouldn't this be `this.gallery && this.gallery.assets.changelog`?
76,"@@ -108,9 +109,10 @@ export class SwitchOutputActionItem extends SelectActionItem {
 	constructor(
 		action: IAction,
 		@IOutputService private outputService: IOutputService,
-		@IThemeService themeService: IThemeService
+		@IThemeService themeService: IThemeService,
+		@IContextViewService private contextViewService: IContextViewService",@cleidigh remove `private` here to fix the warning,why do we need this?
77,"@@ -109,6 +109,7 @@
 .monaco-workbench.linux .explorer-viewlet .explorer-item .monaco-inputbox,
 .monaco-workbench.mac .explorer-viewlet .explorer-item .monaco-inputbox {
 	height: 22px;
+	margin-left: -1px;",There's border on all sides - so `margin-top: -1px` as well ,margin-left: -1px;
78,"@@ -1092,7 +1093,8 @@ export class Cursor extends EventEmitter {
 				postOperationRunnable: null,
 				shouldPushStackElementBefore: false,
 				shouldPushStackElementAfter: false,
-				requestScrollDeltaLines: 0
+				requestScrollDeltaLines: 0,
+				eventData: ctx.eventData","Why? Please decode the arguments before invoking for each cursor. If there are 1000 cursors it makes no sense to pass the data to each cursor to have it parsed and decoded 1000 times.
",Why do we need this?
79,"@@ -1095,7 +1095,7 @@ export class DebugService implements debug.IDebugService {
 			const breakpointsToSend = this.model.getBreakpoints().filter(bp => this.model.areBreakpointsActivated() && bp.enabled && bp.uri.toString() === modelUri.toString());
 ","<input name=""pull_request[title]"" class=""form-control input-lg input-block input-contrast required title js-quick-submit js-session-resumable"" id=""pull_request_title"" autofocus=""autofocus"" aria-label=""Title"" required=""required"" type=""text"" size=""30"" placeholder=""Title"" autocomplete=""off"">
![20141212132321](https://user-images.githubusercontent.com/31952169/30746560-cecfbb92-9fb2-11e7-9338-c69885b76298.gif)
",let breakpointsToSend = [];
80,"@@ -11,6 +11,10 @@
 	display: flex;
 }
 
+.monaco-workbench.mac.use-inline-toolbar > .part > .composite.title {","This is bad, it is causing me to drag the window when I drag the title of the output panel for example.
",.part > .composite.title {
81,"@@ -11,6 +11,8 @@ if (env.isLinux) {
 		defaultTerminalLinux = 'x-terminal-emulator';
 	} else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {
 		defaultTerminalLinux = 'gnome-terminal';
+	} else if (process.env.DESKTOP_SESSION === 'kde-plasma') {","Is plasma a version or something? If so can this be made more generic?
",defaultTerminalLinux = 'kde-plasma';
82,"@@ -11,6 +11,8 @@ if (env.isLinux) {
 		defaultTerminalLinux = 'x-terminal-emulator';
 	} else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {
 		defaultTerminalLinux = 'gnome-terminal';
+	} else if (process.env.DESKTOP_SESSION === 'kde-plasma') {
+		defaultTerminalLinux = 'konsole';","Is there some environment variable that houses this? `konsole` is the default terminal for this distribution, correct?
",This should be `konsole-terminal`.
83,"@@ -11,7 +11,7 @@ import ConfigurationRegistry = require('vs/platform/configuration/common/configu
 
 ModesRegistry.registerCompatMode({
 	id: 'html',
-	extensions: ['.html', '.htm', '.shtml', '.mdoc', '.jsp', '.asp', '.aspx', '.jshtm'],","Is it a problem that .xhtml isn't here?
","name: 'html',"
84,"@@ -11,9 +11,11 @@ import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
 import { IContextViewService } from 'vs/platform/contextview/browser/contextView';",looks good,import contextView from 'vs/platform/contextview/browser/contextView';
85,"@@ -1109,7 +1110,10 @@ export class Workbench implements IPartService {
 			this.setPanelHidden(true, true).done(undefined, errors.onUnexpectedError);
 			this.setSideBarHidden(true, true).done(undefined, errors.onUnexpectedError);
 
-			this.setActivityBarHidden(true, true);
+			this.setActivityBarHidden(false, false);","This line is not needed. `this.setActivityBarHidden(false, false);`
If the setting is not `true` we simply should not do anything
",Why did you change this?
86,"@@ -111,6 +111,11 @@ export interface IOutputChannel {
 	output: string;
 
 	/**
+	 * Returns the value indicating whether the channel has scroll locked.
+	 */
+	hasScrollLock: boolean;","I would rename this to `scrollLock`, as `outputChannel.hasScrollLock = false` sounds strange to me",nit: `Returns whether the channel has scroll locked.`
87,"@@ -111,6 +114,7 @@ export class EditorModeContext extends Disposable {
 			return;
 		}
 		this._langId.set(model.getLanguageIdentifier().language);
+		this._fileExtension.set(model.uri.path.split('.').pop());",üò± use `paths.extname`,this._fileExtension.set(model.uri.path);
88,"@@ -111,6 +161,55 @@ export class FileDataSource implements IDataSource {
 		}
 	}
 
+	private resolveVirtualDirectories(files: FileStat[]) {
+		if (!this.enableVirtualDirectories) {","Based on the previous comment, this wouldn't be needed since it's already checked",Why do we need this?
89,"@@ -111,6 +161,55 @@ export class FileDataSource implements IDataSource {
 		}
 	}
 
+	private resolveVirtualDirectories(files: FileStat[]) {
+		if (!this.enableVirtualDirectories) {
+			return;
+		}
+
+		files = files.filter(x => !x.isDirectory);","I think all of these loops can be condensed to:

```
files.filter(x => !x.isDirectory)
     .foreach((x) => x.isVirtualDirectory = x.isVirtualDirectoryMember = false)
     .foreach((x) => {
		let children = files.filter(child => x !== child 
                                                  && !child.isVirtualDirectoryMember 
                                                  && !child.isVirtualDirectory
                                                  && this.isVirtualDirectoryOf(x.name, child.name));
		
		if(children.length) {
			x.isVirtualDirectory = true;
			x.children = [];
			children.forEach((child) => {
				child.isVirtualDirectoryMember = true;
				x.children.push(child);
			});
		}
	});
```

Assuming this is only called once per folder, I added another check in the filter to make sure a child isn't already a child of another file.  That piece will probably need to be flushed out - I'm not sure how things will work when files match multiple patterns",Why do we need this?
90,"@@ -1114,6 +1115,26 @@ export class ReopenClosedEditorAction extends Action {
 	}
 }
 
+export class ClearRecentItemsAction extends Action {
+
+	public static ID = 'workbench.action.clearRecentItems';
+	public static LABEL = nls.localize('clearRecentItems', ""Clear Recent"");",`Clear Recent Files` maybe?,I don't think we need this class. It's only used in tests.
91,"@@ -1115,6 +1115,9 @@ export class EditorHistoryEntry extends EditorQuickOpenEntry {
 
 			return true;
 		}
+		else if (mode === Mode.OPEN_IN_BACKGROUND) {","I think we could always just `return super.run(mode, context)` here because the parent class does not handle `PREVIEW` anyway. 
",} else if (mode === Mode.OPEN) {
92,"@@ -112,17 +117,8 @@ export class Sash extends EventEmitter {
 		this.$e.addClass('active');
 		this.emit('start', startEvent);
 
-		let overlayDiv = $('div').style({
-			position: 'absolute',
-			top: 0,
-			left: 0,
-			width: '100%',
-			height: '100%',
-			zIndex: 1000000,
-			cursor: this.orientation === Orientation.VERTICAL ? 'ew-resize' : 'ns-resize'
-		});
-
 		let $window = $(window);","Can you explain why the changes in sash are needed?
",Why was this removed?
93,"@@ -112,27 +155,41 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 			return;
 		}
 
-		// string magic to get the parents of the variable (a and b for a.b.foo)
+		const session = this.debugService.getActiveSession();
+		const canEvaluateForHovers: boolean = session.configuration.capabilities.supportsEvaluateForHovers;","Remove type
",I don't think we need this line.
94,"@@ -112,6 +117,7 @@ export class Workbench implements IPartService {
 	private creationPromiseComplete: ValueCallback;
 	private sideBarHidden: boolean;
 	private sideBarPosition: Position;
+	private panelPartHidden: boolean;","@isidorn => panelHidden
",private panelPartPosition: Position;
95,"@@ -1123,15 +1123,16 @@ declare module 'vscode' {
 		/**
 		 * Derive a new Uri from this Uri.
 		 *
+		 * ```ts",I moved this out of a @sample tag as it looked really bad on the website https://code.visualstudio.com/docs/extensionAPI/vscode-api#Uri.with,This should be `<msg>`ts` not `ts`.
96,"@@ -1126,6 +1128,10 @@ export class Cursor extends EventEmitter {
 		return this._invokeForAll(ctx, (cursorIndex: number, oneCursor: OneCursor, oneCtx: IOneCursorOperationContext) => OneCursorOp.moveTo(oneCursor, inSelectionMode, ctx.eventData.position, ctx.eventData.viewPosition, ctx.eventSource, oneCtx));
 	}
 
+	private _move(inSelectionMode:boolean, ctx: IMultipleCursorOperationContext): boolean {","`inSelectionMode` should be added as a boolean argument accepted by the command. Not sure what name would be best.
",Why do we need this method?
97,"@@ -1127,4 +1134,12 @@ registry.add('eslint-stylish', {
 	applyTo: ApplyToKind.allDocuments,
 	fileLocation: FileLocationKind.Absolute,
 	pattern: defaultPattern('eslint-stylish')
-});
\ No newline at end of file
+});
+
+registry.add('go', {
+	owner: 'typescript',
+	applyTo: ApplyToKind.allDocuments,
+	fileLocation: FileLocationKind.Relative,
+	filePrefix: '${cwd}',","I chose `cwd` here over `workspaceRoot` so that the task can override the working directory if desired (with the default being the workspace root). Make sense?
",Why is this needed?
98,"@@ -113,6 +114,7 @@ export class DebugService implements debug.IDebugService {
 		this._onDidCustomEvent = new Emitter<debug.DebugEvent>();
 		this.sessionStates = new Map<string, debug.State>();
 		this.allProcesses = new Map<string, debug.IProcess>();
+		this.displayThreadsTimer = new Map<String, number>();",Use lowercase `string`,"this.displayThreads = new Dictionary<String, number>();"
99,"@@ -113,6 +115,7 @@ export class DebugService implements debug.IDebugService {
 		this._onDidCustomEvent = new Emitter<debug.DebugEvent>();
 		this.sessionStates = new Map<string, debug.State>();
 		this.allProcesses = new Map<string, debug.IProcess>();
+		this.displayThreadsScheduler = new Map<string, RunOnceScheduler>();",I would prefer if this was called `fetchThreadsSchedulers`,this.displayThreads = new List<RunOnceScheduler>();
100,"@@ -114,17 +117,22 @@ export function createActionItem(action: IAction, keybindingService: IKeybinding
 	return undefined;
 }
 
+const ids = new IdGenerator('menu-item-action-item-icon-');
+
 export class MenuItemActionItem extends ActionItem {
 
+	static readonly ICON_PATH_TO_CSS_RULES: Map<string /* path*/, string /* CSS rule */> = new Map<string, string>();
+
 	private _wantsAltCommand: boolean = false;
+	private _itemClassDispose: IDisposable;",last one always leaks?,Why do we need this?
101,"@@ -114,6 +114,9 @@ export class EnvironmentService implements IEnvironmentService {
 	@memoize
 	get sharedIPCHandle(): string { return `${getIPCHandlePrefix()}-${pkg.version}-shared${getIPCHandleSuffix()}`; }
 
+	@memoize
+	get nodeCachedDataDir(): string { return path.join(this.userDataPath, 'CachedData', pkg.version); }","@jrieken should we not use the commit ID of the built as a way to identify the backup? if we use the version, wouldn't we use old cached data each time we update insiders build?",get nodeCachedDataPath(): string { return this.userDataPath; }
102,"@@ -114,7 +118,7 @@ suite('TextSearch performance', () => {
 		const finishedEvents = [];
 		return runSearch() // Warm-up first
 			.then(() => {
-				if (testWorkspaceArg) { // Don't measure by default
+				if (testWorkspacePath) { // Don't measure by default",This is always set. I'd revert this change so unit tests run without additional output.,I think this should be `testWorkspacePath || testWorkspaceArg`
103,"@@ -1142,6 +1142,24 @@ export class Workbench implements IPartService {
 		}
 	}
 
+	// Resize requested part along the main axis
+	// layout will do all the math for us and adjusts the other Parts
+	public resizePart(part: Parts, sizeChange: number): void {
+
+		switch (part) {
+			case Parts.SIDEBAR_PART:
+			case Parts.PANEL_PART:
+			case Parts.EDITOR_PART:
+				this.workbenchLayout.setPartSizeChange(part, sizeChange);",`setPartSizeChange` => `resizePart` ?,"nit: `this.workbenchLayout.resizePart(part, sizeChange)`"
104,"@@ -1142,6 +1142,24 @@ export class Workbench implements IPartService {
 		}
 	}
 
+	// Resize requested part along the main axis
+	// layout will do all the math for us and adjusts the other Parts
+	public resizePart(part: Parts, sizeChangePx: number, skipLayout?: boolean): TPromise<void> {",This method does not need to return a promise and also does not seem to be using `skipLayout`. I would suggest to do the `layout()` call from within `layout.ts` and not outside.,Why do we need this method?
105,"@@ -1144,13 +1144,20 @@ export class WindowsManager implements IWindowsMainService {
 		// Update in settings
 		const menuBarHidden = this.storageService.getItem(VSCodeWindow.menuBarHiddenKey, false);
 		const newMenuBarHidden = !menuBarHidden;
+
+		const windowConfig = this.configurationService.getConfiguration<IWindowSettings>('window');","It is true that on the main side we do not have access to the default values because they get defined on the browser side. Maybe we should turn this setting around and make it so that the default of a false value is OK for us. That avoids having to fill in a default on our end (instead of having `true` as default, change the setting so that `false` as default is good).",
106,"@@ -115,6 +116,12 @@ export class EditorAccessor implements emmet.Editor {
 		}
 
 		let range = new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);
+		let textToReplace = this._editor.getModel().getValueInRange(range);
+		if (this._emmetActionName === 'expand_abbreviation' && (value === textToReplace || value === textToReplace + '${0}')) {","Maybe divide into two variables?

```ts
const isExpandAbbreviation = this._emmetActionName === 'expand_abbreviation';
const isWrongExpansion = value === textToReplace || value === textToReplace + '${0}';
```

",let value = this._editor.getModel().getValue(range);
107,"@@ -1155,6 +1161,7 @@ export class EditorStacksModel implements IEditorStacksModel {
 		unbind.push(group.onEditorStateChanged(editor => this._onModelChanged.fire({ group, editor })));
 		unbind.push(group.onEditorOpened(editor => this._onEditorOpened.fire({ editor, group })));
 		unbind.push(group.onEditorClosed(event => {
+			this._onWillCloseEditor.fire({ editor: event.editor, group });
 			this.handleOnEditorClosed(event);",I checked and you are emiting and handling the `onWillCloseEditor` similar to `onEditorClosed` -> looks good.,Why do we need to pass `event.editor` here?
108,"@@ -116,11 +116,7 @@ export class LinesDecorationsOverlay extends DedupOverlay {
 			if (classNames.length === 0) {
 				output[lineIndex] = '';
 			} else {
-				output[lineIndex] = (
-					'<div class=""cldr'
-					+ classNames
-					+ common
-				);
+				output[lineIndex] = classNames.map(className => '<div class=""cldr ' + className + common).join('');","please spell out for loops
",Why do we need the `join('')`?
109,"@@ -117,32 +117,17 @@ export class PreferencesService extends Disposable implements IPreferencesServic
 	}
 
 	resolveModel(uri: URI): TPromise<IModel> {
-		const workspaceSettingsUri = this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE);","@sandy081 Given what you said earlier, it should be safe to delete this and `resolveSettingsContentFromWorkspaceConfiguration`, if this method only handles DefaultSettings/KeyboardEditorModels?",export default function(uri: URI) {
110,"@@ -117,4 +122,50 @@ export class ExtHostQuickOpen implements ExtHostQuickOpenShape {
 		}
 		return undefined;
 	}
+
+	// ---- workspace folder picker
+
+	showWorkspaceFolderPick(folders: WorkspaceFolder[], options?: WorkspaceFolderPickOptions, token = CancellationToken.None): Thenable<WorkspaceFolder> {",üëé this just duplicates way to much code of `showQuickPick` for not having a private method that does the work and that both `showQuickPick` and `showWorkspaceFolderPick` call.,`showWorkspaceFolderPick` -> `showWorkspaceFolders`
111,"@@ -118,6 +118,12 @@ configurationRegistry.registerConfiguration({
 			'description': nls.localize('showEditorTabCloseButton', ""Controls if editor tabs should have a visible close button or not.""),
 			'default': true
 		},
+		'workbench.editor.tabCloseButton': {
+			'type': 'string',
+			'enum': ['left', 'right', 'off'],
+			'default': 'right',
+			'description': nls.localize('editorTabCloseButton', ""Controls the position of the editor's tabs close buttons."")","This should mention what ""off"" does.",I think this should be `workbench.editor.tabCloseButton.type`.
112,"@@ -118,6 +118,12 @@ export const STATUS_BAR_FOREGROUND = registerColor('statusBar.foreground', {
 	hc: '#FFFFFF'
 }, nls.localize('statusBarForeground', ""Status bar foreground color. The status bar is shown in the bottom of the window.""));
 
+export const STATUS_BAR_NO_FOLDER_FOREGROUND = registerColor('statusBar.noFolderForeground', {
+	dark: '#FFFFFF',",I suggest to use `STATUS_BAR_FOREGROUND` here as default color for all themes instead of specifying the color again as `FFFFFF`. This makes sure that all existing themes are not broken that specify `STATUS_BAR_FOREGROUND` any different from `FFFFFF`.,I think this should be named `NO_FOLDER_FOREGROUND`
113,"@@ -118,6 +118,22 @@ export class Resource implements SourceControlResourceState {
 		}
 	}
 
+	private get tooltip(): string | undefined {","Although smart, this automatic labelling based on the name of the enum value won't work with localize. Please create a private `getTooltip` method, similar to `getIconPath`, where the mapping from Status to tooltip is done manually.",
114,"@@ -119,6 +119,7 @@
 .monaco-editor .view-lines {
 	cursor: text;
 	white-space: nowrap;
+	z-index: 1;","This makes text rendered over cursor.
",z-index: 1;
115,"@@ -119,6 +122,8 @@ export class ViewCursor {
 	}
 
 	private _prepareRender(ctx: RenderingContext): ViewCursorRenderData {
+		let textContent = '';
+		const lineContent = this._context.model.getLineContent(this._position.lineNumber);",I would prefer to put this expression still in if blocks to avoid unnecessary line content read,_prepareRender(ctx: RenderingContext);
116,"@@ -119,6 +129,18 @@ export class PanelPart extends CompositePart<Panel> implements IPanelService {
 		this.toUnbind.push(this.onDidPanelClose(panel => this.compositeBar.deactivateComposite(panel.getId())));
 	}
 
+	private _onDidPanelOpen(viewlet: IPanel): void {
+		this.activePanelContextKey.set(viewlet.getId());
+	}
+
+	private _onDidPanelClose(viewlet: IPanel): void {
+		const id = viewlet.getId();
+
+		if (this.activePanelContextKey.get() === id) {
+			this.activePanelContextKey.set('');",Please call `.reset` instead,`this.activePanelContextKey.get() === id`
117,"@@ -119,7 +119,6 @@ export abstract class BaseHistoryService {
 		const activeEditor = this.editorService.getActiveEditor();
 		const activeInput = activeEditor ? activeEditor.input : void 0;
 
-		// Propagate to history","@wprater you removed the comment here?
",Why is this removed?
118,"@@ -119,7 +120,8 @@ export abstract class CommonCodeEditor extends Disposable implements editorCommo
 		domElement: IContextKeyServiceTarget,
 		options: editorOptions.IEditorOptions,
 		instantiationService: IInstantiationService,
-		contextKeyService: IContextKeyService
+		contextKeyService: IContextKeyService,
+		clipboardService: IClipboardService","There's no need for the `IClipboardService` in this class, so it should be removed from here.",Why do we need this?
119,"@@ -12,16 +12,17 @@ export class ExtHostTerminal implements vscode.Terminal {
 
 	public _name: string;
 	public _shellPath: string;","`_shellPath` and `_shellArgs` can safely be removed as they're not exposed like name
",public readonly string _shellPath;
120,"@@ -12,16 +12,4 @@ MimeType=text/plain;inode/directory;
 Actions=new-window;
 Keywords=vscode;
 
-[Desktop Action new-window]
-Name=New Window
-Name[de]=Neues Fenster
-Name[es]=Nueva ventana
-Name[fr]=Nouvelle fen√™tre
-Name[it]=Nuova finestra
-Name[ja]=Êñ∞Ë¶è„Ç¶„Ç§„É≥„Éâ„Ç¶
-Name[ko]=ÏÉà Ï∞Ω
-Name[ru]=–ù–æ–≤–æ–µ –æ–∫–Ω–æ
-Name[zh_CN]=Êñ∞Âª∫Á™óÂè£
-Name[zh_TW]=ÈñãÊñ∞Ë¶ñÁ™ó
-Exec=/usr/share/@@NAME@@/@@NAME@@ --new-window %U
 Icon=@@NAME@@",You can remove this one too then good to go :smile: ,Why are you removing this?
121,"@@ -12,7 +12,6 @@ import * as nls from 'vs/nls';
 import * as panel from 'vs/workbench/browser/panel';
 import * as platform from 'vs/base/common/platform';
 import { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';
-import { GlobalQuickOpenAction } from 'vs/workbench/browser/parts/quickopen/quickopen';",Please do not remove this.,import * as QuickOpenAction from 'vs/workbench/browser/parts/quickopen/quickopen';
122,"@@ -12,7 +12,8 @@ import Event from 'vs/base/common/event';
 
 export enum GroupArrangement {
 	MINIMIZE_OTHERS,
-	EVEN
+	EVEN,
+	KEEP_RATIO",Suggest to not expose.,Why do we need this?
123,"@@ -120,10 +127,14 @@ export class FileService implements IFileService {
 		}
 
 		if (this.basePath && !this.options.disableWatcher) {
-			if (isWindows) {
-				this.setupWin32WorkspaceWatching();
+			if (this.options.useNsfwFileWatcher) {",@bpasero merging this now as the tests are passing and the new code should all be blocked off by this setting. Please send comments my way though :smiley: ,Why did you remove the check for Windows here?
124,"@@ -120,6 +120,11 @@ configurationRegistry.registerConfiguration({
 			'type': 'boolean',
 			'default': TERMINAL_DEFAULT_RIGHT_CLICK_COPY_PASTE
 		},
+		'terminal.integrated.copyOnSelection': {
+			'description': nls.localize('terminal.integrated.copyOnSelection', ""When set, text selected in the terminal will be copied to the clipboard.""),",Not actually sure how localization works in this project. Is anything else needed to properly localize this string?,I don't think you need the `nls.localize` here
125,"@@ -120,6 +120,15 @@ export class MockSession implements debug.ISession {
 		});",Looks good,{
126,"@@ -120,7 +120,7 @@ export function createApiFactory(
 
 	return function (extension: IExtensionDescription): typeof vscode {
 
-		if (extension.enableProposedApi && !extension.isBuiltin) {
+		if (extension.enableProposedApi && !extension.isBuiltin && extension.id !== 'ms-vscode.azure-account') {
 ",Not nice,Why do we need this check?
127,"@@ -121,6 +124,7 @@ export class LifecycleService implements ILifecycleService {
 		vscodeWindow.win.on('close', (e) => {
 			const windowId = vscodeWindow.id;
 			this.logService.log('Lifecycle#window-before-close', windowId);
+			this.logService.log('this.quitRequested: ' + this.quitRequested);","@Tyriar leftover debug statement?
","`this.logService.log('this.quitRequested: ', this.quitRequested);`"
128,"@@ -121,7 +121,11 @@ export class MainThreadTextEditor {
 			}));
 
 			let forwardSelection = (event?: ICursorSelectionChangedEvent) => {
-				this._lastSelection = this._codeEditor.getSelections();
+				const newSelections = this._codeEditor.getSelections();
+				if (Selection.selectionsArrEqual(this._lastSelection, newSelections)) {
+					return;
+				}
+				this._lastSelection = newSelections;",Look valid but also like the wrong place. Shouldn't we make sure that the editor widget isn't firing the event on resize and help all consumer of this event?,Why do we need this?
129,"@@ -1212,6 +1214,14 @@ export class SideBySideEditorControl extends EventEmitter implements IVerticalSa
 		this.editorActionsToolbar[position].setActions([], [])();
 	}
 
+	private centerStash(a: Position, b: Position): void {","Please rename all stash => sash
",`centerStash` -> `centerPosition`
130,"@@ -122,12 +127,8 @@ export class HtmlPreviewPart extends WebviewEditor {
 			this._webviewDisposables = dispose(this._webviewDisposables);
 			this._webview = undefined;
 		} else {
-			this._themeChangeSubscription = this.themeService.onThemeChange(themeId => {
-				if (this._webview) {
-					this._webview.style(themeId);
-				}
-			});
-			this.webview.style(this.themeService.getTheme());
+			this._themeChangeSubscription = this.themeService.onThemeChange(this.onThemeChange);","Not sure it matters here, but bind `this` for `this.onThemChange`",Why do we need to pass `this.onThemeChange`?
131,"@@ -122,6 +124,11 @@ export abstract class TerminalService implements ITerminalService {
 		}
 	}
 
+	// ContextKey to match terminal with simpleFindWidget
+	public getTerminalFocusContextKey(): IContextKey<boolean> {",Remove since we already have the `terminalFocusContextKey` getter at line 41?,
132,"@@ -123,19 +119,15 @@ class DefinitionAdapter {
 }
 
 class ImplementationAdapter {
-
-	private _documents: ExtHostDocuments;
-	private _provider: vscode.ImplementationProvider;
-
-	constructor(documents: ExtHostDocuments, provider: vscode.ImplementationProvider) {
-		this._documents = documents;
-		this._provider = provider;
-	}
+	constructor(",same,Why did you remove this?
133,"@@ -123,7 +123,7 @@ export class OneSnippet {
 				}
 			}
 
-			// change stickness to never grow when typing at its edges
+			// change stickiness to never grow when typing at its edges",I'm not actually sure about this one,// change stickiness to never grow
134,"@@ -1234,11 +1234,17 @@ export class Cursor extends EventEmitter {
 	}
 
 	private _moveToBeginningOfLine(inSelectionMode: boolean, ctx: IMultipleCursorOperationContext): boolean {
-		return this._invokeForAll(ctx, (cursorIndex: number, oneCursor: OneCursor, oneCtx: IOneCursorOperationContext) => OneCursorOp.moveToBeginningOfLine(oneCursor, inSelectionMode, oneCtx));","`_invokeForAll` is for multi cursor, you may want to keep it.",Why did you remove this?
135,"@@ -1235,7 +1233,10 @@ export class StatResolver {
 					},
 
 					function stat(this: any): void {
-						fs.stat(fileResource.fsPath, this);
+						extfs.statLink(fileResource.fsPath, (error: Error, statAndIsLink) => {","Can be nicer:

```typescript
extfs.statLink(fileResource.fsPath, (error: Error, { stat, isSymbolicLink }) => {
	isSymbolicLink = isSymbolicLink;
	this(null, stat);
});
```",`statAndIsLink` -> `stat`
136,"@@ -1235,7 +1233,14 @@ export class StatResolver {
 					},
 
 					function stat(this: any): void {
-						fs.stat(fileResource.fsPath, this);
+						fs.lstat(fileResource.fsPath, (error, stat) => {",Use the new method from extfs/pfs for this. ,I think this should be `fs.lstatSync`
137,"@@ -1236,17 +1236,29 @@ export class CommandCenter {
 		await repository.ignore(uris);
 	}
 
+	@command('git.stashIncludeUntracked', { repository: true })",might be better to create a `stash` helper function since the code here nearly identical to that in the `git.stash` command,
138,"@@ -1236,17 +1236,29 @@ export class CommandCenter {
 		await repository.ignore(uris);
 	}
 
+	@command('git.stashIncludeUntracked', { repository: true })
+	async stashIncludeUntracked(repository: Repository): Promise<void> {
+		if (repository.workingTreeGroup.resourceStates.length === 0) {
+			window.showInformationMessage(localize('no changes stash', ""There are no changes to stash.""));","Can you simplify this like that:
`return window.showInformationMessage(localize('no changes stash', ""There are no changes to stash.""));`",I think this should be `if (repository.workingTreeGroup.resourceStates.length === 0)`
139,"@@ -1236,17 +1236,29 @@ export class CommandCenter {
 		await repository.ignore(uris);
 	}
 
+	@command('git.stashIncludeUntracked', { repository: true })
+	async stashIncludeUntracked(repository: Repository): Promise<void> {
+		if (repository.workingTreeGroup.resourceStates.length === 0) {
+			window.showInformationMessage(localize('no changes stash', ""There are no changes to stash.""));
+			return;
+		}
+
+		const message = await this.getStashMessage();
+
+		if (typeof message === 'undefined') {","Are you sure that you need here `typeof`?
You can equal this like: `message === undefined` ok do something.",`message` can be `null`
140,"@@ -1254,6 +1259,7 @@ export class StatResolver {
 						const childStat: IFileStat = {
 							resource: fileResource,
 							isDirectory: fileStat.isDirectory(),
+							isSymbolicLink: isSymbolicLink,",Can be simplified to: `isSymbolicLink`,"isSymbolicLink,"
141,"@@ -1255,6 +1267,13 @@ export class CommandCenter {
 		await repository.createStash(message);
 	}
 
+	private async getStashMessage(): Promise<string | undefined> {","You can put down `Promise<... | undefined>` bacause `undefined `type can be assign to anything in Typescript.
You can assign return type as `Promise<string>`",}
142,"@@ -126,6 +128,11 @@ export class PreferencesEditor extends BaseEditor {
 		this.defaultSettingsEditorContextKey = CONTEXT_SETTINGS_EDITOR.bindTo(this.contextKeyService);
 		this.focusSettingsContextKey = CONTEXT_SETTINGS_SEARCH_FOCUS.bindTo(this.contextKeyService);
 		this.delayedFilterLogging = new Delayer<void>(1000);
+		this.onInput = new Emitter();
+
+		debounceEvent(this.onInput.event, (l, e) => e, 200, /*leading=*/true)(() => {
+			this.filterPreferences(this.searchWidget.getValue().trim());
+		});",I would use [Delayer](https://github.com/microsoft/vscode/blob/sandy081/configuration/src/vs/base/common/async.ts#L179) instead. Code looks better and easy to understand.,Why do we need a debounce here?
143,"@@ -127,6 +128,7 @@ export class TerminalService implements ITerminalService {
 			terminalInstance.setVisible(i === terminalIndex);
 		});
 		this._onActiveInstanceChanged.fire();
+		this.getActiveInstance().focus(true);","I believe the reason focus is not run in `setActiveInstanceByIndex` is because on launch we do not want the terminal to be focused when the workbench is restored, instead the editor needs to be focused.

Could we isolate this particular case? When a terminal exits AND it is not the last terminal AND the terminal was focused previously. The last case prevents the terminal hijacking focus from the editor if the shell process dies for example.",this._onActiveInstanceChanged.subscribe(() => {
144,"@@ -127,6 +129,7 @@ export function parseArgs(args: string[]): ParsedArgs {
 }
 
 export const optionsHelp: { [name: string]: string; } = {
+	'-': isWindows ? localize('stdinWindows', ""Read output from another program (e.g. 'echo Hello World | {0} -')."", product.applicationName) : localize('stdinUnix', ""Read from stdin (e.g. 'ps aux | grep code | {0} -')."", product.applicationName),","`-` isn't an option, I wouldn't put it here since options can be put in any position of the CLI. `-` seems to be only placeable where files are. I would either omit this advanced option in the help message, or simply document it further down: _instead of a file path you can also use `-` to read input from stdin_. Something like that.","'-': isWindows ? localize('stdinWindows', ""Read output from another program (e.g. 'echo Hello World | {0} -')."", product.applicationName) : localize('stdinUnix', ""Read from stdin (e.g. 'ps aux | grep code | {0} -').""),"
145,"@@ -1272,6 +1272,21 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 			return Position.ONE; // can only be ONE
 		}
 
+		const config = this.configurationService.getConfiguration<IWorkbenchEditorConfiguration>();
+		const reuseIfOpen = config.workbench.editor.reuseIfOpen;
+		// Respect option to reveal an editor if it is open (not necessarily already visible)
+		const skipReuse = (options && options.index) || arg1;",There are imho more cases where you need to `skipReuse`: when `revealIfVisible` is true and there is a visible editor matching the input you should prefer it,I don't think you need the `|| arg1` here. You can just do `options && options.index`
146,"@@ -128,6 +128,10 @@
 			const text = data.contents.join('\n');
 			const newDocument = new DOMParser().parseFromString(text, 'text/html');
 
+			newDocument.querySelectorAll('a').forEach(a => {
+				a.title = a.href;",Check to see if `title` has already been set here. Don't overwrite it if it has,I think this should be `newDocument.querySelectorAll('a').forEach(a => {`
147,"@@ -128,6 +129,17 @@ export class ViewCursor {
 			this._positionTop = visibleRange.top;
 			this._positionLeft = visibleRange.left;
 			this._isInViewport = true;
+
+			let visibleRangeForCharacter = ctx.linesVisibleRangesForRange({",@rebornix This extra call should be done only if the cursor style is a block cursor,this._isInViewport = false;
148,"@@ -128,7 +116,9 @@ function doWrapping(individualLines: boolean, args: any) {
 	}
 
 	function applyPreview(expandAbbrList: ExpandAbbreviationInput[]): Thenable<boolean> {
+		let lastOldPreviewRange: vscode.Range;
 		let totalLinesInserted = 0;
+		let charactersInLine = { line: -1, count: 0 };",Consider renaming this for readability,Why do we need this?
149,"@@ -129,6 +129,16 @@ export interface IPartService {
 	 */
 	toggleZenMode(): void;
 
+	/**
+	 * Returns whether the centered layout is active.
+	 */
+	isCenteredLayoutActive(): boolean;","I would rename this to `isLayoutCentered`
Notice how we do not use ""active"" for similar methods in the same service",nit: `isCenteredLayoutActive` -> `isCenteredLayout`
150,"@@ -13,10 +13,22 @@
 	padding-left: 20px;
 }
 
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content .title {
+	-webkit-app-region: drag;
+}
+
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content > .one-editor-silo > .container > .title .title-label {","Why are we adding 1px (from 35px) here?
",I think this should be `.one-editor-silo > .container`
151,"@@ -13,10 +13,25 @@
 	padding-left: 20px;
 }
 
+/* Allow the unused gutter to be dragabble */
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content .title {
+	-webkit-app-region: drag;
+}
+
+/* Align the title text with the traffic lights */
+.monaco-workbench.mac.use-inline-toolbar > .part.editor > .content > .one-editor-silo > .container > .title .title-label {
+	line-height: 36px;
+}
+","Still needed?
",I don't think this is needed.
152,"@@ -13,6 +13,7 @@ import severity from 'vs/base/common/severity';
 import types = require('vs/base/common/types');","Looks good overall - some comments below.
",import
153,"@@ -13,9 +13,20 @@ import XTermTerminal = require('xterm');
 
 const SHELL_EXECUTABLES = ['cmd.exe', 'powershell.exe', 'bash.exe'];
 
+interface IWindowsTerminalProcess {
+	pid: number;
+	executable: string;
+}
+
+interface IWindowsProcTreeItem {",Make this `IWindowsProcessTreeItem` for consistency.,Why is this interface needed?
154,"@@ -13,9 +13,20 @@ import XTermTerminal = require('xterm');
 
 const SHELL_EXECUTABLES = ['cmd.exe', 'powershell.exe', 'bash.exe'];
 
+interface IWindowsTerminalProcess {
+	pid: number;
+	executable: string;
+}
+
+interface IWindowsProcTreeItem {
+	pid: number;
+	children: IWindowsTerminalProcess[];
+}
+
 export class WindowsShellHelper {
-	private _childProcessIdStack: number[];
+	private _childProcessIdStack: IWindowsProcTreeItem[];","Perhaps it would be easier/nicer to store the processes in a tree instead of an array now? ie.

```
interface IWindowsProcTreeItem {
	pid: number;
	children: IWindowsProcTreeItem[];
}
```",Why do we need this interface?
155,"@@ -130,7 +154,7 @@ export class UntitledEditorService implements IUntitledEditorService {
 			.map((i) => i.getResource());
 	}
 
-	public createOrGet(resource?: URI, modeId?: string): UntitledEditorInput {
+	public createOrGet(resource?: URI, modeId?: string, restoreResource?: URI): UntitledEditorInput {","@Tyriar can you explain again why we cannot do something similar as with files (`this.backupFileService.doesTextFileHaveBackup`)
",`restoreResource` is not used.
156,"@@ -131,9 +131,11 @@ async function doesAssetExist(blobService: azure.BlobService, quality: string, b
 }
 
 async function uploadBlob(blobService: azure.BlobService, quality: string, blobName: string, file: string): Promise<void> {
-	const blobOptions = {
-		contentType: mime.lookup(file),
-		cacheControl: 'max-age=31536000, public'
+	const blobOptions: azure.BlobService.CreateBlockBlobRequestOptions = {
+		contentSettings: {",Isn't this going to break something?,Why do we need this?
157,"@@ -1311,7 +1309,7 @@ export class ShowActiveFileInExplorer extends Action {
 	public run(): TPromise<any> {
 		const resource = toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true });
 		if (resource) {
-			this.commandService.executeCommand(REVEAL_IN_EXPLORER_COMMAND_ID, { resource });
+			this.commandService.executeCommand(REVEAL_IN_EXPLORER_COMMAND_ID, resource, this.focusSelected);","Note the change in arguments here. Passing `resource` as an property on an object isn't actually supported by the reveal in explorer command, seems to be a bug introduced by https://github.com/Microsoft/vscode/pull/40168.",Why do we need this change?
158,"@@ -1313,6 +1323,22 @@ export class Workbench implements IPartService {
 		}
 	}
 
+	public isCenteredLayoutActive(): boolean {
+		return this.centeredLayoutActive;
+	}
+
+	public toggleCenteredLayout(): void {
+		this.centeredLayoutActive = !this.centeredLayoutActive;
+
+		if (this.centeredLayoutActive) {","I would replace this if statement with
`this.storageService.store(Workbench.centeredLayoutActiveStorageKey, this.centeredLayoutActive, StorageScope.GLOBAL);`

Seems more straighforwared to me.
It seems like we were doing this clunky business in zen mode so you took it from there.",Why do we need this?
159,"@@ -1335,35 +1336,77 @@ export function validateFileName(parent: IFileStat, name: string, allowOverwriti
 		return nls.localize('emptyFileNameError', ""A file or folder name must be provided."");
 	}
 
+	const names: string[] = trimTrailingSlashes(name)	// prevents empty last array element after split","Remove `trimTrailingSlashes` ,just split go through the array and filetr out null elements. Like this
`name.split(/[\\/]/).filter(part => !!part);`
imho that is simpler",// prevents empty last array element after split
160,"@@ -134,12 +134,14 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				this.partService.layout();","This should only be called if the setting for inline title is enabled, no?
",Why do we need to call layout here?
161,"@@ -134,12 +134,14 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				this.partService.layout();
 			});
 		});
 
 		ipc.on('vscode:leaveFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.removeClass('fullscreen');
+				this.partService.layout();","This should only be called if the setting for inline title is enabled, no?
",Why do we need to call layout here?
162,"@@ -134,12 +134,24 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				// We need to re-layout the sidebar as the activitybar's width can change between
+				// fullscreen and window'd modes on macOS.
+				this.partService.setSideBarHidden(this.partService.isSideBarHidden());","this is ugly, we should rather call `this.partService.layout()` and make it work there if it does not
",I don't understand why we need to re-layout the sidebar here.
163,"@@ -134,18 +134,18 @@ export class DebugEditorModelManager implements IWorkbenchContribution {
 		const result: editorcommon.IModelDeltaDecoration[] = [];","I like that there are not a lot of changes in this file now. Due to this we will not have to intensively test the UI changes in the editor (e.g. breakpoints).
",Type
164,"@@ -134,5 +134,5 @@ export declare class PPromise<C, P> extends TPromise<C> {
 	public static join<C, P>(promises: PPromise<C, P>[]): PPromise<C, P[]>;
 	public static join<C, P>(promises: { [n: string]: PPromise<C, P> }): PPromise<{ [n: string]: C }, P>;
 	public static any<C, P>(promises: PPromise<C, P>[]): PPromise<{ key: string; value: PPromise<C, P>; }, P>;
-	public static wrapError<V>(error: any): TPromise<V>;
+	public static wrapError(error: Error): TPromise<never>;","Removing the generic type is the cause for all those compile errors. While it seems correct, I'd go the way [`lib.d.ts`](https://github.com/Microsoft/TypeScript/blob/master/lib/lib.es2015.promise.d.ts#L207) did and have both signatures. Especially, when returning a rejected-promise from a function that returns `Promise<T>` isn't possible with the `never`-approch. ","public static any<C, P>(promises: PPromise<C, P>[]): PPromise<{ [n: string]: C }, P>;"
165,"@@ -134,7 +134,7 @@ export function shorten(paths: string[]): string[] {
 		let path = paths[pathIndex];
 
 		if (path === '') {
-			shortenedPaths[pathIndex] = '.';
+			shortenedPaths[pathIndex] = '.' + nativeSep;","@hun1ahpu üíÑ 

`.${nativeSep}`",Why do we need this change?
166,"@@ -1349,6 +1349,13 @@ export class SearchViewlet extends Viewlet {
 		];
 	}
 
+	public shutdown(): void {
+		this.viewletSettings['query.contentPattern'] = this.searchWidget.searchInput.getValue();
+		this.saveMemento();","I think saveMemento is done by super.shutdown, right?",this.viewletSettings['query.contentPattern'] = '';
167,"@@ -1349,6 +1349,72 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A node provider for the tree explorer contributed by extension.","Drop ""by extension"" as it's implied being in this file. How about this:

> A node provider for a tree explorer contribution.
",* A node provider for the tree explorer.
168,"@@ -135,6 +139,18 @@ export class TerminalInstance implements ITerminalInstance {
 		this._createProcess(this._shellLaunchConfig);
 		this._createXterm();
 
+		this._pidStack = [];
+		this._checkWindowShell = new Emitter<string>();
+		debounceEvent(this._checkWindowShell.event, (l, e) => e, 100, true)","This should only be called on Windows, otherwise we're still doing a lot of work on enter for nothing on macOS/Linux.",Why do we need a debounce event here?
169,"@@ -136,17 +136,26 @@ export class ElectronIntegration {
 		ipc.on('vscode:enterFullScreen', (event) => {
 			this.partService.joinCreation().then(() => {
 				this.partService.addClass('fullscreen');
+				const windowConfig = this.configurationService.getConfiguration<IWindowConfiguration>();
+				if (windowConfig && windowConfig.window.macOSUseInlineToolbar) {
+					this.partService.layout();","This deserves a comment why we call layout under this condition.
",Why do we need to check for `windowConfig` here?
170,"@@ -136,6 +136,33 @@ suite('FileService', () => {
 		}, error => onError(error, done));
 	});
 ","@tsalinger I do not really understand why you added new tests in the `fileService`, when this feature does not touch anything inside the fileService as far as I understand
@bpasero can you please review if these tests are needed in the `fileService`
",});
171,"@@ -136,9 +136,9 @@ export class HTMLWorker {
 			return callback(false, model);
 		}
 
-		let modeAtPosition = modelAtPosition.getMode();
+		let modeAtPositionMode = modelAtPosition.getMode();
 
-		return callback(modeAtPosition.getId() !== this._modeId, modelAtPosition);
+		return callback(modeAtPositionMode.getId() !== this._modeId, modelAtPosition);
 	}","This is just a variable rename. Is there more to come?
","I'm not sure if this is the right way to do it, but I think it would be better to use `modelAtPosition.getMode() !== this._modeId`"
172,"@@ -1370,7 +1372,8 @@ export abstract class BaseSaveOneFileAction extends BaseSaveFileAction {
 		if (this.resource) {
 			source = this.resource;
 		} else {
-			source = toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true, filter: ['file', 'untitled'] });
+			// source = toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true, filter: ['file', 'untitled'] });
+			source = toResource(this.editorService.getActiveEditorInput(), { supportSideBySide: true });",I believe we need to revisit all `toResource`-calls. A surprising large amount of calls are guarded by the `file` or `untitled` thing and I am not entirely sure why...,Is this intentional?
173,"@@ -139,19 +140,36 @@ export class TerminalInstance implements ITerminalInstance {
 		this._initDimensions();
 		this._createProcess(this._shellLaunchConfig);
 		this._createXterm();
+		if (this._shellLaunchConfig) {
+			this.setTitle(path.basename(this._shellLaunchConfig.executable), true);","If `this._shellLaunchConfig.name` is set, we do not want to do this.

Also this applies to Linux/macOS too, I don't think we use `basename` for non-Windows yet. This also doesn't strip .exe, we should rely on the `basename`/.exe strip code inside `setTitle`.",Shouldn't this be `this._shellLaunchConfig`?
174,"@@ -139,19 +140,36 @@ export class TerminalInstance implements ITerminalInstance {
 		this._initDimensions();
 		this._createProcess(this._shellLaunchConfig);
 		this._createXterm();
+		if (this._shellLaunchConfig) {
+			this.setTitle(path.basename(this._shellLaunchConfig.executable), true);
+		}
 
 		if (platform.isWindows) {","This is getting very large, can we instead pass this._xterm to `WindowsShellHelper` and do everything in there? Encapsulating all this logic into `WindowsShellHelper` would be best as it's Windows specific and `TerminalInstance` is already quite large and complex.",Shouldn't this be `this._shellLaunchConfig.title`?
175,"@@ -139,6 +139,7 @@ const ImageMimetypes = [
 export class CommandCenter {
 
 	private disposables: Disposable[];
+	private checkoutItemsUsageList: Array<string>;",We use the `string[]` syntax instead.,Why do we need this?
176,"@@ -139,6 +141,11 @@ export abstract class MainThreadEditorsShape {
 	$tryApplyEdits(id: string, modelVersionId: number, edits: editorCommon.ISingleEditOperation[], opts: IApplyEditsOptions): TPromise<boolean> { throw ni(); }
 }
 
+export abstract class MainThreadTreeExplorersShape {
+	$registerTreeExplorerNodeProvider(providerId: string): void { throw ni(); }
+	$showMessage(severity: Severity, message: string): void { throw ni(); }","[needs change] Why is this here? It duplicates functionality we already have in other places (ExtHostMessageService). Also, failure to resolve a tree item shouldn't automatically result in an error message. I propose to let the error bubble (as rejected promise) and handle the error in the tree, like showing an error node. 
",Why do we need this?
177,"@@ -139,6 +148,15 @@ KeybindingsRegistry.registerCommandAndKeybindingRule({
 	}
 });
 
+MenuRegistry.appendMenuItem(MenuId.SearchContext, {
+	command: {
+		id: Constants.ReplaceActionId,",It is strange that this are called ActionId when you are actually registering a command,Why do we need this?
178,"@@ -139,7 +139,12 @@ export function expandEmmetAbbreviation(args): Thenable<boolean> {
 		return [new vscode.Range(abbreviationRange.start.line, abbreviationRange.start.character, abbreviationRange.end.line, abbreviationRange.end.character), abbreviation, filter];
 	};
 
-	editor.selections.forEach(selection => {
+	let selectionsInReverseOrder = editor.selections.slice(0);
+	selectionsInReverseOrder.sort((a, b) => {
+		return a.anchor.compareTo(b.anchor) * -1;","What we should compare here is the ending position of the abbreviation

`anchor` comes after `active` when `selection.isReversed` is true.

So instead of `a.anchor.compareTo(b.anchor)`, this should probably be 
`(a.isReversed ? a.anchor: a:active).compareTo(b.isReversed ? b.anchor: b:active)` ?",Why do we need to sort?
179,"@@ -1392,6 +1385,33 @@ export function validateFileName(parent: ExplorerItem, name: string, allowOverwr
 	return null;
 }
 
+
+interface IMappedPath {",Having an interface just for the return type which is used in one place feels like overkill. I would just have this inline.,
180,"@@ -1392,6 +1385,33 @@ export function validateFileName(parent: ExplorerItem, name: string, allowOverwr
 	return null;
 }
 
+
+interface IMappedPath {
+	fullPathAlreadyExists: boolean;
+	lastExistingPathSegment: {
+		isFile: boolean;
+		name: string;
+	};
+}
+
+function mapPathsToExistingFolders(parent: ExplorerItem, pathNames: string[]): IMappedPath {","Not very happy about the names here. When I read ""map"" I expect something like an actual map.
I would rename to something simplier, maybe something with ""check"" and ""path"". I leave this up to you",Why do we need this interface?
181,"@@ -14,5 +14,10 @@
 	""win32ShellNameShort"": ""C&ode - OSS"",
 	""darwinBundleIdentifier"": ""com.visualstudio.code.oss"",
 	""reportIssueUrl"": ""https://github.com/Microsoft/vscode/issues/new"",
-	""urlProtocol"": ""code-oss""
-}
\ No newline at end of file
+	""urlProtocol"": ""code-oss"",","you don't want to check in this, right :)",Why did you remove this?
182,"@@ -14,6 +14,7 @@ import { Builder, $ } from 'vs/base/browser/builder';
 import DOM = require('vs/base/browser/dom');
 import { DomScrollableElement } from 'vs/base/browser/ui/scrollbar/scrollableElement';
 import { BoundedLinkedMap } from 'vs/base/common/map';
+import { IWindowsService } from 'vs/platform/windows/common/windows';",@mjbvz we try to have base not depending on platform if possible (see https://github.com/Microsoft/vscode/wiki/Code-Organization#layers),Why is this needed?
183,"@@ -140,10 +142,12 @@ export class TerminalInstance implements ITerminalInstance {
 		this._createProcess(this._shellLaunchConfig);
 		this._createXterm();
 
+		if (this._shellLaunchConfig && !this._shellLaunchConfig.name) {","Let's move this into `_createProcess`, just before `this._messageTitleListener` is set. That way it's right next to the part that sets it for `_shellLaunchConfig.name`.",Why do we need this check?
184,"@@ -141,13 +145,22 @@ export default class LanguageProvider {
 
 		this.disposables.push(languages.registerWorkspaceSymbolProvider(new (await import('./features/workspaceSymbolProvider')).default(client, this.description.modeIds)));
 
+		await this.initBlockCommentStarSetting();",[nit] no await needed here,this.initBlockCommentStarSetting();
185,"@@ -1412,6 +1412,21 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * Options to configure the behavior of the message.
+	 *
+	 * @see [showInformationMessage](#window.showInformationMessage)
+	 * @see [showWarningMessage](#window.showWarningMessage)
+	 * @see [showErrorMessage](#window.showErrorMessage)
+	 */
+	export interface MessageOptions {
+
+		/**
+		 * Indicates that this message should be modal.
+		 */
+		modal?: boolean;
+	}",Can we already imagine having other options here? If not we should think about a naked boolean instead,I don't think we need the `?` here.
186,"@@ -142,12 +199,13 @@ export class DebugHoverWidget implements editorbrowser.IContentWidget {
 		});
 	}
 
+	private getExpressionSupportingEvaluate(session: debug.IRawDebugSession, expression: string) : TPromise<Expression> {","No need for this method, just brings conffusion among method names. I recommend to just move these two lines out to the one place where you call this method from
",">private [](start = 8, length = 6) nit: extra line"
187,"@@ -142,6 +156,11 @@ export class MenuItemActionItem extends ActionItem {
 		event.preventDefault();
 		event.stopPropagation();
 
+		const altKey = AltKeyEmitter.getInstance(this._contextMenuService);
+		if (altKey.isPressed) {
+			altKey.suppressAltKeyUp();
+		}",@eamodio Why is this logic only needed in one place and not in the other?,Why do we need this?
188,"@@ -143,6 +144,11 @@ export class TerminalInstance implements ITerminalInstance {
 		if (platform.isWindows) {
 			this._processReady.then(() => {
 				this._windowsShellHelper = new WindowsShellHelper(this._processId, this._shellLaunchConfig.executable);
+				this._onCheckWindowsShell = new Emitter<TPromise<string>>();
+				debounceEvent(this._onCheckWindowsShell.event, (l, e) => e, 100, true)(() => {
+					this.checkWindowShell();
+				});
+				this.onData(() => this._onCheckWindowsShell.fire());","I think we need a new mechanism for onData. Currently if a command runs for 10 seconds, it will launch 10/0.1=100 processes during its lifetimes. Instead of debounce like on enter we need something that will go off when the output has finished coming in.",Why do we need a debounce event here?
189,"@@ -144,8 +234,12 @@ class ViewletActivityAction extends ActivityAction {
 	private static preventDoubleClickDelay = 300;
 	private lastRun: number = 0;
 
+	private _onOpenExternalViewlet = new Emitter<string>();
+	get onOpenExternalViewlet(): Event<string> { return this._onOpenExternalViewlet.event; };","Access modifier
",private readonly Emitter<string> _onOpenExternalViewlet;
190,"@@ -1445,3 +1446,11 @@ export enum ConfigurationTarget {
 
 	WorkspaceFolder = 3
 }
+
+export class RelativePattern implements IRelativePattern {
+	base: string;
+
+	constructor(public pattern: string, base: vscode.WorkspaceFolder | string) {",fugly - mixing properties definitions like that,Why do we need this class?
191,"@@ -145,29 +153,55 @@ export default class Webview {
 		::-webkit-scrollbar {
 			width: 14px;
 			height: 10px;
-		}
-		::-webkit-scrollbar-thumb:hover {
-			background-color: rgba(100, 100, 100, 0.7);
 		}`;
 
+		let bodyClasses = {
+			remove: ['monaco-editor', 'vs', 'vs-dark', 'hc-black']","do we need `monaco-editor`? 
and for the sake of being aligned and explicit should we call the theme classes: `vscode-light`, `vscode-dark`, and `vscode-high-contrast`?
",Why is this removed?
192,"@@ -145,6 +137,26 @@ class ImplementationAdapter {
 	}
 }
 
+class TypeDefinitionAdapter {
+	constructor(",same,
193,"@@ -145,7 +145,8 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 				previewEditors: editorConfig.enablePreview,
 				showIcons: editorConfig.showIcons,
 				showTabs: editorConfig.showTabs,
-				showTabCloseButton: editorConfig.showTabCloseButton
+				showTabCloseButton: editorConfig.showTabCloseButton,",Just delete support for `showTabCloseButton` option since it is now supported via your `tabCloseButton` setting.,Why did you change this?
194,"@@ -147,6 +150,11 @@ export default class PHPValidationProvider {
 			let shellSettings = section.get<any>('validate.runInShell');
 			if (typeof(shellSettings) === 'boolean') {
 				this.runInShell = shellSettings;
+				if (this.platform.toLowerCase() === 'win32') {
+					this.shellExecutable = 'C:\\Windows\\sysnative\\bash.exe';","I think we can't assume that a user wants the bash if runInShell is set to true. I would expect that the user wants to use what is defined in ComSpec under Windows.

And then we need to set the shellArgs accordingly as well since -c will not work with cmd.exe nor with powershell.exe. For cmd.exe this is /C and for PowerShell it is /Command
",Why do we need this?
195,"@@ -147,6 +152,10 @@ export class TextFileEditorModelManager implements ITextFileEditorModelManager {
 		return true;
 	}
 
+	public get onModelContentChanged(): Event<TextFileModelChangeEvent> {","I see the need for an event when untitled or text files are changing so that the backup service can do its business, however I fear that this comes at the cost of spam: you will see many model content change events while the user is typing, so basically each key press will trigger this event. Performance should always be something to be concerned of, especially when it is typing performance we are talking about. 

Some ideas:
- buffer the model content change event and only start to emit the change after a certain delay
- do not always create an event object to send around

I think buffering would be a good idea anyway because backups should also not be created without some delay.
",public event EventHandler<TextFileModelChangeEvent> ModelContentChanged;
196,"@@ -147,6 +158,10 @@ export class BackupFileService implements IBackupFileService {
 				return void 0; // return early if backup version id matches requested one
 			}
 
+			if (resource.scheme === 'file') {","@Tyriar so you say that you do this only for files because untitled do not have this issue? not sure about that, what about someone that starts ""`code <file name>`"" where the file path does not exist and we show an untitled file with associated file path? I think we will have to store the path for untitled too in that case. Maybe untitled files should be stored differently on disk compared to today: instead of using their name (`Untitled-1`, `Untitled-2`), hash the associated file path and if there is none, hash the name. This would also be the fix for https://github.com/Microsoft/vscode/issues/15941",if (resource.scheme === 'file') {
197,"@@ -147,6 +158,10 @@ export class BackupFileService implements IBackupFileService {
 				return void 0; // return early if backup version id matches requested one
 			}
 
+			if (resource.scheme === 'file') {
+				content = `${resource.fsPath}\n${content}`;",@Tyriar I suggest to use `Uri.toString()` here and `Uri.parse()` on the other side to reconstruct.,if (resource.scheme === 'file') {
198,"@@ -147,7 +147,7 @@ configurationRegistry.registerConfiguration({
 				CreateNewTerminalAction.ID,
 				CopyTerminalSelectionAction.ID,
 				KillTerminalAction.ID,
-				FocusTerminalAction.ID,
+				FocusActiveTerminalAction.ID,",I wonder if all the new commands should be added here as well?,I think this should be `FocusActiveTerminalAction.ID`
199,"@@ -149,25 +149,30 @@ export class TerminalPanel extends Panel {
 				// occurs on the selection itself.
 				this._terminalService.getActiveInstance().focus();
 			} else if (event.which === 3) {
-				// Trigger the context menu on right click
-				let anchor: HTMLElement | { x: number, y: number } = this._parentDomElement;
-				if (event instanceof MouseEvent) {","I just realized that this is actually my code haha, as long as the context menu appears in the correct spot after this change (when `rightClickCopyPaste` is false) then this was fine to remove :+1: ",Why was this removed?
200,"@@ -149,6 +149,16 @@ export async function mkdirp(path: string, mode?: number): Promise<boolean> {
 	return true;
 }
 
+export async function createOrAppendFile(path: string, data: string, options?: any): Promise<boolean> {","I'd rather we go through the `applyEdit` vscode API, instead of raw node file editing.","export async function createOrAppendFile(path: string, data: string, options?: any): Promise<boolean> {"
201,"@@ -15,12 +15,35 @@ const util = require('./lib/util');
 const packageJson = require('../package.json');
 const product = require('../product.json');
 
+const linuxPackageRevision = Math.floor(new Date().getTime() / 1000);
+
+const flatpakManifest = {
+	appId: 'com.microsoft.CodeOSS',","Our application id in the other packages is `code[-insiders].desktop`, should this be the same or is this a new ID we would be introducing? This should be sourced from https://github.com/Microsoft/vscode/blob/master/product.json",I think this should be `package.json`
202,"@@ -15,12 +15,35 @@ const util = require('./lib/util');
 const packageJson = require('../package.json');
 const product = require('../product.json');
 
+const linuxPackageRevision = Math.floor(new Date().getTime() / 1000);
+
+const flatpakManifest = {
+	appId: 'com.microsoft.CodeOSS',
+	sdk: 'org.freedesktop.Sdk',
+	runtime: 'org.freedesktop.Sdk',
+	runtimeVersion: '1.4',",What version is this for?,I think this should be `1.4.0`
203,"@@ -15,13 +15,20 @@ export class TrimTrailingWhitespaceCommand implements editorCommon.ICommand {
 
 	private selection: Selection;
 	private selectionId: string;
+	private preserveCursor: boolean;
 
-	constructor(selection: Selection) {
+	constructor(selection: Selection, preserveCursor?: boolean) {",Shouldn't it be preserving multiple cursors? Not just one?,Why do we need this?
204,"@@ -15,6 +15,14 @@
 			""aliases"": [ ""PHP"", ""php"" ],
 			""mimetypes"": [""application/x-php""],
 			""configuration"": ""./language-configuration.json""
+		},
+		{
+			// For reference by services requiring PHP syntax highlighting for partial
+			// code missing script start/end tags.
+			""id"": ""phplanguage"",
+			""aliases"": [ null ], // unsupported: prevents language from appearing in Language Mode list","Couldn't this just be `""aliases"": null` instead of the one-element array?","I'm not sure if this is the best way to do this. I think it would be better to have a list of supported languages, and then have a single entry for each supported language."
205,"@@ -15,6 +15,8 @@
 .monaco-workbench > .part.editor > .content > .one-editor-silo > .container > .title .tabs-container > .tab .tab-label a {
 	text-decoration: none;
 	font-size: 13px;
+	height:35px;
+	line-height: 35px;","Are these two still needed?
",I don't think this is needed.
206,"@@ -15,7 +15,7 @@ import { FoldingRange } from 'vscode-languageserver-protocol-foldingprovider';
 import { getLanguageModelCache, LanguageModelCache } from '../languageModelCache';
 import { getDocumentRegions, HTMLDocumentRegions } from './embeddedSupport';
 import { getCSSMode } from './cssMode';
-import { getJavascriptMode } from './javascriptMode';
+import { getJavaScriptMode } from './javascriptMode';","In general, `JavaScript` is a brand and there are only two proper ways to spell it: `JavaScript`, or `javascript`. As `javascriptMode` is probably a module, I probably should drop this.",Why is this change needed?
207,"@@ -150,6 +150,34 @@ export class AbstractTextResourceEditor extends BaseTextEditor {
 		}
 	}
 
+	/**","Having this helper method in `textResourceEditor` does not really make sense to me as it would only be used by the output.
I would do all this logic in the outputService as all this API should be public.",
208,"@@ -151,15 +127,15 @@ export abstract class TextFileService implements ITextFileService {
 						return this.confirmBeforeShutdown(); // we still have dirty files around, so confirm normally
 					}
 
-					return this.cleanupBackupsBeforeShutdown();
+					return this.backupService.cleanupBackupsBeforeShutdown(); // all good, no veto","All of the cleanupBackupsBeforeShutdown should move out into the backup service that itself should listen to lifecycle events.
","I don't think we need to call `cleanupBackupsBeforeShutdown` here, since we already call `confirmBeforeShutdown`."
209,"@@ -152,7 +153,7 @@ const jsonRegistry = <jsonContributionRegistry.IJSONContributionRegistry>platfor
 jsonRegistry.registerSchema(schemaId, schema);
 
 export class ConfigurationManager implements debug.IConfigurationManager {
-
+	private settingsVariables: SettingsVariables;","Just move it one line down, so we have nice seperation between public / private members
",Why do we need this?
210,"@@ -153,6 +153,7 @@ const configurationValueWhitelist = [
 	'php.validate.run',
 	'workbench.welcome.enabled',
 	'workbench.startupEditor',
+	'workbench.panel.defaultLocation',","This is not needed imho, please remove it.","'workbench.panel.defaultLocation',"
211,"@@ -153,7 +153,7 @@ export abstract class ViewerViewlet extends Viewlet {
  */
 export class ViewletDescriptor extends CompositeDescriptor<Viewlet> {
 
-	constructor(moduleId: string, ctorName: string, id: string, name: string, cssClass?: string, order?: number) {
+	constructor(moduleId: string, ctorName: string, id: string, name: string, cssClass?: string, order?: number, public isExternal: boolean = false) {","@octref `isExternal` is a bit confusing, can we maybe call this `isExtension`?
",Why do we need to add `public` to the constructor?
212,"@@ -1534,12 +1534,31 @@ declare module 'vscode' {
 		 */
 		ignoreFocusOut?: boolean;
 
+		/**
+		 * An optional flag to make the picker multi-select, if true the result is an array of picks.
+		 */
+		multiSelect?: boolean;",I believe for the file open dialog we use `canSelectMany` and it would be nice to re-use the words,I don't think this is needed.
213,"@@ -155,7 +155,7 @@ suite('Instantiation Service', () => {
 		assert.ok(collection.has(IService2));
 	});
 
-	test('@Param - simple clase', function () {
+	test('@Param - simple case', function () {",I'm not sure about this,assert.ok(collection.has(IService1));
214,"@@ -1553,3 +1553,75 @@ export class MoveEditorToNextGroupAction extends Action {
 		return TPromise.as(true);
 	}
 }
+
+export class MoveEditorToFirstGroupAction extends Action {",@shobhitchittora all these actions are very similar in their implementation. Can we have a base class (abstract) that all classes extend from and in the base class we simply have a method to ask for the position?,export class MoveEditorToFirstGroupAction extends Action {
215,"@@ -1553,3 +1553,78 @@ export class MoveEditorToNextGroupAction extends Action {
 		return TPromise.as(true);
 	}
 }
+
+export class MoveEditorToFirstGroupAction extends Action {
+
+	public static readonly ID = 'workbench.action.moveEditorToFirstGroupAction';",@shobhitchittora remove the trailing `Action` from the action ids (e.g. `workbench.action.moveEditorToFirstGroup`),nit: rename to `moveEditorToFirstGroup`
216,"@@ -156,6 +168,15 @@ export class ViewCursor {
 			this._domNode.setLineHeight(this._lineHeight);
 			this._domNode.setHeight(this._lineHeight);
 
+			let desiredWidth = '1ch';",@rebornix Computing the desiredWidth and setting it needs to happen only if the cursor style is set to block.,let desiredHeight = '1ch';
217,"@@ -156,7 +156,7 @@ class DropOverlay extends Themable {
 			// Close in source group unless we copy
 			const copyEditor = this.shouldCopyEditor(draggedEditor, event);
 			if (!copyEditor) {
-				sourceGroup.closeEditor(draggedEditor.editor);
+				sourceGroup.closeEditor(draggedEditor.editor, true);","I think we can tweak this a little bit: If the user drags an editor to another group and drops it there, I would think that it is fine to close the editor if its the last. Same for dragging it to another group to split the group there. 

In other words, maybe the only time we should allow the editor group to stay empty is when you drag the editor into the same group it originates from and you are splitting that group into one of the directions.",Why do we need this change?
218,"@@ -1564,6 +1564,7 @@ export class EditorGroupsControl extends Themable implements IEditorGroupsContro
 	private updateFromDropping(element: HTMLElement, isDropping: boolean): void {
 		const groupCount = this.stacks.groups.length;
 		const background = this.getColor(isDropping ? EDITOR_DRAG_AND_DROP_BACKGROUND : groupCount > 0 ? EDITOR_GROUP_BACKGROUND : null);
+		isDropping ? DOM.addClass(element, 'dropping') : DOM.removeClass(element, 'dropping');","@Dari-K isn't this rather ""`dragged-over`""?","I don't think this is the right place to do this. If the element is already in the dropping state, it should be removed from the DOM."
219,"@@ -16,15 +16,15 @@
 }",Looks good,{
220,"@@ -16,6 +16,11 @@ export namespace EditorContextKeys {
 	 */
 	export const focus = new RawContextKey<boolean>('editorFocus', false);
 
+	/**
+	 * A context key that is set when any editor input has focus (regular editor, repl input...).
+	 */
+	export const inputFocus = new RawContextKey<boolean>('inputFocus', false);","Let's ask in the stand-up what would be a good name. Perhaps `textInputFocus` is better than `inputFocus`, as there might in the future be other types of `input`s, like drop downs or radio buttons...",This should be `editorInputFocus`.
221,"@@ -16,6 +16,7 @@ export const Identifiers = {
 	WORKBENCH_CONTAINER: 'workbench.main.container',
 	ACTIVITYBAR_PART: 'workbench.parts.activitybar',
 	SIDEBAR_PART: 'workbench.parts.sidebar',
+	PANEL_PART: 'workbench.parts.panelpart',","@isidorn suggest to call it just ""workbench.parts.panel""
","PANEL_PART: 'workbench.parts.panelpart',"
222,"@@ -16,7 +13,7 @@
 		""grammars"": [{
 			""language"": ""r"",
 			""scopeName"": ""source.r"",
-			""path"": ""./syntaxes/r.tmLanguage.json""",Please keep using the .tmLanguage.json file extension. It makes it easier for us to distinguish the various JSON files.,"""path"": ""./syntaxes"","
223,"@@ -160,6 +160,41 @@ suite('workspace-namespace', () => {
 		});
 	});
 
+	test('eol, read', () => {",Is there any reason to call-out the scenario in which there is an equal number of LF vs. CRLF line endings?,
224,"@@ -160,6 +164,14 @@ export class LifecycleService implements ILifecycleService {
 			const oneTimeCancelEvent = 'vscode:cancel' + oneTimeEventToken;
 
 			ipc.once(oneTimeOkEvent, () => {
+				// Clear out any workspace backups from workspaces.json that don't have any backups
+				if (vscodeWindow.openedWorkspacePath) {","@Tyriar this is ugly, instead I suggest to introduce an event that the lifecycle service (on the main side) emits with the veto result of the unload call. The backup main service should listen to this event and do its business when it happens.
",I think this should be `if (!vscodeWindow.backups.length) {`
225,"@@ -1605,9 +1605,15 @@ declare module 'vscode' {
 		scheme?: string;
 
 		/**
-		 * A glob pattern, like `*.{ts,js}`.
+		 * Either a glob pattern, like `**‚àï*.{ts,js}` or a [workspace pattern](#WorkspacePattern) that can be relative
+		 * and matches on the path of the provided workspace.
 		 */
-		pattern?: string;
+		pattern?: string | WorkspacePattern;
+	}
+
+	export interface WorkspacePattern {",jsdoc missing,I don't think this should be an interface.
226,"@@ -1605,9 +1605,24 @@ declare module 'vscode' {
 		scheme?: string;
 
 		/**
-		 * A glob pattern, like `*.{ts,js}`.
+		 * Either a glob pattern, like `**‚àï*.{ts,js}` or a [relative pattern](#RelativePattern).
 		 */
-		pattern?: string;
+		pattern?: string | RelativePattern;
+	}
+
+	class RelativePattern {
+
+		/**
+		 * A base to which the pattern will be matched against relatively.
+		 */
+		readonly base: Uri;
+
+		/**
+		 * A relative glob pattern like `*.{ts,js}`.
+		 */
+		readonly pattern: string;",Maybe no `readonly` for those two?,I don't think we need this class. It's only used in one place.
227,"@@ -1610,9 +1610,24 @@ declare module 'vscode' {
 		scheme?: string;
 
 		/**
-		 * A glob pattern, like `*.{ts,js}`.
+		 * Either a absolute glob pattern, like `**‚àï*.{ts,js}` or a [relative pattern](#RelativePattern).
 		 */
-		pattern?: string;
+		pattern?: string | RelativePattern;
+	}
+
+	class RelativePattern {
+
+		/**
+		 * A base to which the pattern will be matched against relatively.
+		 */
+		readonly base: Uri;","On a second thought this could also just be a string, right? We have the sugar ctor but technically we aren't globbing against a URI but against it path/fspath?",Should this be a `<msg>`RelativePattern`?
228,"@@ -1617,7 +1617,7 @@ declare module 'vscode' {
 		/**
 		 * The command this code lens represents.
 		 */
-		command?: Command;
+		command?: Command | string;",@jrieken I'm not a huge fan of this API design. Let me know if you have any suggestions on a better way to express this  ,I think this should be `?Command`.
229,"@@ -162,18 +165,33 @@ function formatProcessItem(mapPidToWindowTitle: Map<number, string>, output: str
 	let name: string;
 	if (isRoot) {
 		name = `${product.applicationName} main`;
+		let matches = RENDERER_DEBUG_PATTERN.exec(item.cmd);
+		if (matches && matches.length === 2) {
+			rendererDebugPort = matches[1];
+		}
 	} else {",comment range,"`rendererDebugPort = parseInt(matches[1], 10);`"
230,"@@ -162,6 +162,21 @@ function touch(file) {
 	});
 }
 
+function resolveJSFlags() {
+	let jsFlags = [];
+	if (args['js-flags']) {
+		jsFlags.push(args['js-flag']);",@rebornix typo? `js-flag` vs `js-flags`,I think this should be `jsFlags.push(...args['js-flag']);`
231,"@@ -1633,6 +1633,24 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * The implementation provider interface defines the contract between extensions and
+	 * the go to implementation feature.
+	 */
+	export interface ImplementationProvider {",Maybe `TypeDefinitionProvider` would be a better name?,Why is this interface needed?
232,"@@ -164,6 +170,12 @@ export class TerminalLinkHandler {
 		callback(true);
 	}
 
+	private _handleHypertextLink(url: string) {",Add `: void` return type,
233,"@@ -164,6 +170,12 @@ export class TerminalLinkHandler {
 		callback(true);
 	}
 
+	private _handleHypertextLink(url: string) {
+		let uri = Uri.parse(url);
+		this._openerService.open(uri);
+		return;",Remove,nit: remove this line
234,"@@ -164,7 +164,10 @@ export class PreferencesEditor extends BaseEditor {
 		this.searchWidget.focus();
 	}
 
-	public focusSearch(): void {
+	public focusSearch(filter?: string): void {
+		if (filter !== null) {","This will pass if filter is undefined, i.e. not passed to `focusSearch`.",Why do we need this?
235,"@@ -165,6 +165,9 @@ suite('Workbench - TerminalConfigHelper', () => {
 					},
 					shellArgs: {
 						linux: []
+					},
+					rightClickAction: {",These can be removed now that the setting changed.,
236,"@@ -1665,6 +1665,16 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A code action for the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.
+	 */
+	export interface CodeAction extends Command {",Creating a CodeAction type is also something we may want to consider for #33049,
237,"@@ -1665,6 +1665,16 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * A code action for the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.
+	 */
+	export interface CodeAction extends Command {
+		/**
+		 * Should the lightbulb automatically be shown in the UI?
+		 */
+		dontTriggerLightBulb?: boolean;","Instead of a boolean, I also considered using a enum for when the lightbulb should be shown or not. For example, base on #33441, it may be expected that the lightbulb is shown when the user has a selection but not when the selection is empty",I don't think we need this.
238,"@@ -1668,6 +1668,24 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * The type definition provider defines the contract between extensions and
+	 * the go to type definition feature.",Like the other language features this needs a section the doc (editing evolved) such that people has a clear understanding of what this is,
239,"@@ -167,4 +167,20 @@ declare module 'vscode' {
 		 */
 		export function deleteSecret(service: string, account: string): Thenable<boolean>;
 	}
+
+	export namespace window {
+
+		/**
+		 * Whether the current window is focused.
+		 *
+		 * @readonly
+		 */
+		export let isFocused: boolean;","Alternative idea would be have an enum ala `WindowState` with `focused`, `visible`, 'hidden` etc. That will be more future proof because less verbose when folks ask for those things.",I don't think we need to export this.
240,"@@ -167,6 +216,26 @@ export abstract class SimpleFindWidget extends Widget {
 			this._domNode.setAttribute('aria-hidden', 'true');
 		}
 	}
+
+	public showNextFindTerm() {
+		let next = this._findHistory.next();
+		if (next) {
+			this._findInput.setValue(next);
+		}
+	}
+
+	public showPreviousFindTerm() {
+		let previous = this._findHistory.previous();
+		if (previous) {
+			this._findInput.setValue(previous);
+		}
+	}
+
+	// Allow subclass to provide find
+	public baseFind(previous: boolean) {",What is this.find? Can subclasses just reimplement that instead?,Why do we need this method?
241,"@@ -167,7 +168,14 @@ export class TerminalPanel extends Panel {
 		if (!themeId) {
 			themeId = this.themeService.getTheme();
 		}
-		let theme = this.configurationHelper.getTheme(themeId);
+
+		let terminalThemeId = this.configurationHelper.getTerminalThemeId(themeId);","Can you pull `getBaseThemeId` into this file and check it here instead of calling into `configurationHelper` twice?
",I think this should be `getTerminalThemeId`
242,"@@ -168,10 +168,27 @@ export class ToggleRenderWhitespaceAction extends EditorAction {
 	}
 }
 
+export class ToggleRenderControlCharacterAction extends EditorAction {
+	static ID = 'editor.action.toggleRenderControlCharacter';","Here is `static ID = 'editor.action.toggleRenderControlCharacters';`

Fixes https://github.com/Microsoft/vscode/issues/8823
",
243,"@@ -168,13 +170,17 @@ export class VSCodeWindow {
 			title: this.envService.product.nameLong,
 			webPreferences: {
 				'backgroundThrottling': false // by default if Code is in the background, intervals and timeouts get throttled
-			}
+			},","extra comma
",Why did you change this?
244,"@@ -168,14 +168,19 @@ declare module 'vscode' {
 		availableFormats: ColorFormat[];
 
 		/**
+		 * Controls whether the color decorator is rendered.
+		 */
+		renderDecorator: boolean;",Shouldn't this be a user setting?,"I think this should be `boolean`, not `<msg>`<msg>`<msg>`renderDecorator`"
245,"@@ -168,6 +169,10 @@ export class FileService implements IFileService {
 		return this.raw.resolveContent(resource, options);
 	}
 
+	public resolveStringStream(resource: uri, options?: IResolveContentOptions, token?: CancellationToken): IStringStream {","What does this new method mean for the remote file system implementation? Can a remote file system provide the same stream, I have not seen any updates of this for [`RemoteFileService`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/files/electron-browser/remoteFileService.ts#L79)","public IStringStream resolveStringStream(string uri, IResolveContentOptions options: IResolveContentOptions) {"
246,"@@ -169,6 +175,20 @@ export class TerminalService extends AbstractTerminalService implements ITermina
 	}
 
 	private _detectWindowsShells(): TPromise<IPickOpenEntry[]> {
+		const expectedLocations = this._getExpectedLocations();",I don't think we should change this function but rather include a list of possible WSL shell paths (wsl.exe or bash.exe https://github.com/Tyriar/vscode-terminal-here/issues/15#issuecomment-367450527) in its own constant.,/** @return {Promise<IPickOpenEntry[]>} */
247,"@@ -169,8 +168,8 @@ export class ConfigurationManager implements debug.IConfigurationManager {
 		@IQuickOpenService private quickOpenService: IQuickOpenService,
 		@IKeybindingService private keybindingService: IKeybindingService
 	) {","This will probably throw an exception if you open the no-folder workspace.
That is the reason why I originally check for this.contextService.getWorkspace(), I think you need to re-introduce that check.
",)
248,"@@ -1698,11 +1692,19 @@ class EditorOrNativeTextInputCommand extends Command {
 			return;
 		}
 
+		let editorService: any = accessor.get(IEditorService);
+		let activeEditor = editorService.getActiveEditor && editorService.getActiveEditor();
+
+		if (activeEditor.isWebviewEditor && activeEditor.webview) {
+			activeEditor.webview.selectAll();
+			return;
+		}",Looks like this was just for testing? I don't think `EditorOrNativeTextInputCommand` should know anything about `selectAll`,Why do we need this?
249,"@@ -17,15 +17,21 @@ import * as nls from 'vscode-nls';
 
 const localize = nls.loadMessageBundle();
 
-class CheckoutItem implements QuickPickItem {
+class CheckoutBasicItem implements QuickPickItem {",Why not instead of this simply create a new `class MergeItem implements QuickPick`?,Why do we need this change?
250,"@@ -17,6 +17,10 @@
 	overflow: hidden;
 }
 
+.explorer-viewlet .explorer-item-label a, .explorer-viewlet .working-files-item-label {
+	margin-right: 12px;
+}
+","Why?
",.explorer-viewlet .explorer-item-label {
251,"@@ -17,6 +17,11 @@ export interface IUntitledEditorService {
 	_serviceBrand: any;
 
 	/**
+	 * Events for when untitled editors content changes (e.g. any keystroke).
+	 */
+	onDidChangeContent: Event<URI>;","@Tyriar can we have test coverage for `onDidChangeContent` and `onDidDisposeModel`
",I'm not sure if this is the right place for this event. It seems like it should be in the `editor` package.
252,"@@ -17,6 +17,7 @@
 	""format.insertSpaceBeforeAndAfterBinaryOperators"": ""Defines space handling after a binary operator."",
 	""format.insertSpaceAfterKeywordsInControlFlowStatements"": ""Defines space handling after keywords in a control flow statement."",
 	""format.insertSpaceAfterFunctionKeywordForAnonymousFunctions"": ""Defines space handling after function keyword for anonymous functions."",
+	""format.insertSpaceBeforeFunctionParenthesis"": ""Defines space handling before function argument parentheses."",",Please add a ` Requires TypeScript >= 2.1.5.` blurb at the end ,"""format.insertSpaceBeforeFunctionArguments"": ""Defines space handling before function arguments."","
253,"@@ -17,6 +17,9 @@ export const TERMINAL_SERVICE_ID = 'terminalService';
 
 export const TERMINAL_DEFAULT_RIGHT_CLICK_COPY_PASTE = platform.isWindows;
 
+/**  A context key that is set when the integrated terminal OR the terminal FindWidget has focus. */
+export const KEYBINDING_CONTEXT_TERMINAL_COMPONENTS_FOCUS = new RawContextKey<boolean>('terminalComponentsFocus', undefined);",Since we already have `KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_VISIBLE` can we do an && condition within the `when` clause with `KEYBINDING_CONTEXT_TERMINAL_FOCUS`?,/** A context key that is set when the integrated terminal OR the terminal FindWidget has focus. */
254,"@@ -17,6 +17,9 @@ import { isWindows } from 'vs/base/common/platform';
 import { app } from 'electron';
 import { basename } from 'path';
 
+const DEBUG_FLAGS_PATTERN = /\s--(inspect|debug)(-brk)?(=([0-9]+))/;
+const RENDERER_DEBUG_PATTERN = /--remote-debugging-port=([0-9]+)/;",lol,
255,"@@ -17,7 +17,7 @@ export const TERMINAL_SERVICE_ID = 'terminalService';
 
 export const TERMINAL_DEFAULT_SHELL_LINUX = !platform.isWindows ? (process.env.SHELL || 'sh') : 'sh';
 export const TERMINAL_DEFAULT_SHELL_OSX = !platform.isWindows ? (process.env.SHELL || 'sh') : 'sh';
-export const TERMINAL_DEFAULT_SHELL_WINDOWS = processes.getWindowsShell();
+/**    const TERMINAL_DEFAULT_SHELL_WINDOWS moved to ../electron-browser/terminal.ts */",You can remove this line :+1: ,I don't think we need this anymore.
256,"@@ -17,9 +17,13 @@ function handleDeletions() {
 	});
 }
 
-const watch = process.platform === 'win32'
-	? require('./watch-win32')
-	: require('gulp-watch');
+const disableNewWatcher = process.env['vscode.disableNewWatcher'];","Might be better to not have a `.` in the env variable name, we use `VSCODE_VARNAME` format elsewhere afaik.",I think this should be `process.env['vscode.watch']`
257,"@@ -170,3 +177,29 @@ export class ClipboardBasedVariableResolver implements VariableResolver {
 		}
 	}
 }
+
+export class TimeBasedVariableResolver implements VariableResolver {
+
+	resolve(variable: Variable): string {
+		const { name } = variable;
+		const zeroPad = (n: string): string => n.length < 2 ? `0${n}` : n;",better use the existing util from base/common/strings#pad,Why do we need this?
258,"@@ -171,12 +171,12 @@ async function ensureVersionAndSymbols(options: IOptions) {
 }
 
 // Environment
-const pakage = require('../../../package.json');
+const pkg = require('../../../package.json');","I understand that `package` is a reserved word.

Generally, instead of a random misspelling, people use an abbreviation, I've picked `pkg` (and Travis doesn't seem to object). I'm flexible, in case you have a preference. Other alternatives include using a `_`...",const pkg = require('../../../package.json');
259,"@@ -171,7 +171,7 @@ export function distinct<T>(array: T[], keyFn?: (t: T) => string): T[] {
 }
 
 export function first<T>(array: T[], fn: (item: T) => boolean, notFoundValue: T = null): T {
-	for (let i = 0; i < array.length; i++) {
+	for (let i = 0, I = array.length; i < I; i++) {
 		const element = array[i];","we don't do upper-case locals
",I think this should be `array.length - 1`
260,"@@ -171,7 +171,7 @@ export function distinct<T>(array: T[], keyFn?: (t: T) => string): T[] {
 }
 
 export function first<T>(array: T[], fn: (item: T) => boolean, notFoundValue: T = null): T {
-	for (let i = 0; i < array.length; i++) {
+	for (let i = 0, iMax = array.length; i < iMax; i++) {","sorry, actually we should use a ES6 for-of loop and let the compiler/engine decide
",const iMax = array.length - 1;
261,"@@ -172,6 +187,29 @@ export class BackupFileService implements IBackupFileService {
 		});
 	}
 
+	public getWorkspaceTextFileBackups(): TPromise<string[]> {","@Tyriar at first I thought this should move into the cache but then we would stop each and every file open waiting for this to be done. Since backups can be restored later, I think it is OK to leave this outside of the cache even though the result could probably be cached.",
262,"@@ -172,7 +173,7 @@ export class QuickOpenController extends Component implements IQuickOpenService
 		if (this.pickOpenWidget && this.pickOpenWidget.isVisible()) {
 			this.pickOpenWidget.hide(HideReason.CANCELED);
 		}
-
+		// options.handleKeyDown = (e, value) => {console.log(e, value); return value.trim();};","This is unnecessary, was accidentally left in here as a result for testing.",Remove this line
263,"@@ -173,6 +177,16 @@ export class ViewletRegistry extends CompositeRegistry<Viewlet> {
 	}
 
 	/**
+	 * Registers multiple external viewlets.
+	 */
+	public registerExternalViewlets(descriptors: ViewletDescriptor[]): void {","This feels wrong - since we always register `ViewletDescriptor`-instances we shouldn't use two separate functions. Why not treat viewlet and external viewlet equal, have only one function, one event which we send for each viewlet registration, let listeners filter on `ViewletDescriptor#isExternal`
",nit: `registerExternalViewlets(viewlets: ViewletDescriptor[]): void {`
264,"@@ -174,6 +175,12 @@ function main(accessor: ServicesAccessor, mainIpcServer: Server, userEnv: platfo
 		// TODO@Joao: unfold this
 		windowsMainService = accessor.get(IWindowsMainService);
 
+		windowsMainService.onWindowClose(() => {
+			if (windowsMainService.getWindowCount() === 0) {","@joaomoreno as I said before, this should have a check for Windows/Linux, because only there we close the app when closing the last window!",Why do we need this?
265,"@@ -175,6 +175,7 @@ export class SearchViewlet extends Viewlet {
 		const exclusionsUsePattern = this.viewletSettings['query.exclusionsUsePattern'];
 		const includesUsePattern = this.viewletSettings['query.includesUsePattern'];
 		const patternIncludes = this.viewletSettings['query.folderIncludes'] || '';
+		const userExtended = this.viewletSettings['query.userExtended'] || '';","Looks great, only comment is that the name `userExtended` isn't totally obvious at first. Maybe `queryDetailsExpanded` or something like that?",const userExtended = this.viewletSettings['query.userExtended'] || '';
266,"@@ -176,12 +191,12 @@ function closeActiveReferenceSearch(accessor: ServicesAccessor, args: any) {
 		return;
 	}
 
-	controller.closeWidget();
+	fn(controller);
 }
 
 KeybindingsRegistry.registerCommandAndKeybindingRule({
 	id: 'closeReferenceSearch',
-	weight: KeybindingsRegistry.WEIGHT.editorContrib(50),
+	weight: KeybindingsRegistry.WEIGHT.workbenchContrib(50),",Why workbench and not editor? This feature is also available in the monaco editor....,This should be `fn(controller);`
267,"@@ -176,6 +178,39 @@ export class KeybindingsEditor extends BaseEditor implements IKeybindingsEditor
 		return focusedElement && focusedElement.templateId === KEYBINDING_ENTRY_TEMPLATE_ID ? <IKeybindingItemEntry>focusedElement : null;
 	}
 
+	setKeybindingSource(searchString: string): TPromise<any> {",Inline this in the action,setKeybindingSource(searchString: string) {
268,"@@ -176,6 +178,39 @@ export class KeybindingsEditor extends BaseEditor implements IKeybindingsEditor
 		return focusedElement && focusedElement.templateId === KEYBINDING_ENTRY_TEMPLATE_ID ? <IKeybindingItemEntry>focusedElement : null;
 	}
 
+	setKeybindingSource(searchString: string): TPromise<any> {
+		this.searchWidget.setValue(searchString);
+		return TPromise.as(null);
+	}
+
+	showDefaultKeyBindings(): IAction {",Inline the action,I don't think we need to return a promise here.
269,"@@ -177,14 +177,15 @@ export class TerminalPanel extends Panel {
 		this.terminal.refresh(0, this.terminal.rows);
 	}
 
-	/**
-	 * Set the terminal font to `terminal.integrated.fontFamily` if it is set, otherwise fallback to
-	 * `editor.fontFamily`.
-	 */
-	private setTerminalFont(): void {
-		this.terminalDomElement.style.fontFamily = this.configurationHelper.getFontFamily();
+	private updateFont(): void {
+		this.font = this.configurationHelper.getFont();","Fix indentation
",Why do we need to update the font?
270,"@@ -177,6 +177,33 @@ suite('Event',function(){
 			Errors.setUnexpectedErrorHandler(origErrorHandler);
 		}
 	});
+
+	test('Debounce Event', function () {","since this test is async (setTimeout) you must add the `done` parameter and call it. Alternatively make this test return a promise.
",
271,"@@ -177,7 +178,7 @@ suite('Workbench - TerminalConfigHelper', () => {
 		let configHelper: TerminalConfigHelper;
 
 		configHelper = new TerminalConfigHelper(Platform.Linux, configurationService, fixture);
-		assert.deepEqual(configHelper.getTheme('hc-black foo'), [","Just pass in the base theme IDs for the tests and this is good to go.

``` js
assert.deepEqual(configHelper.getTheme('hc-black'), [
```
","assert.deepEqual(configHelper.getTheme('hc-black'), ["
272,"@@ -178,9 +174,9 @@ export class CodeWindow implements ICodeWindow {
 		}
 
 		let useCustomTitleStyle = false;
-		if (isMacintosh && (!windowConfig || !windowConfig.titleBarStyle || windowConfig.titleBarStyle === 'custom')) {
+		if ((isWindows || isMacintosh) && (!windowConfig || !windowConfig.titleBarStyle || windowConfig.titleBarStyle === 'custom')) {
 			const isDev = !this.environmentService.isBuilt || !!config.extensionDevelopmentPath;
-			if (!isDev) {
+			if (!isMacintosh || !isDev) {",Why adding `!isMacintosh` here? Wouldn't that break the custom titlebar on Macs?,Why is this change needed?
273,"@@ -1783,6 +1783,43 @@ export class OpenResourcesAction extends Action {
 	}
 }
 
+export class OpenRecentlyClosedResourcesAction extends Action {
+
+	public static ID = 'workbench.files.action.openRecentlyClosedFile';
+	public static LABEL = nls.localize('openRecentlyClosedFile', ""Open Recently Closed File"");","Same naming concerns, also for ID
",I don't think we need this class. It's only used in one place.
274,"@@ -179,6 +179,7 @@ class VariablesActionProvider implements IActionProvider {
 		const actions: IAction[] = [];
 		const variable = <Variable>element;
 		actions.push(new SetValueAction(SetValueAction.ID, SetValueAction.LABEL, variable, this.debugService, this.keybindingService));
+		actions.push(new CopyPropertyPathAction(CopyPropertyPathAction.ID, CopyPropertyPathAction.LABEL, variable));","Set Value and Copy Value should be first, So CopyEvaluatePathAction should come third",// CopyPropertyPathAction
275,"@@ -18,6 +18,13 @@ import { Selection, ISelection } from 'vs/editor/common/core/selection';
 import { IIdentifiedSingleEditOperation, ITextModel, EndOfLineSequence } from 'vs/editor/common/model';
 import { IProgressRunner } from 'vs/platform/progress/common/progress';
 import { ICodeEditor } from 'vs/editor/browser/editorBrowser';
+import { IResourceRename, IResourceCreate } from 'vs/editor/common/modes';
+
+export interface IResourceFileEdit {
+	readonly renamedResources: { from: URI, to }[];",`:URI`,Why do we need this interface?
276,"@@ -18,6 +18,7 @@ import { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/
 class TwitterFeedbackService implements IFeedbackService {
 
 	private static TWITTER_URL: string = 'https://twitter.com/intent/tweet';
+	private static TWITTER_MESSAGE_SIZE: number = 280;","I think this limit is only 280 for languages other than Chinese, Japanese etc. So I am not sure how to best configure it, we should probably have to check for the language that is used.",nit: `TWITTER_MESSAGE_SIZE: number = 280`
277,"@@ -18,7 +18,10 @@ import {IContextViewService} from 'vs/platform/contextview/browser/contextView';
 import {IEventService} from 'vs/platform/event/common/event';
 
 const DEFAULT_MIN_PART_WIDTH = 170;
+const DEFAULT_MIN_PANEL_PART_HEIGHT = 170;
 const HIDE_SIDEBAR_WIDTH_THRESHOLD = 50;
+const HIDE_PANEL_HEIGHT_THRESHOLD = 50;","@isidorn is this (HIDE_PANEL_HEIGHT_THRESHOLD) used at all? I think we can let it hide when you make it small and treat the fact that you cannot size it back as a bug for the future :)
",I don't think we need this constant.
278,"@@ -18,7 +18,6 @@ import { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition, IViewZone, IViewZo
 export interface IOptions {
 	showFrame?: boolean;","Make sure that references widget, peek view widget, error list widget and breakpoint widget are rendered the same as before.",interface IOptions
279,"@@ -18,7 +18,6 @@ import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace
 import { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';",Please do not change `watermark.ts`,import { IWorkbenchContributionRegistry } from 'vs/workbench/common';
280,"@@ -180,6 +180,10 @@ export class ExplorerViewlet extends Viewlet {
 		return this.actionRunner;
 	}
 
+	public getOptimalWidth(): number {
+		return this.getExplorerView().getOptimalWidth();
+	}
+","You need to take the working files view into account too. Note that explorer view can be different when you open no workspace (no folder).
",This method is not used.
281,"@@ -180,6 +180,13 @@ export interface IEditorOptions {
 	pinned?: boolean;
 
 	/**
+	 * Editor that is being shown with an `forcePreview` will override the `enablePreview` setting
+	 * of the workspace configuration to allow the editor to be shown as a preview editor while
+	 * selecting in the quick open widgets.
+	 */
+	forcePreview?: boolean;","@wprater this is good but the comment should not mention quick open scenario, I think its a valid override in any case, there may be more.
","I think this should be `<msg>I'm not sure if this is the right way to go about it, but I'm not sure if this is the right way to go about it."
282,"@@ -1812,6 +1812,56 @@ declare module 'vscode' {
 	 */
 	export type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;
 
+	/**
+	 * Scope of a code action.
+	 *
+	 * Specifies the type of a code action. A scope is a hierarchical list of identifiers separated by `.`, e.g. `""refactoring.extract.function""`.
+	 */
+	export class CodeActionScope {",Maybe `CodeActionKind` is the better name because this is about the 'character' of a code action and because we have been using ...Kind already for similar purposes...,Why do we need this class?
283,"@@ -1812,6 +1812,56 @@ declare module 'vscode' {
 	 */
 	export type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;
 
+	/**
+	 * Scope of a code action.
+	 *
+	 * Specifies the type of a code action. A scope is a hierarchical list of identifiers separated by `.`, e.g. `""refactoring.extract.function""`.
+	 */
+	export class CodeActionScope {
+		/**
+		 * Empty scope.
+		 */
+		public static readonly Empty: CodeActionScope;",no `public`,Why do we need this?
284,"@@ -182,6 +187,10 @@ export class TimeBasedVariableResolver implements VariableResolver {
 
 	resolve(variable: Variable): string {
 		const { name } = variable;
+		const dayNames = [nls.localize('Sunday', ""Sunday""), nls.localize('Monday', ""Monday""), nls.localize('Tuesday', ""Tuesday""), nls.localize('Wednesday', ""Wednesday""), nls.localize('Thursday', ""Thursday""), nls.localize('Friday', ""Friday""), nls.localize('Saturday', ""Saturday"")];",It would be better to keep those as static readonly propoerties because we don't need to recompute those string-arrays all the time. Otherwise looking good.,"const dayNames: Array<string> = [nls.localize('Sunday', ""Sunday""), nls.localize('Tuesday', ""Tuesday"")];"
285,"@@ -182,7 +183,7 @@ export abstract class KeybindingService implements IKeybindingService {
 				e.preventDefault();
 			}
 			let commandId = resolveResult.commandId.replace(/^\^/, '');
-			this._commandService.executeCommand(commandId, resolveResult.commandArgs || {}).done(undefined, err => {
+			this._commandService.executeCommand(commandId, objects.assign({ from: 'keybinding' }, resolveResult.commandArgs || {})).done(undefined, err => {",Not sure if copying the arguments object is save here. What are the cases that come into play?,Why do we need to assign here?
286,"@@ -1821,6 +1871,13 @@ declare module 'vscode' {
 		 * An array of diagnostics.
 		 */
 		readonly diagnostics: Diagnostic[];
+
+		/**
+		 * Requested scope of actions to return.
+		 *
+		 * Actions not within this scope are filtered out before being shown by the lightbulb.
+		 */
+		readonly requestedScope?: CodeActionScope;","Maybe use a for with for select-semantics, like `only`?",Should this be `CodeActionScope`?
287,"@@ -184,7 +192,11 @@ export class GotoLineHandler extends QuickOpenHandler {
 			this.lastKnownEditorViewState = (<IEditor>editor.getControl()).saveViewState();
 		}
 
-		return TPromise.as(new QuickOpenModel([new GotoLineEntry(searchValue, this.editorService, this)]));
+		const entry = this.instantiationService.createInstance(","@wprater you do not need to pass in the services, just do: `this.instantiationService.createInstance(GotoLineEntry, searchValue)`

All services will be passed in automatically.
",Why is this change needed?
288,"@@ -184,8 +185,35 @@ export class ReferencesController implements editorCommon.IEditorContribution {
 				return undefined;
 			});
 
+		};
+
+		let firstUpdate = true;
+		const aggregatedLocations: Location[] = [];
+		const promise = modelPromise.then(result => {
+			if (result instanceof ReferencesModel) {
+				return handleModel(result);
+			}
+			// All results should have been received via progress.
+			alert(this._model.getAriaMessage());",do this in a `.then` instead,Why do we need this?
289,"@@ -184,9 +186,10 @@ export class FocusProcessActionItem extends SelectActionItem {
 	constructor(
 		action: IAction,
 		@IDebugService private debugService: IDebugService,
-		@IThemeService themeService: IThemeService
+		@IThemeService themeService: IThemeService,
+		@IContextViewService private contextViewService: IContextViewService",@cleidigh remove `private` here to fix the warning,Why do we need this?
290,"@@ -185,6 +186,7 @@ class ExplorerViewersActionContributor extends ActionBarContributor {
 const actionBarRegistry = Registry.as<IActionBarRegistry>(ActionBarExtensions.Actionbar);
 actionBarRegistry.registerActionBarContributor(Scope.VIEWER, FilesViewerActionContributor);
 actionBarRegistry.registerActionBarContributor(Scope.VIEWER, ExplorerViewersActionContributor);
+actionBarRegistry.registerActionBarContributor(Scope.VIEWER, TerminalExplorerViewerActionContributor);",This should move into `execution-contribution.ts`,I'm not sure if this is the right place to put this. It seems like it should be at the top of the file.
291,"@@ -185,8 +187,8 @@ class ShrinkSelectionAction extends AbstractSmartSelect {
 	constructor() {
 		super(false, {
 			id: 'editor.action.smartSelect.shrink',
-			label: nls.localize('smartSelect.shrink', ""Shrink Select""),
-			alias: 'Shrink Select',
+			label: nls.localize('smartSelect.shrink', ""Shrink Selection""),
+			alias: 'Shrink Selection',","Side note, I am making this change after talking with @gregvanl about the new feature. This will standardize all selection commands to use the word ""selection.""","I think this should be ""Shrink Selection"""
292,"@@ -186,10 +194,6 @@
 
 /* No Tab Close Button */
 
-.monaco-workbench > .part.editor > .content > .one-editor-silo > .container > .title .tabs-container > .tab.close-button-off {",@Dari-K is that an oversight that you removed this rule for good?,.part
293,"@@ -187,7 +187,7 @@ MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
 	group: 'navigation',
 	order: 40,
 	command: copyPathCommand,
-	when: ResourceContextKey.HasResource",@isidorn `IsFile` is a bit more specific and so it would only copy the path for files and remote resources.,"name: 'copyPath',"
294,"@@ -189,6 +189,10 @@ export class BaseDebugController extends treedefaults.DefaultController {
 ","Looks good.
",Why is this needed?
295,"@@ -1896,6 +1896,13 @@ declare module 'vscode' {
 		resolveCodeLens?(codeLens: CodeLens, token: CancellationToken): ProviderResult<CodeLens>;
 	}
 
+	export class DefinitionAndSpan {","We may want to make this use a single definition instead:

```ts
 class DefinitionAndSpan {
 		span: Location;
 		definition: Location;
}
```

My original thinking was to bundle the concept of a definition into a class, i.e. this text range corresponds to these X definitions. However I'm not sure this makes sense since we later flatten out the definition list in the UI anyways",
296,"@@ -19,6 +19,13 @@ export const TERMINAL_FOREGROUND_COLOR = registerColor('terminal.foreground', {
 	dark: '#CCCCCC',
 	hc: '#FFFFFF'
 }, nls.localize('terminal.foreground', 'The foreground color of the terminal.'));
+export const TERMINAL_CURSOR_FOREGROUND_COLOR = registerColor('terminalCursor.foreground', {
+	light: '#333333',",I think we should set the defaults to null and dynamically pull the inverted `terminal.background`/`.foreground` when they're null.,"I think this should be `#333333`, not `#333333`."
297,"@@ -19,6 +19,7 @@ import { CodeActionKind, CodeActionTrigger } from './codeActionTrigger';
 
 export const HAS_REFACTOR_PROVIDER = new RawContextKey<boolean>('hasRefactorProvider', false);
 export const HAS_SOURCE_ACTION_PROVIDER = new RawContextKey<boolean>('hasSourceActionProvider', false);
+export const HAS_ORGANIZE_IMPORTS_PROVIDER = new RawContextKey<boolean>('hasOrganizeImportsActionProvider', false);",Can we have a more generic context key? We could use equality or the regex support. Something like `supportedCodeAction ~= /source\.organizeImports.*/`,"export const HAS_ORGANIZE_IMPORTS = new RawContextKey<boolean>('hasOrganizeImports', false);"
298,"@@ -19,6 +19,9 @@ import 'vs/editor/browser/editor.all';
 // Menus/Actions
 import 'vs/platform/actions/browser/menusExtensionPoint';
 
+// External Explorers
+import ""vs/platform/explorers/browser/explorerExtensionPoint"";","[needs change] Please move this file into the `workbench` folder, only shared services (between editor/workbench) and things around it should be in `platform`
",import 'vs/platform/explorers';
299,"@@ -19,6 +19,9 @@ import 'vs/editor/browser/editor.all';
 // Menus/Actions
 import 'vs/platform/actions/browser/menusExtensionPoint';
 
+// External Explorers
+import ""vs/workbench/browser/explorerExtensionPoint"";","@octref as mentioned, suggest to move this into `vs/workbench/parts/explorers` and move this down to the other contributions or actually just add the code to one of the contribution files you already have.
","import ""vs/workbench/browser/explorerExtensionPoint"";"
300,"@@ -19,7 +19,7 @@ function create(relativePath: string): StatResolver {
 	let absolutePath = relativePath ? path.join(basePath, relativePath) : basePath;
 	let fsStat = fs.statSync(absolutePath);
 
-	return new StatResolver(uri.file(absolutePath), fsStat.isDirectory(), fsStat.mtime.getTime(), fsStat.size, void 0);
+	return new StatResolver(uri.file(absolutePath), fsStat.isSymbolicLink(), fsStat.isDirectory(), fsStat.mtime.getTime(), fsStat.size, void 0);",@isidorn can we have a test for this too? it looks like node.js allows to create symlinks (`fs.symlink`). ,`isSymbolicLink` should be `isSymbolicLink`
301,"@@ -190,7 +190,10 @@ class CheckoutCommand implements ICommand {
 		if (currentHeadMatches.length > 0) {
 			entries.unshift(new CurrentHeadEntry(this.gitService, this.messageService, currentHeadMatches[0].head, currentHeadMatches[0].highlights));
 
-		} else if (exactMatches.length === 0 && isValidBranchName(input)) {
+		} else if (exactMatches.length === 0) {
+			if (!isValidBranchName(input)) {
+			input = correctBranchName(input);","Could we do the same for the `git branch` command?
",Why do we need this change?
302,"@@ -190,9 +191,12 @@ export class TerminalService implements ITerminalService {
 
 		if (processCount === 0 && !name) {
 			name = this.nextTerminalName;
+			shellPath = this.nextTerminalShellPath;","Create the config here so that the config isn't tracked in 2 vars:

``` ts
private _nextTerminalConfiguration: ITerminalProcessConfiguration;

...

if (processCount === 0 && !name) {
  this._nextTerminalConfiguration = {
    name: ...
    shellPath: ...
  };
} else {
  ...
}
```
",Why do we need this?
303,"@@ -192,6 +197,18 @@ export class SettingsDocument {
 		return Promise.resolve([]);
 	}
 
+	private provideDefaultLanguageCompletionItems(location: Location, range: vscode.Range): vscode.ProviderResult<vscode.CompletionItem[]> {","Can we make this method reused between the two clients calling `vscode.languages.getLanguages` here, it seems there is quite a bit of overlap",nit: `return Promise.resolve([]);`
304,"@@ -193,6 +193,11 @@ configurationRegistry.registerConfiguration({
 			'type': 'boolean',
 			'default': false
 		},
+		'terminal.integrated.hideTerminalReuseAlert': {",The `terminal.integrated` namespace currently doesn't have anything related to tasks/debug in it AFAIK. @dbaeumer is there a tasks settings namespace?,
305,"@@ -193,6 +214,10 @@ export class EditorGroupsControl extends Themable implements IEditorGroupsContro
 		return this.layoutVertically ? EditorGroupsControl.MIN_EDITOR_WIDTH : EditorGroupsControl.MIN_EDITOR_HEIGHT;
 	}
 
+	private get visibleSilos(): number {","This is not needed, use `this.editorGroupService.getStacksModel().groups.length`",I don't think we need this method.
306,"@@ -194,7 +194,11 @@ export abstract class SimpleFindWidget extends Widget {
 		return this._domNode;
 	}
 
-	public reveal(): void {
+	public reveal(initialInput?: string): void {
+		if (typeof initialInput !== 'undefined') {",`if (initialInput) {` should be sufficient and looks cleaner imo,Why do we need this check?
307,"@@ -1942,6 +1942,11 @@ declare module 'vscode' {
 		 */
 		static readonly Source: CodeActionKind;
 
+		/**
+		 * Base kind for an organize imports source action.",Please document the actual value,Nit: `Source` -> `SourceKind`
308,"@@ -196,6 +200,15 @@ export class VSCodeMenu {
 			updateMenu = true;
 		}
 
+		let newAutoHideMenuBar = config && config.window && config.window.autoHideMenuBar;",I think this should move out of `menu.ts` into `window.ts` because it rather belongs there. You can have the same listener installed in `window.ts` and do the updating. Also note that I think it should only update if the menu is actually hidden.,if (updateMenu) {
309,"@@ -196,7 +196,7 @@ abstract class OpenTaskConfigurationAction extends Action {
 	}
 }
 
-class ConfigureTaskRunnerAction extends OpenTaskConfigurationAction {
+export class ConfigureTaskRunnerAction extends OpenTaskConfigurationAction {","If you aren't exposing these actions from the panel, I think you can clean up these changes too.",Why do we need this?
310,"@@ -1962,6 +1962,63 @@ declare namespace vscode {
 	}
 
 	/**
+	 * Reasons for which completion can be triggered.
+	 */
+	export enum CompletionTriggerReason {
+
+		/**
+		 * Invoked by the user, e.g. by hitting `Ctrl+Space`
+		 */
+		OnManualInvocation = 1,
+
+		/**
+		 * When a trigger character was types or when the configuration","`s/types/typed/`
",I'm not sure if this is the right place to put this. I think it would be better to put this in the `CompletionTrigger` class.
311,"@@ -197,17 +198,25 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 		this._checkGlobalTSCVersion = true;
 		this.trace = this.readTrace();
 		this.tsServerLogLevel = this.readTsServerLogLevel();
+		this.checkJs = this.readCheckJs();
+
 		disposables.push(workspace.onDidChangeConfiguration(() => {
 			let oldLoggingLevel = this.tsServerLogLevel;",Managing config like this is becoming pretty old. I'll look into refactoring this logic to be clearer in another change,Why do we need this?
312,"@@ -197,4 +206,24 @@ export class TerminalService implements ITerminalService {
 		}
 		return terminalIndex;
 	}
+
+	public updateConfig(): void {
+		this.terminalInstances.forEach((instance) => {
+			this._updateCursorBlink(instance);
+			this._updateCommandsToSkipShell(instance);
+			this._updateScrollback(instance);
+		});
+	}
+
+	private _updateCursorBlink(terminalInstance): void {
+		terminalInstance.setCursorBlink(this.configHelper.getCursorBlink());",I think it would make sense to just roll these 3 single line functions into `updateConfig` now.,Why do we need to call `updateConfig` here?
313,"@@ -197,6 +197,21 @@ configurationRegistry.registerConfiguration({
 				DeleteWordLeftTerminalAction.ID,
 				DeleteWordRightTerminalAction.ID
 			].sort()
+		},
+		'terminal.integrated.envVars.osx': {
+			'description': nls.localize('terminal.integrated.envVars.osx', ""Object with environment variables that will be passed to the terminal on OS X""),","The description should be clear that this is adding these to the environment, not replacing the entire environment",I don't think you need the `.sort()` here.
314,"@@ -197,6 +197,30 @@ suite('Tests for Wrap with Abbreviations', () => {
 		});
 	});
 
+	test('Wrap with multiline abbreviation doesnt add extra spaces', () => {",Add the bug id here in the test name,"test('Wrap with multiline abbreviation doesnt add extra spaces', () => {"
315,"@@ -197,6 +212,16 @@ KeybindingsRegistry.registerCommandAndKeybindingRule({
 	handler: closeActiveReferenceSearch
 });
 
+KeybindingsRegistry.registerCommandAndKeybindingRule({
+	id: 'openReferenceToSide',
+	weight: KeybindingsRegistry.WEIGHT.editorContrib(),
+	primary: KeyMod.CtrlCmd | KeyCode.Enter,
+	mac: {
+		primary: KeyMod.WinCtrl | KeyCode.Enter",Why not `cmd` on macs? We use that in the explorer and elsewhere,This should be `KeybindingsRegistry.WEIGHT.editorContrib()`
316,"@@ -197,6 +212,16 @@ KeybindingsRegistry.registerCommandAndKeybindingRule({
 	handler: closeActiveReferenceSearch
 });
 
+KeybindingsRegistry.registerCommandAndKeybindingRule({
+	id: 'openReferenceToSide',
+	weight: KeybindingsRegistry.WEIGHT.workbenchContrib(50),
+	primary: KeyMod.CtrlCmd | KeyCode.Enter,
+	mac: {
+		primary: KeyMod.WinCtrl | KeyCode.Enter",Why isn't this `CtrlCmd`?,This should be `KeybindingsRegistry.WEIGHT.workbenchContrib(50)`
317,"@@ -1987,6 +1987,13 @@ declare module 'vscode' {
 		 */
 		readonly diagnostics: Diagnostic[];
 
+		/**
+		 * The current selection in the editor.
+		 *
+		 * Undefined if there is no current selection.",`undefined` instead Undefined,Should this be `undefined` or `null`?
318,"@@ -199,16 +199,25 @@ export class UntitledEditorInput extends EditorInput implements IEncodingSupport
 	}
 
 	public suggestFileName(): string {
+		var FileName: string;",Use `let` instead of `var` as a good practice. Also according to the [coding guidelines](https://github.com/Microsoft/vscode/wiki/Coding-Guidelines) `Use camelCase for property names and local variables`,
319,"@@ -199,6 +199,9 @@ export function createApiFactory(
 			getLanguages(): TPromise<string[]> {
 				return extHostLanguages.getLanguages();
 			},
+			getLanguage(resource: vscode.Uri, position?: vscode.Position): TPromise<string> {
+				return extHostLanguages.getLanguage(<URI>resource, position ? { lineNumber: position.line, column: position.character } : undefined);","That won't work because the API-position is zero-based, the internal-position is 1-based. Use `extHostTypeConverter` here.","nit: `getLanguage(resource: URI, position?: vscode.Position)`"
320,"@@ -1990,6 +1993,58 @@ export function getWellFormedFileName(filename: string): string {
 	return filename;
 }
 
+export const SHOW_MODIFICATIONS_SCHEME = 'showModifications';
+export class ShowModificationsAction extends Action implements ITextModelContentProvider {",I suggest to also make this action available via keybinding and command list (Cmd+Shift+P). As such it should be registered as a global action and in that case just use the current active editor as thing to compare. The action would simply do nothing if there is no active file opened or that file is not dirty.,
321,"@@ -2,6 +2,7 @@
  *  Copyright (c) Microsoft Corporation. All rights reserved.",Looks good,*
322,"@@ -2,7 +2,9 @@
 
 [VS Code](http://code.visualstudio.com) is a new type of tool that combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. Code provides comprehensive editing and debugging support, an extensibility model, and lightweight integration with existing tools.
 
-<img width=""550"" alt=""vscodereadme"" align=""middle""  src=""https://cloud.githubusercontent.com/assets/1487073/11243985/98562110-8e0b-11e5-9922-29a0b4884eab.png"">","`alt` text should probably be `""""` as the image doesn't really convey information. @chrisdias any reason for adding it initially?
",Why was this removed?
323,"@@ -20,6 +20,12 @@ export const STATUS_BAR_DEBUGGING_BACKGROUND = registerColor('statusBar.debuggin
 	hc: '#CC6633'
 }, localize('statusBarDebuggingBackground', ""Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window""));
 
+export const STATUS_BAR_DEBUGGING_FOREGROUND = registerColor('statusBar.debuggingForeground', {
+	dark: '#FFFFFF',","Same here, use `STATUS_BAR_FOREGROUND` as default",I think this should be `#CC6633`
324,"@@ -20,6 +20,7 @@ export const HIGH_CONTRAST = 'hc';
 export type ThemeType = 'light' | 'dark' | 'hc';
 
 export interface ITheme {
+	readonly name: string;","The reason for adding a new field here is give us a human readable identifier to workwith in css rules. The `selector` is something like `vs.vscode-theme-solarized-light-themes-solarized-light-color-theme-json` for example. 

I wasn't exactly sure what this new field should be called though. `name` seemed like the best fit but `label` and `id`are also used in the codebase",Why do we need this?
325,"@@ -20,7 +20,22 @@ export const ILifecycleService = createDecorator<ILifecycleService>('lifecycleSe
  */
 export interface ShutdownEvent {
 	veto(value: boolean | TPromise<boolean>): void;
-	quitRequested: boolean;
+	reason: ShutdownReason;
+}
+
+export enum ShutdownReason {
+
+	/** Window is closed */
+	CLOSE,
+
+	/** Application is quit */
+	QUIT,
+
+	/** Window is reloaded */
+	RELOAD,
+
+	/** Other configuration loaded into window */",I'm a little unsure what LOAD is.,I don't think we need to export this.
326,"@@ -200,6 +200,11 @@ let properties: { [path: string]: IJSONSchema; } = {
 		'type': 'boolean',
 		'default': false,
 		'description': nls.localize('showFullPath', ""If enabled, will show the full path of opened files in the window title."")
+	},","Two things:
* this setting should be wrapped around a isLinux/isWindows check so that it does not show up on macOS where it is not supported
* I find the setting name a bit confusing because `autoHideMenuBar` is not really clear other than that it matches the Electron method we are using it for. I would try to change it to the intent it actually does (if this option is set to true, you can press Alt key to show the menu even if the menu is hidden)",Please add a trailing comma.
327,"@@ -2013,6 +2129,32 @@ export class EditorGroupsControl extends Themable implements IEditorGroupsContro
 			}
 		});
 
+		// Layout centered Editor
+		const doCentering =
+			this.layoutVertically &&
+			this.visibleSilos === 1 &&
+			this.partService.isCenteredLayoutActive() &&
+			this.visibleEditors[Position.ONE] instanceof TextResourceEditor;","This `instanceof` check is definetely not needed, it makes the behavior of this feature unpredictable, and I am not sure what is the reason for this limiation",Why do we need this check?
328,"@@ -2013,6 +2143,32 @@ export class EditorGroupsControl extends Themable implements IEditorGroupsContro
 			}
 		});
 
+		// Layout centered Editor
+		const doCentering =
+			this.layoutVertically &&
+			this.editorGroupService.getStacksModel().groups.length === 1 &&
+			this.partService.isLayoutCentered() &&
+			this.visibleEditors[Position.ONE] instanceof TextResourceEditor;","Yeah definetely remove this instanceof check, since the feature does not behave like it should with it. @bpasero was unable to try it out.",Why do we need this check?
329,"@@ -202,6 +204,7 @@ export class Workbench implements IPartService {
 	private editorsVisibleContext: IContextKey<boolean>;
 	private inZenMode: IContextKey<boolean>;
 	private hasFilesToCreateOpenOrDiff: boolean;
+	private fontAliasing: string;",You can make this type: `private fontAliasing: 'default' | 'antialiased' | 'none'`,Should this be `IContextKey<string>`?
330,"@@ -203,11 +203,10 @@ export class ExtHostApiCommands {
 			});
 
 		this._register('vscode.diff', (left: URI, right: URI, label: string, options?: vscode.TextDocumentShowOptions) => {
-
 			let editorOptions: IEditorOptions;
 			if (options) {
 				editorOptions = {
-					pinned: !options.preview,
+					pinned: options.preview === undefined ? undefined : !options.preview,",I better like: `typeof options.preview === 'boolean' ? !options.preview : undefined`,`options.preview === undefined ? undefined : options.preview`
331,"@@ -203,6 +203,14 @@ let properties: { [path: string]: IJSONSchema; } = {
 	}
 };
 
+if (platform.isWindows) {
+	properties['window.autoDetectHighContrast'] = {
+		'type': 'boolean',
+		'default': true,
+		'description': nls.localize('autoDetectHighContrast', ""If enabled, will automatically change to high contrast theme if Windows is using a high contrast theme."")
+	}",Missing trailing comma.,Shouldn't this be `if (platform.isWindows) {`?
332,"@@ -204,6 +204,28 @@ export class TerminalPanel extends Panel {
 				event.stopPropagation();
 			}
 		}));
+		this._register(DOM.addDisposableListener(this._parentDomElement, DOM.EventType.DROP, (e: DragEvent) => {
+			if (e.target === this._parentDomElement || DOM.isAncestor(e.target as HTMLElement, this._parentDomElement)) {
+				if (!e.dataTransfer) {
+					return;
+				}
+				const url = e.dataTransfer.getData('URL');
+				const filePath = this._getPathFromUrl(url);","Instead of doing this you should use `Uri.file(path)`, you should then be able to extract the path in the correct format from that class. https://github.com/Microsoft/vscode/blob/d02567a2e43203f20d4a1daf1ca7c489be033a4b/src/vs/base/common/uri.ts#L215",Why do we need this check?
333,"@@ -207,6 +207,32 @@ const editorConfiguration: IConfigurationNode = {
 			'default': 'on',
 			'description': nls.localize('lineNumbers', ""Controls the display of line numbers. Possible values are 'on', 'off', and 'relative'. 'relative' shows the line count from the current cursor position."")
 		},
+		'editor.lineNumberInterval': {","IMHO, the introduction of the OR type makes this setting too difficult to configure. It is technically correct, but does not align with the other editor settings.

> I would remove the usage of the OR type.",'editor.lineNumberInterval': {
334,"@@ -207,7 +207,15 @@ export class ActivityActionItem extends BaseActionItem {
 			// Number
 			if (badge instanceof NumberBadge) {
 				if (badge.number) {
-					this.$badgeContent.text(badge.number > 99 ? '99+' : badge.number.toString());
+					let number;
+					if (badge.number > 9999) {
+						number = '10k+';
+					} else if (badge.number > 999) {
+						number = (badge.number / 1000).toFixed(1).replace(/\.0$/, '') + 'k';","IMHO this just seems like too complex of a logic. 
Can we use something like 

```
badge.number.toString()[0] + 'k'
```",I think this should be `.toFixed(1) + 'k'`
335,"@@ -208,6 +214,11 @@ export class Workbench implements IPartService {
 				viewletAndEditorPromises.push(this.sidebarPart.openViewlet(viewletId, false).then(() => viewletTimerEvent.stop()));
 			}
 
+			if (!this.panelHidden) {
+				const panelId = this.storageService.get(PanelPart.activePanelSettingsKey, StorageScope.WORKSPACE);
+				viewletAndEditorPromises.push(this.panelPart.openPanel(panelId, false));","@isidorn viewletAndEditorPromises => createCompositesPromises or so :)
",Why do we need this?
336,"@@ -21,13 +23,29 @@ export class BackupMainService implements IBackupMainService {
 	private workspacesJsonContent: IBackupWorkspacesFormat;
 
 	constructor(
-		@IEnvironmentService environmentService: IEnvironmentService
+		@IEnvironmentService environmentService: IEnvironmentService,
+		@ILifecycleService lifecycleService: ILifecycleService
 	) {
 		this.backupHome = environmentService.backupHome;
 		this.workspacesJsonPath = environmentService.backupWorkspacesPath;
+
+		if (lifecycleService) {","@Tyriar I am not a big fan of this pattern where we check for services to be present. if you have a test, make sure it includes a sufficient test lifecycle service.
",Why do we need this?
337,"@@ -210,6 +211,28 @@ export class RunAction extends StartAction {
 	}
 }
 
+export class LaunchAction extends RunAction {",Extend from abstractdebugAction,
338,"@@ -211,6 +214,10 @@ export class TabsTitleControl extends TitleControl {
 			}
 		}));
 
+		// Configuration updates",Can we try to put this into the [`ITabOptions`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/group/common/groupService.ts#L22) bag and use the related [`IEditorGroupsService.onTabOptionsChanged`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/group/common/groupService.ts#L65) event?,
339,"@@ -211,6 +214,10 @@ export class TabsTitleControl extends TitleControl {
 			}
 		}));
 
+		// Configuration updates
+		this.toUnbind.push(this.configurationService.onDidUpdateConfiguration(() => this.onConfigurationChanged()));",I typically prefer to setup listeners from the constructor via `registerListeners` (see in parent class: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/parts/editor/titleControl.ts#L146). Can we do the same in this class and call the super one?,Why do we need this?
340,"@@ -211,6 +214,10 @@ export class TabsTitleControl extends TitleControl {
 			}
 		}));
 
+		// Configuration updates
+		this.toUnbind.push(this.configurationService.onDidUpdateConfiguration(() => this.onConfigurationChanged()));
+		this.onConfigurationChanged();",This call seems to cause an update even though we are in the middle of creating the control. I would add an extra flag to not cause an update if this method is being called from construction phase.,Shouldn't this be `this.onConfigurationChanged()`?
341,"@@ -211,7 +211,8 @@ export class EditorGroupsControl implements IEditorGroupsControl, IVerticalSashL
 	}
 
 	private updateTabOptions(tabOptions: ITabOptions, refresh?: boolean): void {
-		const showTabCloseButton = this.tabOptions ? this.tabOptions.showTabCloseButton : false;
+		const tabCloseButton = this.tabOptions ? this.tabOptions.tabCloseButton : 'right';
+		const showTabCloseButton =  this.tabOptions ? this.tabOptions.showTabCloseButton : false;",Just delete support for `showTabCloseButton` option since it is now supported via your `tabCloseButton` setting.,Why do we need this change?
342,"@@ -212,7 +212,8 @@ function packageTask(platform, arch, opts) {
 			'vs/workbench/electron-browser/workbench.main.js',
 			'vs/workbench/electron-browser/workbench.main.css',
 			'vs/workbench/electron-browser/bootstrap/index.html',
-			'vs/workbench/electron-browser/bootstrap/index.js'
+			'vs/workbench/electron-browser/bootstrap/index.js',
+			'vs/workbench/electron-browser/bootstrap/preload.js'",@mjbvz make sure to run a test build and verify that this file is included in the produced drop,I think this should be `preload.js`
343,"@@ -212,8 +212,19 @@ class DataSource implements tree.IDataSource {
 	}
 }
 
+/**
+ * RevealedReference wraps an optional OneReference.
+ * This allows RevealedReference to be passed around (i.e. to Controller)
+ * and updates to the reference can be seen.
+ */
+type RevealedReference = { ref: OneReference | undefined };","I am unsure if the Controller should own the state of what is expanded & revealed or if the ReferenceWidget should own the state. Currently the ReferenceWidget does not retain a reference to the Controller and I am unfamiliar with the lifecycle, so this implementation has the ReferenceWidget owning this state and passing it through to the controller.",I think this should be `OneReference | null`.
344,"@@ -2146,64 +2156,6 @@ suite('Editor Controller - Regression tests', () => {
 		});
 	});
 
-	test('issue Microsoft/monaco-editor#108 part 1/2: Auto indentation on Enter with selection is half broken', () => {",Move it to indentation related test suite and uses indent rules instead of mocking `enterAction`.,"test('issue Microsoft/monaco-editor#108 part 1/2: Auto indentation on Enter with selection is half broken', () => {"
345,"@@ -215,10 +215,21 @@ export class RestartAction extends AbstractDebugAction {
 	static LABEL = nls.localize('restartDebug', ""Restart"");
 	static RECONNECT_LABEL = nls.localize('reconnectDebug', ""Reconnect"");
 
-	constructor(id: string, label: string, @IDebugService debugService: IDebugService, @IKeybindingService keybindingService: IKeybindingService) {
+	private startAction: StartAction;","You should not create an instance of the startAction, but simply call into debugService to start the session, instead of callin action.run()",Why do we need this?
346,"@@ -217,6 +233,12 @@ export class TextFileEditorModelManager implements ITextFileEditorModelManager {
 						break;
 				}
 			});
+
+			// Install model content change listener
+			this.mapResourceToModelContentChangeListener[resource.toString()] = model.onDidContentChange(() => {
+				const newEvent = new TextFileModelChangeEvent(model, StateChange.CONTENT_CHANGE);","@Tyriar I do not see a reason to create an object here each time a character is typed. the untitled event just sends around its resource URI and I would do the same thing here for files.

Cannot say it often enough, this model content change event WILL FIRE like CRAZY. And perf is a hot topic after hot exit :)
",Why do we need this?
347,"@@ -22,10 +23,16 @@ export interface IBackupMainService {
 	 */
 	getWorkspaceBackupPaths(): string[];
 
+	// TODO: Doc
+	getEmptyWorkspaceBackupWindowIds(): string[];
+
 	/**
 	 * Pushes workspace backup paths to be tracked for restoration.
 	 *
 	 * @param workspaces The workspaces to add.
 	 */
 	pushWorkspaceBackupPathsSync(workspaces: Uri[]): void;
+
+	// TODO: Doc
+	pushEmptyWorkspaceBackupWindowIdSync(vscodeWindowId: string): void;",@Tyriar maybe merge both methods into one and the return type can either be a path to a workspace or a window id? might make the naming easier.,Nit: `getEmptyWorkspaceBackupWindowIdsSync` -> `getEmptyWorkspaceBackupWindowIds`
348,"@@ -22,6 +22,7 @@ export const IEditorGroupService = createDecorator<IEditorGroupService>('editorG
 export interface ITabOptions {
 	showTabs?: boolean;
 	showTabCloseButton?: boolean;
+	tabCloseButton?: string;",Use string enum here (`'left' | 'right' | 'off'`),tabCloseButton?: string;
349,"@@ -220,6 +220,15 @@ export class CommonFindController extends Disposable implements editorCommon.IEd
 		}
 		return false;
 	}
+
+	public selectAllMatches(): boolean {
+		if (this._model) {
+			this._model.selectAllMatches();
+			this.closeFindWidget();","``` ts
this.closeFindWidget();
```

Why is it removed in the latest code(in master branch)?
",Why do we need this method?
350,"@@ -221,7 +221,14 @@ export class FileService implements files.IFileService {
 			if (exists) {
 				createParentsPromise = Promise.as(null);
 			} else {
-				createParentsPromise = pfs.mkdirp(paths.dirname(absolutePath));
+				//Do not try to make parent directory if saving to drive root
+				var dirName = paths.dirname(absolutePath);
+				if(dirName.slice(-2) != ':\\') {","So the problem is that a recursive `mkdir` is always attempted if the file does not yet exist, which breaks when it's in a drive root? How about doing a `pfs.stat` on `paths.dirname(absolutePath)` and see if it exists? Root directories should return true to that and it should be fine cross-platform too.
",I don't think you need the `slice` here.
351,"@@ -227,7 +227,9 @@ export class Item extends Events.EventEmitter {
 		this.element = element;
 
 		this.id = id;
-		this.registry.register(this);
+		if (!this.registry.isRegistered(this.id)) {
+			this.registry.register(this);
+		}",So that means that item IDs are not unique any more. Is that really the case (looks like they are moved around rather than being copied. btw. do we want this behaviour? If we generate js files in separate directory do we want this directory to be gone? There is no control over it at the moment). Do we want these IDs not to be unique? Isn't it just the matter of referring to the same file in many places (or to move it across)?,Shouldn't this be `this.registry.register(this);`?
352,"@@ -229,15 +234,15 @@ export class CommandEvent extends Event {
 }
 
 /**
- * Viewlet events are emitted when a viewlet opens or closes in the sidebar.
+ * Composite events are emitted when a composite opens or closes in the sidebar or panel.
  */
-export class ViewletEvent extends Event {
-	public viewletId: string;
+export class CompositeEvent extends Event {
+	public compositeId: string;
 
-	constructor(viewletId: string, originalEvent?: any) {
+	constructor(compositeId: string, originalEvent?: any) {","@isidorn I think here we should also send around the actual instance of Composite that was opened or closed because then one can simply do an instance of check to find out if the composite was a viewlet or panel.
",I don't think we need the `originalEvent` param here.
353,"@@ -23,11 +23,13 @@ export class ResourceContextKey implements IContextKey<URI> {
 	static Filename = new RawContextKey<string>('resourceFilename', undefined);
 	static LangId = new RawContextKey<string>('resourceLangId', undefined);
 	static Resource = new RawContextKey<URI>('resource', undefined);
+	static Extension = new RawContextKey<string>('resourceExtension', undefined);","So, I'd prefer `resourceExtname`. What do you think? ",Shouldn't this be `ResourceExtension`?
354,"@@ -23,4 +23,12 @@
 
 .monaco-sash.disabled {
 	cursor: default;
+}
+
+.vertical-cursor-container * {
+	cursor: ew-resize !important;
+}
+
+.horizontal-cursor-container * {
+	cursor: ns-resize !important;","Why is this needed?
",I think this should be `!important`
355,"@@ -23,7 +23,13 @@
 
 .monaco-editor .suggest-widget > .tree {
 	height: 100%;
-	width: 100%;
+	width: 40%;
+	float: left;","Careful with floats. If all you have is two divs, you should use the usual `inline-block` display to lay them out side by side.",Why did you change this?
356,"@@ -23,8 +23,7 @@ export interface ICommandAction {
 	id: string;
 	title: string | ILocalizedString;
 	category?: string | ILocalizedString;
-	iconClass?: string;
-	iconPath?: string;
+	iconPath?: string | { light: string; dark: string; };",Looking at consumer code would it be nicer to just have `{ light: string; dark: string; }`? Where `dark` defaults to `light` if missing,Why did you remove the `iconClass`?
357,"@@ -23,8 +24,16 @@ export default class TelemetryReporter {
 		}
 	}
 
+	constructor(private client: TypeScriptServiceClient) {",This creates a circular dependency between the reporter and the service client. Can we either pass the version info in `logTelemetry` or make `TelemetryReporter` take an interface instead of the entire client,
358,"@@ -230,6 +230,9 @@ export class TerminalService implements ITerminalService {
 			env[`PTYSHELLARG${i}`] = arg;
 		});
 		env['PTYCWD'] = this.contextService.getWorkspace() ? this.contextService.getWorkspace().resource.fsPath : os.homedir();
+		if (!env['LANG'] && platform.locale) {","This function's a bit busy at this point, can you factor out the `env` stuff into a `createTerminalEnv` function?
",Shouldn't this be `if (platform.locale)`?
359,"@@ -230,6 +230,9 @@ export class TerminalService implements ITerminalService {
 			env[`PTYSHELLARG${i}`] = arg;
 		});
 		env['PTYCWD'] = this.contextService.getWorkspace() ? this.contextService.getWorkspace().resource.fsPath : os.homedir();
+		if (!env['LANG'] && platform.locale) {
+			env['LANG'] = this.getLang(platform.locale);","Do the `LC_` variables get fixed with this? Do you need to set `LC_ALL` too?
",Shouldn't this be `env['LANG'] = platform.locale`?
360,"@@ -230,6 +232,19 @@ export class Repl extends Panel implements IPrivateReplService {
 		this.layout(this.dimension);
 	}
 ","I do not like code duplication, can you please look into removing the `CopyAllAction` from `electronDebugActions.ts`. I believe that we can now always use this action instead, can you please try that?",{<e1> }
361,"@@ -230,7 +235,20 @@ export class RestartAction extends AbstractDebugAction {
 			process = this.debugService.getViewModel().focusedProcess;
 		}
 		if (!process) {
-			return TPromise.as(null);
+			const configurationManager = this.debugService.getConfigurationManager();
+			let launch = configurationManager.selectedConfiguration.launch;
+			if (!launch) {
+				const rootUri = this.historyService.getLastActiveWorkspaceRoot();","All of this code is now duplicated. This is not good.
Either create a helper function which will be used inside both RestarAction and StartAction, or RestartAction should create a StartAction as you previously have done it and I wrongly corrected you",Why do we need this?
362,"@@ -232,21 +232,47 @@ export class TerminalPanel extends Panel {
 					return;
 				}
 
-				// Check if the file was dragged from the tree explorer
-				let uri = e.dataTransfer.getData('URL');
+				const winFormatters: [RegExp, (uri: URI) => string][] = [",Let's pull this and the application of the formatter into the `_preparePathForTerminal` function.,Why do we need this?
363,"@@ -235,3 +235,60 @@ function filterStream(testFunc) {
 		this.emit('data', data);
 	});
 }
+
+
+//#region monaco type checking
+
+function createTscCompileTask(watch) {
+	return () => {
+		const createReporter = require('./lib/reporter').createReporter;
+
+		return new Promise((resolve, reject) => {
+			const args = ['./node_modules/.bin/tsc', '-p', './src/tsconfig.monaco.json', '--noEmit'];
+			if (watch) {
+				args.push('-w');
+			}
+			const child = cp.spawn(`node`, args, {","Maybe use `cp.fork`, in order to get the same node instance?",I'm not sure if this is the right place to put this. I think it should be in `src/tsconfig.js` instead.
364,"@@ -235,6 +236,33 @@ export class FormatSelectionAction extends AbstractFormatAction {
 	}
 }
 
+@editorAction
+export class FormatOnPasteAction extends AbstractFormatAction {
+	constructor() {
+		super({
+			id: 'editor.action.formatOnPaste',
+			label: nls.localize('formatOnPaste.label', ""Format on paste""),
+			alias: 'Format on paste',",Maybe 'Paste and Format'?,I think this should be `formatOnPaste`
365,"@@ -235,6 +236,33 @@ export class FormatSelectionAction extends AbstractFormatAction {
 	}
 }
 
+@editorAction
+export class FormatOnPasteAction extends AbstractFormatAction {
+	constructor() {
+		super({
+			id: 'editor.action.formatOnPaste',
+			label: nls.localize('formatOnPaste.label', ""Format on paste""),
+			alias: 'Format on paste',
+			precondition: EditorContextKeys.Writable",We have context key which knows if for the current document there is someone that can format selections: `ModeContextKeys.hasDocumentSelectionFormattingProvider` (see [`FormatSelection`](https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/format/common/formatActions.ts#L219) as a sample). With that the menus will automatically update.,I think this should be `formatOnPaste`
366,"@@ -2362,7 +2362,7 @@ export function keybindingForAction(id: string): Keybinding {
 			return new Keybinding(KeyMod.CtrlCmd | KeyCode.KEY_S);
 		case DeleteFileAction.ID:
 		case MoveFileToTrashAction.ID:
-			return new Keybinding(KeyCode.Delete);
+			return new Keybinding(isMacintosh ? KeyMod.CtrlCmd | KeyCode.Backspace : KeyMod.Shift | KeyCode.Delete);","@SamVerschueren it should actually be just KeyCode.Delete on Windows and Linux. The shift+delete was added to have a way to bypass the trash when doing the delete.
",I don't think you need the `isMacintosh` check here.
367,"@@ -238,6 +238,10 @@ suite('Editor Contrib - Line Operations', () => {
 				transposeAction.run(null, editor);
 				assert.equal(model.getLineContent(8), 'hello world', '019');
 				assert.deepEqual(editor.getSelection().toString(), new Selection(8, 12, 8, 12).toString(), '020');
+
+				editor.setSelections([new Selection(3, 1, 3, 4), new Selection(4, 1, 4, 6)]);",It would be great to see more than 2 selections and transpose several times.,Why is this needed?
368,"@@ -239,6 +240,10 @@ class ConfigureTaskRunnerAction extends Action {
 					contentPromise = TPromise.as(selection.content);
 				}
 				return contentPromise.then(content => {
+					let editorConfig = this.configurationService.getConfiguration<any>();
+					if (editorConfig.editor.insertSpaces) {
+						content = content.replace(/(\n)(\t+)/g, (_, s1, s2) => s1 + strings.repeat(' ', s2.length * editorConfig.editor.tabSize));","I am a bit confused by the ""\n"" in the regex because later you are replacing it without having a ""\n"". Is that even needed?
",Why do we need this?
369,"@@ -239,6 +240,10 @@ class ConfigureTaskRunnerAction extends Action {
 					contentPromise = TPromise.as(selection.content);
 				}
 				return contentPromise.then(content => {
+					let editorConfig = this.configurationService.getConfiguration<any>();
+					if (editorConfig.insertSpaces) {","same here
",Why do we need this?
370,"@@ -239,6 +240,10 @@ class ConfigureTaskRunnerAction extends Action {
 					contentPromise = TPromise.as(selection.content);
 				}
 				return contentPromise.then(content => {
+					let editorConfig = this.configurationService.getConfiguration<any>();
+					if (editorConfig.insertSpaces) {
+						content = content.replace(/(\n)(\t+)/g, (_, s1, s2) => s1 + strings.repeat(' ', s2.length * editorConfig.tabSize));","why does the regex include a newline?
",Why do we need this?
371,"@@ -239,6 +240,16 @@ export class ExtHostApiCommands {
 					{ name: 'column', description: '(optional) Column in which to open', constraint: v => v === void 0 || typeof v === 'number' }
 				]
 			});
+
+		this._register('vscode.quickOpen', (prefix: string, showOptions: IShowOptions) => {","I am not sure about exposing `IShowOptions` to extensions, I would not do this until we hear otherwise. ",
372,"@@ -24,6 +24,12 @@ interface ExpandAbbreviationInput {
 	filter?: string;
 }
 
+interface RangesAndContent {
+	currentRange: vscode.Range;","The `currentRange` here will only have the preview ranges correct? If so, let's rename it to `previewRange` to make it more readable. 
Also rename `content` to `originalContent`  to match with the `originalRange` and `RangesAndContent` to `PreviewRangesWithContent`
",
373,"@@ -24,6 +24,8 @@ export class TextFileEditorModelManager implements ITextFileEditorModelManager {
 
 	private toUnbind: IDisposable[];
 
+	private _onModelDisposed: Emitter<URI>;","@Tyriar can we have test coverage for `onModelDisposed` and `onModelContentChanged`
",private readonly Emitter<URI> _onModelDisposed;
374,"@@ -240,12 +240,12 @@ export class ScrollableElement extends Widget {
 			let deltaX = e.deltaX * this._options.mouseWheelScrollSensitivity;
 
 			if (this._options.flipAxes) {
-				deltaY = e.deltaX;
-				deltaX = e.deltaY;
+				deltaY = deltaX;","Sorry if I'm missing something, but how does this work?

```
deltaY = deltaX;
deltaX = deltaY;
```

will not actually swap the two variables, it will just assign them both to have the value of deltaX. Is that the desired behavior?

My guess is you'd want to use `[deltaY, deltaX] = [deltaX, deltaY]`
",Why do we need this change?
375,"@@ -240,6 +240,15 @@ export class ExtHostApiCommands {
 					{ name: 'column', description: '(optional) Column in which to open', constraint: v => v === void 0 || typeof v === 'number' }
 				]
 			});
+
+		this._register('vscode.pickWorkspace', (options?: vscode.QuickPickOptions) => {
+			return this._commands.executeCommand('_workbench.pickWorkspace', [options]);","What does this return? It must be triple-equal to the things we have in `workspace.workspaceFolders`. Also, why not have this as real API? Having the logic in the core shouldn't mean we cannot have a function for this",
376,"@@ -240,6 +251,9 @@ export class RestartAction extends AbstractDebugAction {
 	}
 
 	protected isEnabled(state: State): boolean {
+		if (!this.debugService.getViewModel().focusedProcess) {",Instead of looking at the focusedProcess look at the state as we do below. Feels cleaner to me,Why do we need this?
377,"@@ -2404,6 +2431,38 @@
 						</dict>
 					</array>
 				</dict>
+				<key>fenced_code_block_rust</key>",Please update these to use the fenced code block logic that the other languages now use. It's rather horrific but it fixes a few important edge cases,<array>
378,"@@ -241,6 +239,8 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 			this.trace = this.readTrace();
 			this.tsServerLogLevel = this.readTsServerLogLevel();
 			this.servicePromise = this.startService();
+			this.lastError = null;",I don't think this bit is needed,this.lastError = null;
379,"@@ -242,6 +255,10 @@ export class VSCodeMenu {
 
 	private install(): void {
 
+		// Auto hide menu bar
+		const windows = this.windowsService.getWindows();
+		windows.forEach(w => w.win.setAutoHideMenuBar(this.currentAutoHideMenuBar));","Is this the right place to put this? 

Feels a bit wasteful to create the whole menu from scratch when I just want to update a property of the window?",const windows = this.windowsService.getWindows();
380,"@@ -244,16 +246,16 @@ function getSettings(): Settings {
 	};
 
 	// merge global and folder settings. Qualify all file matches with the folder path.
-	let globalSettings = workspace.getConfiguration('json', null).get<JSONSchemaSettings[]>('schemas');
-	if (Array.isArray(globalSettings)) {
-		collectSchemaSettings(globalSettings, workspace.rootPath);
+	let globalSettings = workspace.getConfiguration('json').inspect<JSONSchemaSettings[]>('schemas');",This part required changing the logic. Seems the current version of the api does allow null for the resource here,Why is this change needed?
381,"@@ -244,6 +245,14 @@ registerWordCommand(H.CursorWordRight, false, KeyCode.RightArrow);
 registerWordCommand(H.CursorWordRightSelect, true, KeyCode.RightArrow);
 registerWordCommand(H.DeleteWordLeft, false, KeyCode.Backspace);
 registerWordCommand(H.DeleteWordRight, false, KeyCode.Delete);
+registerWordCommand(H.DeleteSubWordLeft,false, KeyCode.F7);
+registerWordCommand(H.DeleteSubWordRight,false, KeyCode.F6);","space between `,` and `false`
","registerWordCommand(H.CursorWordLeftSelect, true, KeyCode.LeftArrow);"
382,"@@ -244,7 +274,7 @@ export class OpenAnythingHandler extends QuickOpenHandler {
 		return null;
 	}
 
-	public getResultsFromCache(searchValue: string, range: IRange = null): QuickOpenEntry[] {
+	public getResultsFromCache(searchValue: string, range: IRange = null) {","One of our coding principles is to always type the return value of a function, even if TS can infer it. So please add an interface for this method too.

Also it looks like we can make this method private.
",public QuickOpenEntry[] getResults(string searchValue: string) {
383,"@@ -2459,6 +2459,12 @@ declare namespace vscode {
 			 * @deprecated
 			 */
 			brackets?: any;
+			/**
+			 * This property is deprecated and not fully supported anymore by
+			 * the editor (scope and lineStart are ignored).
+			 * Use the the autoClosingPairs property in the language configuration file instead.
+			 * @deprecated","Do we have a doc page on the homepage we can refer them to?
",I don't think we need to deprecate this.
384,"@@ -246,7 +246,7 @@ export class ChangesView extends EventEmitter.EventEmitter implements GitView.IV
 	public getSecondaryActions(): Actions.IAction[] {
 		if (!this.secondaryActions) {
 			this.secondaryActions = [
-				this.instantiationService.createInstance(GitActions.SyncAction),
+				this.instantiationService.createInstance(GitActions.SyncAction, GitActions.SyncAction.ID, GitActions.SyncAction.LABEL),","... here
",Why is this needed?
385,"@@ -247,20 +248,30 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
+		const hideWidget = mode === Mode.OPEN;
+
+		let opts = this.getOptions();
+		if (mode === Mode.OPEN_BEHIND) {
+			opts = objects.assign(opts || {}, {
+				pinned: true,
+				revealIfVisible: true,","@wprater I think this option is a bit dangerous here because what it basically means is that the file will not be opened if it is visible in any other group. but I think the intent when sending files to open to the background is to open them in that group independent from other groups. I suggest to not set this flag.
",Why do we need this?
386,"@@ -247,20 +248,38 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
+		const hideWidget = mode === Mode.OPEN;
+
+		let backgroundOpts;","I suggest to move this into the other if check where we actually care about backgroundOpts. It is not being used in the scope otherwise.
",Why do we need this?
387,"@@ -247,20 +248,38 @@ export class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuick
 	}
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
-		if (mode === Mode.OPEN) {
+		const hideWidget = mode === Mode.OPEN;
+
+		let backgroundOpts;
+		if (mode === Mode.OPEN_IN_BACKGROUND) {
+			backgroundOpts = objects.assign({}, {","Why not just `{ pinned: true, preserveFocus: true }` ??
",Why do we need this?
388,"@@ -2482,6 +2482,11 @@ declare module 'vscode' {
 		appendVariable(name: string, defaultValue: string | ((snippet: SnippetString) => any)): SnippetString;
 	}
 
+	export interface RenameInitialValue {",Needs maybe some better naming here but idea is good,
389,"@@ -249,7 +250,7 @@ export class EditorGroupsControl implements IEditorGroupsControl, IVerticalSashL
 				}
 
 				// Refresh title when icons change
-				else if (showingIcons !== this.tabOptions.showIcons || showTabCloseButton !== this.tabOptions.showTabCloseButton) {
+				else if (showingIcons !== this.tabOptions.showIcons || showTabCloseButton !== this.tabOptions.showTabCloseButton || tabCloseButton !== this.tabOptions.tabCloseButton) {",...same here,Why do we need to check for `tabCloseButton` here?
390,"@@ -25,14 +25,16 @@ export class ConfigVariables extends SystemVariables {
 	}
 
 	protected resolveString(value: string): string {
+		const originalValue = value;
 		value = super.resolveString(value);
 
 		let regexp = /\$\{config\.(.*?)\}/g;
 		return value.replace(regexp, (match: string, name: string) => {
 			let config = this.configurationService.getConfiguration();
 			let newValue = new Function('_', 'try {return _.' + name + ';} catch (ex) { return """";}')(config);","Can we simplify this line such that it is more readable? Also new Function syntax is not our style - it is not used anywhere else in our code base so I would suggest to change this
",Why do we need this?
391,"@@ -25,6 +25,7 @@ export interface IRawModelUpdate {
 	thread?: DebugProtocol.Thread;","Looks good.
",Thread
392,"@@ -25,6 +25,7 @@ import 'vs/workbench/browser/actions/toggleSidebarVisibility';
 import 'vs/workbench/browser/actions/toggleSidebarPosition';
 import 'vs/workbench/browser/actions/toggleEditorLayout';
 import 'vs/workbench/browser/actions/toggleZenMode';
+import 'vs/workbench/browser/actions/reSizePart';",Lowercase 's' to be `resizePart` ?,import 'vs/workbench/browser/actions/reSizePart';
393,"@@ -250,6 +254,7 @@ export class ExtensionEditor extends BaseEditor {
 		this.navbar.onChange(this.onNavbarChange.bind(this, extension), this, this.transientDisposables);
 		this.navbar.push(NavbarSection.Readme, localize('details', ""Details""));
 		this.navbar.push(NavbarSection.Contributions, localize('contributions', ""Contributions""));
+		this.navbar.push(NavbarSection.Changelog, localize('changelog', ""Changelog""));","I'd like to show the Changelog section only if there is actually a Changelog to show.

You can add a `hasChangelog(): boolean` method to `IExtension` that will let you know this synchronously.
","this.navbar.push(NavbarSection.Contributions, localize('contributions', ""Contributions""));"
394,"@@ -253,7 +255,11 @@ function setupIPC(): TPromise<Server> {
 // and assign them to the process environment (e.g. when doubleclick app on Mac)
 getUserEnvironment()
 	.then(userEnv => {
-		assign(process.env, userEnv);
+		if (!tty.isatty(1)) {
+			// Only assign global environment variables when
+			// STDOUT is not attached to terminal.
+			assign(process.env, userEnv);","Instead of testing if vscode is run from terminal, different `assign` method could be used. Maybe:

``` js
assign(userEnv, process.env); // session's envvar trumps login shell's envvar
process.env = userEnv;
```
","I don't think this is the right place to do this. If you want to do this, you should be able to use `process.env.NODE_ENV`"
395,"@@ -254,7 +254,13 @@ export class CommandCenter {
 		}
 
 		const config = workspace.getConfiguration('git');
-		const value = config.get<string>('defaultCloneDirectory') || os.homedir();
+		let value;
+		const userInputtedDirectory = config.get<string>('defaultCloneDirectory');
+		if (userInputtedDirectory !== undefined && userInputtedDirectory.match(/^~/)) {",Why not use `if (userInputtedDirectory && userInputtedDirectory.match(/^~/)) {`? ,Why do we need this check?
396,"@@ -255,6 +255,18 @@ export function createApiFactory(initData: IInitData, threadService: IThreadServ
 			}
 		};
 
+		const emptyMessageOptions: vscode.MessageOptions = Object.create(null);
+
+		function parseMessageArguments(args: any[]): { options: vscode.MessageOptions; items: any[]; } {
+			const [first, ...rest] = args;
+
+			if (first && (typeof first === 'string' || first.title)) {",What if `first === ''`? The first check would fail even though it is a `string`,I'm not sure if this is the best place to put this function. I think it would be better to move it to `src/utils/message.js`
397,"@@ -2567,6 +2572,8 @@ declare module 'vscode' {
 		 * signaled by returning `undefined` or `null`.
 		 */
 		provideRenameEdits(document: TextDocument, position: Position, newName: string, token: CancellationToken): ProviderResult<WorkspaceEdit>;
+
+		resolveInitialRenameValue?(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<RenameInitialValue>;","Maybe `RenameInformation`? That would make it: 
```ts
resolveRenameInformation?(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<RenameInformation>;

provideRenameInformation?(document: TextDocument, position: Position, token: CancellationToken): ProviderResult<RenameInformation>;

```","`resolveInitialRenameValue` sounds like it should return a `RenameInitialValue`, not a `WorkspaceEdit`."
398,"@@ -257,4 +260,13 @@ export class TerminalService implements ITerminalService {
 		});
 		return newEnv;
 	}
+
+	private getLang(locale: string) {","Can you rename to `getLangEnvVariable` for clarity as to its purpose?
",
399,"@@ -257,6 +264,12 @@ export abstract class ExtHostEditorsShape {
 	$acceptTextEditorRemove(id: string): void { throw ni(); }
 }
 
+export abstract class ExtHostTreeExplorersShape {","Since `InternalTreeExplorerNode` is a class I won't send it over the wire. JSON serialisation will drop the prototype, functions etc
",export interface ExtHostTreeExplorersShape {
400,"@@ -258,15 +258,21 @@ export class ElectronWindow {
 
 		// High Contrast Events
 		ipc.on('vscode:enterHighContrast', (event) => {
-			this.partService.joinCreation().then(() => {
-				this.themeService.setColorTheme(VS_HC_THEME, false);
-			});
+			const windowConfig = this.configurationService.getConfiguration<IWindowSettings>('window');
+			if (windowConfig.autoDetectHighContrast) {",`windowConfig` can be null,I don't think this is the right place to do this. I think it should be in the `partService` instead.
401,"@@ -259,19 +259,49 @@ export class KeybindingsEditor extends BaseEditor implements IKeybindingsEditor
 		this.searchWidget.clear();
 	}
 
-	showSimilarKeybindings(keybindingEntry: IKeybindingItemEntry): TPromise<any> {
-		const value = `""${keybindingEntry.keybindingItem.keybinding.getAriaLabel()}""`;
+	showSimilarKeybindings(keybindingEntry: IKeybindingItemEntry | [ResolvedKeybinding, ResolvedKeybinding]): TPromise<any> {","I do not think changes to this function are needed, if the events return the `key` string",I don't think we need the `|` here.
402,"@@ -26,12 +26,18 @@ function addSettingMapping(settingId: string, colorId: string) {
 
 export function convertSettings(oldSettings: ITokenColorizationRule[], resultRules: ITokenColorizationRule[], resultColors: IColorMap): void {
 	for (let rule of oldSettings) {
-		resultRules.push(rule);
-		if (!rule.scope) {
+		resultRules.push(rule); // push the rule
+		if (!rule.scope) { // if it doesn't have a scope...?? why?","not having a scope means is the set of default rules, such as the default background and foreground color. Each text mate theme has such a set of default rules, typically the first entry.","I don't think this is the right place to push the rule. If the rule doesn't have a scope, it should be added to the result."
403,"@@ -26,6 +26,15 @@
 		""onView:markdown.preview""
 	],
 	""contributes"": {
+		""webviews"": [","I initially tried putting this new point under `views`, but now that we support custom view containers it does not seem like a great fit there","""webviews"": ["
404,"@@ -26,6 +26,7 @@ import { IEnvironmentService } from 'vs/platform/environment/common/environment'
 import { IEditorGroupService } from 'vs/workbench/services/group/common/groupService';","Can these methods live in ITextFileService and implementation?
",import IGroupService from 'vs/workbench/services/group/common/groupService';
405,"@@ -261,17 +273,15 @@ export abstract class EmmetEditorAction extends EditorAction {
 
 export class BasicEmmetEditorAction extends EmmetEditorAction {
 
-	private emmetActionName: string;
-
 	constructor(id: string, label: string, alias: string, actionName: string, kbOpts?: ICommandKeybindingsOptions) {
 		super({
 			id: id,
 			label: label,
 			alias: alias,
 			precondition: EditorContextKeys.Writable,
-			kbOpts: kbOpts
+			kbOpts: kbOpts,
+			actionName: actionName","We can use here ES2015 object destructuring for `id`, `label`, `alias`, `kbOpts`, `actionName`? ",I'm not sure if this is the right place to put this. I think it should be in the `EmmetEditorAction` class.
406,"@@ -261,6 +264,15 @@ export class ExplorerView extends CollapsibleView {
 			needsRefresh = this.filter.updateConfiguration();
 		}
 
+		// Check if sortOrder value changed
+		const configSortOrder = configuration && configuration.explorer && configuration.explorer.sortOrder;
+		if (this.sortOrder !== configSortOrder) {
+			this.sortOrder = configSortOrder;
+			const sorter = this.getSorter(this.sortOrder);
+			(<Tree>this.explorerViewer).setSorter(sorter);","Instead of setting a different sorter after the configuration changed, I suggest to actually let the sorter implement the listening and update itself based on the config. You still need this code to decide to do the refresh, which is fine.",Why do we need this?
407,"@@ -261,6 +277,11 @@ export class TerminalInstance implements ITerminalInstance {
 			if (TabFocus.getTabFocusMode() && event.keyCode === 9) {
 				return false;
 			}
+
+			if (platform.isWindows && event.keyCode === 13 /* ENTER */) {
+				this._checkWindowShell.fire();",I think we actually want to use this instead of bringing in the overhead of an event/emitter https://github.com/Microsoft/vscode/blob/e49ae72a37b22a7e7f2ed3a6bf052076e9a283d9/extensions/git/src/contentProvider.ts#L42,Why do we need this?
408,"@@ -262,7 +265,8 @@ export class FileStat implements IFileStat {
 	}
 
 	private updateResource(recursive: boolean): void {
-		this.resource = URI.file(paths.join(this.parent.resource.fsPath, this.name));
+		this.resource = this.parent.resource.with({ path: paths.join(this.parent.resource.path, this.name) });
+		// this.resource = URI.file(paths.join(this.parent.resource.fsPath, this.name));",I wonder how often the `URI.file`-thing occurs... ,Remove this line?
409,"@@ -264,6 +268,16 @@ export function match(arg1: string | IExpression, path: string, siblings?: strin
 
 	// Glob with String
 	if (typeof arg1 === 'string') {
+
+		if (trivia1.test(arg1)) {
+			// common pattern: **/*.txt just need endsWith check
+			return strings.endsWith(path, arg1.substr(4)); // '**/*'.length === 4","you are assuming that most of these patterns have 3 letters in file type, but we know that it is not always the case, like `.js`, `.ts`. Better will be to actually get the match

```
const trivia1 = /^\*\*\/\*(\.\w+)$/;

if ((let t1match = trivia1.match(arg1)) != null) {
    return strings.endsWith(path, t2match[1]);
}
```
",I don't think this is the right way to do this.
410,"@@ -265,4 +266,33 @@ class MDDocumentContentProvider implements TextDocumentContentProvider {
 			}, 300);
 		}
 	}
+}
+
+class DocumentHeadingsProvider implements vscode.DocumentSymbolProvider {
+
+	// http://daringfireball.net/projects/markdown/syntax#header
+	private static _atxPattern = /^(#){1,6}\s+.+(\s+\1)?/;","On the regex:
- Strip out any number of trailing `#`s at the end of the line. This does not have to match the number at the start: http://spec.commonmark.org/0.26/#example-42
- Match end of line too, to handle weird cases like `# a # a #`
- Strip out whitespace around the header text itself for the displayed symbol.

Something like: `^(#{1,6})\s+(.+?)\s*#*\s*$` and use these two captures to build up the symbol
",nit: `_atxPattern` -> `_atxRegex`
411,"@@ -265,4 +266,33 @@ class MDDocumentContentProvider implements TextDocumentContentProvider {
 			}, 300);
 		}
 	}
+}
+
+class DocumentHeadingsProvider implements vscode.DocumentSymbolProvider {
+
+	// http://daringfireball.net/projects/markdown/syntax#header
+	private static _atxPattern = /^(#){1,6}\s+.+(\s+\1)?/;
+	private static _settext = /^\s*[-=]+\s*$/;","Make sure to also test that this does not pick up separators
",nit: `_atxPattern` -> `_atxRegex`
412,"@@ -267,4 +267,4 @@ export class AllEditorsPicker extends BaseEditorPicker {
 
 		return super.getAutoFocus(searchValue);
 	}
-}","@bpasero sorry about the newlines.  I can rebase them out. should we add `""files.insertFinalNewline"": false` to workspace settings or `.editorconfig` ?
",public boolean isAutoFocus() {
413,"@@ -267,7 +271,7 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 				withElementById(this.partService.getWorkbenchElementId()).getHTMLElement(),
 				{
 					onOk: () => { /* ignore, handle later */ },
-					onCancel: () => { /* ignore, handle later */ },
+					onCancel: () => this.handleOnCancel(true),","@wprater careful, this is being overridden later in a `setCallbacks()` call, so you have to do it there for the picker.
",Why do we need this change?
414,"@@ -269,11 +269,11 @@ class MarkerNavigationWidget extends ZoneWidget {
 			// update frame color (only applied on 'show')
 			switch (marker.severity) {
 				case Severity.Error:
-					this.options.frameColor = '#ff5a5a';
+					this._container.parentElement.classList.add('marker-error-widget');","Make sure to remove the warning class in this case, same as when you add a warning class remove the error class",Why do we need this change?
415,"@@ -269,7 +269,7 @@ export class GitError {
 			this.error = void 0;
 		}
 
-		this.message = this.message || data.message || 'Git error';
+		this.message = this!.message || data.message || 'Git error';",Why `this!`? And why not on the left?,Why is `!` needed here?
416,"@@ -27,6 +27,11 @@
 	margin-top: 0.5em;
 }
 ",Makes sense,{
417,"@@ -27,6 +27,18 @@ import { StandardMouseEvent } from 'vs/base/browser/mouseEvent';
 import { TPromise } from 'vs/base/common/winjs.base';
 import URI from 'vs/base/common/uri';
 
+// List of regular expressions, for matching shells, functions to format a path, and booleans indicating whether the shell uses Windows-style paths
+const WIN_PATH_FORMATTERS: [RegExp, (path: string) => string, boolean][] = [","Let's use an interface instead of an array so it's nicer to use:

```ts
interface IPathFormatter {
  regex: RegExp,
  format: (path: string) =>string,
  usesWindowsStylePaths: boolean
}

const WIN_PATH_FORMATTERS: IPathFormatter[] = [...]
```","// List of regular expressions, for matching shells, functions to format a path, and booleans indicating whether the shell uses Windows-style paths"
418,"@@ -27,8 +27,10 @@
     ""iconv-lite"": ""0.4.13"",
     ""minimist"": ""^1.2.0"",
     ""native-keymap"": ""0.1.2"",
+    ""pty.js"": ""git+https://github.com/jeremyramin/pty.js.git#28f2667"",
     ""sax"": ""1.1.2"",","@bpasero You raised concerns about NAN versions but those packages are prebuilt so it shouldn't be a problem, right?
","""pty"": ""0.1.2"","
419,"@@ -27,9 +28,10 @@ export class FindController extends CommonFindController implements IFindControl
 		@IContextKeyService contextKeyService: IContextKeyService,
 		@IKeybindingService keybindingService: IKeybindingService,
 		@IThemeService themeService: IThemeService,
-		@IStorageService storageService: IStorageService
+		@IStorageService storageService: IStorageService,
+		@IClipboardService clipBoardService: IClipboardService","I recommend using `@optional(IClipboardService) clipBoardService: IClipboardService`
like it is used [here](https://github.com/Microsoft/vscode/blob/4b3f1820f358c47c2f4e0c34b65b2c375fa5b783/src/vs/editor/contrib/rename/browser/rename.ts#L106). This will help with the standalone editor (the monaco editor).

`optional` is defined in `vs/platform/instantiation/common/instantiation`

Then, the code should assume that this service could be undefined/null

> nitpick: perhaps name it `clipboardService` instead of `IClipboardService` to keep in spirit with the service name.",I think this should be `IClipboardService`
420,"@@ -2719,6 +2719,57 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * Contains additional information about the context in which
+	 * [completion provider](#CompletionItemProvider.provideCompletionItems) is triggered.
+	 */
+	export interface CompletionContext {
+		/**
+		 * How the completion was triggered.
+		 */
+		readonly trigger: 'auto' | 'manual';","We don't do string-or-types but (numeric) enums in the API. We should have `CompletionTriggerKind` as in [Roslyn](http://source.roslyn.io/#Microsoft.CodeAnalysis.Features/Completion/CompletionTriggerKind.cs,d64cce26e8f6eaa3) but with members `Invoke`, `TriggerCharacter`, and `Typing?` (and for the future something like `Refine`)",I don't think this is needed.
421,"@@ -273,7 +273,7 @@ export class WorkbenchEditorService implements IWorkbenchEditorService {
 		}
 
 		let input: ICachedEditorInput;
-		if (resource.scheme === network.Schemas.file) {
+		if (resource.scheme === network.Schemas.file || resource.scheme === 'ftp') {
 			input = this.fileInputFactory.createFileInput(resource, encoding, instantiationService);",@bpasero what is the different between a `FileInput` and `ResourceInput`? Is this just about supporting save/dirty? Should this become a (editor) document property? E.g. when reading a file we mark it as readonly or not?,Why do we need this change?
422,"@@ -275,7 +282,14 @@ export class Workbench implements IPartService {
 
 					editorOpenPromise = this.editorPart.openEditors(editors);
 				} else {
-					editorOpenPromise = this.editorPart.restoreEditors();
+					if (this.workbenchParams.options.untitledToRestore && this.workbenchParams.options.untitledToRestore.length) {","@Tyriar something is very broken here in this case:
- have a window with a folder open that has a dirty untitled file
- close that window without saving
- from the command line start `code <path to that folder> <file in that folder>`
  => you are not seeing the file being opened 
  => instead the dirty untitled file is opened

This is related to the comment I made in that one issue where I said that your restore logic will not work if someone opens Code like that.
",I don't think this is the right place to do this. I think it should be in the `openEditors` method.
423,"@@ -277,6 +299,10 @@ export class PanelPart extends CompositePart<Panel> implements IPanelService {
 		}
 		return this.toolBar.getItemsWidth();
 	}
+
+	dispose(): void {
+		this.disposables = dispose(this.disposables);",Please call super.dispose(),Why do we need this?
424,"@@ -279,6 +280,13 @@ export class GoToImplementationAction extends ImplementationAction {
 			}
 		});
 	}
+
+	public run(accessor: ServicesAccessor, editor: editorCommon.ICommonCodeEditor): TPromise<void> {","We should consider moving this into the base class of all of this. I believe there is value for most of them, albeit this command most likely being the slow one",
425,"@@ -28,10 +28,16 @@ import pfs = require('vs/base/node/pfs');
 import encoding = require('vs/base/node/encoding');","Can these methods live in ITextFileService and implementation?
",import
426,"@@ -28,34 +29,74 @@ export class Adapter {
 		}
 	}
 
-	public get runtime(): string {
+	public getAdapterExecutable(verifyAgainstFS = true): TPromise<IAdapterExecutable> {
+
+		if (this.rawAdapter.adapterExecutableCommand) {
+			return this.commandService.executeCommand<IAdapterExecutable>(this.rawAdapter.adapterExecutableCommand).then(ad => {
+				return this.verifyAdapterDetails(ad, verifyAgainstFS);
+			});
+		}
+
+		const ad = <IAdapterExecutable>{","ad is a wrong acronym here, I suspect this was previously IAdapterDetails",`verifyAgainstFS` should be `false` by default.
427,"@@ -28,6 +28,7 @@ const exists = (file: string): Promise<boolean> =>
 
 interface TypeScriptTaskDefinition extends vscode.TaskDefinition {
 	tsconfig: string;
+	label: string;","Adding label to the identifier and making it mandatory will break all existing typescript task customizations already inserted into a tasks.json. So we have to make sure we make this backwards compatible. I see the following possibilities:

- have a complete different type: 'typescript-watch'. However this might be confusing
- add an optional `option` property and add the 'watch' in case of a watching task. However this requires that I address: https://github.com/Microsoft/vscode/issues/31970 which is targeted for September
- only generate watch or non watch tasks based on a setting. 

Having both watch and non watch tasks in there might be overwhelming. May be we should make watch the default and have a setting to switch to non watch. @egamma you once opted for both. Is this something you still think is necessary?
",
428,"@@ -28,6 +28,7 @@ export namespace EditorContextKeys {
 
 	// -- mode context keys
 	export const languageId = new RawContextKey<string>('editorLangId', undefined);
+	export const editorExtension = new RawContextKey<string>('editorExtension', undefined);",After a second look: we actually don't need to repeat this. Having `resourceExtname/Extension` is enough has it gets inherited to the editor from its column/slot. The reason for having `editorLangId` and `resourceLangId` is that latter is derived from the name while the former is more correct (look at the name and the contents),
429,"@@ -28,6 +28,7 @@ export namespace EditorContextKeys {
 
 	// -- mode context keys
 	export const languageId = new RawContextKey<string>('editorLangId', undefined);
+	export const fileExtension = new RawContextKey<string>('editorFileExtension', undefined);","Don't use `File` as it might not a file, maybe `editorResourceExtension`, `editorExtension`, or `editorExtname`?",// -- file extension context keys
430,"@@ -280,6 +287,12 @@ export abstract class ExtHostEditorsShape {
 	$acceptTextEditorRemove(id: string): void { throw ni(); }
 }
 
+export abstract class ExtHostTreeExplorersShape {
+	$provideRootNode(providerId: string): TPromise<InternalTreeExplorerNode> { throw ni(); };
+	$resolveChildren(providerId: string, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]> { throw ni(); }","As mentioned above, instead of `MainThreadTreeExplorersShape.$showMessage` return a rejected promise from this call and handle the promise (rejected/resolved) in the main side. 
",I'm not sure if this is the right place to put this. I think it would be better to put it in `InternalTreeExplorerNode`.
431,"@@ -280,6 +287,12 @@ export abstract class ExtHostEditorsShape {
 	$acceptTextEditorRemove(id: string): void { throw ni(); }
 }
 
+export abstract class ExtHostTreeExplorersShape {
+	$provideRootNode(providerId: string): TPromise<InternalTreeExplorerNode> { throw ni(); };
+	$resolveChildren(providerId: string, node: InternalTreeExplorerNode): TPromise<InternalTreeExplorerNode[]> { throw ni(); }
+	$executeCommand(providerId: string, node: InternalTreeExplorerNode): TPromise<void> { throw ni(); }","[needs change] Related to `MainThreadTreeExplorersShape.$showMessage` - Remove this, because it duplicates functionality and also supports extension host side commands only. The on main side, implement this by calling [`ICommandService#executeCommand`]('https://github.com/Microsoft/vscode/blob/master/src/vs/platform/commands/common/commands.ts#L16').

To preserve the semantics wrt to the node bing the command argument, make sure to use `modes.ICommand`, the [`CommandConverter`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/node/extHostCommands.ts#L45), and the node as argument
",I don't think this is needed.
432,"@@ -281,6 +281,9 @@
 		""progressBar.background"": ""#0063a5"",
 
 		""dropdown.background"": ""#181f2f"",
+		""dropdown.optionCheckedBackground"": ""#08286b"",",@cleidigh once you use the tree colors as default you would no longer need to duplicate the key in each theme.,"""progressBar.optionCheckedBackground"": ""#0063a5"","
433,"@@ -282,10 +288,18 @@ export class ExtensionEditor extends BaseEditor {
 			})
 			.then(null, () => {
 				const p = append(this.content, $('p'));
-				p.textContent = localize('noReadme', ""No README available."");
+				p.textContent = noContentCopy;
 			}));
 	}
 
+	private openReadme(extension: IExtension) {
+		return this.openMarkdown(extension, this.extensionReadme.get(), localize('noReadme', ""No README available.""));","I do not know how expansive is to call `localize`
If it's a lot, we could probably use `localize.bind(this, 'noReadme', ""No README available."")` and use the new returned function only if it's necessary. What's your opinion?
",`noContentCopy` -> `noContent`
434,"@@ -284,7 +292,7 @@ export interface CodeActionProvider {
 	/**
 	 * Provide commands for the given document and range.
 	 */
-	provideCodeActions(model: editorCommon.IReadOnlyModel, range: Range, token: CancellationToken): Command[] | Thenable<Command[]>;
+	provideCodeActions(model: editorCommon.IReadOnlyModel, range: Range, token: CancellationToken): (Command | CodeAction)[] | Thenable<(Command | CodeAction)[]>;",In this land we can break the API so I'd suggest we don't carry along the `Command | CodeAction` notion but just make it a `CodeAction`. I'd also do that on the protocol layer and do the `Command` becomes `CodeAction` thing  in the code action adapter. ,Why is this change necessary?
435,"@@ -288,9 +288,13 @@ export function getJavascriptMode(documentRegions: LanguageModelCache<HTMLDocume
 	};
 };
 
-function convertRange(document: TextDocument, span: { start: number, length: number }): Range {
-	let startPosition = document.positionAt(span.start);
-	let endPosition = document.positionAt(span.start + span.length);
+function convertRange(document: TextDocument, span: { start: number | undefined, length: number | undefined }): Range {",This is the main logic change. TS allows both the start and length to be undefined,`start` and `length` should be `number | null`
436,"@@ -29,6 +29,7 @@
 	position: absolute;
 	bottom: 0;
 	top: 0;
+	padding-bottom: 2px;",Does `bottom: 2px` here save us from doing the changes in `terminalInstance.ts`?,padding-top: 2px;
437,"@@ -29,6 +29,7 @@ export interface IWindowCreationOptions {
 	state: IWindowState;
 	extensionDevelopmentPath?: string;
 	allowFullscreen?: boolean;
+	macOSUseInlineToolbar: boolean;","I am starting to think that we should make this more open ended because I also would like to have the option to have a custom dark title bar as a choice. This should be an enumeration with open ended values (e.g. default, inline, dark) so that we can continue with experiments.
",
438,"@@ -29,9 +29,12 @@ class ClipboardEventWrapper implements IClipboardEvent {
 		return false;
 	}
 
-	public setTextData(text: string): void {
+	public setTextData(text: string, richText?: string): void {","I would use null for richText as a signal that it should not be set (instead of undefined + optional).

IMHO null is a lot more clear and prevents bugs where we forget by accident to add a second argument....",Why do we need this?
439,"@@ -2908,6 +2942,10 @@ export enum MouseTargetType {
 	 */
 	GUTTER_LINE_NUMBERS,
 	/**
+	 * Mouse is on top of the git blame annotation
+	 */
+	GUTTER_GIT_BLAME,","Layer breaker.
",Please add a comma at the end.
440,"@@ -291,7 +291,7 @@ export const IExtensionTipsService = createDecorator<IExtensionTipsService>('ext
 
 export interface IExtensionTipsService {
 	_serviceBrand: any;
-	getRecommendations(): string[];
+	getRecommendations(): { [type: string]: string[]; };",One small suggestion - Why not the API returns an object with `file` and `exe` as properties? So that it will be transparent what it is returning.,Why do we need this change?
441,"@@ -294,7 +297,12 @@ export class MouseTargetFactory {
 
 		if (REGEX.IS_CHILD_OF_VIEW_OVERLAYS.test(path)) {
 			var offset = Math.abs(e.posx - editorContent.left);
+			if (offset <= layoutInfo.gitBlameWidth) {
+				// On the git blame annotation
+				return this.createMouseTargetFromGitBlame(t, mouseVerticalOffset, mouseColumn);","Layer breaker.
",Why do we need this check?
442,"@@ -294,8 +298,13 @@ export class MouseHandler extends ViewEventHandler implements IDisposable {
 		} else if (targetIsViewZone) {
 			let viewZoneData = <editorBrowser.IViewZoneData>t.detail;
 			if (this.viewHelper.shouldSuppressMouseDownOnViewZone(viewZoneData.viewZoneId)) {
+				focus();
+				this._mouseDownOperation.start(t.type, e);
 				e.preventDefault();
 			}
+		} else if (targetIsWidget && (<string>t.detail).indexOf('codeLensWidget') === 0) {","This is a layer breaker -- the editor core should not know about specific widgets. We perhaps need something similar to `shouldSuppressMouseDownOnViewZone` but with content widgets
",Why do we need to focus here?
443,"@@ -296,6 +296,7 @@ export class FileRenderer implements IRenderer {
 			}, 0);
 		});
 
+		const initialRelPath: string = relative(stat.root.resource.fsPath, stat.parent.resource.fsPath);","You only use this const further down. It is usually best to intiilize things exactly where you use them so they are scoped in the right place, please move it to the place where you actually use it.","const initialRelPath = relative(stat.root.resource.fsPath, stat.parent.resource.fsPath);"
444,"@@ -296,6 +305,47 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		}
 	}
 
+	// exception widget",Why is this public?,
445,"@@ -297,20 +307,31 @@ export class DefaultSettingsRenderer extends Disposable implements IPreferencesR
 
 	public filterPreferences(filterResult: IFilterResult): void {
 		this.filterResult = filterResult;
-		if (!filterResult) {
+		if (filterResult) {
+			if (filterResult.remoteResult) {",I would not like to leak the fact that if results are remote or not. Both the results provider could return results using common API. The editor and renderers just depends on this results API.,Why do we need this check?
446,"@@ -297,7 +297,7 @@ declare module 'vscode' {
 		isAfterOrEqual(other: Position): boolean;
 
 		/**
-		 * Check if `other` equals this position.
+		 * Check if this is position is equal to `other`.",extra 'is',* Check if `other` is after this position.
447,"@@ -2972,6 +2972,37 @@ declare namespace vscode {
 	}
 
 	/**
+	 * An individual terminal instance within the integrated terminal.
+	 */
+	export interface Terminal {
+","add `name` as readonly so people can access that data they have passed in the create call
",Why is this interface needed?
448,"@@ -2972,6 +2972,37 @@ declare namespace vscode {
 	}
 
 	/**
+	 * An individual terminal instance within the integrated terminal.
+	 */
+	export interface Terminal {
+
+		/**
+		 * Send text to the terminal.
+		 *
+		 * @param addNewLine Whether to add a new line to the text being sent, this is normally
+		 * required to run a command in the terminal. This defaults to `true`.
+		 */
+		sendText(text: string, addNewLine?: boolean);","Is this always the same sequence for new line or should `addNewLine` be something like `\n|\r\n|\r`?
",Why do we need this interface?
449,"@@ -298,6 +298,11 @@ configurationRegistry.registerConfiguration({
 			'default': true,
 			'description': nls.localize('zenMode.hideStatusBar', ""Controls if turning on Zen Mode also hides the status bar at the bottom of the workbench."")
 		},
+		'zenMode.hideActivityBar': {
+			'type': 'boolean',
+			'default': true,
+			'description': nls.localize('zenMode.hideActivityBar', ""Controls if turning on Zen Mode also hides the activitybar bar at the left of the workbench."")",Please use 'activity bar' not 'activitybar' in the description,please add a new line at the end of the file
450,"@@ -298,6 +298,12 @@ configurationRegistry.registerConfiguration({
 			'description': nls.localize('formatOnSave', ""Format a file on save. A formatter must be available, the file must not be auto-saved, and editor must not be shutting down.""),
 			'overridable': true,
 			'scope': ConfigurationScope.RESOURCE
+		},
+		'editor.formatOnSaveTimeout': {","Setting is editor-global, it will be hard for end user to figure out correct timeout as it depends on the language and the machine speed.",I don't think this is needed.
451,"@@ -298,7 +298,7 @@ export class Workbench implements IPartService {
 				} else {
 					if (this.workbenchParams.options.untitledToRestore && this.workbenchParams.options.untitledToRestore.length) {
 						const untitledToRestoreInputs = this.workbenchParams.options.untitledToRestore.map(resourceInput => {
-							return this.untitledEditorService.createOrGet(null, null, resourceInput.resource);
+							return this.untitledEditorService.createOrGet(resourceInput.resource, null, true);","@Tyriar Same here, parameter is not being used later?
",Why do we need to pass `true` here?
452,"@@ -3,6 +3,7 @@
 		""build/lib/tslint""
 	],
 	""rules"": {
+		""no-string-throw"": true,",Is that it? No smarter lint rules that actually check for a type?,
453,"@@ -3,6 +3,7 @@ npm-debug.log
 Thumbs.db
 node_modules/
 .build/
+.vscode/.browse.VC*","Please remove this one, you can use `.git/info/exclude` for it
",
454,"@@ -3,9 +3,6 @@
 	""version"": ""0.1.0"",
 	""publisher"": ""vscode"",
 	""engines"": { ""vscode"": ""*"" },
-	""scripts"": {",Please keep the script and point it to the repo that has the improved grammar.,"""name"": ""vscode"","
455,"@@ -30,6 +30,7 @@ export class TerminalPanel extends Panel {
 	private actions: IAction[];
 	private parentDomElement: HTMLElement;
 	private terminalContainer: HTMLElement;
+	private currentThemeId: string;","Make this `currentBaseThemeId`
",
456,"@@ -30,6 +30,7 @@ namespace schema {
 			case 'editor/title': return MenuId.EditorTitle;
 			case 'editor/context': return MenuId.EditorContext;
 			case 'explorer/context': return MenuId.ExplorerContext;
+			case 'editor/tab': return MenuId.EditorTab;","maybe better editor/tab/context or editor/context/tab?
",case 'explorer/tab': return MenuId.ExplorerTab;
457,"@@ -30,7 +30,7 @@ export class ReplInputEditor extends CodeEditorWidget {
 		@IContextKeyService contextKeyService: IContextKeyService,
 		@IThemeService themeService: IThemeService
 	) {
-		super(domElement, options, instantiationService, codeEditorService, commandService, contextKeyService, themeService);
+		super(domElement, options, true, instantiationService, codeEditorService, commandService, contextKeyService, themeService);","Let's postpone turning the flag to `true` here until we get the commands sorted out. Otherwise, I don't think cursor left/cursor right will work in the repl.",Why do we need this change?
458,"@@ -300,6 +300,7 @@ export class FileRenderer implements IRenderer {
 
 		const done = once((commit: boolean, blur: boolean) => {
 			tree.clearHighlight();
+			label.element.style.display = 'none';","line 249: templateData.label.element.style.display = 'flex';
leads to two visible labels.
By setting the old label to display = 'none' this can be avoided.",const label = tree.getLabel();
459,"@@ -300,6 +303,25 @@ export class WorkingFilesModel implements IWorkingFilesModel {
 		return null;
 	}
 
+	public restoreRecentlyRemovedEntry(): WorkingFileEntry {","I think I would change the data structure of recently closed entries so that it alway is an array (of up to N entries) so that you can perform the reopening multiple times as needed. 

You have to be aware of the fact that you can have untitled files in the list, I suggest to ignore any entry in the working files list of closed entries that is not file thereby.

Another interesting aspect is that we remove a working file automatically if a file gets deleted. So a remove of an entry might not necessarily be via user interaction. This might change in the future though, because it also has its own set of issues. But it would be weird to reopen a deleted file.
",public WorkingFileEntry restoreRecentlyRemovedEntry() {
460,"@@ -300,7 +303,7 @@ export class DebugService implements debug.IDebugService {
 
 		this.toDisposeOnSessionEnd.get(session.getId()).push(session.onDidThread(event => {
 			if (event.body.reason === 'started') {
-				this.fetchThreads(session).done(undefined, errors.onUnexpectedError);
+				this.debouncedDisplayThreads(session);",I would prefer if this method was inlined,Why do we need to debounce here?
461,"@@ -3012,6 +3012,11 @@ declare namespace vscode {
 		export const onDidChangeTextDocument: Event<TextDocumentChangeEvent>;
 
 		/**
+		 * An event that is emitted when a [text document](#TextDocument) is saving to disk (save may fail).
+		 */
+		export const onSavingTextDocument: Event<TextDocument>;","wrong name. must be `onWillSaveTextDocument`
",I'm not sure if this is the best name for this event. I think it should be something like `onSaveTextDocument`.
462,"@@ -306,7 +305,12 @@ function setupIPC(accessor: ServicesAccessor): TPromise<Server> {
 						promise = service.getMainProcessId()
 							.then(processId => {
 								logService.log('Sending some foreground love to the running instance:', processId);
-								allowSetForegroundWindow(processId);
+								try {
+									const { allowSetForegroundWindow } = <any>require.__$__nodeRequire('windows-foreground-love');","@the-ress this is rather ugly, can we do what windows-mutex does? This native module is also only build for Windows and it still has a nice import üëç 
",Why do we need this try/catch?
463,"@@ -308,6 +311,14 @@ export class CommonFindController extends Disposable implements editorCommon.IEd
 		}
 		return true;
 	}
+
+	public showGlobalBufferTerm(): string {
+		return this._clipboardService.readFindText();","Once `optional` is adopted, some null/undefined checks should be performed here",public boolean showGlobalBufferTerm() {
464,"@@ -308,6 +311,14 @@ export class CommonFindController extends Disposable implements editorCommon.IEd
 		}
 		return true;
 	}
+
+	public showGlobalBufferTerm(): string {
+		return this._clipboardService.readFindText();
+	}
+
+	public setGlobalBufferTerm(text: string) {
+		this._clipboardService.writeFindText(text);","Once `optional` is adopted, some null/undefined checks should be performed here",Why do we need this method?
465,"@@ -308,7 +340,12 @@ export class OpenAnythingHandler extends QuickOpenHandler {
 			entry.setHighlights(labelHighlights, descriptionHighlights);
 		});
 
-		return viewResults;
+		return {","Can we make this nicer? E.g. an interface which has one entry for results and another for all performance/telemetry relevant data? Maybe just a Tupel<2>?
",Why do we need this change?
466,"@@ -31,26 +33,37 @@ export class UntitledEditorModel extends StringEditorModel implements IEncodingS
 
 	private hasAssociatedFilePath: boolean;
 
+	private backupPromises: TPromise<void>[];","@Tyriar this is not being used? and related code around canceling it?
",private TPromise<Void>[] backupPromises;
467,"@@ -31,33 +31,33 @@
 	padding: 0 5px 0 0;
 }
 
-.task-statusbar-item-label > .task-statusbar-item-label-counter {
+.task-statusbar-item-label>.task-statusbar-item-label-counter {","Did you mean to reformat these? Maybe ""format document"" did the wrong thing",Why did you change this?
468,"@@ -31,7 +31,18 @@ declare module 'v8-inspect-profiler' {
 		stop(afterDelay?: number): PromiseLike<ProfileResult>;",it's merged.,?
469,"@@ -31,7 +31,18 @@ declare module 'v8-inspect-profiler' {
 		stop(afterDelay?: number): PromiseLike<ProfileResult>;
 	}
 
-	export function startProfiling(options: { port: number, tries?: number, retyWait?: number }): PromiseLike<ProfilingSession>;
+	export interface Target {
+		description: string,
+    	devtoolsFrontendUrl: string,
+		id: string,",line 37,Why is this an interface?
470,"@@ -31,7 +31,18 @@ declare module 'v8-inspect-profiler' {
 		stop(afterDelay?: number): PromiseLike<ProfileResult>;
 	}
 
-	export function startProfiling(options: { port: number, tries?: number, retyWait?: number }): PromiseLike<ProfilingSession>;
+	export interface Target {
+		description: string,
+    	devtoolsFrontendUrl: string,
+		id: string,
+		title: string,",this is a new comment.,Why is this an interface?
471,"@@ -31,7 +31,18 @@ declare module 'v8-inspect-profiler' {
 		stop(afterDelay?: number): PromiseLike<ProfileResult>;
 	}
 
-	export function startProfiling(options: { port: number, tries?: number, retyWait?: number }): PromiseLike<ProfilingSession>;
+	export interface Target {
+		description: string,
+    	devtoolsFrontendUrl: string,
+		id: string,
+		title: string,
+		type: string,
+		url: string,
+		webSocketDebuggerUrl: string
+	}",list tabs.,Why is this an interface?
472,"@@ -31,7 +31,8 @@ class ExpandAbbreviationAction extends BasicEmmetEditorAction {
 					EditorContextKeys.hasOnlyEmptySelection,
 					EditorContextKeys.hasSingleSelection,
 					EditorContextKeys.tabDoesNotMoveFocus,
-					ContextKeyExpr.has('config.emmet.triggerExpansionOnTab')
+					ContextKeyExpr.has('config.emmet.triggerExpansionOnTab'),
+					ContextKeyExpr.not('config.emmet.autocomplete')",Shouldn't we have a schema definition for this? Like for other values: https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/emmet/node/emmet.contribution.ts#L38,"ContextKeyExpr.not('config.emmet.autocomplete'),"
473,"@@ -310,6 +310,10 @@ export class ViewletActionItem extends ActivityActionItem {
 	public render(container: HTMLElement): void {
 		super.render(container);
 
+		if (this._keybinding) {","@RohithKumbharkar I have a different suggestion where to put this code that makes it much easier. If you look below in that class there is a `public set keybinding(keybinding: string)`. I suggest to set the title in there because it gets computed there:

```typescript
this.$label.title(title);
this.$badge.title(title);
this.$container.title(title); // <-- add it here
```",Why do we need this?
474,"@@ -310,6 +310,15 @@
 	background: url('clear-search-results-dark.svg') center center no-repeat;
 }
 
+.monaco-workbench .search-action.cancel-search {
+	background: url('action-remove.svg') center center no-repeat;
+}
+
+.vs-dark .monaco-workbench .search-action.cancel-search,",this still works!,This should be `.monaco-workbench .search-action.cancel-search`
475,"@@ -310,7 +310,7 @@ class DecorationRenderHelper {
 				cssTextArr.push(strings.format(this._CSS_MAP.contentIconPath, opts.contentIconPath.toString(true).replace(/'/g, '%27')));","What is the reason for this change?
How can we be sure that we did not break any of the many use cases editor decorations have. 

This PR should not touch anything in the editor land. A change in the editor land is only acceptable if there is no alternative.",cssTextArr.push(
476,"@@ -310,7 +310,7 @@ export class ExtHostSCM {
 		return sourceControl;
 	}
 
-	$provideOriginalResource(sourceControlHandle: number, uri: URI): TPromise<URI> {","I also wasn't entirely sure of `URI` vs `vscode.Uri`. I think the change itself is correct, but I was not confident to know if any existing code is relying on the old signature or if this change could cause any trouble",// $provideOriginalResource
477,"@@ -311,7 +311,8 @@ export function prepareQuery(original: string): IPreparedQuery {
 	let value: string;
 
 	if (original) {
-		value = stripWildcards(original).replace(/\s/g, ''); // get rid of all wildcards and whitespace
+		value = stripWildcards(original).trim().replace(/\s/g, '\ '); // get rid of all wildcards and whitespace",@Owen-Mak why are you using `'\ '` instead of just `' '` here?,Why do we need this change?
478,"@@ -315,6 +315,29 @@ export class FileService implements IFileService {
 		});
 	}
 
+	public setContentsAndResolve(resource: uri, absolutePath: string, value: string, addBom: boolean, encodingToWrite: string, options: { encoding?: string; mode?: number; flag?: string; }): TPromise<IFileStat> {","Some suggestions:
* make the method `private`
* rename it to `doSetContentsAndResolve`
* move it below the method `updateContent`
* remove the `encoding` from the options, it is not being used from the caller and it is also dangerous because in order to support all encodings, we need to use the `encoding.encode` method instead","public void setContentsAndResolve(resource: string, absolutePath: string, value: string, addBom: boolean, encodingToWrite: string, options: { encoding?: string; mode?: number; flag?: string; }): TPromise<IFileStat> {"
479,"@@ -315,6 +315,7 @@ export class NotificationViewItemProgress implements INotificationViewItemProgre
 
 	public worked(value: number): void {
 		if (this._state.worked === value) {
+			this._onDidChange.fire();",Could just remove the entire if statement and it would have the same effect.,`this._state.worked = value;`
480,"@@ -316,6 +320,27 @@ export class FileRenderer implements IRenderer {
 	}
 }
 ","I feel like this should not be a function, either a lambda expression or a private method in the explorerViewer. Though if you prefer functions we can leave it this way",} else {
481,"@@ -316,6 +321,29 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 			etag = this.lastResolvedDiskStat.etag; // otherwise respect etag to support caching
 		}
 
+		const storageKey = 'workbench.tasks.ranTaskBefore';",Can you put this in its own method?,const storageKey = 'workbench.tasks.ranTaskBefore';
482,"@@ -317,10 +322,10 @@ export class TerminalService implements ITerminalService {
 		return terminalProcess;
 	}
 
-	public static createTerminalEnv(parentEnv: IStringDictionary<string>, shell: IShell, workspace: IWorkspace, locale?: string): IStringDictionary<string> {
+	public static createTerminalEnv(parentEnv: IStringDictionary<string>, shell: IShell, workspace: IWorkspace, shellPath?: string, locale?: string): IStringDictionary<string> {","Thinking about this again, I think we should probably support args for the shellPath too (what `IShell` does). Meaning shellPath and shellArgs should pass through the API layers.
","public static IStringDictionary<string> createTerminalEnv(parentEnv: IStringDictionary<string>, shell: IShell, workspace: IWorkspace, locale?: string): IStringDictionary {"
483,"@@ -317,7 +317,26 @@ export class ReindentLinesAction extends EditorAction {
 		if (!model) {
 			return;
 		}
-		let edits = getReindentEditOperations(model, 1, model.getLineCount());
+
+		let edits: IIdentifiedSingleEditOperation[] = [];
+		let selections: Selection[] = [];
+
+		for (let selection of editor.getSelections()) {
+			if (selection.isEmpty()) { continue; }
+			selections.push(selection);
+		}
+","We don't need two for loops here, let's merge them into one.",Why do we need this check?
484,"@@ -319,6 +341,9 @@ export class WorkingFilesModel implements IWorkingFilesModel {
 	}
 
 	public clear(): void {
+		this.recentlyClosedEntries.push(this.entries.map((entry) => {
+			return entry.resource;
+		}));","This should just shift all entries into the array of recently closed entries.
",`recentlyClosedEntries` -> `recentlyClosedResources`
485,"@@ -319,71 +319,71 @@ export const HTML_TAGS: ITagSet = {
 };
 
 export const IONIC_TAGS: ITagSet = {
-	'ion-checkbox': new HTMLTagSpecification('',
+	'ion-checkbox': new HTMLTagSpecification(nls.localize('tags.ion.checkbox', 'The checkbox is no different than the HTML checkbox input, except it\'s styled differently. The checkbox behaves like any AngularJS checkbox.'),","I've used nls.localize, with a string ID for each label; is there anything else to do for localization?
",I don't think we need to localize this.
486,"@@ -32,6 +32,11 @@ export function findFreePort(startPort: number, giveUpAfter: number, timeout: nu
 	});",33,{
487,"@@ -32,6 +32,11 @@ export function findFreePort(startPort: number, giveUpAfter: number, timeout: nu
 	});
 }
 ",after 34.,}
488,"@@ -32,6 +32,11 @@ export function findFreePort(startPort: number, giveUpAfter: number, timeout: nu
 	});
 }
 
+export function findRandomFreePort(): Thenable<number> {
+	const port = Math.floor(Math.random() * (20000 - 9000) + 9000);",lol,export default findRandomFreePort;
489,"@@ -32,6 +32,11 @@ export function findFreePort(startPort: number, giveUpAfter: number, timeout: nu
 	});
 }
 
+export function findRandomFreePort(): Thenable<number> {
+	const port = Math.floor(Math.random() * (20000 - 9000) + 9000);
+	return findFreePort(port, 10, 5000);
+}
+",cool,"nit: `findFreePort(port, 10, 5000)`"
490,"@@ -32,6 +32,7 @@ export interface IWindowCreationOptions {
 	extensionDevelopmentPath?: string;
 	allowFullscreen?: boolean;
 	titleBarStyle?: 'native' | 'custom';
+	vscodeWindowId?: string;",@Tyriar I would suggest to call this `id` and instead fix all users of the current `id` property to use `vscodeWindows.win.id` because that makes it very clear what ID is being asked.,Why is this a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I don't think it should be a<msg>Why is this a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I don't think it should be.
491,"@@ -32,7 +32,7 @@ class JsDocCompletionItem extends CompletionItem {
 	) {
 		super('/** */', CompletionItemKind.Snippet);
 		this.detail = localize('typescript.jsDocCompletionItem.documentation', 'JSDoc comment');
-		this.insertText = '';
+		this.insertText = ' ';","This is the minimal change that fixes the issue. I also considered updating the suggestion provider to not apply the new enter logic for empty insert text or for completions with commands, however this carried more risk.

I'm also going to try to get TypeScript to improve the api we use to get doctemplates so that the `JsDocCompletionItem` doesn't require using a command",Why is this needed?
492,"@@ -32,7 +32,7 @@ export class HighlightedLabel implements IDisposable {
 		return this.domNode;
 	}
 
-	set(text: string, highlights: IHighlight[] = []) {
+	set(text: string, highlights: IHighlight[] = [], escapedNewLines: boolean = false) {","I would approach this differently. One method that takes the `text` and `highlights` and that escape them in one go. Something like `static escapeNewLines(text, highlights):[string, IHighligh[]]` and then you call that method early, e.g. before the equality check.
",`escapedNewLines: boolean = false`
493,"@@ -32,7 +32,7 @@ var baseModules = [
 	'applicationinsights', 'assert', 'child_process', 'chokidar', 'crypto', 'emmet',
 	'events', 'fs', 'getmac', 'glob', 'graceful-fs', 'http', 'http-proxy-agent',
 	'https', 'https-proxy-agent', 'iconv-lite', 'electron', 'net',
-	'os', 'path', 'readline', 'sax', 'semver', 'stream', 'string_decoder', 'url',
+	'os', 'path', 'pty.js', 'readline', 'sax', 'semver', 'stream', 'string_decoder', 'url', 'term.js',","Is this change related to 3077?
",I don't think we need to add `pty.js` here.
494,"@@ -320,7 +320,9 @@ export class ExtensionsListView extends CollapsibleView {
 				}
 
 				return this.extensionsWorkbenchService.queryGallery(assign(options, { names, pageSize: names.length }))
-					.then(pager => new PagedModel(pager));
+					.then(pager => this.addRecommendationInfo(new PagedModel(pager || []), {
+						source: 'fileType'
+					}));","Not sure if it is good idea to add data to view model [IExtension](https://github.com/microsoft/vscode/blob/master/src/vs/workbench/parts/extensions/common/extensions.ts#L26). I think the real fact is [IGalleryExtension](https://github.com/microsoft/vscode/blob/master/src/vs/platform/extensionManagement/common/extensionManagement.ts#L130), the underlying mode that is passed around. This is what user is querying for installing. 

FYI I had a similar request to log search criteria and position of an extension when it is opened and installed. I captured this data in gallery extension and all telemetry logging will have this info. Please see [commit](https://github.com/Microsoft/vscode/commit/f117237ec50494e8c3a5bc67ab13c27bdf8a5dc3)",Shouldn't this be `source: 'file'`?
495,"@@ -321,12 +321,21 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 			etag = this.lastResolvedDiskStat.etag; // otherwise respect etag to support caching
 		}
 
+		this.taskNotification();","Maybe this should only happen after opening the file succeeds? Partly to avoid slowing down the file open with extra work, but also, a file can fail to open, in which case you don't want to show the notification. ",if (this.lastResolvedDiskStat) {
496,"@@ -323,6 +323,10 @@ export class RawDebugSession extends v8.V8Protocol implements debug.ISession {
 		return this.send('stackTrace', args);",Looks good,return this.
497,"@@ -325,7 +325,7 @@ export class DebugEditorModelManager implements wbext.IWorkbenchContribution {
 
 	private static FOCUSED_STACK_FRAME_DECORATION: editorcommon.IModelDecorationOptions = {
 		isWholeLine: true,
-		className: 'debug-focussed-stack-frame-line',
+		className: 'debug-focused-stack-frame-line',","Make sure you adopt the same change on `src/vs/workbench/parts/debug/browser/media/debug.contribution.css` where this class name is used.
",Why did you change this?
498,"@@ -328,7 +328,7 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 	}
 
 	private get bundledTypeScriptPath(): string {
-		return path.join(__dirname, '..', 'node_modules', 'typescript', 'lib', 'tsserver.js');
+		return path.join(__dirname, '..', '..', 'node_modules', 'typescript', 'lib', 'tsserver.js');",Use `require.resolve('typescript/lib/tsserver.js')` instead to avoid the path dependency,Why this change?
499,"@@ -329,16 +329,20 @@ export function createApiFactory(
 				return extHostTerminalService.onDidCloseTerminal(listener, thisArg, disposables);
 			},
 			showInformationMessage(message, first, ...rest) {
-				return extHostMessageService.showMessage(Severity.Info, message, first, rest);",These changes are the main ones I'm uncertain about. Let me know if you think a different fix would be better,Why is this being removed?
500,"@@ -329,7 +329,7 @@ export class QuickOpenController extends Component implements IQuickOpenService
 		}
 
 		// Respect input value
-		if (options.value) {
+		if (options.value && !options.valueSelection) {
 			this.pickOpenWidget.setValue(options.value, options.valueSelection);",Aren't we loosing the value here as soon as a selection is provided? Isn't the better change to reset `valueSelection` after an validation pass?,Shouldn't this be `options.valueSelection`?
501,"@@ -33,6 +33,7 @@ import { Color } from 'vs/base/common/color';
 import { IMouseEvent } from 'vs/base/browser/mouseEvent';
 import { ClassName } from 'vs/editor/common/model/intervalTree';
 import { ITextModel, IModelDecorationOptions } from 'vs/editor/common/model';
+import { ICommandDelegate } from '../view/viewController';",Absolute imports,import { ICommand } from '../view/viewController';
502,"@@ -33,7 +27,7 @@ export const KEYBINDING_CONTEXT_WEBVIEWEDITOR_NOT_FOCUSED: ContextKeyExpr = KEYB
 export abstract class WebviewEditor extends BaseWebviewEditor {
 
 	protected _webviewFocusContextKey: IContextKey<boolean>;
-	protected _webview: WebView;
+	protected _webview: Webview;",Change this and the import back to it's regular casing?,Why this change?
503,"@@ -3318,7 +3318,7 @@
 				<dict>
 					<key>begin</key>
 					<string>(?x)
-								(\*|_)(?=\S)								# Open",Can you please update `markdown.tmLanguage.base` as well. We use that file to generate this one. You can run the generator using `(cd extensions/markdown; npm run update-grammar)`,<
504,"@@ -333,6 +346,27 @@ export class WorkingFilesModel implements IWorkingFilesModel {
 		return this.mapEntryToResource[resource.toString()];
 	}
 
+	private recordRecentlyClosedEntries(resources: WorkingFileEntry[]): void {
+		if (resources.length === 0) {
+			return;
+		}
+
+		// Make the active entry the first entry","@Tyriar can you explain what these lines are for?
",nit: `if (resources.length === 1) {`
505,"@@ -333,8 +333,11 @@ export class TabsTitleControl extends TitleControl {
 				// color, the two colors would collide and the tab border never shows up.
 				// see https://github.com/Microsoft/vscode/issues/33111
 				const activeTabBorderColor = this.getColor(isGroupActive ? TAB_ACTIVE_BORDER : TAB_UNFOCUSED_ACTIVE_BORDER);
+				const activeTabBorderColorTop = this.getColor(isGroupActive ? TAB_ACTIVE_BORDER_TOP : TAB_UNFOCUSED_ACTIVE_BORDER);","The logic here seems weird. I think you should not fallback to `TAB_UNFOCUSED_ACTIVE_BORDER` because if that color was set, in the bottom if-else case the color is still not applied. I would suggest to introduce a new color `TAB_UNFOCUSED_ACTIVE_BORDER_TOP` to do this properly.",I'm not sure if this is the best way to do this. I think it would be better to have a separate color for the top border.
506,"@@ -334,6 +334,16 @@ configurationRegistry.registerConfiguration({
 				nls.localize('sortOrder.modified', 'Files and directories are sorted by last modified date, in descending order. Directories are displayed before files.')
 			],
 			'description': nls.localize('sortOrder', ""Controls the way of sorting files and directories in the explorer."")
-		}
+		},",This should be contributed from `execution.contribution.ts`,E225 missing whitespace around operator
507,"@@ -334,6 +356,9 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 				diag('makeDirty() - prevented save because we are in conflict resolution mode', this.resource, new Date());
 			}
 		}
+
+		// Trigger listeners only if no auto save occurred and model changes were not blocked
+		this._onDidContentChange.fire();","@Tyriar hm careful here. there are some return statements above e.g. when the user undos his changes up to the saved version, don't we want to also update (or actually discard) the backup in that case?

Also I am not sure the comment `if no auto save occurred` makes sense.
",Why do we need this?
508,"@@ -334,7 +334,7 @@ MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
 	group: 'navigation',
 	order: 20,
 	command: revealInOsCommand,
-	when: ResourceContextKey.HasResource
+	when: ResourceContextKey.Scheme.isEqualTo('file')",@isidorn I think we can only ever reveal files,I think this should be `isEqualTo('file')`
509,"@@ -335,7 +336,15 @@ export class QuickOpenWidget implements IModelProvider {
 		}
 
 		this.applyStyles();
-","@Lixire I prefer to keep the newline here, looks logically too close otherwise imho:

![image](https://user-images.githubusercontent.com/900690/29318819-edb1b726-81d1-11e7-97af-d500eec526a4.png)
",} else {
510,"@@ -337,8 +337,9 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 
 	private showTaskNotification(): void {
 		const storageKey = 'workbench.tasks.ranTaskBefore';
-		if (!this.storageService.get(storageKey) && this.contextService.getWorkspace()) {
-			const fileName = path.relative(this.contextService.getWorkspace().resource.toString(), this.resource.toString());
+		const ignoreKey = 'workbench.tasks.ignoreTask';",Can we use a more specific name?,Why do we need this?
511,"@@ -339,6 +339,17 @@ export class HistoryService extends BaseHistoryService implements IHistoryServic
 		this.recentlyClosedFiles = [];
 	}
 
+	public block(block: boolean) {
+		if (block) {
+			this.blockStackChanges = true;
+			this.blockEditorHistoryChanges = true;
+		}","@wprater style, prefer `} else {`
",Why do we need this?
512,"@@ -339,6 +342,9 @@ export function isEqualOrParent(path: string, candidate: string, ignoreCase?: bo
 		return false;
 	}
 
+	path = normalize(path);",@isidorn wouldn't this have to move above the `if (candidate.length > path.length) {` check?,} else {
513,"@@ -339,7 +339,11 @@ export interface IAskpassService {
 }
 
 // Utils
+const invalidBranchPatternName = /(^\.)|(\/\.)|(\.\.)|(~)|(\^)|(:)|(\/$)|(\.lock$)|(\.lock\/)|(\\)|(\*)|(\s)|(^\s*$)|(\.$)/g;","Why wrapping everything in groups? The regex is now broken since the `^` and `$` were making sure the whole string is matched.
",const invalidBranchPattern = /(^\.)|(\/\.)|(\.\.)|(~)|(\^)|(:)|(\.lock$)|(\.lock\/)|(\\)|(\*)|(\s)|(^\s*$)|(\.$)/g;
514,"@@ -34,6 +34,10 @@
 	text-overflow: ellipsis;
 }
 
+.sizing-shrink > .monaco-icon-label > .monaco-icon-label-description-container {",I suggest to move this into tabstitle.css after line 104 where we have a similar rule. ,.sizing-shrink > {
515,"@@ -34,6 +34,23 @@ export class CopyValueAction extends Action {
 	}
 }
 
+export class CopyPropertyPathAction extends Action {",`CopyEvaluatePathAction` is a better name imho,
516,"@@ -34,6 +34,23 @@ export class CopyValueAction extends Action {
 	}
 }
 
+export class CopyPropertyPathAction extends Action {
+	static readonly ID = 'workbench.debug.viewlet.action.copyPropertyPath';",Change id to workbench.debug.viewlet.action.copyEvaluatePath',I think this should be `workbench.debug.viewlet.action.copyPropertyPath`
517,"@@ -34,6 +34,23 @@ export class CopyValueAction extends Action {
 	}
 }
 
+export class CopyPropertyPathAction extends Action {
+	static readonly ID = 'workbench.debug.viewlet.action.copyPropertyPath';
+	static LABEL = nls.localize('copyPropertyPath', ""Copy Property Path"");
+","I would change the label to ""Copy Path""",I don't think we need to localize this.
518,"@@ -34,6 +34,23 @@ export class CopyValueAction extends Action {
 	}
 }
 
+export class CopyPropertyPathAction extends Action {
+	static readonly ID = 'workbench.debug.viewlet.action.copyPropertyPath';
+	static LABEL = nls.localize('copyPropertyPath', ""Copy Property Path"");
+
+	constructor(id: string, label: string, private value: any) {
+		super(id, label, 'debug-action copy-property-path');","No need to pass the css class since this action does not have that, simply pass `undefined` as the third argument",`private value` is not used.
519,"@@ -34,7 +34,18 @@ export default class TypeScriptDocumentHighlightProvider implements DocumentHigh
 		}
 		return this.client.execute('occurrences', args, token).then((response): DocumentHighlight[] => {
 			let data = response.body;
-			if (data) {
+			if (data && data.length) {","We may also want to scope to using the TypeScript version just to be safe. That way if something does go terribly wrong, users could point to their own ts install as a workaround.",`data && data.length`
520,"@@ -340,4 +341,11 @@ suite('Sass - Sass Parser', () => {
 		assertNode('%hover', parser, parser._parseSimpleSelector.bind(parser));
 		assertNode('a%float', parser, parser._parseSimpleSelector.bind(parser));
 	});
+
+	test('Sass Parser - Css Variable Declaration', function() {","Just one tiny suggestion, we may want to use `CSS` or `css` rather than `Css`
",
521,"@@ -340,6 +341,17 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		return new RunOnceScheduler(() => this.hoverWidget.hide(), HOVER_DELAY);
 	}
 
+	@memoize
+	private get provideNonDebugHoverScheduler(): RunOnceScheduler {
+		return new RunOnceScheduler(() => {",Where is this disposed?,Why is this memoized?
522,"@@ -340,6 +341,17 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		return new RunOnceScheduler(() => this.hoverWidget.hide(), HOVER_DELAY);
 	}
 
+	@memoize
+	private get provideNonDebugHoverScheduler(): RunOnceScheduler {
+		return new RunOnceScheduler(() => {
+			const model = this.editor.getModel();
+			const supports = HoverProviderRegistry.ordered(model);",Why not simply call `getHover` (from `getHover.ts`) ?,Why do we need to memoize this?
523,"@@ -340,6 +342,9 @@ export function createApiFactory(initDataConfiguration: IInitConfiguration, init
 			onWillSaveTextDocument: (listener, thisArgs?, disposables?) => {
 				return extHostDocumentSaveParticipant.onWillSaveTextDocumentEvent(listener, thisArgs, disposables);
 			},
+			registerTreeExplorerNodeProvider(providerId: string, provider: vscode.TreeExplorerNodeProvider<any>) {","[needs change] This function must be marked as proposed - look at the [`sampleFunction`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/api/node/extHost.api.impl.ts#L279)
",
524,"@@ -342,7 +341,15 @@ export const Suggest = {
 		result.documentation = suggestion.documentationLabel;
 		result.sortText = suggestion.sortText;
 		result.filterText = suggestion.filterText;
-		result.textEdit = suggestion.textEdit && <any> TextEdit.to(suggestion.textEdit);
+
+		var overwriteBefore = (typeof suggestion.overwriteBefore !== 'undefined') ? suggestion.overwriteBefore : container.currentWord.length;","boh, `var`
",I don't think you need the `typeof` check here. `suggestion.overwriteBefore !== 'undefined'` should be enough.
525,"@@ -3429,6 +3460,15 @@ declare namespace vscode {
 		 * @return A new status bar item.
 		 */
 		export function createStatusBarItem(alignment?: StatusBarAlignment, priority?: number): StatusBarItem;
+
+		/**
+		 * Creates a [Terminal](#Terminal).
+		 *
+		 * @param name The optional name of a terminal, this will override the label used in the
+		 * terminal dropdown.
+		 * @return A new Terminal.
+		 */
+		export function createTerminal(name?: string): Thenable<vscode.Terminal>;","We do not return promises from there functions but already working objects (see `createStatusBarItem`). It should be `createTerminal(name?: string): Terminal`. We don't expose in the API  that stuff is being created/executed in a different process.
",nit: `createTerminal(name: ?string): Thenable<...>`
526,"@@ -344,3 +366,49 @@ interface CacheStats {
 	cacheFilterStartTime: number;
 	cacheFilterResultCount: number;
 }
+
+/**
+ * Collects a batch of items that each have a size. When the cumulative size of the batch reaches 'maxBatchSize', it calls the callback.
+ * If the batch isn't filled within 'timeout' ms, the callback is also called.
+ * And after 'batchOnlyAfter' items, the timeout is ignored, and the callback is called only when the batch is full.","`batchOnlyAfter` seems misleading, we batch before too.",nit: typo in `batchOnlyAfter`
527,"@@ -344,6 +344,14 @@ export class TerminalInstance implements ITerminalInstance {
 		}
 	}
 
+	get selection(): string | undefined {
+		if (this.hasSelection()) {
+			return this._xterm.getSelection();
+		} else {","I prefer to leave the else out (also be explicit with access modifier:

```ts
public get selection(): string | undefined {
	if (this.hasSelection()) {
		return this._xterm.getSelection();
	}
	return undefined;
}
```
",Why not just `return this._xterm.getSelection()`?
528,"@@ -346,8 +346,10 @@ class MouseDownOperation extends Disposable {
 
 	private _mouseMoveMonitor: GlobalEditorMouseMoveMonitor;
 	private _mouseDownThenMoveEventHandler: EventGateKeeper<EditorMouseEvent>;
+	private _mouseDragThenMoveEventHandler: EventGateKeeper<EditorMouseEvent>;","No need for a separate handler, I suggest to use `mouseState.lastMouseDownEvent` (which should be renamed to something better, see other comment) to differentiate the two cases inside `onMouseDownThenMove`",private _mouseUpThenMoveEventHandler: EventGateKeeper<EditorMouseEvent>;
529,"@@ -347,4 +352,19 @@ export class TerminalService implements ITerminalService {
 		}
 		return parts.join('_') + '.UTF-8';
 	}
+}
+
+interface ITerminalProcessConfiguration {
+	_name: string;","Underscore not necessary since it's public
",I'm not sure if this is the right place to put this. It seems like it should be in a separate file.
530,"@@ -347,4 +352,19 @@ export class TerminalService implements ITerminalService {
 		}
 		return parts.join('_') + '.UTF-8';
 	}
+}
+
+interface ITerminalProcessConfiguration {
+	_name: string;
+	_shellPath: string;
+}
+
+class TerminalProcessConfiguration implements ITerminalProcessConfiguration {","We don't really need to implement the interface, an interface is all we need to enforce the types. TypeScript allows regular objects `{}` to use interfaces and keeps the type safe.
",Why do we need this interface?
531,"@@ -349,6 +349,18 @@ export class TabsTitleControl extends TitleControl {
 		tabContainer.setAttribute('role', 'presentation'); // cannot use role ""tab"" here due to https://github.com/Microsoft/vscode/issues/8659
 		DOM.addClass(tabContainer, 'tab monaco-editor-background');
 
+		if (!this.tabOptions.showTabCloseButton || this.tabOptions.tabCloseButton === 'off') {",Please move this into the `doUpdate` method above where you will notice that there already is an update for `no-close-button` class from the other option (that should be deleted). We need to have it there because otherwise tabs will not update live from a config change.,I don't think we need this.
532,"@@ -3497,9 +3497,10 @@ declare namespace vscode {
 		 * [Terminal.show](#Terminal.show) in order to show the terminal panel.
 		 *
 		 * @param name Optional human-readable string which will be used to represent the terminal in the UI.
+		 * @param shellPath Path to the user-requested shell executable that will be used in the terminal","Change this to:

> @param shellPath Optional path to a custom shell executable to be used in the terminal.
",* @param shellPath Path to the user-requested shell executable that will be used in the terminal
533,"@@ -35,6 +35,10 @@
 
 /** Custom Mac Cursor */
 
+.monaco-workbench.mac.use-inline-toolbar > .monaco-sash.mac {","We should not add workbench dependencies here, instead if we want to override something for widgets it should go into workbench.css
",.monaco-sash
534,"@@ -350,7 +350,7 @@ export class NextEditorPart extends Part implements INextEditorGroupsService, IN
 		}
 	}
 
-	removeGroup(group: INextEditorGroupView | GroupIdentifier): void {
+	removeGroup(group: INextEditorGroupView | GroupIdentifier = this.activeGroup): void {",This will unfortunately not work if the group where the editor gets closed is not active. This happens when you just click on the tab close button while the group is not active. I suggest to expose the group parameter to the accessor and then using it.,I'm not sure if this is the right way to do this. I think it should be `this.activeGroup?.removeGroup(group)`
535,"@@ -354,3 +359,63 @@ export class SearchFilter implements IFilter {
 		return !(element instanceof FileMatch || element instanceof FolderMatch) || element.matches().length > 0;
 	}
 }
+
+export class SearchTreeController extends WorkbenchTreeController {","This works fine and we have it for instance in debug land.
However this is an old way to do this - it is a sort of bridge between comands and actions.

Since all your things could be commands this can than be much simpliar without any action items and things like that.
I suggest to look here for an inspiration on how to do it if all you guys are commands
https://github.com/Microsoft/vscode/blob/roblou/searchContextMenu/src/vs/workbench/parts/files/electron-browser/views/openEditorsView.ts#L312",
536,"@@ -357,11 +353,6 @@ export class WorkspaceServiceImpl extends WorkspaceService {
 		this.baseConfigurationService = this._register(new GlobalConfigurationService(environmentService));
 	}
 
-	saveWorkspace(location: URI): TPromise<void> {",@sandy081 fyi `saveWorkspace` is no longer possible from the renderer but always has to go to the main side because the ID changes and we need to reopen the workspace from the saved location,Why was this removed?
537,"@@ -358,20 +368,20 @@ export class NewStatPlaceholder extends FileStat {
 		throw new Error('Can\'t perform operations in NewStatPlaceholder.');
 	}
 
-	public rename(renamedStat: NewStatPlaceholder): void {
+	public rename(renamedStat: IFileStat): void {",@isidorn I think this can go back to `NewStatPlaceholder`,Why do we need to change this?
538,"@@ -358,20 +368,20 @@ export class NewStatPlaceholder extends FileStat {
 		throw new Error('Can\'t perform operations in NewStatPlaceholder.');
 	}
 
-	public rename(renamedStat: NewStatPlaceholder): void {
+	public rename(renamedStat: IFileStat): void {
 		throw new Error('Can\'t perform operations in NewStatPlaceholder.');
 	}
 
-	public find(resource: URI): NewStatPlaceholder {
+	public find(resource: URI): ExplorerItem {",@isidorn I think this can go back to `NewStatPlaceholder`,Why do we need to change this?
539,"@@ -358,6 +358,7 @@ export class ManageExtensionAction extends Action {
 				instantiationService.createInstance(EnableGloballyAction, localize('enableAlwaysAction.label', ""Enable (Always)""))
 			],
 			[
+				instantiationService.createInstance(AddToWorkspaceRecommendationsAction, localize('addToWorkspaceRecommendationsAction.label', ""Add to Workspace Recommendations"")),","How about having a short label - `Recommend (Workspace)`  and `Unrecommend (Workspace)`. Not sure `Workspace` word is necessary since a user can recommend only to Workspace, but having it makes it complete.","instantiationService.createInstance(AddToWorkspaceRecommendationsAction, localize('addToWorkspaceRecommendationsAction.label', ""Add to Workspace Recommendations"")),"
540,"@@ -36,12 +37,12 @@ export class QuickFixOracle {
 		this._disposables = dispose(this._disposables);
 	}
 
-	trigger(type: 'manual' | 'auto'): void {
+	trigger(type: 'manual' | 'auto', trigger?: CodeActionTrigger): void {",getting a little messy... can we fold both args into one request object and pass that along?,Why do we need this?
541,"@@ -362,6 +374,10 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 			return;
 		}
 
+		if (!this.configurationService.getValue<IDebugConfiguration>('debug').hideNonDebugHovers) {
+			this.nonDebugHoverPosition = mouseEvent.target.position;
+			this.provideNonDebugHoverScheduler.schedule();",Should we also `.cancel()` this somewhere?,Why do we need to schedule this here?
542,"@@ -364,6 +364,10 @@ export class Tree extends Events.EventEmitter implements _.ITree {
 		return this.model.hasTrait(trait, element);
 	}
 
+	public setSorter(sorter: _.ISorter): void {",This would not be needed once the sorter is configuring itself.,`sorter` -> `sorter`
543,"@@ -366,6 +366,34 @@ export class FileService implements IFileService {
 
 						// 5.) resolve
 						return this.resolve(resource);
+					}, error => {
+						// Can't use 'w' for hidden files, so truncate and use 'r+' if the file exists
+						if (!exists || error.code !== 'EPERM') {","@seishun should we add a check for windows here? as far as I know, hidden files (and this issue) only manifest on windows","I'm not sure if this is the best way to do this. If the file doesn't exist, we should return an error."
544,"@@ -366,6 +366,34 @@ export class FileService implements IFileService {
 
 						// 5.) resolve
 						return this.resolve(resource);
+					}, error => {
+						// Can't use 'w' for hidden files, so truncate and use 'r+' if the file exists
+						if (!exists || error.code !== 'EPERM') {
+							throw error;
+						}
+
+						// 5.) truncate
+						return pfs.truncate(absolutePath, 0).then(() => {
+							let writeFilePromise: TPromise<void>;",@seishun I still suggest to extract those lines which are now duplicate to a separate method that can be called then once from the normal path and once from the error path. that should make the change much smaller and easier to understand üëç ,Can we use `fs.writeFileSync` here?
545,"@@ -369,6 +373,30 @@ export class WindowsManager implements IWindowsMainService, IWindowEventService
 			iPathsToOpen = this.cliToPaths(openConfig.cli, ignoreFileNotFound);
 		}
 
+		let configuration: IWindowConfiguration;","@Tyriar suggest to move this code block down before the line

`// Handle files to open/diff or to create when we dont open a folder` 

Because there we actually start the job of opening something.
",let iPathsToOpen: Array<string>;
546,"@@ -369,6 +373,30 @@ export class WindowsManager implements IWindowsMainService, IWindowEventService
 			iPathsToOpen = this.cliToPaths(openConfig.cli, ignoreFileNotFound);
 		}
 
+		let configuration: IWindowConfiguration;
+		let openInNewWindow = openConfig.preferNewWindow || openConfig.forceNewWindow;
+
+		// Restore any existing backup workspaces
+		if (openConfig.restoreBackups) {
+			const workspacesWithBackups = this.backupService.getWorkspaceBackupPathsSync();","@Tyriar again not sure about all the sync fs calls are needed here
",nit: `const` instead of `let`
547,"@@ -37,6 +37,8 @@ import { attachProgressBarStyler } from 'vs/platform/theme/common/styler';
 import { IDisposable, combinedDisposable } from 'vs/base/common/lifecycle';",This is the only file I did not yet review. Will first try out the feature a bit.,import {
548,"@@ -37,6 +38,7 @@ export class DirtyFilesTracker implements IWorkbenchContribution {
 
 	constructor(
 		@ITextFileService private textFileService: ITextFileService,
+		@IFileService private fileService: IFileService,","Unused service?
",
549,"@@ -370,9 +370,7 @@ export class WindowsService implements IWindowsService, IURLHandler, IDisposable
 			context: OpenContext.API,
 			cli: this.environmentService.args,
 			pathsToOpen: paths,
-			forceNewWindow: options && options.forceNewWindow,
-			forceReuseWindow: options && options.forceReuseWindow,
-			forceOpenWorkspaceAsFile: options && options.forceOpenWorkspaceAsFile
+			...options
 		});
 
 		return TPromise.as(null);",No functional change refactored the `options` argument.,`options` can be `undefined`
550,"@@ -370,9 +374,9 @@ export abstract class TextFileService implements ITextFileService {
 		return this._models.getAll(<URI>arg1);
 	}
 
-	private getDirtyFileModels(resources?: URI[]): ITextFileEditorModel[];
-	private getDirtyFileModels(resource?: URI): ITextFileEditorModel[];
-	private getDirtyFileModels(arg1?: any): ITextFileEditorModel[] {
+	public getDirtyFileModels(resources?: URI[]): ITextFileEditorModel[];","@Tyriar why public here? not used outside it seems
",Why is this public?
551,"@@ -371,6 +371,17 @@ export function registerCommands(): void {
 		}
 	});
 
+	KeybindingsRegistry.registerCommandAndKeybindingRule({","I don't think this is the right way to handle this, it would be better if there was an explicit exception on Windows similar to this:

https://github.com/Microsoft/vscode/blob/851d231fe94f45cee44f5ddaa0b2a89fa3c8df96/src/vs/workbench/parts/terminal/electron-browser/terminalInstance.ts#L328-L330

We don't want alt+f4 handled by VS Code's keybinding system, it would be better to lean on the native keybinding. Plus we will always want alt+f4 to quit on Windows if it's used, I don't see why anyone would/should configure this.",
552,"@@ -373,15 +376,31 @@ export function registerCommands(): void {
 		win: { primary: void 0 }
 	});
 
-	CommandsRegistry.registerCommand('_workbench.diff', function (accessor: ServicesAccessor, args: [URI, URI, string, string]) {
+	CommandsRegistry.registerCommand('_workbench.diff', function (accessor: ServicesAccessor, args: [URI, URI, string, string, vscode.TextDocumentShowOptions]) {",it's dangerous to use the vscode-module here (actually everywhere outside the extension host) because these type actually don't exist. for interfaces it's OK because they disappear but using `IEditorOption` would have been better,I don't think we need the `string` here.
553,"@@ -373,6 +373,19 @@ export class VSCodeWindow {
 			}
 		});
 
+		// Swipe command support (macOS)
+		this._win.on('swipe', (e, cmd) => {",@seivan can we reuse this code with the `on('app-command')` handler? Seems duplicate.,
554,"@@ -375,3 +390,26 @@ CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
 		primary: KeyCode.RightArrow
 	}
 }));
+
+@editorAction
+class ReplCopyAllAction extends EditorAction {
+
+	constructor() {
+		super({
+			id: 'repl.action.copyall',
+			label: nls.localize('actions.repl.copyall', ""Debug Copy All""),","I would prefer the title to be ""Debug: Console Copy All"", that way it nicely aligns with the other debug actions and has a more clear name","I don't think we need this action, we can just call `super()` directly."
555,"@@ -375,3 +390,26 @@ CommonEditorRegistry.registerEditorCommand(new SuggestCommand({
 		primary: KeyCode.RightArrow
 	}
 }));
+
+@editorAction
+class ReplCopyAllAction extends EditorAction {
+
+	constructor() {
+		super({
+			id: 'repl.action.copyall',
+			label: nls.localize('actions.repl.copyall', ""Debug Copy All""),
+			alias: 'Debug Copy All',
+			precondition: debug.CONTEXT_IN_DEBUG_REPL,
+			kbOpts: {","I think you can just leave out the `kbOpts` and it should nicely compile, please try that",I don't think we need this action. We can just call `super()` directly.
556,"@@ -375,6 +375,11 @@ export class ActionProvider extends ContributableActionProvider {
 							revertAction.setResource(resource);
 							revertAction.enabled = openEditor.isDirty();
 							result.push(revertAction);
+
+							const showModificationsAction = this.instantiationService.createInstance(ShowModificationsAction, ShowModificationsAction.ID, ShowModificationsAction.LABEL);","Maybe rename this to ""Compare with Saved"" to make it clear what it does? And then we could maybe move this command into the place where today we have ""Select for Compare""?

![image](https://user-images.githubusercontent.com/900690/27944046-564a8180-62e4-11e7-9bb9-49ebd573b712.png)
",const result = this.instantiationService.createInstance();
557,"@@ -376,6 +380,28 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		let configuration: IWindowConfiguration;
+		let openInNewWindow = openConfig.preferNewWindow || openConfig.forceNewWindow;
+
+		// Restore any existing backup workspaces
+		if (openConfig.restoreBackups) {
+			const workspacesWithBackups = this.backupService.getWorkspaceBackupPaths();
+
+			workspacesWithBackups.forEach(workspacePath => {
+				if (!fs.existsSync(workspacePath)) {","@Tyriar would it be possible that we have a backup workspace without backups to restore? maybe we should add more checks here that a backup workspace path should only cause a window to open if it has backups, otherwise it gets deleted. I am thinking of situations where we the backup workspace gets out of sync with the backups within (for whatever reason - e.g. crash). This would prevent bugs where multiple windows just open even though there are no backups.
",nit: `const workspaceWithBackups = this.backupService.getWorkspaceBackupPaths();`
558,"@@ -376,7 +376,7 @@ MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
 	group: '5_cutcopypaste',
 	order: 30,
 	command: copyPathCommand,
-	when: ResourceContextKey.HasResource
+	when: ResourceContextKey.IsFile","@isidorn since we only show files in the explorer, this is a bit more specific",I think this should be `IsFile` instead of `HasResource`
559,"@@ -378,6 +424,14 @@ export class Model extends ee.EventEmitter implements debug.IModel {
 		this.emit(debug.ModelEvents.CALLSTACK_UPDATED);
 	}
 ","Should `continueThreads()` also `clearCallstack()` for each `thread`?
",if (debug.ModelEvents.CALLSTACK_UPDATED) {
560,"@@ -378,7 +391,21 @@ export class NextMatchFindAction extends MatchFindAction {
 	}
 
 	protected _run(controller: CommonFindController): boolean {","Here we are always using the search string found in the global search clipboard, but we write to the global search clipboard only in the `StartSearchAction`. Perhaps the controller should write to the global search clipboard on each and every `findState` change ? i.e. anytime the user types in the find input ?",@Override
561,"@@ -38,7 +38,7 @@ export class DefaultCompletionItemProvider implements vscode.CompletionItemProvi
 
 		// If document can be css parsed, get currentNode
 		if (isStyleSheet(document.languageId)) {
-			const rootNode = parseDocument(document, false);
+			const rootNode = parsePartialStylesheet(document, position);",Lets partial parse only if `document.lineCount > 1000`. Adjust the number after running tests on stable,Why do we need to pass `position`?
562,"@@ -3801,6 +3810,13 @@ export interface ICommonCodeEditor extends IEditor {
 	onDidType(listener: (text: string) => void): IDisposable;
 
 	/**
+	 * An event emitted when users paste text in the editor.
+	 * @event
+	 * @internal
+	 */
+	onDidPaste(listener: (range: Range) => void): IDisposable;","Here we say we give out a `Range`, but the implementation gives out an `IRange`. Please adjust the implementation.",I think this should be `onDidPaste(range: Range) => void`
563,"@@ -3804,6 +3870,15 @@ declare module 'vscode' {
 		export function registerTextDocumentContentProvider(scheme: string, provider: TextDocumentContentProvider): Disposable;
 
 		/**
+		 * Register a [tree explorer node provider](#TreeExplorerNodeProvider).","tree explorer node provider -> TreeExplorerNodeProvider
",* Registers a [tree explorer node provider](#TreeExplorerNodeProvider).
564,"@@ -384,6 +386,12 @@ class MouseDownOperation extends Disposable {
 				() => !this._viewHelper.isDirty()
 			)
 		);
+		this._mouseDragThenMoveEventHandler = this._register(","No need for a separate handler, I suggest to code the dnd case inside `onMouseDownThenMove`","this._mouseDragThenMoveEventHandler,"
565,"@@ -3844,6 +3844,16 @@ declare module 'vscode' {
 		Hint = 3
 	}
 
+	/**
+	 * Additional metadata about the type of diagnostic.
+	 */
+	export enum DiagnosticTag {
+		/**
+		 * Unused or unnecessary code.
+		 */
+		Unnecessary = 'unnecessary'",https://github.com/Microsoft/vscode/wiki/Extension-API-guidelines#enums,Should this be `unnecessary`?
566,"@@ -388,20 +388,21 @@ export interface ISuggestion {
 	label: string;
 	codeSnippet: string;
 	type: string;
-	textEdit?: EditorCommon.ISingleEditOperation;
 	typeLabel?: string;
 	documentationLabel?: string;
 	filterText?: string;
 	sortText?: string;
 	noAutoAccept?: boolean;
+	overwriteBefore?: number;
+	overwriteAfter?: number;
+
+	textEdit?: EditorCommon.ISingleEditOperation;","this isn't needed anymore, right?
",Why do we need this?
567,"@@ -389,6 +395,16 @@ export class DefaultController implements _.IController {
 
 		return false;
 	}
+
+	protected setOpenMode(openMode: WorkbenchOpenMode) {
+		if (this.options.openMode !== openMode) {
+			this.options.openMode = openMode;
+		}
+	}
+
+	protected isInSingleClickOpenMode() {",Maybe better `openOnSingleClick`,nit: `isSingleClickOpenMode` -> `isSingleClickOpenMode`
568,"@@ -39,12 +42,42 @@ export class TerminalLinkHandler {
 	private _tooltipDisposables: IDisposable[] = [];
 	private _widgetManager: TerminalWidgetManager;
 
+	// Changing any regex may effect this value, hence changes this as well if required.
+	private _winLineAndColumnMatchIndex = 12;
+	private _unixLineAndColumnMatchIndex = 15;
+
+	private _lineAndColumnClauses = [",Any reason this isn't a constant up the top so it's shared between multiple instances of `TerminalLinkHandler`?,nit: `_winLineAndColumnMatchIndex: int = 12;`
569,"@@ -39,13 +46,15 @@ export class QuickFixController implements IEditorContribution {
 	constructor(editor: ICodeEditor,
 		@IMarkerService markerService: IMarkerService,
 		@IContextKeyService contextKeyService: IContextKeyService,
-		@ICommandService commandService: ICommandService,
+		@ICommandService private readonly commandService: ICommandService,",`_` for privates please,Why do we need this?
570,"@@ -391,11 +418,17 @@ export class Workbench implements IPartService {
 			this.sideBarHidden = true; // we hide sidebar in single-file-mode
 		}
 
-		let registry = (<IViewletRegistry>Registry.as(ViewletExtensions.Viewlets));
+		let registry = (<ViewletRegistry>Registry.as(ViewletExtensions.Viewlets));
 		if (!registry.getDefaultViewletId()) {
 			this.sideBarHidden = true; // can only hide sidebar if we dont have a default viewlet id","@isidorn for the sake of completness, the panel should also be hidden if there is no default panel
",Why is this change needed?
571,"@@ -391,7 +391,7 @@ export class TerminalTaskSystem extends EventEmitter implements ITaskSystem {
 			} else {
 				(this.terminalService.configHelper as TerminalConfigHelper).mergeDefaultShellPathAndArgs(shellLaunchConfig);
 			}
-			let shellArgs = shellLaunchConfig.args.slice(0);
+			let shellArgs = <string[]>shellLaunchConfig.args.slice(0);",@weinand FYI IShellLaunchConfig can now have args as a string to support @dbaeumer's use case of needed to use a pre-escaped set of arguments. I needed to make this change which I believe shouldn't cause any issues.,Why do we need this change?
572,"@@ -392,3 +393,58 @@ export const isAbsoluteRegex = /^((\/|[a-zA-Z]:\\)[^\(\)<>\\'\""\[\]]+)/;
 export function isAbsolute(path: string): boolean {
 	return isAbsoluteRegex.test(path);
 }
+
+/**
+ * Shortens the paths but keeps them easy to distinguish.
+ * Replaces not important parts with ellipsis.
+ * Every shorten path matches only one original path and vice versa.
+ */
+export function shorten(paths: string[]): string[] {
+	var separator = isWindows ? '\\' : '/';",Suggest to use `paths.nativeSep` here (https://github.com/Microsoft/vscode/blob/master/src/vs/base/common/paths.ts#L20),nit: `isWindows ? '\\' : '/'`
573,"@@ -392,3 +393,58 @@ export const isAbsoluteRegex = /^((\/|[a-zA-Z]:\\)[^\(\)<>\\'\""\[\]]+)/;
 export function isAbsolute(path: string): boolean {
 	return isAbsoluteRegex.test(path);
 }
+
+/**
+ * Shortens the paths but keeps them easy to distinguish.
+ * Replaces not important parts with ellipsis.
+ * Every shorten path matches only one original path and vice versa.
+ */
+export function shorten(paths: string[]): string[] {
+	var separator = isWindows ? '\\' : '/';
+	var ellipsis = '...';",How about using the actual unicode ellipsis character? I think that will save us some pixels (e.g. http://www.fileformat.info/info/unicode/char/2026/index.htm),nit: `isWindows ? '\\' : '/'`
574,"@@ -392,6 +392,9 @@ export class VSCodeMenu {
 	}
 
 	private setOpenRecentMenu(openRecentMenu: Electron.Menu): void {
+		openRecentMenu.append(this.createMenuItem(nls.localize({ key: 'miReopenClosedFile', comment: ['&& denotes a mnemonic'] }, ""&&Reopen Closed File""), 'workbench.files.action.reopenClosedFile'));
+		openRecentMenu.append(__separator__());","@Tyriar careful, the menu might not have any entries (if there are not recent files) so you would have one separator too much in the end
",I think this should be `&& Reopen Closed File`
575,"@@ -392,6 +406,7 @@ export class InputBox extends Widget {
 				const styles = this.stylesForType(this.message.type);
 				spanElement.style.backgroundColor = styles.background ? styles.background.toString() : null;
 				spanElement.style.border = styles.border ? `1px solid ${styles.border}` : null;
+				spanElement.style.wordWrap = 'break-word';",I would prefer if we added this in the inputBox.css here https://github.com/Microsoft/vscode/blob/isidorn/searchPanel/src/vs/base/browser/ui/inputbox/inputBox.css#L88,Why do we need this?
576,"@@ -392,9 +388,13 @@ export class MainThreadTextEditor {
 		return false;
 	}
 
-	insertSnippet(template: string, opts: IInsertSnippetOptions) {
+	insertSnippet(template: string, opts: IUndoStopOptions) {",@jrieken Should `console.warn('applyEdits on invisible editor');` be added to `insertSnippet`?,I think this should be `IUndoStopOptions`
577,"@@ -394,6 +395,48 @@ export class ManageExtensionAction extends Action {
 	}
 }
 
+export class AddToWorkspaceRecommendationsAction extends Action implements IExtensionAction {","Since there is an action to add an extension to recommended list, there should also be a counter action to remove it from recommended list",
578,"@@ -396,7 +396,7 @@ MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
 		id: OPEN_FOLDER_SETTINGS_COMMAND,
 		title: OPEN_FOLDER_SETTINGS_LABEL
 	},","No. This will then also work for the top level singe folder case. Which we do not want.
Same for the next change.",{
579,"@@ -396,7 +396,7 @@ MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
 		id: OPEN_FOLDER_SETTINGS_COMMAND,
 		title: OPEN_FOLDER_SETTINGS_LABEL
 	},
-	when: ContextKeyExpr.and(ExplorerRootContext, ExplorerFolderContext)
+	when: ExplorerRootContext","@isidorn I was not sure about this condition, isn't a root always a folder too? same for the one below",I think this should be `ExplorerFolderContext`
580,"@@ -399,6 +399,22 @@ export class Color {
 		return new Color(new RGBA(r, g, b, a));
 	}
 
+	toRGB(...backgrounds: Color[]): Color {",@Dari-K should this have a better name to reflect what it does? It seems to blend multiple colors into one?,public static Color toRGB(...): Color {
581,"@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 'use strict';
 
-import { Emitter } from 'vs/base/common/event';
+import { Emitter, createEmptyEvent } from 'vs/base/common/event';",Event.none?,Why do we need this change?
582,"@@ -4,8 +4,9 @@
 		""module"": ""commonjs"",
 		""outDir"": ""./out"",
 		""noUnusedLocals"": true,
+		""sourceMap"": true,
 		""lib"": [
-			""es5"", ""es2015.promise""
+			""es5"", ""es2015.promise"", ""dom""",Is that intended?,Why is this needed?
583,"@@ -4,8 +4,9 @@
  *--------------------------------------------------------------------------------------------*/
 'use strict';
 
-import {onUnexpectedError} from 'vs/base/common/errors';
+import {onUnexpectedError, illegalArgument} from 'vs/base/common/errors';
 import * as strings from 'vs/base/common/strings';
+import types = require('vs/base/common/types');","no more old school require pls
",Why is this needed?
584,"@@ -4,9 +4,11 @@
  *--------------------------------------------------------------------------------------------*/
 'use strict';
 
+import nls = require('vs/nls');","no more old school require please
",
585,"@@ -4,9 +4,11 @@
  *--------------------------------------------------------------------------------------------*/
 'use strict';
 
+import nls = require('vs/nls');
 import {IAction} from 'vs/base/common/actions';
 import {IEventEmitter, BulkListenerCallback} from 'vs/base/common/eventEmitter';
 import {MarkedString} from 'vs/base/common/htmlContent';
+import types = require('vs/base/common/types');","no more old school require please
",Why do we need this?
586,"@@ -40,10 +40,10 @@ exports.loaderConfig = function (emptyPaths) {
 			paths: {
 				'vs/extensions': 'extensions'
 			}
-		}
+		},
+		nodeModules: emptyPaths||[]","Is this change related to 3077?
",`emptyPaths || []`
587,"@@ -40,10 +41,11 @@ export class StartDebugActionItem implements IActionItem {
 		@IDebugService private debugService: IDebugService,
 		@IThemeService private themeService: IThemeService,
 		@IConfigurationService private configurationService: IConfigurationService,
-		@ICommandService private commandService: ICommandService
+		@ICommandService private commandService: ICommandService,
+		@IContextViewService private contextViewService: IContextViewService,",@cleidigh remove `private` here to fix the warning,Why do we need this?
588,"@@ -40,6 +40,10 @@ registry.registerWorkbenchAction(new SyncActionDescriptor(QuickOpenViewPickerAct
 	primary: KeyMod.CtrlCmd | KeyCode.KEY_Q, mac: { primary: KeyMod.WinCtrl | KeyCode.KEY_Q }, linux: { primary: null }
 }), 'Quick Open View');
 
+registry.registerWorkbenchAction(new SyncActionDescriptor(ShowTasksAction, ShowTasksAction.ID, ShowTasksAction.LABEL, {",`cmd+shift+t` is taken by 'Reopen closed editor',I think this should be `KeyCode.KEY_Q` instead of `null`.
589,"@@ -40,6 +40,7 @@ export interface ParsedArgs {
 	'enable-proposed-api'?: string | string[];
 	'open-url'?: string | string[];
 	'skip-getting-started'?: boolean;
+	dumpDefaultConfiguration?: string;",We seem to prefer `dash-separated-style-options` here.,Why do we need this?
590,"@@ -40,6 +40,7 @@ import { ContextKeyService } from 'vs/platform/contextkey/browser/contextKeyServ
 import { IMenuService } from 'vs/platform/actions/common/actions';
 import { IStandaloneThemeService } from 'vs/editor/standalone/common/standaloneThemeService';
 import { StandaloneThemeServiceImpl } from 'vs/editor/standalone/browser/standaloneThemeServiceImpl';
+import { ILogService, NullLogService } from 'vs/platform/log/common/log';",#41586 ,import { ILogService } from 'vs/platform/log/common';
591,"@@ -40,8 +40,8 @@ export class Source {
 			// first try to find the raw source amongst the stack frames - since that represenation has more data (source reference),","Looks good.
",//
592,"@@ -400,7 +400,7 @@ class TokenTreeBuilder {
 
 /**
  * Parses this grammar:
- *	grammer = { line }
+ *	grammar = { line }",I hope this isn't a problem :-),Why did you change this?
593,"@@ -401,7 +401,7 @@ export function registerCommands(): void {
 		if (!options || typeof options !== 'object') {
 			options = {
 				preserveFocus: false,
-				pinned: true
+				pinned: undefined",Remove `pinned: undefined`,Why is this change needed?
594,"@@ -404,7 +404,7 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 			}
 
 			// Focus (unless prevented)
-			const focus = !options || !options.preserveFocus;
+			const focus = !options || options.preserveFocus;","This cannot be changed...
",Why is this change needed?
595,"@@ -405,11 +405,19 @@ export namespace Suggest {
 	}
 };
 
+
+function convertSignatureDocumentation(documentation: string | types.MarkdownString): undefined | string | htmlContent.IMarkdownString {
+	if (!documentation) {
+		return undefined;
+	}
+	return typeof documentation === 'string' ? documentation : MarkdownString.from(documentation);
+}
+","lgtm but should be moved into the `MarkdownString` namespace with a better name, like `fromStrict` signaling that is just strings or the MarkdownString, not the MarkedString. Or rename the `from` function to something like `fromOldOrNew`",I think this should be `MarkdownString.from(documentation)`
596,"@@ -406,15 +409,15 @@ export class WindowsManager implements IWindowsMainService {
 			}
 
 			// Open Files in last instance if any and flag tells us so",The comment should probably be updated,} else {
597,"@@ -406,7 +406,13 @@ registerEditorCommand(new SuggestCommand({
 registerEditorCommand(new SuggestCommand({
 	id: 'selectLastSuggestion',
 	precondition: ContextKeyExpr.and(SuggestContext.Visible, SuggestContext.MultipleSuggestions),
-	handler: c => c.selectLastSuggestion()
+	handler: c => c.selectLastSuggestion(),
+	kbOpts: {
+		weight: weight,
+		kbExpr: EditorContextKeys.textFocus,
+		primary: KeyCode.End,
+		secondary: [KeyCode.End],",Use `secondary` only when the key code is different from `primary` ü§ì ,I think this should be `[KeyCode.End]`
598,"@@ -406,7 +406,7 @@ MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
 		id: REMOVE_ROOT_FOLDER_COMMAND_ID,
 		title: REMOVE_ROOT_FOLDER_LABEL
 	},
-	when: ContextKeyExpr.and(ExplorerRootContext, ExplorerFolderContext)
+	when: ExplorerRootContext
 });",Same as previous comment.,Why did you remove the `and`?
599,"@@ -407,12 +415,30 @@ class MouseDownOperation extends Disposable {
 		this._dispatchMouse(position, true);
 	}
 
+	private _onMouseDragThenMove(e: EditorMouseEvent): void {","Merge into `_onMouseDownThenMove` and use `mouseState.lastMouseDownEvent` (which should be renamed to something better, see other comment) to differentiate the two cases",private void _onMouseDragThenMove(EditorMouseEvent e): void {
600,"@@ -407,12 +415,30 @@ class MouseDownOperation extends Disposable {
 		this._dispatchMouse(position, true);
 	}
 
+	private _onMouseDragThenMove(e: EditorMouseEvent): void {
+		this._lastMouseEvent = e;
+		this._mouseState.setModifiers(e);
+		this._mouseState.setMouseDownEvent('drag');",`this._mouseState.setMouseDownEvent('drag');` should move to the `start` method when the operation starts. The `lastMouseDownEvent` should be set only once when the operation starts inside `start`.,Why do we need this?
601,"@@ -408,8 +408,8 @@ export abstract class AbstractDeleteAllToBoundaryAction extends EditorAction {
 		effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);
 
 		let endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);
+
 		let edits: IIdentifiedSingleEditOperation[] = effectiveRanges.map(range => {
-			endCursorState.push(new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn));","I didn't understand this line, wouldn't this produce duplicate cursors?",Why is this change needed?
602,"@@ -4085,7 +4085,7 @@ declare module 'vscode' {
 		 * @param options Options to control how the document will be created.
 		 * @return A promise that resolves to a [document](#TextDocument).
 		 */
-		export function openTextDocument(options?: { language: string; }): Thenable<TextDocument>;
+		export function openTextDocument(options?: { language?: string; contents?: string; }): Thenable<TextDocument>;","missing jsdoc-comment, also use `content` to align with `TextDocumentContentProvider`",Why do we need `contents` here?
603,"@@ -409,6 +409,10 @@ export function createApiFactory(initData: IInitData, threadService: IThreadServ
 			onWillSaveTextDocument: (listener, thisArgs?, disposables?) => {
 				return extHostDocumentSaveParticipant.onWillSaveTextDocumentEvent(listener, thisArgs, disposables);
 			},
+			onDidChangeDiffInformation: (listener, thisArgs?, disposables?) => {
+				// TODO@joao
+				return createEmptyEvent()(listener, thisArgs, disposables);",We could the be smart about this and *only* send these event from the main side when we have listeners on the ext host side,Is this TODO still relevant?
604,"@@ -409,7 +415,7 @@ export class SuggestModel implements IDisposable {
 		if (ctx.column > this.context.column && this.completionModel.incomplete && ctx.leadingWord.word.length !== 0) {
 			// typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger
 			const { complete, incomplete } = this.completionModel.resolveIncompleteInfo();
-			this.trigger(this._state === State.Auto, true, incomplete, complete);
+			this.trigger({ auto: this._state === State.Auto }, true, incomplete, complete);","Not so sure about having `auto` in the context... Today this too course grained and we need to differentiate between 24x7 IntelliSense and resolving an incomplete suggestion list. Today, `auto` is more or less just used to control the widget, e.g. show empty with loading, show empty results etc...

At least, we must make sure that this doesn't leak into the extension host",`this._state === State.Auto` -> `this._state === State.Auto`
605,"@@ -41,13 +41,12 @@
 		}
 	},
 	""scripts"": {
-		""compile"": ""node ./node_modules/vscode/bin/compile -watch -p ./"",
-		""vscode:prepublish"": ""node ../../node_modules/gulp/bin/gulp.js --gulpfile ../../build/gulpfile.extensions.js compile-extension:vscode-api-tests ./tsconfig.json""
+		""compile"": ""gulp compile-extension:vscode-api-tests"",
+		""watch"": ""gulp watch-extension:vscode-api-tests""",The extension shouldn't have an implicit dependency on the *parent* project/package.json. Now it misses the dependency to `gulp` and `typescript`. I'd reckon to simply update the `typescript` dependency here,Why did you remove the `./`?
606,"@@ -41,13 +43,16 @@ export class UntitledEditorModel extends StringEditorModel implements IEncodingS
 		@IModeService modeService: IModeService,
 		@IModelService modelService: IModelService,
 		@IFileService private fileService: IFileService,
-		@IConfigurationService private configurationService: IConfigurationService
+		@IConfigurationService private configurationService: IConfigurationService,
+		@IBackupService private backupService: IBackupService,","Unused service?
",Why do we need a backup service?
607,"@@ -41,6 +41,14 @@ configurationRegistry.registerConfiguration({
 		'terminal.integrated.fontFamily': {
 			'description': nls.localize('terminal.integrated.fontFamily', ""The font family used by the terminal (CSS font-family format), this defaults to editor.fontFamily's value.""),
 			'type': 'string'
+		},
+		'terminal.integrated.fontSize': {","Font size should have a default here, otherwise auto-complete does this.

![image](https://cloud.githubusercontent.com/assets/2193314/15760084/816ab9b0-28c6-11e6-8262-e26f7e994a58.png)
",I don't think this should be a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I think it should be a string.
608,"@@ -41,6 +41,14 @@ configurationRegistry.registerConfiguration({
 		'terminal.integrated.fontFamily': {
 			'description': nls.localize('terminal.integrated.fontFamily', ""The font family used by the terminal (CSS font-family format), this defaults to editor.fontFamily's value.""),
 			'type': 'string'
+		},
+		'terminal.integrated.fontSize': {
+			'description': nls.localize('terminal.integrated.fontSize', ""The font size used by the terminal (in pixels), this defaults to editor.fontSize's value.""),","Sorry but let's go for consistency with the editor settings for this in commonEditorConfig.ts:

```
""Controls the font family of the terminal.""
""Controls the font size of the terminal.""
""Controls the line height of the terminal.""
```
",I don't think this should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I think it should be a string.
609,"@@ -41,6 +41,14 @@ configurationRegistry.registerConfiguration({
 		'terminal.integrated.fontFamily': {
 			'description': nls.localize('terminal.integrated.fontFamily', ""The font family used by the terminal (CSS font-family format), this defaults to editor.fontFamily's value.""),
 			'type': 'string'
+		},
+		'terminal.integrated.fontSize': {
+			'description': nls.localize('terminal.integrated.fontSize', ""The font size used by the terminal.""),","Add: "" (in pixels)""
",I don't think this should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I think it should be a<msg>I don't think it should be a<msg>I think it should be a string.
610,"@@ -41,6 +41,7 @@
     ""semver"": ""4.3.6"",
     ""spdlog"": ""0.6.0"",
     ""sudo-prompt"": ""^8.0.0"",
+    ""twitter-text"": ""^2.0.4"",",One thing I can't figure out is that typescript keeps throwing `Cannot find module 'twitter-text'` even when I've added the required types and it *does* compile properly. Am I missing something?,"""twitter-text"": ""^2.0.4"","
611,"@@ -41,6 +41,7 @@ export interface ParsedArgs {
 	'open-url'?: string | string[];
 	'skip-getting-started'?: boolean;
 	'sticky-quickopen'?: boolean;
+	dumpDefaultConfiguration?: string;",Don't forget to move to `-`.,
612,"@@ -41,6 +65,7 @@ suite('Workbench - TerminalLinkHandler', () => {
 			testLink('c:/a/long/path');
 			testLink('c:\\a\\long\\path');
 			testLink('c:\\mixed/slash\\path');
+			testLink('a/relative/path');","Will this also linkify just plain words for example `""foo""`? That way after validation the output of `ls` should all be linked. If so a test for that would be great.",testLink('a/relative/path');
613,"@@ -41,7 +41,6 @@
 	cursor: pointer;
 	height: 35px;
 	box-sizing: border-box;
-	border: 1px solid transparent;","@shizengzhou not a good change, this border is needed when the `tab.border` color is set, see:

![image](https://user-images.githubusercontent.com/900690/39416426-1942de88-4c4d-11e8-90c0-a1e1ea624fd2.png)
",border: 1px solid transparent;
614,"@@ -410,6 +410,11 @@ export interface IFileStat extends IBaseStat {
 	 */
 	isDirectory: boolean;
 
+	/**
+	 * The resource is a simbolic link.",simbolic => symbolic,* The resource is a directory.
615,"@@ -411,6 +411,10 @@ export class EndOfLineEdit {
 	static readonly CRLF: EndOfLineEdit = Object.freeze({ newEol: EndOfLine.CRLF });
 
 	newEol: EndOfLine;
+
+	constructor(newEol: EndOfLine) {","Any reason you didn't do:
```ts
constructor(public newEol: EndOfLine) {
}
```
Is it because there would be an empty function body?",
616,"@@ -411,6 +413,9 @@ export class Item extends Events.EventEmitter {
 				var staleItems: IItemMap = {};
 				while (this.firstChild !== null) {
 					staleItems[this.firstChild.id] = this.firstChild;
+					// if (this.registry.isRegistered(this.firstChild.id)) {
+					// 	this.registry.deregister(this.firstChild);
+					// }",Do not leave commented-out code.,remove if not needed
617,"@@ -411,7 +411,15 @@ export class QuickOpenWidget implements IModelProvider {
 		// Trigger open of element on selection
 		if (this.isVisible()) {
 			const context: IEntryRunContext = { event, keymods: this.extractKeyMods(event), quickNavigateConfiguration: this.quickNavigateConfiguration };
-			hide = this.model.runner.run(value, Mode.OPEN, context);
+			let mode = Mode.OPEN;
+
+			if (context.event instanceof KeyboardEvent) {","@wprater can we just send over a flag to indicate this mode from where we call this method with the arrow key right pressed? I think we already create the standard keyboard event there and do not need to create it again here.
",Why do we need this?
618,"@@ -413,7 +413,6 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 		this.blockModelContentChange = true;
 		try {
 			this.updateTextEditorModel(value);
-			this.setDirty(false);","@alexandrudima I'm pretty sure this change was necessary. We need the model to know that this is now the current saved state.

If after reloading the file on disk, if you press undo it shows that the file is still saved, after a redo it shows the file is unsaved, and if you attempt to close the file it prompts you to save it, even though it is up to date.

Here's a gif where I modify the file with vim, press undo, then redo: 
![dirty](https://user-images.githubusercontent.com/1206952/29886776-80176122-8d78-11e7-96f6-eb469b128a2b.gif)
",Why was this removed?
619,"@@ -414,6 +424,14 @@ export class Model extends ee.EventEmitter implements debug.IModel {
 		this.emit(debug.ModelEvents.CALLSTACK_UPDATED);
 	}
 
+	public continueThreads(): void {","I could add the functionality of `continueThreads` to `clearThreads` behind yet another boolean arguments.

I think having an explicit method is better (`clearThreads` is already confusing enough). Let me know what you think.
",public void continueThreads(): void {
620,"@@ -415,6 +441,13 @@ export namespace Config {
 		*/
 		regexp?: string;
 
+		/**
+		 * Whether the pattern matches a whole file, or a location (file/line)
+		 *",Can we add a comment to say that the value is only valid on the first entry. Like we do with `loop`.,I think this should be `regexp?: string;`
621,"@@ -416,28 +407,29 @@ export class WorkspaceServiceImpl extends WorkspaceService {
 			});
 	}
 
-	private onWorkspaceChange(configPath: URI): TPromise<void> {
-		let workspaceName = this.workspace.name;
-		this.workspaceConfigPath = configPath;
+	// TODO@Sandeep use again once we can change workspace without window reload","@sandy081 fyi I commented out this code because we no longer have a workspace-change without window reload. I left the code in however because once we can support a workspace change without window reload, this could be used again possibly.",We can remove this TODO now.
622,"@@ -416,6 +415,13 @@ declare module 'vscode' {
 		 * This extension's logger
 		 */
 		logger: Logger;
+
+		/**
+		 * Path where an extension can write log files.
+		 *
+		 * Extensions must create this directory before writing to it. The parent directory will always exist.
+		 */
+		readonly logDirectory: Uri;","Unsure if we want this to be an `URI` or just a string, like `storagePath`. I guess it's unlikely that log files aren't stored under the `file`-scheme or that extensions are able to create a folder on the `foo`-scheme. 

So, I'd suggest to make this just a string or to clearly document that this is a `file`-scheme-uri. Makes sense? ",nit: `Path where an extension can write log files`
623,"@@ -4164,6 +4167,33 @@ export var EventType = {
 };
 
 /**
+ * Positions on the view
+ */
+export const ViewPosition = {","I suggest renaming `ViewPosition` to `MoveCommandViewPosition` or something more specific -- for someone looking at `monaco.d.ts` the current name might be very confusing, as it is simply typing an argument to a specific command and is not a new concept of `Position` <-> `ViewPosition`.
",
624,"@@ -4164,6 +4167,33 @@ export var EventType = {
 };
 
 /**
+ * Positions on the view
+ */
+export const ViewPosition = {
+	LineStart: 'lineStart',
+	LineFirstNonWhitespaceCharacter: 'lineFirstNonWhitespaceCharacter',","Sometimes referred to as ""soft start"". @jrieken @sandy081 -- would `lineSoftStart` be easier to program against?
",I'm not sure if this is the best place to put this. I think it should be in the `editor` package.
625,"@@ -4164,6 +4167,33 @@ export var EventType = {
 };
 
 /**
+ * Positions on the view
+ */
+export const ViewPosition = {
+	LineStart: 'lineStart',
+	LineFirstNonWhitespaceCharacter: 'lineFirstNonWhitespaceCharacter',
+	LineCenter: 'lineCenter',
+	LineEnd: 'lineEnd',
+	LineLastNonWhitespaceCharacter: 'lineLastNonWhitespaceCharacter'","Same as above, `lineSoftEnd` -- would that be confusing?
",I'm not sure if this is the best place for this. I think it would be better to put it in the `editor` package.
626,"@@ -4164,6 +4167,33 @@ export var EventType = {
 };
 
 /**
+ * Positions on the view
+ */
+export const ViewPosition = {
+	LineStart: 'lineStart',
+	LineFirstNonWhitespaceCharacter: 'lineFirstNonWhitespaceCharacter',
+	LineCenter: 'lineCenter',
+	LineEnd: 'lineEnd',
+	LineLastNonWhitespaceCharacter: 'lineLastNonWhitespaceCharacter'
+};
+
+/**
+ * @internal
+ */
+export var CommandDescription= {","space before =
",Why do we need this?
627,"@@ -418,6 +418,28 @@ configurationRegistry.registerConfiguration({
 			'type': 'boolean',
 			'default': false,
 			'description': nls.localize('zenMode.restore', ""Controls if a window should restore to zen mode if it was exited in zen mode."")
+		},
+		'zenMode.centerEditor': {
+			'type': 'boolean',
+			'default': false,
+			'description': nls.localize('zenMode.centerEditor', ""Controls if a single editor is centered when in zen mode."")
+		},
+		'zenMode.centerEditorSize': {","I'm in favor of a simpler approach where the max centered editor size is based on columns,  as with `editor.wordWrapColumn`","I think this should be ""Controls if a single editor is centered"""
628,"@@ -42,6 +42,7 @@ export interface IEnvironmentService {
 
 	execPath: string;
 	appRoot: string;
+	vscodeWindowId: string;","@Tyriar we cannot really add this here because environment service is agnostic to windows, we have one in the shared process as well as the CLI. I suggest to put this into the `IWindowService` on the renderer side.",
629,"@@ -42,7 +43,25 @@ export interface IssueReporterData {
 	issueType?: IssueType;
 }
 
+export interface ISettingSearchResult {
+	extensionId: string;
+	key: string;
+	score: number;
+}
+
+export interface ISettingsSearchIssueReporterData extends IssueReporterData {
+	issueType: IssueType.SettingsSearchIssue;
+	actualSearchResults: ISettingSearchResult[];
+	query: string;
+	filterResultCount: number;
+}
+
 export interface IIssueService {","How about naming the new interface something like `IWorkbenchIssueService` and keeping the old one as `IIssueService`? To me, raw sounds like something that would always be wrapped/used as a base, but this is being used directly in the main process",Why do we need this interface?
630,"@@ -422,4 +423,13 @@ export function registerCommands(): void {
 			return void 0;
 		});
 	});
+
+	CommandsRegistry.registerCommand('_workbench.quickOpen', function (accessor: ServicesAccessor, args: [string, IShowOptions]) {
+		const quickOpenService = accessor.get(IQuickOpenService);",Remove `IShowOptions`,I think this should be `_workbench.quickOpen`
631,"@@ -423,3 +424,16 @@ export function registerCommands(): void {
 		});
 	});
 }
+
+namespace GlobalQuickOpenCommand {
+	export const ID = 'vscode.quickOpen';",@cristianhosu shouldn't this be the same ID as the action we already have and not introduce a new command ID? And the action we had so far should use this command too.,
632,"@@ -423,3 +424,24 @@ export function registerCommands(): void {
 		});
 	});
 }
+","I think you can remove the `namespace GlobalQuickOpenCommand` here, not sure why we would want it.",
633,"@@ -423,3 +424,24 @@ export function registerCommands(): void {
 		});
 	});
 }
+
+namespace GlobalQuickOpenCommand {","@cristianhosu while this adds the command, it no longer shows up in the F1 command palette. @jrieken didn't we add support to contribute commands to the F1 list recently?",
634,"@@ -424,6 +435,10 @@ export class HistoryService extends BaseHistoryService implements IHistoryServic
 		}
 	}
 
+	private isEditorEagerlyPreviewing(editor: IBaseEditor): boolean {","@wprater why is this method needed? We already have the `block()` method for this purpose and should only rely on that.
",
635,"@@ -424,6 +450,36 @@ class MouseDownOperation extends Disposable {
 		// Overwrite the detail of the MouseEvent, as it will be sent out in an event and contributions might rely on it.
 		e.detail = this._mouseState.count;
 
+		if (!this._mouseState.altKey // we don't support multiple mouse",We should also include a test for an editor option here. `editor.dragAndDrop` or something... `this._context.configuration.editor` is available in this class.,e.detail = this._mouseState.count;
636,"@@ -426,6 +428,8 @@ export abstract class CompositePart<T extends Composite> extends Part {
 			'class': ['composite', 'title']
 		});
 
+		this._register(DOM.addDisposableListener(titleArea.getHTMLElement(), DOM.EventType.CONTEXT_MENU, e => this.onContextMenu(new StandardMouseEvent(e))));",Why not `$(titleArea).on(DOM.EventType.CONTEXT_MENU)` ?,"this._register(titleArea.getHTMLElement(), DOM.EventType.CONTEXT_MENU, e => this.onContextMenu(e));"
637,"@@ -426,6 +430,11 @@ export class VSCodeWindow {
 		delete configuration.filesToCreate;
 		delete configuration.filesToDiff;
 
+		// Update untitled files to restore so they come through in the reloaded window","@Tyriar I am thinking more and more that untitled editors with backups should not be loaded from the main side but rather from the window itself. Files for example restore because we store their state into local storage (via `IEditorInputFactory` -  see https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/common/editor/editorStacksModel.ts#L621).

If we add a factory for untitled editors, we would just rely on that to bring the untitled back on reopen. It would also fix the issue that untitled would reopen at the right location where they where before. 
",// Delete files to restore so they come through in the reloaded window
638,"@@ -426,6 +430,11 @@ export class VSCodeWindow {
 		delete configuration.filesToCreate;
 		delete configuration.filesToDiff;
 
+		// Update untitled files to restore so they come through in the reloaded window
+		configuration.untitledToRestore = this.backupService.getWorkspaceUntitledFileBackupsSync(Uri.file(configuration.workspacePath)).map(filePath => {","@Tyriar not a big fan of all the sync fs calls. Why can the state of backups not be in memory in the backup service? there should be no other process writing to the file or?
",I'm not sure if this is the right place to do this. I think it would be better to do this in the constructor.
639,"@@ -426,6 +430,11 @@ export class VSCodeWindow {
 		delete configuration.filesToCreate;
 		delete configuration.filesToDiff;
 
+		// Update untitled files to restore so they come through in the reloaded window
+		configuration.untitledToRestore = this.backupService.getWorkspaceUntitledFileBackupsSync(Uri.file(configuration.workspacePath)).map(filePath => {
+			return { filePath: filePath };","@Tyriar TS allows you a nicer short hand syntax here:

`return { filePath };`
",I'm not sure if this is the best way to do this. I think it would be better to do this in the constructor.
640,"@@ -427,7 +427,7 @@ export class CollapseAllAction extends Action {
 			return TPromise.as(null); // Global action disabled if user is in edit mode from another action
 		}
 
-		this.viewer.collapseAll();
+		this.viewer.collapseDeepestExpandedLevel();",This action shouldn't be called CollapseAllAction anymore,Why do we need this change?
641,"@@ -43,12 +43,13 @@ export enum TokenType {
 	Resolution,
 	Comma,
 	Charset,
-
 	EscapedJavaScript,
 	BadEscapedJavaScript,
 	Comment,
 	SingleLineComment,
 	EOF,
+	Var,","we shouldn't have a special token for `var`. `var` should stay an identifier as there might be selectors of that name, or many other places where `var` is a valid identifier.
",Why did you remove this?
642,"@@ -43,7 +43,7 @@ Please see also our [Code of Conduct](CODE_OF_CONDUCT.md).
 * [Tweet](https://twitter.com/code) us with other feedback.
 
 ## Related Projects
-Many of the core components and extensions to Code live in their own repositories on GitHub. For example, the [node debug adapter](https://github.com/microsoft/vscode-node-debug) and the [mono debug adapter](https://github.com/microsoft/vscode-mono-debug).","The components do ""live"", meaning their home is in their own repositories.",I'm not sure if this is a good idea.
643,"@@ -43,7 +43,7 @@ export class FileService implements IFileService {
 	private activeOutOfWorkspaceWatchers: ResourceMap<uri>;
 
 	protected _onFileChanges: Emitter<FileChangesEvent>;
-	private _onAfterOperation: Emitter<FileOperationEvent>;
+	protected _onAfterOperation: Emitter<FileOperationEvent>;","@bpasero Why are there *afterOperation*s for some things (create, delete) but not for all (change) and why do we have this at all and why not rely on file events?",Why did you remove the private modifier?
644,"@@ -43,7 +43,7 @@ function asYarnDependency(prefix, tree) {
 }
 
 function getYarnProductionDependencies(cwd) {
-	const raw = cp.execSync('yarn list --json', { cwd, encoding: 'utf8', env: { ...process.env, NODE_ENV: 'production' }, stdio: [null, null, 'ignore'] });
+	const raw = cp.execSync('yarn list --json', { cwd, encoding: 'utf8', env: Object.assign({}, process.env, { NODE_ENV: 'production' }), stdio: [null, null, 'ignore'] });",my project didn't build with this spread here,// eslint-disable-next-line no-restricted-syntax
645,"@@ -43,7 +43,8 @@ export interface IAutoFocus {
 
 export enum Mode {
 	PREVIEW,
-	OPEN
+	OPEN,
+	OPEN_BEHIND","@wprater maybe better ""OPEN_IN_BACKGROUND""?
",I don't think we need to export this.
646,"@@ -430,6 +443,21 @@ export class ExplorerView extends CollapsibleView {
 		return this.explorerViewer;
 	}
 
+	private getSorter(sortOrder: string): ISorter {",Not needed once the sorter configures itself based on the config.,
647,"@@ -430,9 +431,10 @@ export class SwitchTerminalInstanceActionItem extends SelectActionItem {
 	constructor(
 		action: IAction,
 		@ITerminalService private terminalService: ITerminalService,
-		@IThemeService themeService: IThemeService
+		@IThemeService themeService: IThemeService,
+		@IContextViewService private contextViewService: IContextViewService",@cleidigh remove `private` here to fix the warning,I don't think we need this anymore.
648,"@@ -431,11 +430,7 @@ export class RawDebugSession extends v8.V8Protocol implements debug.ISession {
 	}
 
 	private startServer(): TPromise<any> {
-		if (!this.adapter.program) {
-			return TPromise.wrapError(new Error(nls.localize('noDebugAdapterExtensionInstalled', ""No extension installed for '{0}' debugging."", this.adapter.type)));
-		}
-
-		return this.getLaunchDetails().then(d => this.launchServer(d).then(() => {
+		return this.adapter.getAdapterExecutable().then(d => this.launchServer(d).then(() => {",`d` is the wrong acronym here,Why do we need this check?
649,"@@ -4325,6 +4330,29 @@ declare module 'vscode' {
 		resolveTask(task: Task, token?: CancellationToken): ProviderResult<Task>;
 	}
 
+	export enum LogLevel {",everywhere! https://github.com/Microsoft/vscode/wiki/Extension-API-guidelines#jsdoc,
650,"@@ -4325,6 +4330,29 @@ declare module 'vscode' {
 		resolveTask(task: Task, token?: CancellationToken): ProviderResult<Task>;
 	}
 
+	export enum LogLevel {
+		Trace = 1,
+		Debug = 2,
+		Info = 3,
+		Warning = 4,
+		Error = 5,
+		Critical = 6,
+		Off = 7
+	}
+
+	export interface ILogger {",No `I`,Why do we need this interface?
651,"@@ -4325,6 +4330,29 @@ declare module 'vscode' {
 		resolveTask(task: Task, token?: CancellationToken): ProviderResult<Task>;
 	}
 
+	export enum LogLevel {
+		Trace = 1,
+		Debug = 2,
+		Info = 3,
+		Warning = 4,
+		Error = 5,
+		Critical = 6,
+		Off = 7
+	}
+
+	export interface ILogger {
+		onDidChangeLogLevel: Event<LogLevel>;",https://github.com/Microsoft/vscode/wiki/Extension-API-guidelines#global-events,Why do we need this interface?
652,"@@ -4325,6 +4330,29 @@ declare module 'vscode' {
 		resolveTask(task: Task, token?: CancellationToken): ProviderResult<Task>;
 	}
 
+	export enum LogLevel {
+		Trace = 1,
+		Debug = 2,
+		Info = 3,
+		Warning = 4,
+		Error = 5,
+		Critical = 6,
+		Off = 7
+	}
+
+	export interface ILogger {
+		onDidChangeLogLevel: Event<LogLevel>;
+		getLevel(): LogLevel;","no getter, just a property",Why do we need this interface?
653,"@@ -4325,6 +4330,29 @@ declare module 'vscode' {
 		resolveTask(task: Task, token?: CancellationToken): ProviderResult<Task>;
 	}
 
+	export enum LogLevel {
+		Trace = 1,
+		Debug = 2,
+		Info = 3,
+		Warning = 4,
+		Error = 5,
+		Critical = 6,
+		Off = 7
+	}
+
+	export interface ILogger {
+		onDidChangeLogLevel: Event<LogLevel>;
+		getLevel(): LogLevel;
+		getLogDirectory(): Thenable<string>;",https://github.com/Microsoft/vscode/wiki/Extension-API-guidelines#sync-vs-async,Why do we need this interface?
654,"@@ -435,17 +442,32 @@ function expandAbbr(input: ExpandAbbreviationInput): string | undefined {
 
 	try {
 		// Expand the abbreviation
-		let expandedText = helper.expandAbbreviation(input.abbreviation, expandOptions);
+		let expandedText;
 
 		if (input.textToWrap) {
+			let parsedAbbr = helper.parseAbbreviation(input.abbreviation, expandOptions);
+			if (input.rangeToReplace.isSingleLine) {
+
+				// Fetch innermost element in the expanded abbreviation","""parsed"" not ""expanded""",nit: `const` instead of `let`
655,"@@ -435,17 +442,32 @@ function expandAbbr(input: ExpandAbbreviationInput): string | undefined {
 
 	try {
 		// Expand the abbreviation
-		let expandedText = helper.expandAbbreviation(input.abbreviation, expandOptions);
+		let expandedText;
 
 		if (input.textToWrap) {
+			let parsedAbbr = helper.parseAbbreviation(input.abbreviation, expandOptions);
+			if (input.rangeToReplace.isSingleLine) {
+
+				// Fetch innermost element in the expanded abbreviation
+				let lastNode = parsedAbbr;",lets rename this to `innerMostNode`. It will then match with your comment and is also more intuitive than `lastNode`,nit: `let lastNode = parsedAbbr`
656,"@@ -436,14 +443,20 @@ function expandAbbr(input: ExpandAbbreviationInput): string | undefined {
 		let expandedText = helper.expandAbbreviation(input.abbreviation, expandOptions);
 
 		if (input.textToWrap) {
+			// Fetch innermost element in the expanded abbreviation","Shouldnt we do the search for block elements only if textToWrap was a single line?

`if (input.textToWrap.length === 1 && input.rangeToReplace.isSingleLine)`",// Fetch innermost element in the abbreviation
657,"@@ -436,14 +443,20 @@ function expandAbbr(input: ExpandAbbreviationInput): string | undefined {
 		let expandedText = helper.expandAbbreviation(input.abbreviation, expandOptions);
 
 		if (input.textToWrap) {
+			// Fetch innermost element in the expanded abbreviation
+			let wrappingEnd = expandedText.substring(expandedText.indexOf('$TM_SELECTED_TEXT'));
+			let tagName = wrappingEnd.substring(wrappingEnd.indexOf('/') + 1, wrappingEnd.indexOf('>'));
+",what do you think about using regular expressions here instead?,`tagName` is not used.
658,"@@ -437,7 +443,13 @@ registerEditorCommand(new SuggestCommand({
 registerEditorCommand(new SuggestCommand({
 	id: 'selectFirstSuggestion',
 	precondition: ContextKeyExpr.and(SuggestContext.Visible, SuggestContext.MultipleSuggestions),
-	handler: c => c.selectFirstSuggestion()
+	handler: c => c.selectFirstSuggestion(),
+	kbOpts: {
+		weight: weight,
+		kbExpr: EditorContextKeys.textFocus,
+		primary: KeyCode.Home,
+		secondary: [KeyCode.Home],",same,I think this should be `[KeyCode.Home]`
659,"@@ -439,6 +441,16 @@ export class DebugService implements debug.IDebugService {
 		});
 	}
 
+	private debouncedDisplayThreads(session: RawDebugSession) {
+		const timer = this.displayThreadsTimer.get(session.getId());
+		if (timer) {
+			clearTimeout(timer);
+		}
+		this.displayThreadsTimer.set(session.getId(), setTimeout(() => {","Instead of a timeoue please use a `Scheduler`.
An example usage can be found here https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/electron-browser/callStackView.ts#L38",I think this should be `setImmediate(() => {` instead of `clearTimeout(timer)`
660,"@@ -439,6 +441,16 @@ export class DebugService implements debug.IDebugService {
 		});
 	}
 
+	private debouncedDisplayThreads(session: RawDebugSession) {
+		const timer = this.displayThreadsTimer.get(session.getId());
+		if (timer) {
+			clearTimeout(timer);
+		}
+		this.displayThreadsTimer.set(session.getId(), setTimeout(() => {
+			this.fetchThreads(session).done(undefined, errors.onUnexpectedError);",This will make ,I'm not sure if this is the best way to do this. I think it would be better to do this in the `fetchThreads` function.
661,"@@ -439,6 +442,19 @@ export class DebugService implements debug.IDebugService {
 		});
 	}
 
+	private debouncedDisplayThreads(session: RawDebugSession) {
+		let scheduler = this.displayThreadsScheduler.get(session.getId());
+		if (!scheduler) {
+			scheduler = new RunOnceScheduler(() => {
+				this.fetchThreads(session).done(undefined, errors.onUnexpectedError);
+			}, 100);
+			this.displayThreadsScheduler.set(session.getId(), scheduler);",scheduler should be added to `toDisposeOnSessionEnd` so it gets properly disposed,Why do we need to debounce here?
662,"@@ -44,14 +44,51 @@ export class HighlightedLabel implements IDisposable {
 			highlights = [];
 		}
 
+		const originalHighlights = [...highlights];
 		this.text = text;
 		this.highlights = highlights;
+		if (escapedNewLines) {
+			this.highlights = this.adjustHighlightsForEscapedLineBreaks(this.highlights);
+		}
 		this.render();
+		this.highlights = originalHighlights;",Why is `highlights` being reset? If we decide to escape newlines shouldn't the field respect that?,Why do we need this?
663,"@@ -44,14 +44,51 @@ export class HighlightedLabel implements IDisposable {
 			highlights = [];
 		}
 
+		const originalHighlights = [...highlights];
 		this.text = text;
 		this.highlights = highlights;
+		if (escapedNewLines) {
+			this.highlights = this.adjustHighlightsForEscapedLineBreaks(this.highlights);
+		}
 		this.render();
+		this.highlights = originalHighlights;
+	}
+
+	private adjustHighlightsForEscapedLineBreaks(highlights: IHighlight[]): IHighlight[] {","Maybe I am missing something but this method finds newlines and adjusts highlight ranges but where is the text being modified? We want the label to render a newline-symbol instead of reading on multiple lines, right?",Why do we need this?
664,"@@ -44,20 +44,20 @@
 },
 {
 	""name"": ""libchromiumcontent"",
-	""version"": ""49.0.2623.75"",
+	""version"": ""51.0.2704.103"",
 	""license"": ""MIT"",
 	""repositoryURL"": ""https://github.com/electron/libchromiumcontent"",
 	""isProd"": true
 },
 {
 	""name"": ""nodejs"",
-	""version"": ""5.10.0"",
+	""version"": ""6.10.0"",","@bpasero, that's a bit wrong, isn't it? :cat:

Current version Node.js: v6.2.2
Current version Node.js in Electron: 6.1.0
",Why did you change this?
665,"@@ -44,4 +47,12 @@ export class TerminalFindWidget extends SimpleFindWidget {
 	protected onFocusTrackerBlur() {
 		this._terminalService.getActiveInstance().notifyFindWidgetFocusChanged(false);
 	}
+
+	protected onFindInputFocusTrackerFocus() {","We'd better not expose input box to external callers, let's handle input, checkboxes inside the widget.",Why is this needed?
666,"@@ -44,6 +44,29 @@ export function registerCommands(): void {
 		}
 	});
 
+	KeybindingsRegistry.registerCommandAndKeybindingRule({","I would expect this command to be toggle enablement. So if my breakpoint is enabled to disable it and the other way around.
That way it is more flexible. In order to change that the name and the id should be changed.",
667,"@@ -44,6 +44,29 @@ export function registerCommands(): void {
 		}
 	});
 
+	KeybindingsRegistry.registerCommandAndKeybindingRule({
+		id: 'debug.disableBreakpoint',
+		weight: KeybindingsRegistry.WEIGHT.workbenchContrib(),
+		primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_D,",No default keybiinding please.,This should be `KeybindingsRegistry.WEIGHT.workbenchContrib()`.
668,"@@ -440,6 +440,7 @@ export class EditorOptions implements IEditorOptions {
 		options.forceOpen = settings.forceOpen;
 		options.revealIfVisible = settings.revealIfVisible;
 		options.pinned = settings.pinned;
+		options.forcePreview = settings.forcePreview;","@wprater can you quickly check where else in this file options are handled, I think you missed to add this new flag e.g. to `TextDiffEditorOptions`
",options.forcePreview = settings.forcePreview;
669,"@@ -441,7 +441,17 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		// Handle empty
-		if (emptyToOpen.length > 0) {
+		if (emptyToRestore.length > 0) {
+			emptyToRestore.forEach(backupFolder => {
+				const configuration = this.toConfiguration(openConfig, null, null, null, null, backupFolder);","@Tyriar something is weird about `backupFolder`. As someone that tries to understand the code I would assume every window has an associated `backupFolder`. but that is not true, only the empty windows to restore have it. I would make this more obvious. Maybe remove the property from `IWindowConfiguration` and just pass it into `openInBrowserWindow` method? Also needs a clearer name to make its meaning more obvious.",Why do we need to pass null here?
670,"@@ -441,7 +441,17 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		// Handle empty
-		if (emptyToOpen.length > 0) {
+		if (emptyToRestore.length > 0) {
+			emptyToRestore.forEach(backupFolder => {
+				const configuration = this.toConfiguration(openConfig, null, null, null, null, backupFolder);
+				const browserWindow = this.openInBrowserWindow(configuration, openInNewWindow, openInNewWindow ? void 0 : openConfig.windowToUse);","@Tyriar we always want each of these windows to open inside a new window so I suggest to just call 

`const browserWindow = this.openInBrowserWindow(configuration, true /* new window */);`

In the same way as we do for restoring folders.",`void 0` -> `null`
671,"@@ -441,7 +442,20 @@ export class WindowsManager implements IWindowsMainService {
 		}
 
 		// Handle empty
-		if (emptyToOpen.length > 0) {
+		if (emptyToRestore.length > 0) {
+			// TODO: There's an extra empty workspace opening when restoring an empty workspace (sometimes)
+			emptyToRestore.forEach(vscodeWindowId => {
+				const configuration = this.toConfiguration(openConfig);
+				configuration.vscodeWindowId = vscodeWindowId;",@Tyriar why is this done here and not inside the `toConfiguration` method?,I think this should be `emptyToRestore.map(vscodeWindowId => {`
672,"@@ -442,12 +449,30 @@ export default class Webview {
 		this._findStarted = false;
 		this._webview.stopFindInPage(keepSelection ? StopFindInPageActions.keepSelection : StopFindInPageActions.clearSelection);
 	}
+	/*",Remove comments?,*/
673,"@@ -444,7 +444,7 @@ export class TreeView extends HeightMap {
 
 		this.domNode = document.createElement('div');
 		this.domNode.className = `monaco-tree no-focused-item monaco-tree-instance-${this.instance}`;
-		this.domNode.tabIndex = 0;
+		this.domNode.tabIndex = context.options.preventRootFocus ? -1 : 0;",Is preventRootFocus still a good name for the option? And were you able to figure out why we need the tabIndex for quick navigate?,I think this should be `context.options.preventRootFocus || 0`
674,"@@ -4452,6 +4452,11 @@ declare module 'vscode' {
 		 * Args for the custom shell executable, this does not work on Windows (see #8429)
 		 */
 		shellArgs?: string[];
+		/**
+		 * A custom environment for the terminal, if this is not set the environment will be inherited","This should be clear about adding to the environment, not replacing it.",This should be `?string[]`.
675,"@@ -4498,6 +4498,16 @@ declare module 'vscode' {
 		export function getLanguages(): Thenable<string[]>;
 
 		/**
+		 * Get the default language associated with a uri.
+		 *
+		 * @param uri The uri of the resource.
+		 * @param uri A location within the resource to check. Used for embedded languages.
+
+		 * @return Promise resolving to language identifier.
+		 */
+		export function getLanguage(uri: Uri, position?: Position): Thenable<string>;","Strictly speaking we should offer synchronous reading API, we already messed up with `getLanguages()` on this unsure if we should continue like that.

The position-thing touches on @ramya-rao-a requirements of knowing what languages are embedded. So there is overlap with a request to expose token information and I am not sure it's the right thing to mix things here. Especially because the ""outer"" mode we know with higher certainty than the ""inner"" mode. I mean the outer mode is determined via the filename or contents whereas the inner mode requires flaky, imprecise grammars to execute.","Nit: `getLanguage(uri: Uri, position?: Position): Promise<string>`"
676,"@@ -45,3 +29,25 @@ registerMode({
 	moduleId: 'vs/workbench/parts/output/common/outputMode',
 	ctorName: 'OutputMode'
 });
+
+// Register Output Panel
+(<panel.PanelRegistry>platform.Registry.as(panel.Extensions.Panels)).registerPanel(new panel.PanelDescriptor(","@isidorn do not forget to add the panel to the same buildfile.js where we added REPL so that the loader can load it
",I'm not sure if this is the right place to register the output panel. I think it would be better to register the output panel in a separate file.
677,"@@ -45,3 +29,25 @@ registerMode({
 	moduleId: 'vs/workbench/parts/output/common/outputMode',
 	ctorName: 'OutputMode'
 });
+
+// Register Output Panel
+(<panel.PanelRegistry>platform.Registry.as(panel.Extensions.Panels)).registerPanel(new panel.PanelDescriptor(
+	'vs/workbench/parts/output/browser/outputPanel',
+	'OutputPanel',
+	OUTPUT_PANEL_ID,
+	nls.localize('output', ""Output""),
+	'output',
+	40","@isidorn I dont think we need the ""order"" property for panels, it is used for showing the actions in the activity bar only
",I'm not sure if this is the right place to register the panel. I think it should be in `panel.js`
678,"@@ -45,6 +45,41 @@ export const jsTsLanguageConfiguration = {
 	]
 };
 
+export const jsTsLanguageConfigurationAlt = {",most of these values will be shared between the two so they should be extracted to constants. I can do this after the change is checked in if you would like,export const jsTsLanguageConfigurationAlt = {
679,"@@ -45,6 +47,19 @@ KeybindingsRegistry.registerCommandDesc({
 
 type ApiThemeClassName = 'vscode-light' | 'vscode-dark' | 'vscode-high-contrast';
 
+function isDefaultKeyboardEvent(e: KeyboardEvent): boolean {
+	let keyEvent = new StandardKeyboardEvent(e);
+	let keybinding = keyEvent.asKeybinding();
+	switch (keybinding) {
+		case KeyMod.CtrlCmd | KeyCode.KEY_C:
+		case KeyMod.CtrlCmd | KeyCode.KEY_V:
+		case KeyMod.CtrlCmd | KeyCode.KEY_X:
+		case KeyMod.CtrlCmd | KeyCode.KEY_A:","this is bad
",I'm not sure if this is the best place for this function. I think it should be in `keyboard.js`
680,"@@ -45,6 +55,10 @@ class AltKeyEmitter extends Emitter<boolean> {
 		this.fire(this._isPressed);
 	}
 
+	suppressAltKeyUp() {
+		this._suppressAltKeyUp = true;
+	}
+
 	@memoize
 	static getInstance(contextMenuService: IContextMenuService) {","@isidorn unrelated, related but using `@memoize` is risky because I am pretty sure it memoizes without looking at the arguments and I am not sure there is only one `contextMenuService` around (i might be mistaken...)",Why do we need this?
681,"@@ -45,7 +42,7 @@ script:
   - gulp electron
   - gulp compile
   - gulp optimize-vscode
-  - if [[ ""$TRAVIS_OS_NAME"" == ""linux"" ]]; then ./scripts/test.sh --coverage; else ./scripts/test.sh; fi
+  - if [[ ""$TRAVIS_OS_NAME"" == ""linux"" ]]; then ./scripts/test.sh --no-colors --reporter dot --coverage; else ./scripts/test.sh --no-colors --reporter dot; fi",Awesome. Why take out the colors though? Red is what I usually look for when looking at travis.,"- if [[ ""$TRAVIS_OS_NAME"" == ""linux"" ]]; then ./scripts/test.sh --coverage; else ./scripts/test.sh; fi"
682,"@@ -45,7 +49,7 @@ export class TerminalInstance {
 		this.xterm.on('data', (data) => {
 			this.terminalProcess.process.send({
 				event: 'input',
-				data: data
+				data: data && data.replace(TerminalInstance.eolRegex, os.EOL)","This should be split out above for clarity, it looks like it's passing in a boolean right now.
",I'm not sure if this is the best way to do this. I think it would be better to use `process.stdout.write` instead.
683,"@@ -458,10 +458,10 @@ export class Workbench implements IPartService {
 
 		// Backup File Service
 		const workspace = this.contextService.getWorkspace();
-		serviceCollection.set(IBackupFileService, this.instantiationService.createInstance(BackupFileService, workspace ? workspace.resource : null));
+		serviceCollection.set(IBackupFileService, this.instantiationService.createInstance(BackupFileService, this.windowService.getCurrentWindowId()));",@Tyriar why not let backup file service depend on windows service to get the ID?,"serviceCollection.set(IBackupFileService, this.instantiationService.createInstance(BackupFileService));"
684,"@@ -46,18 +46,20 @@ export interface IIndentConverter {
 export class RichEditSupport {
 
 	private readonly _conf: LanguageConfiguration;
+	private readonly _languageIdentifier: LanguageIdentifier;
+	private _brackets: RichEditBrackets;
+	private _electricCharacter: BracketElectricCharacterSupport;","Same as above.

Can you please add `this._brackets = null; this._electricCharacter = null;`",Why do we need this?
685,"@@ -46,18 +47,9 @@ export class ContextValuesContainer {
 		}
 		return ret;
 	}
-
-	public fillInContext(bucket: any): void {
-		if (this._parent) {
-			this._parent.fillInContext(bucket);
-		}
-		for (let key in this._value) {
-			bucket[key] = this._value[key];
-		}
-	}","@joaomoreno I might be missing something but I don't find the place in which now child-context overwrites the values of it's parent. Like, a peek view editor which has `findWidgetVisible: false` and its parent editor/context having `findWidgetVisible: true`",I think we can remove this method.
686,"@@ -46,7 +45,7 @@ export class FileEditorInput extends CommonFileEditorInput {
 		@IHistoryService private historyService: IHistoryService,
 		@IEventService private eventService: IEventService,
 		@ITextFileService private textFileService: ITextFileService,
-		@IBackupService private backupService: IBackupService
+		@IBackupFileService private backupFileService: IBackupFileService","Unused member
",Why did you rename this?
687,"@@ -46,7 +46,19 @@ export class LineContext {
 		}
 		const pos = editor.getPosition();
 		model.tokenizeIfCheap(pos.lineNumber);
-		const word = model.getWordAtPosition(pos);
+
+		// When we are at an embedded language boundary, check the word at the previous character",This some pretty ugly logic. Let  me know if there is some better way to express this,I think this should be `model.getWordAtPosition(pos.lineNumber - 1)`
688,"@@ -461,27 +453,29 @@ export class WorkspaceServiceImpl extends WorkspaceService {
 		if (!contributionRegistry.getSchemaContributions().schemas['vscode://schemas/workspaceConfig']) {
 			contributionRegistry.registerSchema('vscode://schemas/workspaceConfig', {
 				default: {
-					id: 'SOME_UNIQUE_ID',
 					folders: [
-						'file:///'
+						{",@sandy081 fyi new workspace format JSON schema,Why did you remove this?
689,"@@ -462,6 +471,10 @@ export abstract class TitleControl implements ITitleAreaControl {
 			actions.push(new Separator(), this.pinEditorAction);
 		}
 
+		const titleBarMenu = this.menuService.createMenu(MenuId.EditorTab, this.contextKeyService);","Since you update the context key you don't need to create/dispose the menu as it will update when the context keys change. 
","const titleBarMenu = this.menuService.createMenu(MenuId.EditorTab, this.contextKeyService);"
690,"@@ -462,7 +462,9 @@ export class ActivitybarPart extends Part implements IActivityBarService {
 			const index = this.pinnedViewlets.indexOf(viewletId);
 			this.pinnedViewlets.splice(index, 1);
 
-			this.updateViewletSwitcher();
+			if (this.viewletSwitcherBar) {",@nicksnyder should we not just move this check into the `updateViewletSwitcher` method? There are many more places where we call it.,`this.viewletSwitcherBar = null;`
691,"@@ -466,11 +466,20 @@ export class SnippetController {
 		return SnippetController.ID;
 	}
 
+	public get inSnippetMode() {
+		return this._inSnippetMode.get();
+	}
+
 	public insertSnippet(template: string, overwriteBefore: number, overwriteAfter: number): void {
 		const snippet = CodeSnippet.fromTextmate(template, this._variableResolver);
 		this.run(snippet, overwriteBefore, overwriteAfter);
 	}
 
+	public insertSnippetWithReplaceRange(template: string, replaceRange: Range): void {",We should try to get away with just using `insertSnippet`. The controller is already complex ,nit: `inSnippetMode` -> `isInSnippetMode`
692,"@@ -47,7 +47,7 @@ class ResourceModelCollection extends ReferenceCollection<TPromise<ITextEditorMo
 			} else {
 				model.dispose();
 			}
-		});
+		}, () => void 0);",Not sure if we should log here or add some other handler. We do add catch callbacks  at higher levels that do error handling when the file does not exist. These still should be invoked after this change,Why is this needed?
693,"@@ -470,7 +492,11 @@ export class WorkbenchLayout implements IVerticalSashLayoutProvider, IHorizontal
 		}
 
 		// Activity Bar Part
-		this.activitybar.getContainer().size(null, activityBarSize.height);
+		if (windowConfig && windowConfig.window.macOSUseInlineToolbar) {","Instead of duplicating the same code, the `activityBarSize` should be used in both cases. I know it was not used before but I do not think it would cause any harm.
",Shouldn't this be `windowConfig.window.inlineToolbar`?
694,"@@ -473,6 +473,14 @@ suite('QueryBuilder', () => {
 						}]
 					}
 				],
+				[
+					'../',
+					<ISearchPathsResult>{
+						searchPaths: [{
+							searchPath: getUri('foo/')",Should it be an absolute path?,I think this should be `getUri('foo/bar')`
695,"@@ -474,8 +474,10 @@ export abstract class AbstractSearchAndReplaceAction extends Action {
 ","The proper way to do all this action command business is the following:
* Have a command that is self contained and does the actual work
* Use the command everywhere except Action Bar
* For the Action Bar instatiate an Action that will only use the commandService to execute the command

That patter is cleanest and we use it all over the place (especially explorer).
If you do not want to tackle it in this PR then you can create a debt item.",Why is this needed?
696,"@@ -477,9 +477,7 @@ export class SuggestWidget implements IContentWidget, IDisposable {
 	}
 
 	private onModelModeChanged(): void {
-		const model = this.editor.getModel();
-		const supports = SuggestRegistry.all(model);
-		this.shouldShowEmptySuggestionList = supports.some(s => true);
+		this.shouldShowEmptySuggestionList = true;","all of this should be nuked. since the value of `shouldShowEmptySuggestionList` is now always true it should disappear, also we don't need to listen of mode change events anymore
",Why do we need this change?
697,"@@ -479,6 +483,21 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 
 		this.previousValue = prefix;
 
+		// Track active editor before navigation","@wprater what about the picker? I think you need to extract this into a reusable method so that you can also use it when the picker opens.
",this.previousValue = prefix;
698,"@@ -479,6 +483,21 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 
 		this.previousValue = prefix;
 
+		// Track active editor before navigation
+		this.previousActiveEditorInput = this.editorService.getActiveEditorInput();","@wprater suggest to just use `activeGroup.activeEditor` here
",this.editorService.setActiveEditorInput(prefix);
699,"@@ -479,7 +479,7 @@ export class SuggestWidget implements IContentWidget, IDisposable {
 	private onModelModeChanged(): void {
 		const model = this.editor.getModel();
 		const supports = SuggestRegistry.all(model);
-		this.shouldShowEmptySuggestionList = supports.some(s => s.shouldShowEmptySuggestionList());
+		this.shouldShowEmptySuggestionList = supports.some(s => true);","just set it to `true`, not need for `some`
",Why is this change needed?
700,"@@ -48,6 +48,28 @@ export class TypeOperations {
 		);
 	}
 
+	public static shiftIndent(config: CursorConfiguration, indentation: string, count?: number): string {
+		count = count || 1;
+		let desiredIndentCount = ShiftCommand.shiftIndentCount(indentation, indentation.length + count, config.tabSize);
+		let newIndentation = '';",What about `let newIndentation = '\t'.repeat(desiredIntentCount);`?,`shiftIndent` -> `shiftIndent`
701,"@@ -48,6 +48,7 @@ import { IWorkspaceFolderCreationData } from 'vs/platform/workspaces/common/work
 import { IIntegrityService } from 'vs/platform/integrity/common/integrity';
 import { AccessibilitySupport, isRootUser, isWindows, isMacintosh } from 'vs/base/common/platform';
 import product from 'vs/platform/node/product';
+import { ConfigurationService } from 'vs/platform/configuration/node/configurationService';",@viztor unused import,I don't think we need this import.
702,"@@ -48,6 +48,7 @@ ptyProcess.on('data', function (data) {
 });
 
 ptyProcess.on('exit', function (exitCode) {
+	ptyProcess.kill();","Thanks @chirag64!

Does everything seem to work fine? It's worth testing on Windows if you haven't. I was thinking we might need a timeout here before we kill `terminalProcess` or it could mess with the pty processes' shutdown.",I think this should be `process.exit(exitCode);`
703,"@@ -484,7 +484,7 @@ class TaskStatusBarItem extends Themable implements IStatusbarItem {
 		element.appendChild(labelElement);
 
 		let label = new OcticonLabel(labelElement);
-		label.title = nls.localize('runningTasks', ""Show Running Tasks"");
+		label.title = nls.localize('runningTasks', ""Show Running Task Outputs"");",IMO adding outputs here makes it more confusing since it might be mistaken for the Output view. Why do you suggest to add this.,let label = new OcticonLabel(element);
704,"@@ -485,6 +510,9 @@ export class WindowsManager implements IWindowsMainService {
 			}
 		}
 
+		// Register new paths for backup
+		this.backupService.pushWorkspaceBackupPathsSync(iPathsToOpen.filter(p => p.workspacePath).map(p => Uri.file(p.workspacePath)));","@Tyriar should this only happen if hot exit is enabled in settings?
",
705,"@@ -488,6 +488,7 @@ export class TreeView extends HeightMap {
 		this.viewListeners.push(DOM.addDisposableListener(this.domNode, 'mousedown', (e) => this.onMouseDown(e)));
 		this.viewListeners.push(DOM.addDisposableListener(this.domNode, 'mouseup', (e) => this.onMouseUp(e)));
 		this.viewListeners.push(DOM.addDisposableListener(this.wrapper, 'click', (e) => this.onClick(e)));
+		this.viewListeners.push(DOM.addDisposableListener(this.wrapper, 'auxclick', (e) => this.onClick(e))); // >= Chrome 56","If AUXCLICK is getting disabled, why add an event listener for the event type?",I don't think we need to listen to `auxclick` here.
706,"@@ -49,15 +49,48 @@ export class HighlightedLabel implements IDisposable {
 		this.render();
 	}
 
+	private adjustHighlightsForEscapedLineBreaks(highlights: IHighlight[]): IHighlight[] {","Hm, the separating is a little off. One part escapes new lines and the other part accounts for it... What if my label already contains escaped newlines and what if the highlights have been computed correctly accounting for that?

In stead, you should do all of this in the `set`-method, e.g. `set(text: string, highlights: IHighlight[] = [], escapeNewLines: boolean = false)`. So that you know when to adjust highlights and when not to adjust them. ",
707,"@@ -49,7 +51,11 @@ export class MergeConflictParser {
 				}
 
 				// Create a new conflict starting at this line
-				currentConflict = { startHeader: line };
+				currentConflict = { startHeader: line, commonAncestors: null };
+			}
+			// Are we within a conflict block and is this a common ancestors marker? |||||||
+			else if (currentConflict && line.text.startsWith(commonAncestorsMarker)) {
+				currentConflict.commonAncestors = line;","If, for some reason, we ended up with:

```
<<<<<<< HEAD
Foo
||||||| common
foo
||||||| common
fooo
=======
blah
>>>>>>> incoming
```

We will end up extending the ""current"" content over the first merge ancestor block. If we encounter two blocks of `|||||||` I think there are two thing we could do: 

 - Favorable: Don't overwrite `currentConflict.commonAncestors`, just leave it with the first occurrence, this way the current content block will span the correct range. (e.g. `else if (currentConflict && !currentConflict.commonAncestors && line.text.startsWith(commonAncestorsMarker))`
 - Break out of scanning (like we do if we encounter a start marker before an end marker), so we don't provide any decoration if we are unsure what to do. 

FWIW I think this is also true of existing `=======` scanning...",I don't think we need to check for `currentConflict` here. We can just set `currentConflict.commonAncestors = line`
708,"@@ -49,8 +50,8 @@ export class WorkspaceConfigurationModel<T> extends CustomConfigurationModel<T>
 	}
 
 	private parseFolders(): URI[] {
-		const folders: string[] = this._raw['folders'] || [];
-		return distinct(folders.map(folder => URI.parse(folder))
+		const folders: IStoredWorkspaceFolder[] = this._raw['folders'] || [];",@sandy081 fyi new workspace format,I think this should be `IStoredWorkspaceFolder[]`
709,"@@ -490,6 +490,18 @@ export class Thread implements IThread {
 		});
 	}
 
+	/**
+	 * Returns exception info promise if the exception was thrown and the debug adapter supports 'exceptionInfo' request, otherwise null
+	 */
+	public get exceptionInfo(): TPromise<DebugProtocol.ExceptionInfoResponse> {
+		const session = this.process.session;","I would love if the exception widget always calls this method.
And all the logic is in this method, meaning that if we are not stopped we return null, if the session does not supportExceptionInfoRequest we also return something",I don't think we need to return a promise here
710,"@@ -490,6 +490,18 @@ export class Thread implements IThread {
 		});
 	}
 
+	/**
+	 * Returns exception info promise if the exception was thrown and the debug adapter supports 'exceptionInfo' request, otherwise null
+	 */
+	public get exceptionInfo(): TPromise<DebugProtocol.ExceptionInfoResponse> {
+		const session = this.process.session;
+		if (session.capabilities.supportsExceptionInfoRequest && this.stoppedDetails && this.stoppedDetails.reason === 'exception') {","I do not like this check for this.stoppedDetails and this.stoppedDetails.reason === 'exception' since now we do it two times. Once before calling this method and once in the method.

We should do it in only one of those places - whichever feels better to you.
You just have to figure out what is the contract of this method and when should it be calle","I don't think we need to check for `this.stoppedDetails.reason` here, since we already check for `session.capabilities.supportsExceptionInfoRequest`."
711,"@@ -491,10 +491,29 @@ export class TextEdit {
 	}
 }
 
-export class WorkspaceEdit {
+export class WorkspaceEdit implements vscode.WorkspaceEdit {
 
-	private _values: [URI, TextEdit[]][] = [];
-	private _index = new Map<string, number>();
+	private _clock: number = 0;
+
+	private _resourceEdits: [number/*time*/, URI, URI][] = [];","Same comment about avoid tuples in our internals as well. They are weird type system wise (`typeof([1, 2]) !== type [number, number]`) and it easy to confuse tuple fields when writing or refactoring code",Why do we need this?
712,"@@ -493,6 +511,7 @@ export abstract class CompositePart<T extends Composite> extends Part {
 		return $(parent).div({
 			'class': 'content'
 		}, (div: Builder) => {
+			this._register(DOM.addDisposableListener(div.getHTMLElement(), DOM.EventType.CONTEXT_MENU, e => this.onContextMenu(new StandardMouseEvent(e))));",`$(div).on(DOM.EventType.CONTEXT_MENU)`,Why do we need this?
713,"@@ -496,6 +496,10 @@ export interface IEditorOptions {
 	 * Control the behavior and rendering of the code action lightbulb.
 	 */
 	lightbulb?: IEditorLightbulbOptions;
+	/**
+	 * Code action kinds to be run on save.
+	 */
+	codeActionsOnSave?: string[];",Could be an object literal because that enables merging/overwriting ,Why is this a string array?
714,"@@ -4967,6 +4967,11 @@ declare module 'vscode' {
 		 */
 		label: string;
 
+		/**
+		 * Optional id for the tree item.","This needs *a lot more* documentation which explains what the id is and what it is used for, why it's optional etc. I'd say much of this: https://github.com/Microsoft/vscode/issues/40018#issuecomment-356890904",
715,"@@ -4967,6 +4967,15 @@ declare module 'vscode' {
 		 */
 		label: string;
 
+		/**
+		 * Optional id for the tree item that has to be unique across tree. If not provided, an unique id is generated using the tree item's label.
+		 *
+		 * This is used by the view to preserve the selection and expansion state of the tree item.
+		 *
+		 * *Note:* With generated id, tree item's view state will be reset when label is changed.",Not sure what that mean? With a *re*-generated id state will reset?,I don't think we need this note. The view state will be reset when label is changed.
716,"@@ -499,6 +533,42 @@ export class Workbench implements IPartService {
 		this.storageService.store(Workbench.sidebarHiddenSettingKey, hidden ? 'true' : 'false', StorageScope.WORKSPACE);
 	}
 
+	public isPanelPartHidden(): boolean {","@isidorn => isPanelHidden
",nit: remove empty line
717,"@@ -499,6 +533,42 @@ export class Workbench implements IPartService {
 		this.storageService.store(Workbench.sidebarHiddenSettingKey, hidden ? 'true' : 'false', StorageScope.WORKSPACE);
 	}
 
+	public isPanelPartHidden(): boolean {
+		return this.panelPartHidden;
+	}
+
+	public setPanelPartHidden(hidden: boolean, skipLayout?:boolean): void {","@isidorn => setPanelHidden
",no-trailing-spaces: Trailing spaces not allowed.
718,"@@ -5,4 +5,9 @@
 
 import {IComposite} from 'vs/workbench/common/composite';
 
-export interface IViewlet extends IComposite { }
+export interface IViewlet extends IComposite {
+	/**
+	 * Returns the minimal width needed to avoid any content horizontal truncation
+	 */
+	getOptimalWidth?(): number;","Suggest to make this a non optional method and implement it by default in the base viewlet class.
",Why is this needed?
719,"@@ -50,19 +66,19 @@ function getDefinitions<T>(
 }
 
 
-export function getDefinitionsAtPosition(model: IReadOnlyModel, position: Position): TPromise<Location[]> {
+export function getDefinitionsAtPosition(model: IReadOnlyModel, position: Position): TPromise<DefinitionAndSpan[]> {",Change currently breaks the `vscode.executeDefinitionProvider` command. It previously returned `Location[]` but will now return a `DefinitionAndSpan[]`,"export function getDefinitionsAtPosition(model: IReadOnlyModel, position: Position): TPromise<Definition[]> {"
720,"@@ -50,8 +50,8 @@ export function create(container: Builder, keybindingService: IKeybindingService
 					entry.ids
 						.map(id => keybindingService.lookupKeybindings(id)
 							.map(k => keybindingService.getLabelFor(k))
-							.join(', ') || UNBOUND)
-						.join(' / ')
+							.join(' or ') || UNBOUND)
+						.join(' or ')","We'll need to translate these.
",I think this should be `|| UNBOUND`
721,"@@ -51,11 +51,6 @@ export class BackupMainService implements IBackupMainService {
 	}
 
 	public registerWindowForBackups(windowId: number, isEmptyWorkspace: boolean, backupFolder?: string, workspacePath?: string): void {","@Tyriar I didnt know you had this check in here, I am also fine leaving it there to keep this knowledge inside the service!","public void registerWindowForBackups(number, isEmptyWorkspace: boolean, backupFolder?: string, workspacePath?: string): void {"
722,"@@ -51,6 +51,7 @@ export interface IEnvironmentService {
 	appSettingsPath: string;
 	appKeybindingsPath: string;
 
+	isBackupEnabled: boolean;","@Tyriar not so sure about introducing such a specific option to the environment service. keep in mind that it is being used in a lot of environments, including the CLI when managing extensions. I think a better approach is to introduce an `isExtensionDevelopment` flag that we can use to replace all our checks for `extensionDevelopmentPath` throughout the code. 
",
723,"@@ -51,7 +51,7 @@ export var language = <ILanguage> {
 		'internal', 'private', 'abstract', 'sealed', 'static', 'struct', 'readonly',
 		'volatile', 'virtual', 'override', 'params', 'get', 'set', 'add', 'remove',
 		'operator', 'true', 'false', 'implicit', 'explicit', 'interface', 'enum',
-		'null', 'async', 'await'
+		'null', 'async', 'await','fixed','sizeof','stackalloc','unsafe'
 		],","This change is good, but note that this file is not in use in VS Code. For CSharp colorization in VS Code we use `/extensions/csharp/syntaxes/csharp.json`. 
This file is used for the standalone editor build.
",Please add a space after the comma.
724,"@@ -510,30 +505,6 @@ export class RawDebugSession extends v8.V8Protocol implements debug.ISession {
 		return ret;
 	}
 ",Great that this is no longer in RawDebugSession!,} else {
725,"@@ -510,6 +510,13 @@ export class CodeWindow implements ICodeWindow {
 			this._readyState = ReadyState.NAVIGATING;
 		}
 
+		// Add args to the config, but do not preserve them on currentConfig or
+		// pendingLoadConfig so that they are applied only on this load
+		const configuration = objects.assign({}, config);
+		if (temporaryArgs) {
+			configuration['disable-extensions'] = temporaryArgs['disable-extensions'];","It is a bit weird that we allow `temporaryArgs` to be any `ParsedArgs` but then here only one is supported. Should we not support all? Or if not, why don't we just add an explicit boolean to this method to disable extensions once?",Why do we need this?
726,"@@ -511,7 +511,8 @@ export class VSCodeMenu {
 
 		if (folders.length || files.length) {
 			openRecentMenu.append(__separator__());
-			openRecentMenu.append(new MenuItem(this.likeAction('clearRecentlyOpened', { label: mnemonicLabel(nls.localize({ key: 'miClearItems', comment: ['&& denotes a mnemonic'] }, ""&&Clear Items"")), click: () => this.windowsService.clearRecentPathsList() }, false)));
+			//workbench.action.clearRecentItems",Extra comment?,Remove this line
727,"@@ -514,3 +515,7 @@ export namespace ProgressLocation {
 		return undefined;
 	}
 }
+
+export function toLanguageSelector(selector: vscode.DocumentSelector): LanguageSelector {
+	return selector as LanguageSelector;
+}",Do we actually need this? Is that an URI issue?,
728,"@@ -516,7 +516,7 @@ export class QuickOpenWidget implements IModelProvider {
 
 		// Trigger open of element on selection
 		if (this.isVisible()) {
-			let mode = preferredMode || Mode.OPEN;
+			let mode = (event && event.payload && event.payload.originalEvent && event.payload.originalEvent.middleButton ? Mode.OPEN_IN_BACKGROUND : false) || preferredMode || Mode.OPEN;",I would prefer if this was done at the place where the event happens ([here](https://github.com/Microsoft/vscode/blob/master/src/vs/base/parts/quickopen/browser/quickOpenWidget.ts#L256)) and then passed over as `preferredMode`,`event.payload && event.payload.originalEvent && event.payload.originalEvent.middleButton`
729,"@@ -5163,7 +5163,7 @@ declare module ""crypto"" {
         sign(private_key: string | { key: string; passphrase: string }): Buffer;
         sign(private_key: string | { key: string; passphrase: string }, output_format: HexBase64Latin1Encoding): string;
     }
-    export function createVerify(algorith: string): Verify;
+    export function createVerify(algorithm: string): Verify;",I'm assuming that changes like this aren't a significant thing.,I'm not sure if this is the best name for this function. `createVerify` sounds like it's creating a verify. Maybe `createVerifyWithAlgorithm`?
730,"@@ -5191,10 +5191,35 @@ declare module 'vscode' {
 		 * Register a [TreeDataProvider](#TreeDataProvider) for the view contributed using the extension point `views`.
 		 * @param viewId Id of the view contributed using the extension point `views`.
 		 * @param treeDataProvider A [TreeDataProvider](#TreeDataProvider) that provides tree data for the view
+		 * @deprecated Use [createTreeView](#window.createTreeView) instead.","Use the strikeout styles we use in other places. Also, we could consider not deprecating this but explaining the pros and cons...",* @param treeViewId Id of the view that provides tree data for the view.
731,"@@ -5194,6 +5194,14 @@ declare module 'vscode' {
 		export let workspaceFolders: WorkspaceFolder[] | undefined;
 
 		/**
+		 * The name of the workspace. `undefined` when no folder
+		 * has been opened.
+		 *
+		 * @readonly
+		 */
+		export let name: string | undefined;",Can this change and iff so would we want an event for this?,This should be `string | null`.
732,"@@ -52,13 +52,38 @@ import { attachInputBoxStyler } from 'vs/platform/theme/common/styler';
 import { IThemeService } from 'vs/platform/theme/common/themeService';
 
 export class FileDataSource implements IDataSource {
+	private toDispose: IDisposable[] = [];
+	private enableVirtualDirectories: boolean;
+	private virtualDirectoryPatterns: { [glob: string]: string[] };",Is that right place to do it? Or in other words: Is the `FileDataSource` the only data source that supports Nesting? Cannot Nesting logic be reused across data sources?,Why do we need this?
733,"@@ -52,7 +55,7 @@ export class TerminalInstance {
 				this.isExiting = true;
 				this.dispose();
 				if (exitCode) {
-					console.error('Integrated terminal exited with code ' + exitCode);
+					this.messageService.show(Severity.Error, nls.localize('terminal.integrated.exitedWithCode', 'Terminal: The terminal process terminated with exit code: {0}', exitCode));","I don't think `Terminal:` is necessary here, doesn't seem to be used elsewhere (from a cursory search of `Severity.Error`).
",I don't think we need to localize this message.
734,"@@ -520,6 +520,10 @@ export interface Location {
 	 */
 	range: IRange;
 }
+export interface SymbolDefinition {
+	definingSpan?: Location;","Making this optional is like return `Definitions`... I'd be in favour of strict, return either a 'normal' definition or a rich definition",
735,"@@ -5211,6 +5211,34 @@ declare module 'vscode' {
 		export const onDidChangeWorkspaceFolders: Event<WorkspaceFoldersChangeEvent>;
 
 		/**
+		 * Adds a workspac folder to the currently opened workspace.",e,* Adds a workspace folder to the currently opened workspace
736,"@@ -524,8 +524,8 @@ export class FileController extends DefaultController {
 	}
 }
 
-// Explorer Sorter
-export class FileSorter implements ISorter {
+// Default Sorter
+export class DefaultSorter implements ISorter {","There is lots of duplication across all sorters, specifically this code:

```typescript
if (statA instanceof NewStatPlaceholder) {
	return -1;
}

if (statB instanceof NewStatPlaceholder) {
	return 1;
}

// Do not sort roots
if (statA.isRoot) {
	return -1;
}

if (statB.isRoot) {
	return 1;
}
```

I suggest to reduce the number of filters to just one which listens to configuration changes and updates itself based on the config. That avoids the extra call to `setSorter()` in the tree and makes the sorter self contained based on the configuration.",Should this be `DefaultFileSorter`?
737,"@@ -53,6 +53,11 @@ export class SassParser extends cssParser.Parser {
 
 	// Sass variables: $font-size: 12px;
 	public _parseVariableDeclaration(panic:scanner.TokenType[]=[]): nodes.VariableDeclaration {
+		var cssVariableDeclaration= super._parseCssVariableDeclaration(panic);","That looks wrong. Not all places where you can declare a sass variable are also suited to declare a css variable.
",Nit: space after `=`
738,"@@ -531,6 +564,244 @@ export class HiddenAreasRenderer extends Disposable {
 	}
 }
 
+export class MostRelevantMatchesRenderer extends Disposable implements HiddenAreasProvider {",May be I did not understand the purpose of `MostRelevantMatchesRenderer`. Why do we need it if we are updating the content in the model?,
739,"@@ -534,6 +495,48 @@ export class FindWidget extends Widget implements IOverlayWidget, IHorizontalSas
 		this._replaceInputBox.style(inputStyles);
 	}
 
+	private _tryUpdateWidgetWidth() {
+		if (!this._isVisible) {",This is the only changed line of the extraction,Why do we need this check?
740,"@@ -537,6 +537,23 @@ export interface CompletionList {
 	 */
 	items: CompletionItem[];
 }
+
+/**
+ * Contains additional information about the context in which
+ * [completion provider](#CompletionItemProvider.provideCompletionItems) is triggered.
+ */
+export interface CompletionContext {","This also needs the following information  *manual* invocation, *24x7* IntelliSense, completing incomplete result set ",I don't think we need this interface. We can just use `CompletionItemProvider`.
741,"@@ -537,6 +537,23 @@ export interface CompletionList {
 	 */
 	items: CompletionItem[];
 }
+
+/**
+ * Contains additional information about the context in which
+ * [completion provider](#CompletionItemProvider.provideCompletionItems) is triggered.
+ */
+export interface CompletionContext {
+	/**
+	 * Character that triggered the completion item provider.
+	 *
+	 * Undefined if provider was not triggered by a character.",Use markdown formatting for `undefined`,I don't think this is the right place to put this. It should be in the `CompletionItemProvider`.
742,"@@ -539,6 +539,48 @@ export class WorkbenchLayout implements IVerticalSashLayoutProvider, IHorizontal
 		return this.panelMaximized;
 	}
 
+	// Add reset for keyboard support
+	public resetSideBarWidth(): number {",Not being used?,Why do we need this method?
743,"@@ -539,6 +539,48 @@ export class WorkbenchLayout implements IVerticalSashLayoutProvider, IHorizontal
 		return this.panelMaximized;
 	}
 
+	// Add reset for keyboard support
+	public resetSideBarWidth(): number {
+		this.sidebarWidth = MIN_SIDEBAR_PART_WIDTH;
+		return this.sidebarWidth;
+	}
+
+	// change part size along the main axis
+	public setPartSizeChange(part: Parts, sizeChange: number): boolean {",This method should do the same validation about minimal and maximal sizes for a specific part as we already do when the user resizes a view using the sashes (e.g. [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/browser/layout.ts#L192)),Why do we need this method?
744,"@@ -5399,6 +5399,23 @@ declare module 'vscode' {
 		export function registerTaskProvider(type: string, provider: TaskProvider): Disposable;
 	}
 
+	export interface IConfigurationChangeEvent {",No `I`,export interface IConfigurationChangeEvent {
745,"@@ -5399,6 +5399,23 @@ declare module 'vscode' {
 		export function registerTaskProvider(type: string, provider: TaskProvider): Disposable;
 	}
 
+	export interface IConfigurationChangeEvent {
+
+		/**
+		 * Affected configuration keys
+		 */
+		affectedKeys: string[];",`readonly`,Why is this an array?
746,"@@ -54,12 +53,14 @@ import { IContextKeyService, RawContextKey, ContextKeyExpr, IContextKey } from '
 import { Command } from 'vs/editor/common/editorCommonExtensions';
 import { IWorkbenchEditorService } from 'vs/workbench/services/editor/common/editorService';
 import { KeybindingsRegistry } from 'vs/platform/keybinding/common/keybindingsRegistry';
+import { default as WebView, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_INPUT_FOCUSED } from 'vs/workbench/parts/html/browser/webview';","Let's align the casing this time, use `Webview` always instead of mix of both `WebView` and `Webview`.",import { default as WebView } from 'vs/workbench/parts/html/browser/webview';
747,"@@ -54,6 +54,16 @@ export function stat(path: string): TPromise<fs.Stats> {
 	return nfcall(fs.stat, path);
 }
 
+export function statLink(path: string): TPromise<{ stat: fs.Stats, isSymbolicLink: boolean }> {","@isidorn why is this method not simply using `extfs`? E.g. it should be as simple as:

```typescript
export function statLink(path: string): TPromise<string> {
	return nfcall(extfs.statLink, path);
}
```","export function stat(path: string): TPromise<{ stat: fs.Stats, isSymbolicLink: boolean }> {"
748,"@@ -5400,6 +5400,26 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * An event describing the change in Configuration
+	 */
+	export interface ConfigurationChangeEvent {
+
+		/**
+		 * Affected configuration keys
+		 */
+		readonly affectedKeys: string[];","I agree with @jrieken, although I would tweak it a bit to be `changes: Map<string, { previous: any, current: any }>` if possible.",Why do we need this?
749,"@@ -5447,14 +5452,17 @@ declare module 'vscode' {
 	export namespace scm {
 
 		/**
-		 * The [input box](#SourceControlInputBox) in the Source Control viewlet.
+		 * The [input box](#SourceControlInputBox) for the last source control",Move `@deprecated` to the top and enclose the rest in `~~` to strike it out,"""in the"" -> ""in the"""
750,"@@ -549,6 +568,33 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 		return promiseCompletedOnHide;
 	}
 
+	private handleOnCancel(isPicker: boolean): void {
+		// restore the editor part state after cancelling
+		this.historyService.block(true);","@wprater shouldn't this be `block(false)`? also I am missing the all to `block(true)`.
",Why do we need this?
751,"@@ -549,6 +568,33 @@ export class QuickOpenController extends WorkbenchComponent implements IQuickOpe
 		return promiseCompletedOnHide;
 	}
 
+	private handleOnCancel(isPicker: boolean): void {
+		// restore the editor part state after cancelling
+		this.historyService.block(true);
+
+		// restore the previous preview editor
+		if (this.previousPreviewEditorInput) {","@wprater unfortunately I think this is more complicated for the restore part. I can see the following states:
- 1.) no active editor
- 2.) no preview editor
- 3.) active editor is preview editor
- 4.) active editor is not preview editor

1.) easy, just close the preview editor that was opened
2.) also easy, just close the preview editor
3.) restore the previous active editor by opening it
4.) restore the previous editor in the preview slot but open it in the background because it was not the active one. also open the previous active editor

Also you have to be careful that you do this from the `onCancel()` callback. Because as far as I remember this method is not called when you actually pick an entry from quick open. I would expect some additional logic when an element is picked.
",Why do we need this?
752,"@@ -55,7 +55,39 @@ export class CodeSnippet implements ICodeSnippet {
 	}
 
 	static fromEmmet(template: string): CodeSnippet {
-		return EmmetSnippetParser.parse(template);
+		//return EmmetSnippetParser.parse(template);
+
+		let matchFinalStops = template.match(/\$\{0\}/g);
+		if (!matchFinalStops || matchFinalStops.length === 1) {
+			return CodeSnippet.fromTextmate(template);
+		}
+
+		// Emmet sometimes returns snippets with multiple ${0}
+		// In such cases, replace ${0} with incremental tab stops
+","There is also the shorthand notion which omits the curlies, like so `foo$1ba$0r`. Isn't emmet using that?",Can we remove this?
753,"@@ -55,7 +55,8 @@
 	width: 49%;
 	margin: 0 1% 0 0;
 	text-align: right;
-	font-weight: bold;
+	font-weight: normal;","You can just take out `font-weight` altogether
",font-weight: normal;
754,"@@ -553,6 +552,18 @@ export class OneCursor {
 	public getViewLineMaxColumn(lineNumber:number): number {
 		return this.viewModelHelper.viewModel.getLineMaxColumn(lineNumber);
 	}
+	public getViewLineMinColumn(lineNumber:number): number {
+		return this.viewModelHelper.viewModel.getLineMinColumn(lineNumber);
+	}
+	public getViewLineCenterColumn(lineNumber:number): number {","You have to be careful about this one. This does not work for lines containing bi-di or variable width character sizes.
",Why do we need these methods?
755,"@@ -553,6 +564,9 @@ export class MainThreadDocuments {
 		modelService.onModelRemoved.add(this._onModelRemoved, this, this._toDispose);
 		modelService.onModelModeChanged.add(this._onModelModeChanged, this, this._toDispose);
 
+		this._toDispose.push(eventService.addListener2(FileEventType.FILE_SAVING, (e: LocalFileChangeEvent) => {
+			this._proxy._acceptModelSaving(e.getAfter().resource);
+		}));","What guarantees do we make when a document is being saved? Can people still modify etc?
",I'm not sure if this is the best place to listen for this event. I think it should be in the `onModelModeChanged` handler.
756,"@@ -553,7 +570,7 @@ export interface CompletionItemProvider {
 	/**
 	 * Provide completion items for the given position and document.
 	 */
-	provideCompletionItems(model: editorCommon.IReadOnlyModel, position: Position, token: CancellationToken): CompletionItem[] | Thenable<CompletionItem[]> | CompletionList | Thenable<CompletionList>;
+	provideCompletionItems: ProviderCompletionItems | ProviderCompletionItemsForContext;","I see how this makes the implementation nicer but I think this will add confusion... I'd go simple and just add another overload of the `provideCompletionItems`-function, maybe deprecate the old one",* @param {CancellationToken} token The cancellation token.
757,"@@ -555,6 +555,14 @@ export interface IFilesConfiguration {
 		eol: string;
 		hotExit: string;
 		useExperimentalFileWatcher: boolean;
+		nesting: {
+			enable: boolean;
+			rules: {
+				[glob: string]: boolean | {
+					when: string | string[];
+				};
+			};
+		};",That is limited to nesting by design. It means that it will be inconsistent to add new virtual elements (think of virtual directories that does not exist in file system as possible extension in future).,I'm not sure if this is the best way to do this. I think it would be better to have a separate file for this.
758,"@@ -557,6 +617,7 @@ class MouseDownState {
 	private _lastMouseDownPositionEqualCount: number;
 	private _lastMouseDownCount: number;
 	private _lastSetMouseDownCountTime: number;
+	private _lastMouseDownEvent: 'mouseDown' | 'drag';",pick a better name for this. Perhaps just a boolean `isDragAndDrop` would do. This boolean should be set only in the `start` method above,private _lastMouseDownPositionEqualCount: number;
759,"@@ -56,30 +73,3 @@ function getRangeToBalanceOut(document: vscode.TextDocument, selection: vscode.S
 	}
 	return selection;
 }
-
-function getRangeToBalanceIn(document: vscode.TextDocument, selection: vscode.Selection, rootNode: HtmlNode): vscode.Selection {","This function `getRangeToBalanceIn` is needed.
Take the case when the user selects an html node and starts balancing inwards. Then the `beforeEmmetSelection` array will be empty and the command would fail. In this case, we should use `getRangeToBalanceIn`",This function is no longer used.
760,"@@ -56,6 +60,12 @@ export class DebugEditorContribution implements IDebugEditorContribution {
 		this.hideHoverScheduler = new RunOnceScheduler(() => this.hoverWidget.hide(), HOVER_DELAY);
 		this.registerListeners();
 		this.breakpointWidgetVisible = CONTEXT_BREAKPOINT_WIDGET_VISIBLE.bindTo(contextKeyService);
+
+		// TODO: How do I register a new decoration type using exposed api ?","You do not need to do any of this. Just by calling editor.deltaDecorations editor should register you decoration nicely.
When removing decorations you will also use ids of each of the added decorations by calling deltaDecoraitons.",// TODO: How do I register a decoration type using exposed api ?
761,"@@ -56,7 +68,7 @@ export class WindowsShellHelper {
 				} else {
 					const childProcessLines = stdout.split('\n').slice(1).filter(str => !/^\s*$/.test(str));
 					const childProcessDetails = childProcessLines.map(str => {
-						const s = str.split('  ');
+						const s = str.split(/\s{2,}/);",Any reason for this?,Why is this change needed?
762,"@@ -56,8 +56,7 @@ export class KillTerminalAction extends Action {
 }
 
 /**
- * Copies the terminal selection. Note that since the command palette takes focus from the terminal,",This comment seems obsolete to me. Let me know if i'm missing something.,*
763,"@@ -56,8 +56,7 @@ export class KillTerminalAction extends Action {
 }
 
 /**
- * Copies the terminal selection. Note that since the command palette takes focus from the terminal,
- * this can only be triggered via a keybinding.
+ * Copies the terminal selection.","The comment is still relevant as you can't trigger it through the command palette. This is what it should probably say though:

```js
/**
 * Copies the terminal selection. Note that since the command palette takes focus from the terminal,
 * this cannot be triggered through the command palette.
 */
```","I'm not sure if this is the right way to go about it, but it seems like it should be a separate PR."
764,"@@ -560,7 +560,7 @@ export abstract class BaseGlobalNewAction extends Action {
 }
 
 /* Create new file from anywhere: Open untitled */
-export class GlobalNewFileAction extends Action {
+export class GlobalNewUntitledFileAction extends Action {
 	public static ID = 'workbench.action.files.newUntitledFile';
 	public static LABEL = nls.localize('newFile', ""New File"");","Should this maybe read ""New Untitled File"" to make the difference clear?
",I don't think we should change the name of the action.
765,"@@ -5636,9 +5636,9 @@ typescript-formatter@4.0.1:
     editorconfig ""^0.13.2""
     glob-expand ""^0.2.1""
 
-typescript@2.6.1:
-  version ""2.6.1""
-  resolved ""https://registry.yarnpkg.com/typescript/-/typescript-2.6.1.tgz#ef39cdea27abac0b500242d6726ab90e0c846631""
+typescript@2.7.1:",Why was this changed in `yarn.lock` but `typescript-formatter` wasn't? It's still at `4.0.1` just above this.,This should be `2.7.0`
766,"@@ -566,11 +582,32 @@
 				<key>fenced_code_block_basic</key>
 				<dict>
 					<key>begin</key>
-						<string>(^|\G)\s*(([`~]){3,})\s*(html|htm|shtml|xhtml|inc|tmpl|tpl)(\s+.*)?$</string>
+					<string>(^|\G)\s*([`~]{3,})\s*(html|htm|shtml|xhtml|inc|tmpl|tpl)\n</string>",Keep the `(\s+.*)?$`bit. We allow arbitrary text on the rest of the line after the language identifier to support passing other attributes (like line numbers specifiers) that some markdown engines support.,"<string>([`~]{3,})\s*(html|htm|shtml|xhtml|inc|tmpl|tpl)\n</string>"
767,"@@ -566,11 +582,32 @@
 				<key>fenced_code_block_basic</key>
 				<dict>
 					<key>begin</key>
-						<string>(^|\G)\s*(([`~]){3,})\s*(html|htm|shtml|xhtml|inc|tmpl|tpl)(\s+.*)?$</string>
+					<string>(^|\G)\s*([`~]{3,})\s*(html|htm|shtml|xhtml|inc|tmpl|tpl)\n</string>
 					<key>name</key>
 					<string>markup.fenced_code.block.markdown</string>
-					<key>while</key>
-					<string>(^|\G)(?!\s*\2\3*\s*$)</string>
+					<key>end</key>
+					<string>(^|\G)\s*([`~]{3,})\n</string>",This should also reverted to how it was before so that we consume any number of spaces after the fence end and the end of line.,Why did you change this?
768,"@@ -566,14 +573,10 @@ export class CodeWindow implements ICodeWindow {
 			configuration['extensions-dir'] = cli['extensions-dir'];
 		}
 
-		if (cli) {
-			configuration['disable-extensions'] = cli['disable-extensions'];
-		}
-
 		configuration.isInitialStartup = false; // since this is a reload
 
 		// Load config
-		this.load(configuration, true);
+		this.load(configuration, true, cli);",And here I would not pass over cli but just wether extensions are disabled or not.,Why is this removed?
769,"@@ -568,6 +568,24 @@ export class TerminalInstance implements ITerminalInstance {
 		document.execCommand('paste');
 	}
 
+	public sendFile(filePath: string, addNewLine: boolean): void {
+		this._processReady.then(() => {
+			let path: string;
+			if (/(System32|Sysnative)\\(bash.exe|wsl.exe)/i.exec(this._shellLaunchConfig.executable)) {
+				path = `""${filePath.replace(/([A-Za-z]):/, (m, g) => `mnt/${g.toLocaleLowerCase()}`)}""`;",`toLowerCase` is probably more correct than `toLocaleLowerCase` here since it's directory,`addNewLine` is not used.
770,"@@ -569,6 +569,9 @@ export class TerminalInstance implements ITerminalInstance {
 			env['PTYCOLS'] = cols.toString();
 			env['PTYROWS'] = rows.toString();
 		}
+		if (!env['LANG']) {","I think it's a good idea to have a fallback, but this would probably be better in `_getLangEnvVariable` instead, replacing the `n === 0` case :+1: ",if (!env['LANG']) {
771,"@@ -57,7 +61,15 @@ export class LineNumbersOverlay extends DynamicViewOverlay {
 		return true;
 	}
 	public onCursorPositionChanged(e:editorCommon.IViewCursorPositionChangedEvent): boolean {
-		return false;
+		let modelPosition = this._context.model.convertViewPositionToModelPosition(e.position.lineNumber, e.position.column);
+
+		if (!this._relativeLineNumbers || this._currentLineNumber === modelPosition.lineNumber) {
+			return false;
+		}
+
+		this._currentLineNumber = modelPosition.lineNumber;","In the case where `this._relativeLineNumbers` is `false`, `this._currentLineNumber` should still be assigned such that `this._currentLineNumber` always has a good value.

It is possible that the `relativeLineNumbers` option changes at runtime and in that case we'd want `this._currentLineNumber` to be up-to-date.
",`this._currentLineNumber !== modelPosition.lineNumber`
772,"@@ -575,6 +575,7 @@ export interface IFilesConfiguration {
 		exclude: glob.IExpression;
 		watcherExclude: { [filepattern: string]: boolean };
 		encoding: string;
+		defaultLanguage: string;",We do have an extension running that provides intellisense inside settings. For this setting I would like to see the list of language Ids when the user wants to quickly select a known language. The place to add this is here: https://github.com/Microsoft/vscode/blob/master/extensions/configuration-editing/src/settingsDocumentHelper.ts#L26,I'm not sure if this is the right place to put this. I think it should be at the top of the file.
773,"@@ -58,12 +59,19 @@ export enum TextEditorRevealType {
 	InCenterIfOutsideViewport = 2
 }
 
-export interface IApplyEditsOptions {
+export interface IUndoStopOptions {
 	undoStopBefore: boolean;
 	undoStopAfter: boolean;
+}
+
+export interface IApplyEditsOptions extends IUndoStopOptions {
 	setEndOfLine: EndOfLine;
 }
 
+export interface IInsertSnippetOptions extends IUndoStopOptions {
+",![](https://cdn.meme.am/Instance/Preview?imageID=10051184&generatorTypeID=&panels=&text0=Machete&text1=don't%20do%20empty%20interface&text2=&text3=),Why do we need this interface?
774,"@@ -58,4 +67,27 @@ export class MainThreadMessageService extends MainThreadMessageServiceShape {
 			});
 		});
 	}
+
+	private showModalMessage(severity: Severity, message: string, commands: { title: string; isCloseAffordance: boolean; handle: number; }[]): Thenable<number> {
+		let closeAffordanceIndex = -1;",Just keep a `boolean`? I do not see `closeAffordanceIndex` being used for anything but that. Or is that an oversight?,
775,"@@ -58,7 +68,7 @@ export interface IUntitledEditorService {
 	 * It is valid to pass in a file resource. In that case the path will be used as identifier.
 	 * The use case is to be able to create a new file with a specific path with VSCode.
 	 */
-	createOrGet(resource?: URI, modeId?: string): UntitledEditorInput;
+	createOrGet(resource?: URI, modeId?: string, restoreResource?: URI): UntitledEditorInput;","@Tyriar maybe `restoreFromBackupResource` to make it clear this is about backups?
",Why do we need to pass in `restoreResource`?
776,"@@ -581,7 +581,11 @@ export class RunActiveFileInTerminalAction extends Action {
 			this.notificationService.warn(nls.localize('workbench.action.terminal.runActiveFile.noFile', 'Only files on disk can be run in the terminal'));
 			return TPromise.as(void 0);
 		}
-		instance.sendText(uri.fsPath, true);
+
+		const filePath = this.terminalService.isWslBashTerminal(instance) ?
+			uri.path.replace(/([A-Za-z]):/, (m, g) => `mnt/${g.toLocaleLowerCase()}`) :","I've been told that it's not safe to assume /mnt/x/ is the right path https://github.com/Tyriar/vscode-terminal-here/issues/15#issuecomment-366108775

There's also more information there about detecting the executable correctly.",I'm not sure if this is the best way to do this. I think it would be better to use `fs.readFileSync` instead.
777,"@@ -583,6 +586,63 @@ export class OneCursorOp {
 		return true;
 	}
 
+	public static moveSubWordLeft(cursor:OneCursor, inSelectionMode: boolean, ctx: IOneCursorOperationContext): boolean {
+		let position = cursor.getPosition();
+		var lineNumber = position.lineNumber;","Use `const` as much as possible. If the value changes, like `positionFound` at L608, use `let`. Try to avoid `var`.

Tough I noticed Microsoft isn't doing this everytime as well. But it's best practice :).
",Why do we need this method?
778,"@@ -5870,6 +5870,21 @@ declare module 'vscode' {
 	 */
 	export interface TreeView<T> extends Disposable {
 
+		/**
+		 * Event that is fired when an element is expanded
+		 */
+		readonly onDidExpandElement: Event<T>;
+
+		/**
+		 * Event that is fired when an element is collapsed
+		 */
+		readonly onDidCollapseElement: Event<T>;
+
+		/**
+		 * Currently selected elements.
+		 */
+		readonly selectedElements: ReadonlyArray<T>;","I think just `selection` is better? That;s what we use in the editor. Also, why is it readonly? How do I selecting something in the tree?",Why do we need this?
779,"@@ -59,6 +59,31 @@ export class CloseEditorAction extends Action {
 	}
 }
 
+export class ForceCloseEditorAction extends Action {",Suggest to move this into `editorActions.ts`,
780,"@@ -59,6 +59,31 @@ export class CloseEditorAction extends Action {
 	}
 }
 
+export class ForceCloseEditorAction extends Action {
+
+	public static ID = 'workbench.action.forceCloseActiveEditor';",Maybe better `workbench.action.revertAndCloseActiveEditor` ?,This should be `workbench.action.forceCloseActiveEditor`.
781,"@@ -59,6 +59,31 @@ export class CloseEditorAction extends Action {
 	}
 }
 
+export class ForceCloseEditorAction extends Action {
+
+	public static ID = 'workbench.action.forceCloseActiveEditor';
+	public static LABEL = nls.localize('forceCloseActiveEditor', ""Force Close Editor"");",`Revert and Close Editor`,I don't think we need to localize this.
782,"@@ -59,7 +59,8 @@
 				"".xml"",
 				"".xpdl"",
 				"".xsd"",
-				"".xul""","H
H
",""".xsd"","
783,"@@ -594,6 +594,7 @@ export interface ExtHostLanguageFeaturesShape {
 	$resolveWorkspaceSymbol(handle: number, symbol: modes.SymbolInformation): TPromise<IWorkspaceSymbol>;
 	$releaseWorkspaceSymbols(handle: number, id: number): void;
 	$provideRenameEdits(handle: number, resource: URI, position: IPosition, newName: string): TPromise<modes.WorkspaceEdit>;
+	$resolveInitialRenameValue(handle: number, resource: URI, position: IPosition): TPromise<modes.RenameInitialValue>;",We removed some automagic marshalling and `UriComponent` must be used now,"$provideRenameEdits(handle: number, id: number, newName: string): TPromise<modes.WorkspaceEdit>;"
784,"@@ -596,6 +596,14 @@ export class View extends ViewEventHandler implements editorBrowser.IView, IDisp
 		return viewModel.convertViewRangeToModelRange(currentCenteredViewRange);
 	}
 
+	public getVisibleRangeInViewport(): Range {
+		if (this._isDisposed) {
+			throw new Error('ViewImpl.getVisibleRangeInViewport: View is disposed');
+		}
+		let visibleRange= this.layoutProvider.getLinesViewportData().visibleRange;","spacing around `=`
",`visibleRange` -> `visibleRange`
785,"@@ -597,7 +602,9 @@ export class Item extends Events.EventEmitter {
 		var eventData: IItemDisposeEvent = { item: this };
 		this.emit('item:dispose', eventData);
 
-		this.registry.deregister(this);
+		if (this.registry.isRegistered(this.id)) {
+			this.registry.deregister(this);
+		}",According to ids not being unique it means that if you create two items with same ID they will be registered once and unregistered straight after disposing any of them. Does registry produce event of item disposal? This code hardly affects it.,Why is this needed?
786,"@@ -6,10 +6,12 @@
 {
 	""label.closeButton"": ""ÂÖ≥Èó≠"",
 	""label.find"": ""Êü•Êâæ"",
-	""label.matchesLocation"": ""Á¨¨ {0} ‰∏™(ÂÖ± {1} ‰∏™)"",
+	""label.matchesLocation"": ""{0} / {1}"",
 	""label.nextMatchButton"": ""‰∏ã‰∏Ä‰∏™ÂåπÈÖç"",
 	""label.noResults"": ""Êó†ÁªìÊûú"",
 	""label.previousMatchButton"": ""‰∏ä‰∏Ä‰∏™ÂåπÈÖç"",
+	""label"".allMatchButton"": ""ÈÄâ‰∏≠ÊâÄÊúâÂåπÈÖç"",","I think we don't modify locaization files ourselves, only touch the English version.
","""label.matchesLocation"": ""{0} / {1}"","
787,"@@ -6,10 +6,16 @@
 
 import * as nls from 'vs/nls';
 import { KeyCode, KeyMod, KeyChord } from 'vs/base/common/keyCodes';
+import { TPromise } from 'vs/base/common/winjs.base';
+import { isFalsyOrEmpty } from 'vs/base/common/arrays';
 import { SortLinesCommand } from 'vs/editor/contrib/linesOperations/common/sortLinesCommand';
+import { getDocumentRangeFormattingEdits } from 'vs/editor/contrib/format/common/format';
+import { EditOperationsCommand } from 'vs/editor/contrib/format/common//formatCommand';",two slashes here -> vs/editor/contrib/format/common//formatCommand,Why do we need this?
788,"@@ -6,4 +6,63 @@
 .monaco-workbench .select-box {
 	width: 100%;
 	height: 20px;
-}
\ No newline at end of file
+}
+
+/* Require .monaco-shell for ContextView dropdown */
+
+.monaco-shell .select-dropdown-container  {
+	display: none;
+}
+
+.monaco-shell .select-dropdown-container.visible  {
+	display: flex;
+	flex-direction: column;
+	text-align: left;
+	width: 1px;
+	overflow: hidden !important;
+}
+
+.monaco-shell .select-dropdown-container .selectbox-dropdown-list-container {",@cleidigh I think a hierarchy should be expressed in CSS if clearly present. E.g. `.select-dropdown-container .selectbox-dropdown-list-container` can be `.select-dropdown-container > .selectbox-dropdown-list-container` imho,This should be `display: none;`
789,"@@ -6,40 +6,31 @@
 .monaco-editor .margin-view-overlays .folding {
 	margin-left: 5px;
 	cursor: pointer;
-}
-
-.monaco-editor .margin-view-overlays .folding::after {
 	background-repeat: no-repeat;","why are these changes part of this PR? Is the change in the editor core forcing these changes?
",Why was this removed?
790,"@@ -6,6 +6,8 @@
 .monaco-editor .zone-widget .zone-widget-container.breakpoint-widget {
 	height: 30px !important;
 	display: flex;",Try to put it in one rule together,.monaco-editor
791,"@@ -6,7 +6,7 @@
 	""contributes"": {
 		""languages"": [{
 			""id"": ""html"",
-			""extensions"": [ "".html"", "".htm"", "".shtml"", "".mdoc"", "".jsp"", "".asp"", "".aspx"", "".jshtm"" ],
+			""extensions"": [ "".html"", "".htm"", "".shtml"", "".xhtml"", "".mdoc"", "".jsp"", "".asp"", "".aspx"", "".jshtm"" ],
 			""aliases"": [ ""HTML"", ""htm"", ""html"", ""xhtml"" ],
 			""mimetypes"": [""text/html"", ""text/x-jshtm"", ""text/template"", ""text/ng-template""]","Oh you should also probably add `application/xhtml+xml` to this list.
",Why is this change needed?
792,"@@ -6,7 +6,7 @@
 	""contributes"": {
 		""languages"": [{
 			""id"": ""powershell"",
-			""extensions"": [ "".ps1"", "".psm1"", "".psd1"" ],
+			""extensions"": [  "".ps1"", "".psm1"", "".psd1"", "".pssc"", "".psrc"" ],","Remove the space before `"".ps1""`
",I don't think we need the `.pssc` here.
793,"@@ -60,6 +60,7 @@ export interface IFilesConfiguration extends IFilesConfiguration, IWorkbenchEdit
 		};
 		autoReveal: boolean;
 		enableDragAndDrop: boolean;
+		sortOrder: string;",This should be `sortOrder: 'default' | 'mixed' | 'filesFirst' | 'type' | 'modified'`,
794,"@@ -6002,9 +6052,10 @@ declare module 'vscode' {
 		placeholder: string;
 
 		/**
-		 * The warning threshold for lines in the input box.
+		 * A validation provider for the input box. It's possible to change
+		 * the validation provider simply by setting this property to a different value.
 		 */
-		lineWarningLength: number | undefined;
+		validationProvider: SourceControlInputBoxValidationProvider;","Yeah, maybe... It doesn't fill well into the provider approach which usually is about registering multiple providers, like `registerInputBoxValidationProvider('git', myProviderInstance)`. I'd say make it a real provider or let be a simple callback. ",I'm not sure if this is the right place to put this property. I think it should be in the `InputBox` instead.
795,"@@ -602,6 +605,18 @@ export class WindowsManager implements IWindowsService {
 			iPathsToOpen = this.cliToPaths(openConfig.cli, ignoreFileNotFound);
 		}
 
+		// Add any existing backup workspaces
+		if (openConfig.restoreBackups) {
+			// TODO: Ensure the workspaces being added actually have backups
+			this.backupService.getBackupWorkspaces().forEach(ws => {","What if a window is already opened with a workspace that has backup files, I think you need to avoid opening those again (since we prevent opening the same workspace twice we would just focus that window).
",I think we can remove this TODO now.
796,"@@ -61,28 +61,28 @@ export class ActivitybarPart extends Part implements IActivityService {
 	private registerListeners(): void {
 
 		// Activate viewlet action on opening of a viewlet
-		this.toUnbind.push(this.eventService.addListener(EventType.VIEWLET_OPENING, (e: ViewletEvent) => this.onViewletOpening(e)));
+		this.toUnbind.push(this.eventService.addListener(EventType.VIEWLET_OPENING, (e: CompositeEvent) => this.onViewletOpening(e)));","@isidorn I think we can generalize this event to be COMPOSITE_OPENING and onCompositeOpening() because the listener seems to use the ID of the composite to do something and it also seems to be the only client through out the workbench.
",// Activate viewlet action on opening of a composite
797,"@@ -61,6 +61,7 @@ export interface IFilesConfiguration extends IFilesConfiguration, IWorkbenchEdit
 		autoReveal: boolean;
 		enableDragAndDrop: boolean;
 		sortOrder: SortOrder;
+		openInTerminalKind: string;","This is not the right place to have it, it should be in execution contribution.",
798,"@@ -61,6 +61,8 @@ export class MessageService extends WorkbenchMessageService implements IChoiceSe
 			opts.checkboxLabel = confirmation.checkboxLabel;
 		}
 
+		confirmation.checked = false;","@bpasero Based on what I've read in the Electron docs, you can only check if the checkbox is checked in a message box in a callback. That's problematic since the result is delivered in a return value. I cannot return two values. Right now, I plan on just making a small callback that assigns the checkbox value to the IConfirmation object (as checked) and checking that in the drag-drop confirmation code. Is there a better way of doing this or am I on the right track?",if (confirmation.checked) {
799,"@@ -61,7 +61,9 @@ function createCompile(build, emitError) {
 function compileTask(out, build) {
     return function () {
         var compile = createCompile(build, true);
-        var src = es.merge(gulp.src('src/**', { base: 'src' }), gulp.src('node_modules/typescript/lib/lib.d.ts'));
+        var src = es.merge(gulp.src('src/**', { base: 'src' }), 
+        // gulp.src('node_modules/typescript/lib/lib.dom.d.ts'),
+        gulp.src('node_modules/typescript/lib/lib.es6.d.ts'));","Careful with that because I believe it leaks globals into the CU that we cannot use, e.g `Symbol.iterator` etc. We need to configure the compiler so that it emits ES6 but doesn't use ES6 globals...",Is this intentional?
800,"@@ -610,6 +610,9 @@ class TaskService extends EventEmitter implements ITaskService {
 
 	private registerCommands(): void {
 		CommandsRegistry.registerCommand('workbench.action.tasks.runTask', (accessor, arg) => {",If I run the build task with cmd+shift+b does this get called?,}
801,"@@ -614,8 +614,8 @@ export class TextEditorOptions extends EditorOptions {
 				options.preserveFocus = true;
 			}
 
-			if (input.options.pinned) {
-				options.pinned = true;
+			if (input.options.pinned !== undefined) {",Leave as it was?,Why not just `if (input.options.pinned)`?
802,"@@ -62,10 +68,24 @@ export class StatusBarColorProvider extends Themable implements IWorkbenchContri
 			return STATUS_BAR_NO_FOLDER_BACKGROUND;
 		}
 
-		// debugging
+		// Debugging
 		return STATUS_BAR_DEBUGGING_BACKGROUND;
 	}
 
+	private getForegroundColorKey(): string {","This looks almost identical to `getBackgroundColorKey`. Can we just have one method where all color keys are passed in? Something like `getColorKey(noFolderColor, debuggingColor, normalColor)`?",Why is this a string and not a boolean?
803,"@@ -62,23 +62,14 @@ interface IWindowsState {
 
 type RestoreWindowsSetting = 'all' | 'folders' | 'one' | 'none';
 
-interface IOpenBrowserWindowOptions {",Refactor to use a common `IOpenOptions` interface.,Why did you remove this?
804,"@@ -62,6 +65,7 @@ export interface ITerminalConfigHelper {
 	getFont(): ITerminalFont;
 	getFontLigaturesEnabled(): boolean;
 	getCursorBlink(): boolean;
+	isRightClickCopyPaste(): boolean;",Change this to `get...` like `getCursorBlink`,isRightClickCopyPaste(): boolean;
805,"@@ -622,15 +632,55 @@ export class OneCursorOp {
 			validatedViewPosition = cursor.convertModelPositionToViewPosition(validatedPosition.lineNumber, validatedPosition.column);
 		}
 
+		return this.move(cursor, inSelectionMode, validatedViewPosition, eventSource, ctx);
+	}
+
+	public static move(cursor:OneCursor, inSelectionMode: boolean, to:editorCommon.IPosition | string, eventSource: string, ctx: IOneCursorOperationContext): boolean {","please move argument decoding to `cursor.ts` to do it only once even if there are 1000 cursors.

Please also make it clear which one is cursorMove and which one is the old one. They are all called move now.
",Why do we need this method?
806,"@@ -622,6 +622,10 @@ export abstract class CommonCodeEditor extends EventEmitter implements editorCom
 		return this.model.deltaDecorations(oldDecorations, newDecorations, this.id);
 	}
 ","Same as my previous comment. This PR should not touch anything in the editor land.

As I commented earlier have you tried using editor.deltaDecoraitions which should automatically register a decoration. A nice use case of this api can be found [here](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/debug/browser/debugEditorModelManager.ts#L97)","function deltaDecorations(oldDecorations, newDecorations) {"
807,"@@ -623,6 +713,28 @@ export class FileService implements IFileService {
 		});
 	}
 
+	// TODO@ben, I extracted this from `resolveStreamContent` but I am not sure
+	// what it does in comparsion to the other encoding related functions...
+	public getEncoding2(resource: uri, options: IResolveContentOptions, detected: IMimeAndEncoding): string {","This is just a way to prioritise all the different encodings that can be determined for a file (either by detecting the encoding, by settings or by user choice). There are some rules which encoding to pick in which case. I think the method can be `private`, not `public` and be renamed to something like `selectEncoding` or `pickEncoding` or `getPreferredEncoding`.",I am not sure if this is the right way to do this. I am not sure if this is the right way.
808,"@@ -624,11 +676,13 @@ export class Model extends ee.EventEmitter implements debug.IModel {
 
 	public sourceIsUnavailable(source: Source): void {
 		Object.keys(this.threads).forEach(key => {
-			this.threads[key].callStack.forEach(stackFrame => {","For some reason I had missed updating this reference to `callStack`.

Just pointing out what we have changed today that wasn't in yesterday's commit and you hadn't commented on.
",return this.threads[key].callStack.some(stackFrame => {
809,"@@ -624,6 +630,8 @@ export class RenameTerminalAction extends Action {
 			if (name) {
 				terminalInstance.setTitle(name, false);
 			}
+
+			this.quickOpenService.show('term ');",Delete this :),Shouldn't this be `this.quickOpenService.close()`?
810,"@@ -63,6 +66,8 @@ export class TerminalInstance {
 				event: 'input',
 				data: this.sanitizeInput(data)
 			});
+
+			console.log('this.terminalProcess.process.pid=' + this.terminalProcess.process.pid);","üí• 
",
811,"@@ -630,15 +660,31 @@ export class ExplorerView extends CollapsibleView {
 			}
 		}
 
+		if (e.gotUpdated()) {
+			// Check updated only if sortOrder === MODIFIED
+			const config = this.configurationService.getConfiguration<IFilesConfiguration>();
+			if (config && config.explorer && config.explorer.sortOrder === SortOrderConfiguration.MODIFIED) {",Why do you need to resolve the config here again? You should be able to just use `this.sortOrder`?,Shouldn't this be `if (e.gotUpdated()) {`?
812,"@@ -632,6 +633,9 @@ export class Workbench implements IPartService {
 		this.toShutdown.push(this.quickOpen);
 		serviceCollection.set(IQuickOpenService, this.quickOpen);
 
+		// cleidigh",Remove comment,// cleidigh
813,"@@ -64,6 +67,14 @@ export class BackupFilesModel implements IBackupFilesModel {
 		return true;
 	}
 
+	public getTextFiles(): string[] {","@Tyriar this is some crazy string magic that is not very robust, instead I suggest to use the `URI` apis we already have: use `URI.parse()` to convert the resource string into a `URI` and then you have access to `fsPath` and scheme to find out what you want.",public string[] getTextFiles() {
814,"@@ -646,6 +651,30 @@ export class RepositoryPanel extends ViewletPanel {
 			.done(undefined, onUnexpectedError);
 	}
 
+	private onDidSelectAll(e: StandardKeyboardEvent): void {
+		const elements = this.repository.provider.resources",What's type of this constant?,
815,"@@ -65,14 +68,24 @@ export class TableOfContentsProvider {
 		return toc;
 	}
 
+	private static getHeaderLevel(markup: string): number {
+		if (markup == '=') {",These two comparisons need to use `===`. I think this is what is causing the Travis build to fail,`getHeaderLevel` -> `getHeaderLevel`
816,"@@ -65,15 +65,15 @@ export interface ITerminalService {
 
 	close(): TPromise<any>;
 	copySelection(): TPromise<any>;
-	createNew(): TPromise<any>;
-	focus(): TPromise<any>;
+	createNew(name?: string): TPromise<number>;","As a recommendation I'd return the `ITerminalPanel` here and move `setActive`, `show`, `dispose` etc in it - the services seems to become quite large. 
",Why do we need this?
817,"@@ -65,6 +97,30 @@ export class ActivitybarPart extends Part implements IActivityService {
 		}
 	}
 
+	getIsEnabledForRegisteredViewlets(): { [viewletId: string]: boolean } {","Add access modifier
",
818,"@@ -65,6 +97,30 @@ export class ActivitybarPart extends Part implements IActivityService {
 		}
 	}
 
+	getIsEnabledForRegisteredViewlets(): { [viewletId: string]: boolean } {
+		const result = {};
+		for (let viewletId in this.registeredViewlets) {
+			result[viewletId] = (this.enabledExternalViewlets.indexOf(viewletId) !== -1);
+		}
+		return result;
+	}
+
+	toggleViewlet(viewletId: string): void {","Add access modifier
",I don't think we need this method
819,"@@ -650,6 +650,11 @@ export class Repository {
 		await this.run(args);
 	}
 
+	async deleteBranch(name: string): Promise<void> {
+		const args = ['branch', '-d', name];",Maybe we should be explicit with the branch name and use its full form `refs/heads/${name}` instead of simply `name`.,Why do we need this?
820,"@@ -651,12 +651,16 @@ export class List<T> implements ISpliceable<T>, IDisposable {
 		if (options.ariaLabel) {
 			this.view.domNode.setAttribute('aria-label', options.ariaLabel);
 		}
+		this.view.domNode.setAttribute('aria-setsize', this.length.toString());","Just make this `0`, to be explicit.",Why do we need this?
821,"@@ -651,12 +651,16 @@ export class List<T> implements ISpliceable<T>, IDisposable {
 		if (options.ariaLabel) {
 			this.view.domNode.setAttribute('aria-label', options.ariaLabel);
 		}
+		this.view.domNode.setAttribute('aria-setsize', this.length.toString());
 
 		this.style(options);
 	}
 
 	splice(start: number, deleteCount: number, elements: T[] = []): void {
-		this.eventBufferer.bufferEvents(() => this.spliceable.splice(start, deleteCount, elements));
+		this.eventBufferer.bufferEvents(() => {",Return this to the old syntax.,"`this.spliceable.splice(start, deleteCount, elements);`"
822,"@@ -656,7 +656,10 @@ export class List<T> implements ISpliceable<T>, IDisposable {
 	}
 
 	splice(start: number, deleteCount: number, elements: T[] = []): void {
-		this.eventBufferer.bufferEvents(() => this.spliceable.splice(start, deleteCount, elements));
+		this.eventBufferer.bufferEvents(() => {
+			this.spliceable.splice(start, deleteCount, elements);
+			this.view.domNode.setAttribute('aria-setsize', this.length.toString());","You should do this outside the event buffering.

Shouldn't there be an initial value for this, before any `splice` is called?",Why do we need to set the aria-setsize here?
823,"@@ -658,6 +662,22 @@
 						</dict>
 					</array>
 				</dict>
+				<key>fenced_code_block_php</key>
+				<dict>
+					<key>begin</key>
+					<string>(^|\G)\s*([`~]{3,})\s*(php|php3|php4|php5|phpt|phtml|aw|ctp)\s*$</string>
+					<key>name</key>
+					<string>markup.fenced_code.block.markdown</string>
+					<key>end</key>
+					<string>(^|\G)(\2)\n</string>
+					<key>patterns</key>
+					<array>
+						<dict>
+							<key>include</key>
+							<string>text.html.php</string>","It's the same as the scopeName inside php syntax file, but currently the inline highlighting doesn't work. Will look into it later on.
",I don't think you need the `\n` here.
824,"@@ -66,6 +66,10 @@ workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(Toggle
 if (isWindows || isLinux) {
 	workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMenuBarAction, ToggleMenuBarAction.ID, ToggleMenuBarAction.LABEL), 'View: Toggle Menu Bar', viewCategory);
 }
+workbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(NavigateUpAction, NavigateUpAction.ID, NavigateUpAction.LABEL, null), 'View: Navigate Up', viewCategory);","I wonder if the command name is verbose enough to understand the intent. Can we see how others (VIM?) name this command? Maybe ""Navigate to next View to the Left"" etc?",I don't think we need to register a workbench action for this.
825,"@@ -66,6 +68,7 @@ export class DirtyFilesTracker implements IWorkbenchContribution {
 	}
 
 	private onUntitledDidChangeDirty(resource: URI): void {
+","I prefer to not add empty lines in the beginning of a method, please stick to the coding format used elsewhere in the files.
",
826,"@@ -665,6 +667,8 @@ export class TerminalInstance implements ITerminalInstance {
 		const env = shell.env ? shell.env : TerminalInstance._cloneEnv(parentEnv);
 		env['PTYPID'] = process.pid.toString();
 		env['PTYSHELL'] = shell.executable;
+		env['TERM_PROGRAM'] = product.nameShort;","Not sure if it would be better to use a constant name across all VSCode builds (insiders, stable, oss)?",const product = shell.product;
827,"@@ -67,11 +72,23 @@ const DEFAULT_ANSI_COLORS = {
 	]
 };
 
+export interface ITerminalFont {
+	fontFamily: string;
+	fontSize: number;
+	lineHeight: number;
+	charWidth: number;
+	charHeight: number;
+}
+
 /**
  * Encapsulates terminal configuration logic, the primary purpose of this file is so that platform
  * specific test cases can be written.
  */
 export class TerminalConfigHelper {
+	private characterMeasureElement: HTMLElement;","Name `charMeasureElement` for consistency
",Why do we need this interface?
828,"@@ -67,6 +67,20 @@ export interface IRange {
 	end: number;
 }
 
+export interface IShowMessageOptions {
+	force?: boolean;
+	ellipsis?: EllipsisType;
+}
+
+/**
+ * Determines whether the ellipsis appears at the left or right side of the string
+*/
+export enum EllipsisType {",This does not seem to be needed anymore. Same as `IShowMessageOptions`,Why is this an enum?
829,"@@ -67,6 +67,7 @@ export interface ITerminalConfiguration {
 	commandsToSkipShell: string[];
 	cwd: string;
 	confirmOnExit: boolean;
+	envVars: object;","Let's call this `env`, that should be descriptive enough and it matches the `env` command.",
830,"@@ -67,6 +70,12 @@ export class TextFileEditor extends BaseTextEditor {
 		}
 	}
 
+	private onWillCloseEditor(e: IEditorIdentifier): void {
+		if (e.editor === this.input && this.position === this.editorGroupService.getStacksModel().positionOfGroup(e.group)) {","It is fine to do the equality check here between editors here? They are actually the same reference?
I understand you do not have an `id` for the editors here.

You also treat the input as FileEditorInput later on so I guess you could check their resource uri as comparison?",Why do we need this?
831,"@@ -67,7 +67,7 @@ async function showPreview(
 
 	telemetryReporter.sendTelemetryEvent('openPreview', {
 		where: previewSettings.sideBySide ? 'sideBySide' : 'inPlace',
-		how: (uri instanceof vscode.Uri) ? 'action' : 'pallete'
+		how: (uri instanceof vscode.Uri) ? 'action' : 'palette'","I know that a lot of the changes here are to telemetry calls, which presumably will impact a database somewhere.
I'd argue that changing to the correct spelling and at worst adding a shim/collator for the backend is the right thing to do.

That said, I'm happy to drop these things if requested.",I don't think we should change this.
832,"@@ -67,7 +67,7 @@ export class PackageJSONContribution implements IJSONContribution {
 										let name = keys[0];
 										let insertText = new SnippetString().appendText(JSON.stringify(name));
 										if (addValue) {
-											insertText.appendText(': ').appendPlaceholder('*');
+											insertText.appendText(': ""').appendPlaceholder('').appendText('""');
 											if (!isLast) {","should be `""*""`, not just `""""`",Why did you change this?
833,"@@ -670,7 +669,7 @@ export class ActionBar extends EventEmitter implements IActionRunner {
 
 	public dispose(): void {
 		if (this.items !== null) {
-			lifecycle.dispose(this.items);
+			this.clear();","Can we not do this for stable, but only on insiders? Seems like an additional change on top that is not needed to fix the actual issue.",Why is this needed?
834,"@@ -68,7 +68,7 @@ export interface IUntitledEditorService {
 	 * It is valid to pass in a file resource. In that case the path will be used as identifier.
 	 * The use case is to be able to create a new file with a specific path with VSCode.
 	 */
-	createOrGet(resource?: URI, modeId?: string, restoreResource?: URI): UntitledEditorInput;
+	createOrGet(resource?: URI, modeId?: string, hasBackupToRestore?: boolean): UntitledEditorInput;","@Tyriar `hasBackupToRestore` is not being used after all?
",`hasBackupToRestore` -> `backupsToRestore`
835,"@@ -687,7 +687,8 @@ export class TerminalInstance implements ITerminalInstance {
 		this._isExiting = true;
 		this._process = null;
 		let exitCodeMessage: string;
-		if (exitCode) {
+
+		if (exitCode && this._configHelper.config.showExitAlert) {","Looking at this again I think the `showExitAlert` needs to be added to this line at the bottom of the function:

```js
this._messageService.show(Severity.Error, exitCodeMessage)
```

`exitCodeMessage` is shared between both the message box and also tasks which will be output to the terminal if it fails. In the current state when tasks fail an empty line will be added to the terminal when the task fails instead of the message.",`exitCode && this._configHelper.config`
836,"@@ -687,7 +689,8 @@ export class TerminalInstance implements ITerminalInstance {
 		this._isExiting = true;
 		this._process = null;
 		let exitCodeMessage: string;
-		if (exitCode) {
+
+		if (exitCode && this.configurationService.getValue('terminal.integrated.showExitAlert')) {","Currently all interactions with the config service is managed within `TerminalConfigHelper`, could you change to use `this._configHelper.config.showExitAlert` instead? You'll also need to add it to the interface defined in terminal.ts",I think this should be `this.configurationService.getValue('terminal.integrated.showExitAlert');`
837,"@@ -689,17 +689,24 @@ export class TransposeAction extends EditorAction {
 	}
 
 	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		for (let selection of editor.getSelections()) {","Once we add this feature, maybe we should not call it `Transpose characters around the cursor ` any more.",I'm not sure if this is the best way to do this. I think it would be better to do this in the `run` method.
838,"@@ -69,16 +94,35 @@ export class FileDataSource implements IDataSource {
 	}
 
 	public hasChildren(tree: ITree, stat: FileStat | Model): boolean {
-		return stat instanceof Model || (stat instanceof FileStat && stat.isDirectory);
+		if (stat instanceof Model) {","since `isVirtualDirectory` shouldn't be true unless this is enabled, you could extend the existing line of code:

`return stat instanceof Model || (stat instanceof FileStat && (stat.isDirectory || stat.isVirtualDirectory));`",Why is this change needed?
839,"@@ -69,19 +70,19 @@ export class Model {
 	}
 }
 
-export class FileStat implements IFileStat {
+export class ExplorerItem {
 	public resource: URI;
 	public name: string;
 	public mtime: number;
 	public etag: string;
 	private _isDirectory: boolean;
 	private _isSymbolicLink: boolean;
-	public children: FileStat[];
-	public parent: FileStat;
+	public children: { [name: string]: ExplorerItem };",@isidorn should we use a `Map` here instead?,Why did you remove the interface?
840,"@@ -69,7 +69,9 @@ export class WorkspaceEditingService implements IWorkspaceEditingService {
 
 		// Apply to config
 		if (newWorkspaceRoots.length) {
-			return this.jsonEditingService.write(workspace.configuration, { key: 'folders', value: newWorkspaceRoots }, true);
+			const value: IStoredWorkspaceFolder[] = newWorkspaceRoots.map(newWorkspaceRoot => ({ uri: newWorkspaceRoot }));",@sandy081 fyi new format for `folders`,Why do we need this change?
841,"@@ -699,6 +699,26 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * Represents options to configure the behavior of showing a [document](#TextDocument) in an [editor](#TextEditor).
+	 */
+	export interface ShowTextDocumentOptions {","@jrieken I don't love this name, let me know what you think",Why is this interface needed?
842,"@@ -699,6 +699,26 @@ declare module 'vscode' {
 	}
 
 	/**
+	 * Represents options to configure the behavior of showing a [document](#TextDocument) in an [editor](#TextEditor).
+	 */
+	export interface TextDocumentShowOptions {
+		/**
+		 * An optional view column in which the [editor](#TextEditor) should be shown. The default is the [one](#ViewColumn.One), other values are adjusted to be __Min(column, columnCount + 1)__.
+		 */
+		column ?: ViewColumn,",Wow - your commit should have been blocked because that's a formatting issue...,I think this should be `?ViewColumn`
843,"@@ -7,11 +7,13 @@ import * as interfaces from './interfaces';
 import { DocumentMergeConflict } from './documentMergeConflict';
 
 const startHeaderMarker = '<<<<<<< ';
+const commonAncestorsMarker = '||||||| ';
 const splitterMarker = '=======';
 const endFooterMarker = '>>>>>>> ';
 
 interface IScanMergedConflict {
 	startHeader: vscode.TextLine;
+	commonAncestors: vscode.TextLine | null;",Nit; might as well mark `commonAncestors` as optional e.g. `commonAncestors?`,I think this should be `vscode.TextLine | null`
844,"@@ -7,13 +7,10 @@ import * as nls from 'vs/nls';
 import { TPromise } from 'vs/base/common/winjs.base';","Looks good overall and I like we removed code from this class.

I only have the issue that you are creating a `linkDetector` at every iteration in a loop. Would it not make sense just to create one global one for the replViewer and always to reuse it?",import { Promise } from 'rsvp';
845,"@@ -7,13 +7,19 @@
 	transform: rotate(180deg);
 }
 
-.monaco-workbench > .part.activitybar {
+.monaco-workbench > .part.activitybar, .monaco-workbench.mac.fullscreen.use-inline-toolbar > .part.activitybar {","I do not understand why this rule is duplicated here?
",.monaco-workbench {
846,"@@ -7,6 +7,11 @@ import assert = require('assert');
 import uri from 'vs/base/common/uri';","Really happy for the tests.
",import
847,"@@ -7,6 +7,7 @@
 		<string>ps1</string>
 		<string>psm1</string>
 		<string>psd1</string>
+		<string>ps1xml</string>","Same here, `/extensions/powershell/package.json` contains the file extensions
",<string>ps1xml</string>
848,"@@ -7,6 +7,7 @@
   ""license"": ""MIT"",
   ""publisher"": ""vscode"",
   ""aiKey"": ""AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217"",
+  ""enableProposedApi"": true,",No need to use proposed API here anymore. I moved the API to vscode.d.ts ,
849,"@@ -7,6 +7,7 @@
 import { isLinux, isWindows } from 'vs/base/common/platform';
 import { fill } from 'vs/base/common/arrays';
 import { CharCode } from 'vs/base/common/charCode';
+import { endsWith } from 'vs/base/common/strings';","Overall, can you please use `const` and `let` instead of `var` for variables?",import { startsWith } from 'vs/base/common/string';
850,"@@ -7,6 +7,7 @@ import 'vs/css!./media/scrollbar';
 import 'vs/css!./media/terminal';
 import 'vs/css!./media/xterm';
 import 'vs/css!./media/widgets';
+import 'vs/workbench/parts/terminal/browser/terminalQuickOpen';",I think you want to move this to workbench.main.ts,import 'vs/workbench/parts/terminal/browser';
851,"@@ -7,6 +7,9 @@
 		<string>clj</string>
 		<string>cljs</string>
 		<string>clojure</string>
+		<string>cljc</string>
+		<string>cljx</string>
+		<string>edn</string>","If you want to add file extensions for clojure, you have to do that `/extensions/clojure/package.json`. From `/extensions/clojure/syntaxes/Clojure.tmLanguage` we only take the colorizer information.
",This should be `cljx`.
852,"@@ -7,7 +7,7 @@ import * as interfaces from './interfaces';
 import { loadMessageBundle } from 'vscode-nls';
 const localize = loadMessageBundle();
 
-export default class MergeDectorator implements vscode.Disposable {",this's been already fixed in #41131 ,import vscode from 'vscode';
853,"@@ -70,4 +71,19 @@ export interface IActivityService {
 	 * Clears activity shown in the activitybar for the given viewlet or panel.
 	 */
 	clearActivity(compositeId: string): void;
-}
\ No newline at end of file
+","@octref this Viewlet related code should move into `IViewletService` or if that is impossible for some reason maybe into a new `IExtensionViewletService`
",Why did you remove this?
854,"@@ -70,6 +70,7 @@ export class TerminalInstance implements ITerminalInstance {
 	private _onDataForApi: Emitter<{ instance: ITerminalInstance, data: string }>;
 	private _onProcessIdReady: Emitter<TerminalInstance>;
 	private _onTitleChanged: Emitter<string>;
+	private _onCheckWindowsShell: Emitter<TPromise<string>>;",Can be removed,private _onCheckWindowsShell: Emitter<TPromise<string>>;
855,"@@ -70,6 +70,9 @@ export class FileStat implements IFileStat {
 	public hasChildren: boolean;
 	public children: FileStat[];
 	public parent: FileStat;
+	public isVirtualDirectory: boolean;
+	public isVirtualDirectoryMember: boolean;
+	public virtualDirectoryName: string;",I don't believe this variable is used anywhere,public virtualDirectoryName: string;
856,"@@ -703,6 +703,7 @@ export class EditorStacksModel implements IEditorStacksModel {
 	private _onEditorDirty: Emitter<EditorIdentifier>;
 	private _onEditorLabelChange: Emitter<EditorIdentifier>;
 	private _onEditorOpened: Emitter<EditorIdentifier>;
+	private _onWillCloseEditor: Emitter<EditorIdentifier>;
 	private _onEditorClosed: Emitter<GroupEvent>;
 	private _onModelChanged: Emitter<IStacksModelChangeEvent>;","Why does `onWillCloseEditor` emit a different event than `onEditorClosed`?
Intuitivly they should emit the same and it makes sense to me that is the `EditorIdentififer`",I think this should be `_onWillCloseEditorOpened`
857,"@@ -709,6 +718,17 @@ export class Workbench implements IPartService {
 		// Create Workbench DIV Off-DOM
 		this.workbenchContainer = $('.monaco-workbench-container');
 		this.workbench = $().div({ 'class': 'monaco-workbench ' + (isWindows ? 'windows' : isLinux ? 'linux' : 'mac'), id: Identifiers.WORKBENCH_CONTAINER }).appendTo(this.workbenchContainer);
+
+		// Only needed while the option `windowConfig.macOSUseInlineToolbar` exists
+		if (isMacintosh) {","Please move all of this code into `renderWorkbench` where we already adjust some CSS classes based on things like sidebar visible or not. It is also much easier to get hold of the IConfigurationService by adding the following to the constructor of the workbench:

`@IConfigurationService private configurationService: IConfigurationService`

All the other code is not needed then. 

To find out if the setting is set, I suggest this code:

`this.configurationService.lookup('window.macOSUseInlineToolbar').value`
",I don't think this is needed anymore.
858,"@@ -709,7 +709,18 @@ export class WindowsManager implements IWindowsService {
 		}
 
 		// Handle folders to open
-		let openInNewWindow = openConfig.preferNewWindow || openConfig.forceNewWindow;
+		let openInNewWindow: boolean;","@elemongw sorry, but this does not work for me when I try it. The folder opens in the same window no matter how I configure the setting. I believe you need to turn the logic around: set `openInNewWindow` to true when the setting is enabled!
",Why is this change needed?
859,"@@ -71,21 +206,104 @@ export class SelectBox extends Widget {
 		}));
 	}
 
+	private registerSelectDropDownListeners() {
+		// Have to implement both keyboard and mouse controllers to handle disabled options
+		// Intercept mouse events to override normal select actions on parents
+
+		this.toDispose.push(dom.addDisposableListener(this.selectElement, dom.EventType.CLICK, () => {
+			this.showSelectDropDown();
+			event.preventDefault();",@cleidigh I suggest to use the shorter [`stop`](https://github.com/Microsoft/vscode/blob/master/src/vs/base/browser/dom.ts#L766) function with the option to cancel bubble. ,Why do we need this?
860,"@@ -71,6 +71,19 @@ export class MainThreadLanguageFeatures implements MainThreadLanguageFeaturesSha
 		}
 	}
 
+	private static _reviveSymbolDefinitionDto(data: SymbolDefinitionDto): modes.SymbolDefinition {
+		if (!data) {
+			return <modes.SymbolDefinition>data;
+		}
+
+		if (data.definingSpan) {
+			data.definingSpan = this._reviveLocationDto(data.definingSpan);
+		}
+
+		data.definitions = data.definitions.map(x => this._reviveLocationDto(x));",No need to map or assign because revive changes objects in-place (for the sake of avoiding garbage). Same on line 80,`_reviveLocationDto` should be renamed to `_reviveSymbolDefinitionDto`
861,"@@ -712,6 +715,7 @@ export class List<T> implements ISpliceable<T>, IDisposable {
 	setFocus(indexes: number[]): void {
 		indexes = indexes.sort(numericSort);
 		this.focus.set(indexes);
+		this.view.domNode.setAttribute('aria-posinset', indexes.length ? (indexes[0] + 1).toString() : undefined);","The [w3 docs](https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset) state:

> Authors MUST set the value for aria-posinset to an integer greater than or equal to 1, and less than or equal to the size of the set.

Setting it to `undefined` doesn't sound like it's the right thing to do here.",I don't think you need the `.toString()` here.
862,"@@ -717,7 +718,6 @@ function fileMatchToString(fileMatch: FileMatch, maxMatches: number): { text: st
 		.slice(0, maxMatches)",Do the FileMatches need to be sorted too?,.
863,"@@ -72,55 +68,25 @@ export class CodeActionOracle {
 		return undefined;
 	}
 
-	private _getRangeOfSelectionUnlessWhitespaceEnclosed(): Selection {",Unclear to me if we still want this check or not. The current logic always forwards the exact selection to the providers,}
864,"@@ -72,6 +72,11 @@ configurationRegistry.registerConfiguration({
 			},
 			'default': []
 		},
+		'terminal.integrated.rightClickCopyPaste': {
+			'description': nls.localize('terminal.integrated.rightClickCopyPaste', ""Controls whether copy/paste happens on mouse right click in integrated terminal.""),","I think the description needs to be more detailed, how about this?

> When set, this will prevent the context menu from appearing on right clicking in the terminal, instead it will copy when there is a selection and paste when there is no selection.",I don't think you need the `<msg>`<msg>`<msg>`<msg>`<msg>`<msg>`<msg>`<msg>`default` is a list.
865,"@@ -72,6 +84,12 @@ configurationRegistry.registerConfiguration({
 			},
 			'default': []
 		},
+		'terminal.integrated.rightClickAction.windows': {","I'm thinking instead of having 3 settings for each platform and using strings, instead having a single setting for all platforms that just turns on rightClickCopy/Paste. Maybe `terminal.integrated.rightClickCopyPaste`? Then the default could be true when `platform.isWindows` (put the default in terminal.ts and import it into this file).",'rightClickAction.windows': {
866,"@@ -72,7 +72,12 @@ export class TerminalLinkHandler {
 		const baseLocalLinkClause = _platform === platform.Platform.Windows ? winLocalLinkClause : unixLocalLinkClause;
 		// Append line and column number regex
 		this._localLinkPattern = new RegExp(`${baseLocalLinkClause}(${lineAndColumnClause})`);
-		this._xterm.setHypertextLinkHandler(this._wrapLinkHandler(() => true));
+
+		this._xterm.setHypertextLinkHandler(this._wrapLinkHandler(uri => {
+			this._handleHypertextLink(uri);
+			return;","Let's remove this `return`, plus the one in `registerLocalLinkHandler`. Not sure why I put them there üòÖ ",Why do we need to return here?
867,"@@ -72,8 +72,8 @@ export default class LinkedMap<T> {
 		return item.value;
 	}
 
-	public shift(): T {
-		if (!this.head && !this.tail) {
+	public shift(): T | undefined {",The idea why I used && here is that only having one being undefined / null basically points to a programming error somewhere else and the code should fail later on. Now that error might be covered up. I think if we go with a || here then we should add additional asserts.,Why is this change needed?
868,"@@ -725,6 +722,42 @@ class BaseDeleteFileAction extends BaseFileAction {
 			});
 		});
 	}
+
+	private getMoveToTrashMessage(distinctElements): string {",@pradeepmurugesan the `distinctElements` is missing a type annotation: `distinctElements: ExplorerItem[]`,`getMoveToTrashMessage` -> `getMoveToTrash`
869,"@@ -727,8 +718,8 @@ export class WindowsManager implements IWindowsMainService {
 			filesToCreate,
 			filesToDiff,
 			filesToWait,
-			forceNewWindow: openInNewWindow,
-			windowToUse","Passing the target window instance down to the `openInBrowserWindow` method in this file. Note that we fallback to the current window instance only in the case if the `windowToUse` argument is not passed. If the `this.getWindowById(openConfig.targetWindowId)` returns null, we will still open the last active window.",Why did you remove this?
870,"@@ -73,7 +73,7 @@
 		""menus"": {
 			""editor/title"": [
 				{
-					""when"": ""resourceLangId == markdown"",
+					""when"": ""editorLangId == markdown"",","I could also change this to be `resourceLangId == markdown || editorLangId == markdown`, but only showing the preview menu item for files that are viewed as markdown makes more sense  to me
","""when"": ""editorLangId == markdown"","
871,"@@ -73,7 +73,7 @@ export function provideSuggestionItems(model: IModel, position: Position, snippe
 					return undefined;
 				}
 
-				return asWinJsPromise(token => support.provideCompletionItems(model, position, token)).then(container => {
+				return asWinJsPromise(token => support.provideCompletionItems(model, position, context || {}, token)).then(container => {",Move the default object `{}` out of the loop?,if (context === undefined) {
872,"@@ -730,6 +745,12 @@ export class WindowsManager implements IWindowsService {
 		// Emit events
 		iPathsToOpen.forEach(iPath => this.eventEmitter.emit(EventTypes.OPEN, iPath));
 
+		// Add to backups","Why are we adding these workspaces again to backup service?
",this.eventEmitter.emit(EventTypes.CLOSE);
873,"@@ -736,6 +736,16 @@ export class Workbench implements IPartService {
 		// Create Workbench DIV Off-DOM
 		this.workbenchContainer = $('.monaco-workbench-container');
 		this.workbench = $().div({ 'class': 'monaco-workbench ' + (isWindows ? 'windows' : isLinux ? 'linux' : 'mac'), id: Identifiers.WORKBENCH_CONTAINER }).appendTo(this.workbenchContainer);
+
+
+		// Mac specific UI changes
+		if (isMacintosh) {
+			const {serviceCollection} = this.workbenchParams;","Unused serviceCollection?
",I think this should be `const {serviceCollection} = this.workbenchParams`
874,"@@ -738,6 +738,18 @@ export class TestFileService implements IFileService {
 		});
 	}
 
+	resolveStringStream(resource: URI, options?: IResolveContentOptions): IStringStream {","We need to ensure that the new code is covered by the same test suite that covers `resolveContent` today. There are many tests in [`fileService.test.ts`](https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/services/files/test/node/fileService.test.ts#L628) that cover various things (e.g. large file, not modified since, encoding). ",
875,"@@ -74,6 +74,7 @@ export interface INextEditorGroupsAccessor {
 	getGroup(identifier: GroupIdentifier): INextEditorGroupView;
 
 	addGroup(location: INextEditorGroupView | GroupIdentifier, direction: GroupDirection, options?: IAddGroupOptions): INextEditorGroup;
+  removeGroup(): void;","I think my merge caused a bad formatting here, suggest to code format once",removeGroup(identifier: GroupIdentifier);
876,"@@ -74,6 +76,7 @@ export class TypeScriptServiceConfiguration {
 			&& this.localTsdk === other.localTsdk
 			&& this.npmLocation === other.npmLocation
 			&& this.tsServerLogLevel === other.tsServerLogLevel
+			&& this.tsServerPluginPaths === other.tsServerPluginPaths",Should be array contents comparison,&& this.tsServerLogLevel === other.tsServerLogLevel
877,"@@ -746,8 +746,9 @@ export class LanguageConfigurationRegistryImpl {
 				oneLineAboveText = oneLineAboveScopedLineTokens.getLineContent();
 			}
 		}
-
+		//if the commentBlock.showAsterisk configuration is set, change beforeEnterText from "" * "" to ""  """,Changes to core vscode (`src/...` ) should no longer be needed,//if the commentBlock.showAsterisk configuration is set
878,"@@ -75,6 +75,10 @@ export const debuggersExtPoint = extensionsRegistry.ExtensionsRegistry.registerE
 				description: nls.localize('vscode.extension.contributes.debuggers.languages', ""List of languages for which the debug extension could be considered the \""default debugger\"".""),
 				type: 'array'
 			},
+			adapterExecutableCommand: {",argumnts is missing an E argumEnts,"name: 'vscode.extension.contributes.debuggers',"
879,"@@ -758,10 +761,26 @@ export const copyMatchCommand: ICommandHandler = (accessor, match: RenderableMat
 	}
 };
 
+export class SearchSorter implements ISorter {","direct import is creating circular dependency.
so moved here",
880,"@@ -76,6 +86,8 @@ export class OpenAnythingHandler extends QuickOpenHandler {
 	}
 
 	public getResults(searchValue: string): TPromise<QuickOpenModel> {
+		const timerEvent = this.telemetryService.timedPublicLog('openAnything');
+		const startTime = timerEvent.startTime ? timerEvent.startTime.getTime() : Date.now();","I find the check weird here, why would startTime be undefined if you got timerEvent from the timedPublicLog method?
",`startTime` can be `null`
881,"@@ -76,7 +75,7 @@ export class TabsTitleControl extends TitleControl {
 		@IWindowsService private windowsService: IWindowsService,
 		@IThemeService themeService: IThemeService,
 		@IFileService private fileService: IFileService,
-		@IWorkspacesService private workspacesService: IWorkspacesService
+		@IWorkspacesService private workspacesService: IWorkspacesService,",Looks like an extra trailing comma.,Why did you change this?
882,"@@ -76,7 +76,7 @@ export function testCompletionFor(value: string, expected: { count?: number, ite
 }
 
 suite('HTML Completion', () => {
-	test('HTML Javascript Completions', function (): any {
+	test('HTML JavaScript Completions', function (): any {",Here's a case where `JavaScript` should be properly spelled...,Why did you change this?
883,"@@ -76,8 +109,8 @@ export class TerminalLinkHandler {
 			this._handleLocalLink(url);
 			return;
 		});
+
 		return this._xterm.registerLinkMatcher(this._localLinkRegex, wrappedHandler, {
-			matchIndex: 1,",Don't we need this?,const wrappedHandler = (url) => {
884,"@@ -760,7 +760,7 @@ export class EditorGroupsControl implements IEditorGroupsControl, IVerticalSashL
 			this.sashTwo.setOrientation(this.layoutVertically ? Orientation.VERTICAL : Orientation.HORIZONTAL);
 
 			// Trigger layout
-			this.arrangeGroups(GroupArrangement.EVEN);
+			this.arrangeGroups(GroupArrangement.KEEP_RATIO);","Suggest to not introduce a `GroupArrangement.KEEP_RATIO` but rather allow to call `arrangeGroups` without any parameter and then use that as an indication to ""keep the ratio"". I would not expose this as API but just set the arrangement optional here in this file.",Why did you change this?
885,"@@ -761,6 +768,8 @@ export class WindowsManager implements IWindowsMainService {
 			}
 		}
 
+		this.backupService.registerWindowForBackups(vscodeWindow.id, !configuration.workspacePath, configuration.backupFolder, configuration.workspacePath);",@Tyriar are you missing the check for `openConfig.cli.extensionDevelopmentPath` on purpose here?,this.backupService.registerWindowForBackups(vscodeWindow.id);
886,"@@ -769,4 +769,23 @@ declare module 'vscode' {
 	}
 
 	//#endregion
+
+	//#region Terminal
+
+	export namespace window {
+		/**
+		 * The currently active terminals or an empty array.
+		 *
+		 * @readonly
+		 */
+		export let terminals: Terminal[];
+
+		/**
+		 * An [event](#Event) which fires when a terminal has been created, either through the
+		 * [createTerminal](#window.createTerminal) API or commands.
+		 */
+		export const onDidOpenTerminal: Event<Terminal>;",Think about a `TerminalOpenEvent` so that you a chance of adding more stuff in the future..,I'm not sure if this is the best way to do this. I'm not sure if there's a better way to do this.
887,"@@ -77,16 +78,22 @@ export class EditorPickerEntry extends QuickOpenEntryGroup {
 
 	public run(mode: Mode, context: IEntryRunContext): boolean {
 		if (mode === Mode.OPEN) {
-			return this.runOpen(context);
+			this.runOpen(context);
+
+			return true;
+		}","@wprater style: `} else {`
",Why do we need this?
888,"@@ -77,4 +77,4 @@ export default () => `
 	</div>
 </div>
 `;
-// #35719
+// #35764","```
<div class=""section recent"" id=""recentL"">
					<h2 class=""caption"">${escape(localize('welcomePage.recent', ""Recent""))}</h2>
					<ul class=""list"">
						<!-- Filled programmatically -->
						<li class=""moreRecent""><a href=""command:workbench.action.openRecent"">${escape(localize('welcomePage.moreRecent', ""More...""))}</a><span class=""path detail if_shortcut"" data-command=""workbench.action.openRecent"">(<span class=""shortcut"" data-command=""workbench.action.openRecent""></span>)</span></li>
					</ul>
					<p class=""none detail"">${escape(localize('welcomePage.noRecentFolders', ""No recent folders""))}</p>
                                       /* 
                                       var clearRecentList;
                                        if ( clearRecentList = !0) {
					      parent.document.getElementById(""recentL"").reload();
                                        } 
*/
				</div>
```",
889,"@@ -77,6 +77,7 @@ export interface IExpression extends ITreeElement, IExpressionContainer {
 ",Looks good,Why is this needed?
890,"@@ -77,7 +77,7 @@ function prepareDebPackage(arch) {
 function buildDebPackage(arch) {
 	const debArch = getDebPackageArch(arch);
 	return shell.task([
-		'chmod 755 ' + product.applicationName + '-' + debArch + '/DEBIAN/postinst ' + product.applicationName + '-' + debArch + '/DEBIAN/prerm',
+		'chmod 755 ' + product.applicationName + '-' + debArch + '/DEBIAN/postinst ' + product.applicationName + '-' + debArch + '/DEBIAN/prerm ' + product.applicationName + '-' + debArch + '/DEBIAN/postrm',","Thanks for fixing this!
",Why do we need this change?
891,"@@ -778,9 +746,9 @@ export class TextFileEditorModel extends BaseTextEditorModel implements ITextFil
 		this.createTextEditorModelPromise = null;
 
 		this.cancelAutoSavePromises();
-		this.cancelBackupPromises();
 
-		this.fileService.discardBackup(this.resource);
+		// TODO: Can this be moved to BackupModelService?
+		this.backupFileService.discardAndDeregisterResource(this.resource);","Yes, I suggest another event on the service maybe when this model gets disposed.
",I don't think this is the right place to do this. I think it should be in the fileService.
892,"@@ -78,21 +78,69 @@
 
 .monaco-workbench .task-action { background: url('update.svg') center center no-repeat; }
 
+.no-telemetry {
+	background-image: url('thumbs-down.svg');
+	width: 50px;
+	height: 50px;
+	vertical-align: middle;
+}
+
+.yes-telemetry {
+	background-image: url('thumbs-up.svg');
+	width: 50px;
+	height: 50px;
+	vertical-align: middle;
+}
+
 .task-panel {
 	padding-left: 10px;
 	padding-right: 10px;
+	margin-right: 10%;",Fix indentation,I think this should be `.task-action { background: url('update.svg') center no-repeat; }`
893,"@@ -78,6 +78,17 @@ export class ExtHostWorkspace implements ExtHostWorkspaceShape {
 		}
 	}
 
+	addWorkspaceFolders(folders: { uri: URI, name?: string }[]): Thenable<void> {
+		return this._proxy.$addFolders(folders);","Not yet decided if those changes should be reflected sync... We do that in some place, e.g the editor or Memento#update, where we assume optimistically that the change is good, then send to the main side which might cause another change... Needs some thinking.","I think this should be `addWorkspaceFolders(folders: { uri: URI, name?: string }[]): Promise<void>`"
894,"@@ -78,6 +78,18 @@ export class ExtHostWorkspace implements ExtHostWorkspaceShape {
 		}
 	}
 
+	addWorkspaceFolder(uri: URI, name?: string): Thenable<void> {
+		return this._proxy.$addFolder(uri, name);
+	}
+
+	removeWorkspaceFolder(folder: vscode.WorkspaceFolder): Thenable<void> {
+		if (this.getWorkspaceFolders().indexOf(folder) === -1) {
+			return Promise.resolve(undefined);",Maybe make this return a boolean to indicate success/failure. Might also be useful when having a user-confirmation in between. Then `false` could also mean blocked by the user,`removeWorkspaceFolder` -> `removeWorkspaceFolder`
895,"@@ -78,6 +78,7 @@ import 'vs/workbench/parts/trust/electron-browser/unsupportedWorkspaceSettings.c
 import 'vs/workbench/parts/relauncher/electron-browser/relauncher.contribution';
 
 import 'vs/workbench/parts/tasks/electron-browser/task.contribution';
+import 'vs/workbench/parts/tasks/common/taskActions';","I think this should be in task.contribution.ts, which pulls in other task-related files.",import 'vs/workbench/parts/tasks/common/taskActions';
896,"@@ -78,6 +80,14 @@ export class InstallAction extends Action {
 	}
 
 	run(): TPromise<any> {
+		if (this.extension.recommendationInfo) {
+			this.telemetryService.publicLog('extensionRecommendations:install', {","Unless you are interested only in the intent to install, you will likely get events for installs which fail or are cancelled.",Why do we need this?
897,"@@ -78,7 +78,11 @@ export interface IEditorGroupsControl {
 	setGroupOrientation(orientation: GroupOrientation): void;
 	getGroupOrientation(): GroupOrientation;
 
+	requestActiveGroupSizeChange(groupSizeChange: number): boolean;","Can we maybe call this similar to the other one `resizePart` in `partService`, e.g. `resizeGroup` and you pass in the position of the group to resize?",setGroupSizeChange(groupSizeChange: number): void;
898,"@@ -781,6 +823,15 @@ class ProblemPatternParser extends Parser {
 	private validateProblemPattern(values: ProblemPattern[]): boolean {
 		let file: boolean, message: boolean, location: boolean, line: boolean;
 		let regexp: number = 0;
+		let patternsWithKind = values.filter((pattern, i) => {",Could we fold this with the forEach from below. May be it would be easiest to turn the forEach into a for(pattern of values). ,let kind: string = 'problem';
899,"@@ -785,6 +786,19 @@ export class ImportFileAction extends BaseFileAction {
 		return this.tree;
 	}
 
+	private bringWindowToForeground(): void {
+		if (isWindows) {
+			try {
+				const { allowSetForegroundWindow } = <any>require.__$__nodeRequire('windows-foreground-love');
+				allowSetForegroundWindow(process.pid);","Testing this, I do not see any fix for the issue where sometimes the task bar is just flashing and focus is not put. I suggest to remove this code for now, I see no added value.",Why do we need this?
900,"@@ -785,6 +786,19 @@ export class ImportFileAction extends BaseFileAction {
 		return this.tree;
 	}
 
+	private bringWindowToForeground(): void {
+		if (isWindows) {
+			try {
+				const { allowSetForegroundWindow } = <any>require.__$__nodeRequire('windows-foreground-love');
+				allowSetForegroundWindow(process.pid);
+			} catch (e) {
+				// noop
+			}
+		}
+
+		this.windowService.focusWindow();",I suggest to move this closer to the place of the drop operation because that is really where we want to focus the window: https://github.com/Microsoft/vscode/blob/ben/work/src/vs/workbench/parts/files/browser/views/explorerViewer.ts#L735,Why do we need this?
901,"@@ -785,6 +794,16 @@ export class Repository implements Disposable {
 		this._onDidChangeStatus.fire();
 	}
 
+	private detectActiveFile(fullFilePath: string): boolean {
+		if (window.activeTextEditor !== undefined) {","Why not just:

return window.activeTextEditor && window.activeTextEditor.document.fileName === fullFilePath;",nit: `!!window.activeTextEditor`
902,"@@ -789,6 +789,7 @@ export interface IEditorIdentifier {
 
 export interface IEditorContext extends IEditorIdentifier {
 	event?: any;
+	resource?: URI;",@isidorn would it not be enough to call `editorinput.getResource()`? Every editor now has this method so you can get the resource from there.,Why do we need this?
903,"@@ -79,16 +84,33 @@ export class WindowsShellHelper {
 	}
 
 	/**
-	 * Returns the innermost shell executable running in the terminal
+	 * Updates innermost shell executable and innermost shell running in the terminal","This comment is a little vague, something like this might be better:

> Queries the OS and gets the inner-most shell running in the terminal as well as the program the shell is running if it exists.","I think this should be ""Updates the innermost shell executable running in the terminal"""
904,"@@ -79,6 +79,27 @@ export class ExtensionTipsService implements IExtensionTipsService {
 		}, err => []);
 	}
 
+	addToWorkspaceRecommendations(extensionId: string): TPromise<void> {","- Check if extensionId is valid or not
- I would rather use workbench model service and json edit utility to update. This will retain the existing formatting options of the file. Refer [ConfigurationEditingService](https://github.com/microsoft/vscode/blob/thr0w-13456/src/vs/workbench/services/configuration/node/configurationEditingService.ts#L64) that edits configuration files programatically.",nit: `addToWorkspaceRecommendations(extensionId: string)`
905,"@@ -79,6 +79,33 @@ export function rename(model: IReadOnlyModel, position: Position, newName: strin
 	});
 }
 
+function resolveInitialRenameValue(model: IReadOnlyModel, position: Position): TPromise<RenameInitialValue> {
+	const supports = RenameProviderRegistry.ordered(model);",We should just go for the first rename provider so that we always use the same for resolving the location and for the actual rename. ,export default resolveInitialRenameValue;
906,"@@ -79,6 +82,7 @@ export class Workbench implements IPartService {
 
 	private static sidebarPositionSettingKey = 'workbench.sidebar.position';
 	private static sidebarHiddenSettingKey = 'workbench.sidebar.hidden';
+	private static panelPartHiddenSettingKey = 'workbench.panelPart.hidden';","@isidorn suggest to call it just ""workbench.panel.hidden""
",private static panelPartPositionSettingKey = 'workbench.panelPart.position';
907,"@@ -8,11 +8,16 @@
 		<string>bash</string>
 		<string>zsh</string>
 		<string>bashrc</string>
+        <string>zshrc</string>","I think you can safely remove these since they're added to the package.json which is the source of truth. Good to go after this is done :+1: 
",<string>zsh</string>
908,"@@ -8,14 +8,12 @@
 	background-image: url('debug.svg');
 }
 
-.monaco-editor .debug-top-stack-frame-line {
+.monaco-editor .debug-top-stack-frame-line,
+.monaco-editor .debug-top-stack-frame-exception-line
+{",Put the bracket on the previous line,This should be `.debug-top-stack-frame-exception-line`
909,"@@ -8,6 +8,7 @@
 import 'vs/css!./media/activitybarpart';
 import nls = require('vs/nls');
 import { TPromise } from 'vs/base/common/winjs.base';
+import Event, { Emitter } from 'vs/base/common/event';","@octref I expect some code from here to move out to `IViewletService` or `IExtensionViewletService`. it feels lots of things that should not be activity bar related are now inside this part. To me, the part should not really distinguish between normal viewlets and extension viewlets, but just do its business of rendering a set of viewlets and their activity.
","import { Event, Emitter } from 'vs/base/common';"
910,"@@ -8,6 +8,7 @@ import * as paths from 'vs/base/common/paths';
 import * as platform from 'vs/base/common/platform';
 import { Adapter } from 'vs/workbench/parts/debug/node/debugAdapter';
 import { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';
+import debug = require('vs/workbench/parts/debug/common/debug');
 ","This is the old style of importing we no longer use, instead we should switch to
`import * as debug from 'vs/workbench/parts/debug/common/debug'`
which should be preferable in new TS versions",import debug from 'debug';
911,"@@ -8,6 +8,7 @@ import { isLinux, isWindows } from 'vs/base/common/platform';
 import { fill } from 'vs/base/common/arrays';
 import { rtrim } from 'vs/base/common/strings';
 import { CharCode } from 'vs/base/common/charCode';
+import { endsWith } from 'vs/base/common/strings';",@hun1ahpu unused import?,import { startsWith } from 'vs/base/common/string';
912,"@@ -80,6 +80,7 @@ export class TerminalService implements ITerminalService {
 			this.setActiveInstanceByIndex(0);
 		}
 		this._onInstancesChanged.fire();
+		terminalInstance.setCommandsToSkipShell(this.configHelper.getCommandsToSkipShell());","You've actually stumbled upon a bug bigger than this in that no settings values are updated correctly, including scrollback and cursorBlinking as well. Having a brief look at the code, I think the best way to fix this might be to move `TerminalPanel._updateConfig` to `TerminalService.updateConfig` and then call into that after creating the new instance.",if (this.configHelper.getCommandsToSkipShell()) {
913,"@@ -80,6 +83,11 @@ export function isWelcomePageEnabled(storageService: IStorageService) {
 	return 'enableWelcomePage' in overrides ? overrides.enableWelcomePage : splitExperimentsRandomness(storageService).enableWelcomePage;
 }
 
+export function isShowTaskDocumentation(storageService: IStorageService) {",This is not needed then (see below). The welcome page one (you probably looked at) was a special case I'm about to remove.,export function isShowTaskDocumentation(storageService: IStorageService) {
914,"@@ -80,6 +83,9 @@ export class TerminalService implements ITerminalService {
 			this.setActiveInstanceByIndex(0);
 		}
 		this._onInstancesChanged.fire();
+		this._updateCursorBlink(terminalInstance);","These calls would be more at home inside `TerminalInstance.constructor`. Thinking about this further we may be able to get rid of both calls in `TerminalPanel.setVisible` as well by updating the config at the end of `TerminalInstance.attachToElement`. I believe that covers the cases we need to worry about for updating the config:

- When the terminal is created and the panel exists (`attachToElement` will trigger immediately)
- When the terminal is created via the API and the panel does not exist (`attachToElement` call will be deferred)
- When the config is updated (`TerminalService` now listens to `IConfigurationservice.onDidUpdateConfiguration`)",if (terminalInstance) {
915,"@@ -808,6 +826,10 @@ export default class TypeScriptServiceClient implements ITypescriptServiceClient
 				}
 				break;
 		}
+		if (telemetryData.telemetryEventName === 'projectInfo') {
+			this._tsserverVersion = properties['version'];
+		}
+
 		/* __GDPR__
 			""typingsInstalled"" : {","The version field will need to be added to the gdpr annotations as well. 

@kieferrm Would `__GDPR__COMMON__` work for this?",Why do we need this?
916,"@@ -81,6 +81,7 @@ export class DebugService implements debug.IDebugService {
 	private launchJsonChanged: boolean;
 	private firstSessionStart: boolean;
 	private previousState: debug.State;
+	private displayThreadsTimer: Map<String, number>;",Use lowercase `string`,
917,"@@ -81,6 +82,8 @@ export class TerminalInstance implements ITerminalInstance {
 	private _messageTitleListener: (message: { type: string, content: string }) => void;
 	private _preLaunchInputQueue: string;
 	private _initialCwd: string;
+	private _windowsShellService: WindowsShellService;
+	private _checkWindowShell: Emitter<string>;",Let's make this `_onCheckWindowsShell` to be consistent with other `Emitter`s.,private _checkWindowShell: Emitter<string>;
918,"@@ -81,7 +81,7 @@ export class FileService implements IFileService {
 
 		// create service
 		const workspace = this.contextService.getWorkspace();
-		this.raw = new NodeFileService(workspace ? workspace.resource.fsPath : void 0, fileServiceConfig, this.eventService);
+		this.raw = new NodeFileService(workspace ? workspace.resource.fsPath : void 0, fileServiceConfig, this.eventService, this.environmentService, this.configurationService);","@Tyriar these changes are all NOT needed
","this.raw = new NodeFileService(fileServiceConfig, this.eventService, this.environmentService);"
919,"@@ -813,7 +816,10 @@ export class RepositoryPanel extends ViewletPanel {
 		anyEvent<any>(onKeyUp, onMouseUp)(() => this.inputBox.validate(), null, this.disposables);
 
 		this.inputBox.value = this.repository.input.value;
-		this.inputBox.onDidChange(value => this.repository.input.value = value, null, this.disposables);
+		this.inputBox.onDidChange(value => {
+			this.storageService.store(RepositoryPanel.COMMIT_MESSAGE_STORAGE_KEY, value, StorageScope.WORKSPACE);","Shouldn't there be a matching `remove` call for this call to `store`? The value should be removed after the commit happens, right?",Why do we need to store the commit message here?
920,"@@ -817,7 +817,7 @@ export class FileDragAndDrop extends SimpleFileResourceDragAndDrop {
 					return true; // NewStatPlaceholders can not be moved
 				}
 
-				if (source.isRoot && (sources.length > 1 || target instanceof FileStat && !target.isRoot)) {
+				if (source.isRoot && target instanceof FileStat && !target.isRoot) {
 					return true; // Root folder can not be moved to a non root file stat. Do not allow root folder move when multi selection drag.",The comment needs an update too I think,Why did you remove this check?
921,"@@ -82,23 +94,31 @@ class EditTask implements IDisposable {
 	}
 
 	public addEdit(edit: IResourceEdit): void {
-		let range: IRange;
-		if (!edit.range) {
-			range = this._model.getFullModelRange();
+		if (isIEndOfLineSequenceEdit(edit)) {
+			// store new EOL-sequence, last wins
+			this._newEol = edit.eol;
+
 		} else {
-			range = edit.range;
+			// create edit operation
+			let range: IRange;","Consider a `const` here:
```ts
const range = edit.range || this._model.getFullModelRange();
```",Why do we need this?
922,"@@ -82,6 +83,20 @@ const viewletDescriptor = new ViewletDescriptor(
 	36
 );
 
+// Configuration
+Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({
+	id: 'editor',",This should be `scm`,Why do we need this?
923,"@@ -82,6 +83,20 @@ const viewletDescriptor = new ViewletDescriptor(
 	36
 );
 
+// Configuration
+Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({
+	id: 'editor',
+	order: 5,
+	type: 'object',
+	properties: {
+		'editor.enableDecorators': {",The property should be `scm.enableDiffDecorations`.,Should this be `editor.decorators`?
924,"@@ -82,6 +83,20 @@ const viewletDescriptor = new ViewletDescriptor(
 	36
 );
 
+// Configuration
+Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({
+	id: 'editor',
+	order: 5,
+	type: 'object',
+	properties: {
+		'editor.enableDecorators': {
+			'type': 'boolean',
+			'default': true,
+			'description': localize('enableDecorators', ""Enables or disables color decorators when changes happen in the editor."")",`Enables or disables diff decorations in modified files.`,I don't think we need the `<msg>`<msg>`<msg>`<msg>`<msg>`<msg>`<msg>`<msg>This is the default value`
925,"@@ -82,6 +83,8 @@ export class ExplorerView extends CollapsibleView {
 
 	private autoReveal: boolean;
 
+	private sortOrder: string;",Make this `sortOrder: 'default' | 'mixed' | 'filesFirst' | 'type' | 'modified'`,Why do we need this?
926,"@@ -82,7 +82,9 @@ export class CursorConfiguration {
 	public readonly autoClosingPairsOpen: CharacterMap;
 	public readonly autoClosingPairsClose: CharacterMap;
 	public readonly surroundingPairs: CharacterMap;
-	public readonly electricChars: { [key: string]: boolean; };
+
+	private readonly _languageIdentifier: LanguageIdentifier;
+	private _electricChars: { [key: string]: boolean; };","Small nit-pick: To avoid a hidden class mutation at runtime, I prefer to have all members initialized in the ctor. Can you please add `this._electricChars = null;`",Why do we need this?
927,"@@ -821,8 +821,22 @@ export interface IResourceEdit {
 	range: IRange;
 	newText: string;
 }
+
+export interface IResourceRename {
+	readonly from: URI;
+	readonly to: URI;
+}
+
+export interface IResourceCreate {
+	readonly uri: URI;
+	readonly contents: string;","Is `contents` field really necessary? WorkspaceEdit also has edits that can be applied to 0,0 location. ",Why do we need this interface?
928,"@@ -834,6 +834,17 @@ declare module monaco.editor {
 	export function setModelMarkers(model: IModel, owner: string, markers: IMarkerData[]): void;
 
 	/**
+	 * Get markers for owner ant/or resource
+	 * @returns {IMarkerData[]} list of markers
+	 * @param filter
+	 */
+	export function getModelMarkers(filter: {
+		owner?: string;
+		resource?: Uri;
+		take?: number;
+	}): IMarkerData[];",Should return `IMarker` or enforce a resource in the get-call,I don't think we need the `take` param.
929,"@@ -84,12 +85,14 @@ export class TerminalPanel extends Panel {
 	public setVisible(visible: boolean): TPromise<void> {
 		if (visible) {
 			if (this._terminalService.terminalInstances.length > 0) {
-				this._updateConfig();
+				this._terminalService.updateConfig();
+				this._updateFont();
 				this._updateTheme();
 			} else {
 				return super.setVisible(visible).then(() => {
 					this._terminalService.createInstance();
-					this._updateConfig();
+					this._terminalService.updateConfig();",This shouldn't be needed anymore as it's called within `ITerminalService.createInstance`,Shouldn't this be `this._updateFont()`?
930,"@@ -84,43 +140,77 @@ export class ActivitybarPart extends Part implements IActivityService {
 		const $result = $('.content').appendTo($el);
 
 		// Top Actionbar with action items for each viewlet action
-		this.createViewletSwitcher($result.clone());
+		this.createViewletSwitcher($result.clone().addClass('position-top'));","What does this do?
",Why do we need this change?
931,"@@ -84,43 +140,77 @@ export class ActivitybarPart extends Part implements IActivityService {
 		const $result = $('.content').appendTo($el);
 
 		// Top Actionbar with action items for each viewlet action
-		this.createViewletSwitcher($result.clone());
+		this.createViewletSwitcher($result.clone().addClass('position-top'));
 
 		return $result;
 	}
 
 	private createViewletSwitcher(div: Builder): void {
-
-		// Composite switcher is on top","Why remove?
",Why do we need this class?
932,"@@ -84,6 +84,7 @@ export interface IWindowConfiguration extends ParsedArgs {
 	perfWindowLoadTime?: number;
 
 	workspacePath?: string;
+	backupFolder?: string;",@Tyriar suggest `backupPath` to keep naming consistent,
933,"@@ -84,6 +90,12 @@ export class MergeConflictParser {
 			return null;
 		}
 
+		let tokenAfterCurrentBlock: vscode.TextLine = scanned.splitter;
+
+		if (scanned.commonAncestors !== null) {
+			tokenAfterCurrentBlock = scanned.commonAncestors;
+		}
+","Nit; Could be condensed to

```javascript
const tokenAfterCurrentBlock = scanned.commonAncestors || scanned.splitter; 
```",`commonAncestors` can be `undefined`.
934,"@@ -846,6 +862,15 @@ export class TerminalInstance implements ITerminalInstance {
 			this._messageTitleListener = null;
 		}
 	}
+
+	public eventuallyGetShellName(): void {",Let's return the promise here. Also a better name would be `updateShellName` (or `updateWindowsShellName` if it's in `TerminalInstance`. Since `TerminalInstance.setTitle` is on the interface let's move this whole function into `WindowsShellService`.,
935,"@@ -846,6 +867,57 @@ export class TerminalInstance implements ITerminalInstance {
 			this._messageTitleListener = null;
 		}
 	}
+
+	private static executeWMIC(pid: number): TPromise<{ executable: string, pid: number }[]> {","A more general name for what the function is actually doing here, is this accurate? `getFirstWindowsChildProcess`",Why do we need this?
936,"@@ -85,6 +299,26 @@ const iso639_3_to_2: Map<string> = {
 	'trk': 'tr'
 };
 
+const iso639_2_to_3: Map<string> = {",We might want to consider using 2 letter id in the future. The reason why we have this mapping is that MS internally uses 3. If all is public we could switch over to 2.,
937,"@@ -85,6 +85,17 @@
 .monaco-workbench > .part.editor > .content > .one-editor-silo > .container > .title .tabs-container > .tab .tab-label {
 	margin-top: auto;
 	margin-bottom: auto;
+	position: relative;",Please set `position: relative` only when we are in `sizing-shrink` mode. ,.part-editor > .content >
938,"@@ -85,6 +85,39 @@ class MyCompletionItem extends CompletionItem {
 
 		return CompletionItemKind.Property;
 	}
+
+	private static getCommitCharacters(document: TextDocument, kind: string): string[] | undefined {
+		switch (kind) {
+			case PConst.Kind.externalModuleName:
+				return ['""', '\''];
+
+			case PConst.Kind.file:
+			case PConst.Kind.directory:
+				return ['/', '""', '\''];",backslash?,"Why not just `return ['/', '""', '\'']`?"
939,"@@ -85,6 +90,11 @@ export default class MergeDectorator implements vscode.Disposable {
 				}
 			});
 
+			this.decorations['commonAncestors.header'] = vscode.window.createTextEditorDecorationType({
+				color: new vscode.ThemeColor('editor.foreground'),","@kieferrm, @chrmarti: We should probably add a new theme color from common ancestor blocks. I'd be in favor of coloring them at some point. ",
940,"@@ -85,6 +91,7 @@ export interface IExtensionContributions {
 	menus?: { [context: string]: IMenu[] };
 	snippets?: ISnippet[];
 	themes?: ITheme[];
+	explorer?: ITreeExplorer;","Only one tree per extension?
",
941,"@@ -85,8 +87,8 @@ export class ExtHostTerminalService {
 		this._proxy = threadService.get(MainContext.MainThreadTerminalService);
 	}
 
-	public createTerminal(name?: string): vscode.Terminal {
-		return new ExtHostTerminal(this._proxy, -1, name);
+	public createTerminal(name?: string, path?: string): vscode.Terminal {","path -> shellPath
",This is a breaking change. The `ExtHostTerminal` constructor is used to create a new `ExtHostTerminal`.
942,"@@ -86,22 +110,51 @@ export class QuickFixController implements IEditorContribution {
 	}
 
 	private _handleLightBulbSelect(coords: { x: number, y: number }): void {
-		this._quickFixContextMenu.show(this._lightBulbWidget.model.fixes, coords);
+		this.quickFixContextMenu.show(this.lightBulbWidget.model.fixes, coords);
 	}
 
 	public triggerFromEditorSelection(): void {
-		this._model.trigger('manual');
+		if (this._model) {","Yeah, don't do this. Keep the model, enable/disable the lightbulb. The manual invocation should always work",Why do we need this check?
943,"@@ -86,6 +89,23 @@ export interface IEditorGroupsControl {
 	dispose(): void;
 }
 
+function toSize(sizeStr: string, maxSize: number, defaultSize: number): number {","@SrTobi Any reason why this method is not a private method within the `EditorGroupsControl` close to where it is being used?
  ","function toSize(sizeStr: string, maxSize: number) {"
944,"@@ -87,11 +90,18 @@ export interface IEditorGroupsControl {
 	dispose(): void;
 }
 
+interface CenteredLayoutData {
+	leftMarginRatio: number;
+	size: number;
+}
+
 /**
  * Helper class to manage multiple side by side editors for the editor part.
  */
 export class EditorGroupsControl extends Themable implements IEditorGroupsControl, IVerticalSashLayoutProvider, IHorizontalSashLayoutProvider {
 
+	private static readonly CENTERED_LAYOUT_DATA_STORAGE_KEY = 'centeredLayoutData';",I would prefix the value of this key with 'workbench' to be aligned with similar storage keys,Why do we need this?
945,"@@ -87,7 +87,7 @@ export interface IMenuRegistry {
 	getMenuItems(loc: MenuId): IMenuItem[];
 }
 
-export const MenuRegistry: IMenuRegistry = new class {
+export const MenuRegistry: IMenuRegistry = new class implements IMenuRegistry {","Cool, didn't know that is possible...",export type IMenuRegistry = {
946,"@@ -870,4 +870,19 @@ declare module 'vscode' {
 	}
 
 	//#endregion
+
+	//#region Defintion symbol range: mjbvz
+
+	export interface SymbolDefinition {",Should be a class,
947,"@@ -870,4 +870,19 @@ declare module 'vscode' {
 	}
 
 	//#endregion
+
+	//#region Defintion symbol range: mjbvz
+
+	export interface SymbolDefinition {
+		definingSpan?: Location;",needs better name...,I'm not sure if this is the right place to put this. I think it would be better to put this in a separate file.
948,"@@ -870,4 +870,19 @@ declare module 'vscode' {
 	}
 
 	//#endregion
+
+	//#region Defintion symbol range: mjbvz
+
+	export interface SymbolDefinition {
+		definingSpan?: Location;
+
+		definitions: Location[];","Needs room for a target range, e.g. the full range of the target vs the navigate-to-target. That's needed for the source preview hover (can be delayed but must happen before making this 'real' api)",I'm not sure if this is the right place for this. I think it would be better to have a separate file for this.
949,"@@ -886,9 +886,9 @@ export class ExplorerView extends TreeViewsViewletPanel implements IExplorerView
 			}
 
 			// Recurse into children
-			for (let childName in stat.children) {
-				this.getResolvedDirectories(stat.children[childName], resolvedDirectories);
-			}
+			stat.getChildrenNames().forEach(name => {",@isidorn use getChildrenArray here?,`for (const name of stat.getChildrenNames())`
950,"@@ -889,7 +909,8 @@ export class Parser {
 			node.setExpression(this._parseStringLiteral()) ||
 			node.setExpression(this._parseNumeric()) ||
 			node.setExpression(this._parseHexColor()) ||
-			node.setExpression(this._parseOperation())
+			node.setExpression(this._parseOperation()) ||
+			node.setExpression(this._parseVariableExpression())","This needs to be before parseIndent (there could be an ident 'var'). Actually i'd rather do not have a _parseVariableExpression but let variable declarations be handled by _parseFunction.
",I don't think we need to parse the variable expression here.
951,"@@ -89,7 +98,18 @@ export class WindowsShellHelper {
 			// Save the pid in the stack and keep looking for children of that child
 			this._childProcessIdStack.push(result[0].pid);
 			return this.refreshShellProcessTree(result[0].pid, result[0].executable);
-		}, error => { return error; });
+		}, error => {
+			if (!this._isDisposed) {
+				return error;","This shouldn't be returning `error`, because it's probably an `Error` object, and this method is trying to return a `string`. Have you tested what happens if `getChildProcessDetails` fails for some reason and we return null or the error?",Shouldn't this be `return error;`?
952,"@@ -893,6 +893,11 @@ declare module 'vscode' {
 		 */
 		color?: string | ThemeColor;
 
+		/**
+		 * CSS styling property that will be applied to text enclosed by a decoration.
+		 */
+		opacity?: string;
+",fyi @jrieken ,This should be a `ThemeOpacity` type.
953,"@@ -898,6 +898,7 @@ export interface IWorkbenchEditorConfiguration {
 		editor: {
 			showTabs: boolean;
 			showTabCloseButton: boolean;
+			tabCloseButton: 'left' | 'right' | 'off';",remove `showTabCloseButton`,tabCloseButton: 'left' | 'right';
954,"@@ -9,10 +9,28 @@
 
 declare namespace vscode {
 
-	/**
-	 * The version of the editor.
-	 */
-	export var version: string;","that is API breakage which we cannot do
",Why is this being removed?
955,"@@ -9,10 +9,28 @@
 
 declare namespace vscode {
 
-	/**
-	 * The version of the editor.
-	 */
-	export var version: string;
+	export const env: {
+		/**
+		 * The version of the editor.
+		 */
+		version: string;
+
+		/**
+		 * locale, like de-ch, en-us
+		 */
+		locale: string;","@dbaeumer We are looking into adding some vscode environment information. What do thing is needed for localisation support. Is a `locale` string enough?
",Why is this a<msg>I don't think we need to export it?
956,"@@ -9,11 +9,13 @@ import fs = require('fs');
 import path = require('path');
 import os = require('os');
 import assert = require('assert');
+import crypto = require('crypto');","@Tyriar warnings in this file
",import crypto = require('crypto');
957,"@@ -9,26 +9,41 @@
 	<script>
 		'use strict';
 
+		var initData = {};
+
+		function styleBody(body) {
+			if (body) {
+				let currentClasses = body.className.split(' ');
+				let strippedClasses = currentClasses.filter((cl) => {
+					return !initData.bodyClasses.remove.includes(cl);
+				});
+				body.className= `${strippedClasses.join(' ')} ${initData.bodyClasses.add}`;
+			}","Could we just use: `body.classList.remove(""vs"", ""vs-dark"", ""hc-dark""); body.classList.add(""theActualTheme"")`?
",Why do we need this?
958,"@@ -9,6 +9,7 @@ License:  MIT
 URL:      https://code.visualstudio.com/
 Icon:     @@NAME@@.xpm
 Requires: glibc >= 2.15
+Requires: GConf2",Thanks for the PR! Will this work for both 32 and 64 bit across most distributions? We had some issues with `libXss.so.1` where installation failed because the package was not found in the local package manager..,This should be `GConf2`
959,"@@ -9,6 +9,7 @@ global.vscodeStart = Date.now();
 var app = require('electron').app;
 var fs = require('fs');
 var path = require('path');
+var product = require('../product.json');","Isn't product.json one level more up?
",'use strict';
960,"@@ -9,6 +9,9 @@
 	""linux"": {
 		""command"": ""./node_modules/.bin/gulp""
 	},
+	""args"": [
+		""--max_old_space_size=4096""",(these are merged with subsequent `args` declarations),This should be `--max-old-space-size=4096`
961,"@@ -9,8 +9,9 @@ import * as strings from 'vs/base/common/strings';
 import * as objects from 'vs/base/common/objects';
 import * as paths from 'vs/base/common/paths';
 import * as platform from 'vs/base/common/platform';
+import fs = require('fs');","I would put this at the top of the imports as we usually first put node imports than base, editor, platform, workbench",import * as fs from 'fs';
962,"@@ -90,45 +89,34 @@ export function wrapWithAbbreviation(args: any) {
 
 	function makeChanges(inputAbbreviation: string | undefined, previewMade?: boolean, definitive?: boolean): Thenable<any> {
 		if (!inputAbbreviation || !inputAbbreviation.trim() || !helper.isAbbreviationValid(syntax, inputAbbreviation)) {
-			return previewMade ? revertPreview(editor, rangesToReplace).then(() => { return false; }) : Promise.resolve();
+			return previewMade ? revertPreview(editor, rangesToReplace) : Promise.resolve();","Returning false allows us to not revert the preview several times. That would not a problem per se, since revertPreview only replaces the current range with the original content, but why make extra unnecessary edits?",Why is this change needed?
963,"@@ -90,6 +90,12 @@ interface INativeOpenDialogOptions {
 	window?: VSCodeWindow;
 }
 
+interface IConfiguration {",@xwvvvvwx I suggest to move this into `window.ts` including the configuration change listener. I think it is OK to let each window handle this change from within instead of from outside.,interface IConfiguration {
964,"@@ -90,6 +90,29 @@ function _renderHtml(content: IHTMLContentElement, options: RenderOptions = {}):
 		const withInnerHTML = new TPromise(c => signalInnerHTML = c);
 
 		const renderer = new marked.Renderer();
+		renderer.image = (href: string, title: string, text: string) => {
+			let attributes = '';
+			if (title) {
+				const splitted = title.split('|');
+				title = splitted[0];","Looks like the actual title is getting lost now. Add it back into the attributes
",Why do we need this?
965,"@@ -91,8 +91,11 @@ export enum ClickBehavior {
 	ON_MOUSE_UP
 }
 
+export type WorkbenchOpenMode = 'singleClick' | 'doubleClick';",I would not call this `WorkbenchXY` but just `OpenMode` since the tree itself is not only used in the workbench scope.,export type WorkbenchOpenMode = {
966,"@@ -910,6 +916,11 @@ export class Workbench implements IPartService {
 		this.workbenchLayout.layout();
 	}
 
+	private setFontAliasing(enabled: boolean) {
+		this.fontAliasingEnabled = enabled;
+		this.workbench.style('-webkit-font-smoothing', enabled ? 'antialiased' : '');",I think it would be better to apply this on the `<body>` element to make sure that really everything is covered. E.g. there are things that can draw outside of the workbench (the tweet a smile feedback dialog for example).,nit: `antialiased` -> `antialiased`
967,"@@ -912,8 +912,8 @@ export class FileService implements IFileService {
 	private toStatResolver(resource: uri): TPromise<StatResolver> {
 		const absolutePath = this.toAbsolutePath(resource);
 
-		return pfs.stat(absolutePath).then(stat => {
-			return new StatResolver(resource, stat.isDirectory(), stat.mtime.getTime(), stat.size, this.options.verboseLogging ? this.options.errorLogger : void 0);
+		return pfs.statLink(absolutePath).then(statAndIsLink => {","Can be written nicer:

```typescript
return pfs.statLink(absolutePath).then(({ isSymbolicLink, stat }) => {
	return new StatResolver(resource, isSymbolicLink, stat.isDirectory(), stat.mtime.getTime(), stat.size, this.options.verboseLogging ? this.options.errorLogger : void 0);
});
```",`statAndIsLink` -> `statAndIsLink`
968,"@@ -913,7 +913,7 @@ export class FileService implements IFileService {
 		const absolutePath = this.toAbsolutePath(resource);
 
 		return pfs.stat(absolutePath).then(stat => {
-			return new StatResolver(resource, stat.isDirectory(), stat.mtime.getTime(), stat.size, this.options.verboseLogging ? this.options.errorLogger : void 0);
+			return new StatResolver(resource, false, stat.isDirectory(), stat.mtime.getTime(), stat.size, this.options.verboseLogging ? this.options.errorLogger : void 0);","This is a bit weird, why not introduce a new method `pfs.statLink` that is implemented like this:
* executes `lstat`
* executes `stat` only if the stat is a symbolic link
* returns something like `{ stat: stat, isSymbolicLink: boolean }`

This method could then also be used from within the resolver",Why is this `false`?
969,"@@ -918,4 +922,261 @@ export class ToggleSharedProcessAction extends Action {
 	run(): TPromise<void> {
 		return this.windowsService.toggleSharedProcess();
 	}
-}
\ No newline at end of file
+}
+
+export abstract class BaseNavigationAction extends Action {
+
+	protected NEXT = 'next';","@misoguy a bit weird, why not use an enum outside of the action?

```
enum Direction {
   Next,
   Previous
}
```",Why do we need this?
970,"@@ -92,4 +93,24 @@ export function detectEncodingByBOMFromBuffer(buffer: NodeBuffer, bytesRead: num
  */
 export function detectEncodingByBOM(file: string): TPromise<string> {
 	return stream.readExactlyByFile(file, 3).then(({buffer, bytesRead}) => detectEncodingByBOMFromBuffer(buffer, bytesRead));
+}
+
+const IGNORE_ENCODINGS = ['ascii', 'utf-8', 'utf-16', 'urf-32'];","This meant to be ""utf-32"" instead of ""urf-32"", right?",Why do we need this?
971,"@@ -920,6 +920,9 @@ class TaskService extends EventEmitter implements ITaskService {
 	}
 
 	private executeTask(task: Task, resolver: ITaskResolver): TPromise<ITaskSummary> {
+		if (!this.storageService.get('userRanTask', StorageScope.GLOBAL)) {","Add some variable for this, see RecentlyUsedTasks_Key ",Why is this needed?
972,"@@ -928,6 +928,17 @@ export class EditorPart extends Part implements IEditorPart, IEditorGroupService
 			};
 		});
 
+		// Add any untitled files to be restored from backup","@Tyriar again this would not be needed if we had untitled editor factory.
",
973,"@@ -93,6 +93,12 @@ export default class Webview {
 					this._webview.style.opacity = '';
 					return;
 				}
+			}),
+			addDisposableListener(this._webview, EventType.DRAG_OVER, (event: DragEvent) => {
+				event.stopImmediatePropagation();
+			}),","this leaks a listener
",Why do we need this?
974,"@@ -93,6 +93,12 @@ export default class Webview {
 					this._webview.style.opacity = '';
 					return;
 				}
+			}),
+			addDisposableListener(this._webview, EventType.DRAG_OVER, (event: DragEvent) => {
+				event.stopImmediatePropagation();
+			}),
+			addDisposableListener(this._webview, EventType.DROP, (event: DragEvent) => {
+				event.stopImmediatePropagation();","same

@bpasero I this a change you agree with? I haven't been involved in any dnd thing
",Why do we need this?
975,"@@ -93,6 +99,8 @@ export class CancellationTokenSource {
 	}
 
 	dispose(): void {
-		this.cancel();
+		if (this._token instanceof MutableToken) {","@jrieken unclear to me what should happen if `dispose` is called without `token` being there. It almost seems like we should have a new `CancellationToken.Disposed` that is a) not canceled and b) has no-ops for the methods.

Alternatively to keep current semantics we could say that in this case we do `this._token = CancellationToken.Cancelled` in the same way the `cancel()` method does it.",Why do we need this?
976,"@@ -93,7 +93,7 @@ class VariablesView extends viewlet.CollapsibleViewletView {
 		this.toDispose.push(this.debugService.addListener2(debug.ServiceEvents.STATE_CHANGED, () => {","Looks good.
",}));
977,"@@ -941,9 +941,10 @@ export abstract class BaseSyncAction extends GitAction {
 export class SyncAction extends BaseSyncAction {
 
 	static ID = 'workbench.action.sync';
+	static LABEL = nls.localize('sync', ""Sync"");
 
-	constructor(@IGitService gitService: IGitService) {
-		super(SyncAction.ID, nls.localize('sync', ""Sync""), 'git-action sync', gitService);
+	constructor(id: string, label: string, @IGitService gitService: IGitService) {","Make `id` and `label` optional with predefined values of `GitActions.SyncAction.ID` and `GitActions.SyncAction.LABEL` instead of polluting that...
",Why did you remove the `super`?
978,"@@ -944,6 +944,16 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups.indexOf(group);
 	}
 
+	public findGroup(editorInput: EditorInput, activeOnly: Boolean): EditorGroup {",`Boolean` => `boolean`,`activeOnly` is not used.
979,"@@ -944,6 +944,16 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups.indexOf(group);
 	}
 
+	public findGroup(editorInput: EditorInput, activeOnly: Boolean): EditorGroup {
+		const found = this.groups.filter(group =>","I suggest to change this logic a) for perf reasons and b) for logical reasons

a) Perf: I suggest to simply use 2 for loops here to avoid iterating over all groups and all editors even if a match has found. With the current logic, if the editor is found in group 1 you will still iterate over all other groups and editors even though we only return one result.

b) Logic: there is always an active group and that group might not be group 1. Wouldn't it make more sense to start with the currently active group to look for the editor and then check the others? This means we prefer to reveal an editor in the currently active group if we find it. Another solution would be to prefer an editor if it is already visible in one of the groups. You have to decide after all how this option should behave:
* does it prefer active editors over inactive
* does it prefer active groups over inactive
* does it prefer strict spatial order of the groups (left to right)",`activeOnly` is not used.
980,"@@ -944,6 +944,16 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups.indexOf(group);
 	}
 
+	public findGroup(editorInput: EditorInput, activeOnly: Boolean): EditorGroup {
+		const found = this.groups.filter(group =>
+			group.getEditors().some(editor => {
+				const isActive = group.isActive(editor);
+				return editor.matches(editorInput)",You should first check for the `isActive` condition and then do the `editor.matches` call to avoid it unless needed.,`activeOnly` is not used.
981,"@@ -944,6 +944,16 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups.indexOf(group);
 	}
 
+	public findGroup(editorInput: EditorInput, activeOnly: Boolean): EditorGroup {
+		const found = this.groups.filter(group =>
+			group.getEditors().some(editor => {
+				const isActive = group.isActive(editor);
+				return editor.matches(editorInput)
+					&& (!activeOnly || isActive);
+			}));
+		return found[0] || null;","It is fine to return `undefined` instead of `null`, you do not need to do an explicit `|| null`.",`findActiveEditorGroup` would be a better name
982,"@@ -944,6 +944,7 @@ export class Cursor extends EventEmitter {
 
 		this._handlers[H.JumpToBracket] =				(ctx) => this._jumpToBracket(ctx);
 
+		this._handlers[H.CursorMove] = 					(ctx) => this._move(false, ctx);","Please rename the method `_move` to `_cursorMove` to easily find it and not get confused with the previous moveTo
","this._handlers[H.CursorMove] =					(ctx) => this._move(true, ctx);"
983,"@@ -945,6 +945,12 @@ declare module 'vscode' {
 		viewColumn?: ViewColumn;
 
 		/**
+		 * The diff information for this text editor. Will be `udnefined` in case",udnefined,* @type {ViewColumn}
984,"@@ -95,6 +95,19 @@ class InsertCursorAtEndOfEachLineSelected extends EditorAction {
 				});
 			}
 		}
-		editor.setSelections(newSelections);
+		return newSelections;
+	}
+
+	public run(accessor: ServicesAccessor, editor: ICommonCodeEditor): void {
+		let newSelections = new Array<ISelection>();
+		let selections = editor.getSelections();
+
+		for (var i = 0; i < selections.length; ++i) {","This can be simplified to `let newSelections = selections.map(selection => this.getCursorsForSelection(selection, editor));`",Why do we need this?
985,"@@ -95,6 +95,9 @@ export class QuickKillTerminalAction extends Action {
 		if (terminal) {
 			terminal.dispose();
 		}
+		if (this.terminalService.activeTerminalInstanceIndex !== terminalIndex) {
+			this.terminalService.setActiveInstanceByIndex(Math.min(terminalIndex, this.terminalService.terminalInstances.length - 1));","Is it a problem if there's only one terminal, and you delete it? Does it call this with `-1`?",Why do we need this check?
986,"@@ -95,6 +96,26 @@ function getNLSConfiguration() {
 	return { locale: initialLocale, availableLanguages: {} };
 }
 
+function migrateUserDataDir(newDir) {
+	var oldDir = path.join(process.env.HOME, '.config', product.nameShort);","Why do you need to compute the old dir? Is it not much safer to use app.getPath('userData')
","nit: `var oldDir = path.join(newDir, '.config', product.nameShort);`"
987,"@@ -95,6 +96,26 @@ function getNLSConfiguration() {
 	return { locale: initialLocale, availableLanguages: {} };
 }
 
+function migrateUserDataDir(newDir) {
+	var oldDir = path.join(process.env.HOME, '.config', product.nameShort);
+	if (!fs.existsSync(oldDir)) {
+		return;","I am not sure this test holds, please verify. My understanding is that Chrome might create this folder very early, so please test it.
",I'm not sure if this is the best place to put this function. I think it should be in `lib/migrate.js`
988,"@@ -95,6 +96,26 @@ function getNLSConfiguration() {
 	return { locale: initialLocale, availableLanguages: {} };
 }
 
+function migrateUserDataDir(newDir) {
+	var oldDir = path.join(process.env.HOME, '.config', product.nameShort);
+	if (!fs.existsSync(oldDir)) {
+		return;
+	}
+	mkdirp(path.dirname(newDir));
+	fs.renameSync(oldDir, newDir);","Please note that rename does not work if source and target are on different drives. I think we need to add a lot more error handling to your code so that in case of an issue we can show something useful to the user.
",Why do we need this?
989,"@@ -958,11 +964,14 @@ export class RepositoryPanel extends ViewletPanel {
 	}
 
 	private updateInputBox(): void {
-		if (typeof this.repository.provider.commitTemplate === 'undefined') {
+		const commitTemplate = this.repository.provider.commitTemplate;
+
+		if (typeof commitTemplate !== 'undefined' && commitTemplate !== '') {
+			this.inputBox.value = commitTemplate;","So if you have a commitTemplate, it's impossible to restore the recovered message? I think it should be opposite, if there is a saved message then it should be used instead of the template.",Why do we need this check?
990,"@@ -96,10 +96,10 @@ export interface ITree extends Events.IEventEmitter {
 
 	/**
 	 * Collapses several elements.
-	 * Provide no arguments and it will recursively collapse all elements in the tree
+	 * Collapses all elements at the greatest tree depth that has expanded elements.
 	 * The returned promise returns a boolean for whether the elements were collapsed or not.
 	 */
-	collapseAll(elements?: any[], recursive?: boolean): WinJS.Promise;
+	collapseDeepestExpandedLevel(): WinJS.Promise;","Let's leave `collapseAll` in place, having `collapseDeepestExpandedLevel` as a new method",This is a breaking change. I think we should keep the old signature and deprecate it.
991,"@@ -96,6 +102,9 @@ export class TerminalService implements ITerminalService {
 		if (wasActiveInstance && this.terminalInstances.length > 0) {
 			let newIndex = index < this.terminalInstances.length ? index : this.terminalInstances.length - 1;
 			this.setActiveInstanceByIndex(newIndex);
+			if (terminalInstance.hadFocusOnExit) {",Love it! :+1: ,Shouldn't this be `if (wasActiveInstance && terminalInstance.hadFocusOnExit)`?
992,"@@ -96,7 +96,7 @@ export class TerminalConfigHelper implements ITerminalConfigHelper {
 		return DEFAULT_ANSI_COLORS[baseThemeId];
 	}
 
-	private _measureFont(fontFamily: string, fontSize: number, lineHeight: number): ITerminalFont {
+	private _measureFont(fontFamily: string, fontSize: number, lineHeight: number, fontWeight: string): ITerminalFont {",It's fine to leave out font weight from font measurement as the terminal assumes we're working with a monospace font where bold size is the same as non-bold size.,This is a breaking change. We need to add a new parameter to the end.
993,"@@ -96,8 +140,14 @@ export class FileDataSource implements IDataSource {
 					stat.addChild(modelDirStat.children[i]);
 				}
 ","Assuming this method and promise is run on every file, I would think this is the only area you'd need to alter in this method.  Is there a way to say:

```
if (modelDirStat.isDirectory) {
     do existing stat.addChild logic
    if(this.enableVirtualDirectories) {
         run resolveVirtualDirectories on folder
   }
} else if (stat.isVirtualDirectory) {
      return stat.children
}
```",for (int i = 0; i < children.length; i++) {
994,"@@ -969,6 +1015,31 @@ export class EditorGroupsControl extends Themable implements IEditorGroupsContro
 		// Silo Three
 		this.silos[Position.THREE] = $(this.parent).div({ class: 'one-editor-silo editor-three' });
 
+		// Center Layout stuff","Minor. Feels like code duplication, we do the creation and listeners twice. Can't we have a helper method that just takes a centered sash and nicely initilizes it. For that the DragStart and Drag methods would have to take sashes as parameters and based on Sash do different things.
Which might not be too bad, currently I feel like there are too many methods.",Missing space before opening brace. (space-before-blocks)
995,"@@ -97,6 +98,7 @@ export class KeybindingsEditor extends BaseEditor implements IKeybindingsEditor
 	private keybindingFocusContextKey: IContextKey<boolean>;
 	private searchFocusContextKey: IContextKey<boolean>;
 	private sortByPrecedence: Checkbox;
+	private secondaryActions: IAction[];",This variable is not necessary,private secondaryActions: IAction[];
996,"@@ -975,7 +975,7 @@ export class EditorStacksModel implements IEditorStacksModel {
 		return this._groups[position];
 	}
 
-	public next(jumpGroups: boolean): IEditorIdentifier {
+	public next(jumpGroups: boolean, cycleAtEnd = true): IEditorIdentifier {",Please add a test for this in `editorStacksModel.test.ts`,public IEditorIdentifier next(bool jumpGroups: boolean): IEditorIdentifier {
997,"@@ -98,6 +103,10 @@ const Identifiers = {
 	STATUSBAR_PART: 'workbench.parts.statusbar'
 };
 
+const ExposedWindowOptions = {","Just inline this one and avoid the const
",
998,"@@ -99,10 +99,14 @@ class NavBar {
 		this.actionbar = new ActionBar(element, { animated: false });
 	}
 
-	push(id: string, label: string): void {
+	push(id: string, label: string, tooltip: string): void {
 		const run = () => this._update(id);
 		const action = new Action(id, label, null, true, run);
 
+		if (!action.tooltip) {",I do not think you need to check for existing tooltip. You can set it to given tooltip always,I don't think we need to check for `tooltip` here.
999,"@@ -99,7 +112,18 @@ export class OpenConsoleAction extends Action {
 			}
 		}
 
-		this.terminalService.openTerminal(pathToOpen);
+		const configuration = this.configurationService.getConfiguration<ITerminalConfiguration>();","I think we actually want to make this decision in `ExplorerViewerActionContributor`, `OpenConsoleAction` is an action on the external/native terminal right now. Currently having `terminal.terminaKind` as `""integrated""` would make ctrl+shift+c behave similar to ctrl+` by creating and showing a new terminal - we want both to be able to be used at the same time.",Why do we need this?
